# Python
import unittest
from unittest.mock import Mock

# ATS
from ats.topology import Device
from ats.topology import loader

# Metaparser
from genie.metaparser.util.exceptions import SchemaEmptyParserError

# BigIP get_cli_script
from genie.libs.parser.bigip.get_cli_script import CliScript

# ==================================
# Unit test for parsing BigIP URL '/mgmt/tm/cli/script'
# ==================================


class FakeResponse(object):
    def json(self):
        return {
            "kind": "tm:cli:script:scriptcollectionstate",
            "selfLink": "https://localhost/mgmt/tm/cli/script?ver=14.1.2.1",
            "items": [
                {
                    "kind": "tm:cli:script:scriptstate",
                    "name": "f5.app_utils",
                    "partition": "Common",
                    "fullPath": "/Common/f5.app_utils",
                    "generation": 1,
                    "selfLink": "https://localhost/mgmt/tm/cli/script/~Common~f5.app_utils?ver=14.1.2.1",
                    "apiAnonymous": 'proc init_logging {  } {\n    # get the desired log level from /sys scriptd log-level\n    set scriptd_details [lindex [tmsh::get_config /sys scriptd log-level] 0]\n    set log_level [tmsh::get_field_value $scriptd_details "log-level"]\n\n    # set the log level\n    tmsh::log_level $log_level\n}\n\nproc get_items { args } {\n    package require iapp::legacy 1.0.0\n    return [eval iapp::legacy::app_utils::get_items $args]\n}\n\nproc get_items_local_only { args } {\n    package require iapp::legacy 1.0.0\n    return [eval iapp::legacy::app_utils::get_items_local_only $args]\n}\n\nproc get_items_not_recursive { args } {\n    package require iapp::legacy 1.0.0\n    return [eval iapp::legacy::app_utils::get_items_not_recursive $args]\n}\n\nproc get_items_local_only_not_recursive { args } {\n    package require iapp::legacy 1.0.0\n    return [eval iapp::legacy::app_utils::get_items_local_only_not_recursive $args]\n}\n\nproc get_items_filter {\n        field_name\n        field\n        args } {\n    package require iapp::legacy 1.0.0\n    return [eval iapp::legacy::app_utils::get_items_filter \\\n        $field_name \\\n        $field \\\n        $args]\n}\n\nproc get_items_prefix { prefix args } {\n    package require iapp::legacy 1.0.0\n    return [eval iapp::legacy::app_utils::get_items_prefix \\\n        $prefix \\\n        $args]\n}\n\n\nproc get_vlans {  } {\n    package require iapp::legacy 1.0.0\n    return [iapp::legacy::app_utils::get_vlans]\n}\n\nproc sort_results { results } {\n    package require iapp::legacy 1.0.0\n    return [iapp::legacy::app_utils::sort_results $results]\n}\n\nproc sort_results_with_spaces { results } {\n    package require iapp::legacy 1.0.0\n    return [iapp::legacy::app_utils::sort_results_with_spaces $results]\n}\n\n\nproc sort_wa_policy_results { results } {\n    package require iapp::legacy 1.0.0\n    return [iapp::legacy::app_utils::sort_results_with_spaces $results]\n}\n\n\nproc get_custom_wa_policies {  } {\n    package require iapp::legacy 1.0.0\n    return [iapp::legacy::app_utils::get_custom_wa_policies]\n}\n\n\nproc get_provisioned { module } {\n    package require iapp::legacy 1.0.0\n    return [iapp::legacy::app_utils::get_provisioned $module]\n}\n\nproc get_platform {  } {\n    package require iapp::legacy 1.0.0\n    return [iapp::legacy::app_utils::get_platform]\n}\n\nproc get_is_viprion {  } {\n    package require iapp::legacy 1.0.0\n    return [iapp::legacy::app_utils::get_is_viprion]\n}\n\nproc get_ltm_monitors_filter { args } {\n    package require iapp::legacy 1.0.0\n    return [eval iapp::legacy::app_utils::get_ltm_monitors_filter $args]\n}\n\nproc get_bigip_version {  } {\n    package require iapp::legacy 1.0.0\n    return [iapp::legacy::app_utils::get_bigip_version]\n}\n\nproc get_bigip_version_is_equal_or_later { compare_version } {\n    package require iapp::legacy 1.0.0\n    return [iapp::legacy::app_utils::get_bigip_version_is_equal_or_later \\\n        $compare_version]\n}\n\nproc get_bigip_version_is_equal_or_earlier { compare_version } {\n    package require iapp::legacy 1.0.0\n    return [iapp::legacy::app_utils::get_bigip_version_is_equal_or_earlier \\\n        $compare_version]\n}\n\nproc get_bigip_version_is_equal { compare_version } {\n    package require iapp::legacy 1.0.0\n    return [iapp::legacy::app_utils::get_bigip_version_is_equal \\\n        $compare_version]\n}\n\nproc get_ssl_keys {  } {\n    package require iapp::legacy 1.0.0\n    return [iapp::legacy::app_utils::get_ssl_keys]\n}\n\nproc get_ssl_certs {  } {\n    package require iapp::legacy 1.0.0\n    return [iapp::legacy::app_utils::get_ssl_certs]\n}\n\nproc do_tmsh_create { component arguments } {\n    package require iapp::legacy 1.0.0\n    set config_string "$component $arguments"\n    return [iapp::legacy::app_utils::tmsh_create_wrapper config_string]\n}\n\nproc do_tmsh_modify { component arguments } {\n    package require iapp::legacy 1.0.0\n    set config_string "$component $arguments"\n    return [iapp::legacy::app_utils::tmsh_modify_wrapper config_string]\n}\n\nproc do_tmsh_create_no_log { component arguments } {\n    package require iapp::legacy 1.0.0\n    set config_string "$component $arguments"\n    return [iapp::legacy::app_utils::tmsh_create_wrapper_no_log config_string]\n}\n\nproc do_tmsh_modify_no_log { component arguments } {\n    package require iapp::legacy 1.0.0\n    set config_string "$component $arguments"\n    return [iapp::legacy::app_utils::tmsh_modify_wrapper_no_log config_string]\n}\n\nproc add_password { component object_name password_argument password } {\n    package require iapp::legacy 1.0.0\n    set config_string "$component $object_name $password_argument $password"\n    return [iapp::legacy::app_utils::tmsh_modify_wrapper_no_log config_string]\n}\n\nproc do_tmsh_load { component arguments } {\n    package require iapp::legacy 1.0.0\n    set config_string "$component $arguments"\n    return [eval iapp::legacy::app_utils::tmsh_load_wrapper config_string]\n}\n\nproc get_compression_content_type_includes { } {\n    package require iapp::legacy 1.0.0\n    return [iapp::legacy::app_utils::get_compression_content_type_includes]\n}\n\nproc add_compression_content_type_includes { profile_name } {\n    package require iapp::legacy 1.0.0\n    return [iapp::legacy::app_utils::add_compression_content_type_includes \\\n        $profile_name]\n}\n\nproc get_http_parent_profile {  } {\n    package require iapp::legacy 1.0.0\n    return [iapp::legacy::app_utils::get_http_parent_profile]\n}\n\nproc get_compress_parent_profle {  } {\n    package require iapp::legacy 1.0.0\n    return [iapp::legacy::app_utils::get_compress_parent_profle]\n}\n\nproc get_caching_parent_profle { do_configure_wa } {\n    package require iapp::legacy 1.0.0\n    return [iapp::legacy::app_utils::get_caching_parent_profle $do_configure_wa]\n}\n\nproc is_lb_method_ratio { lb_method } {\n    package require iapp::legacy 1.0.0\n    return [iapp::legacy::app_utils::is_lb_method_ratio $lb_method]\n}\n\nproc create_http_comp_accel_profiles {\n        name_prefix\n        clients_connect_on_lan_or_wan\n        use_cache\n        do_configure_wa\n        wa_app_name\n        ssl_rewrite } {\n    package require iapp::legacy 1.0.0\n    return [iapp::legacy::app_utils::create_http_comp_accel_profiles \\\n        $name_prefix \\\n        $clients_connect_on_lan_or_wan \\\n        $use_cache \\\n        $do_configure_wa \\\n        $wa_app_name \\\n        $ssl_rewrite]\n}\n\nproc create_one_connect_and_ntlm_profiles {\n        name_prefix\n        create_ntlm_profile\n        using_snat } {\n    package require iapp::legacy 1.0.0\n    return [iapp::legacy::app_utils::create_one_connect_and_ntlm_profiles \\\n        $name_prefix \\\n        $create_ntlm_profile \\\n        $using_snat]\n}\n\nproc create_ssl_profile {\n        name_prefix\n        key\n        cert } {\n    package require iapp::legacy 1.0.0\n    return [iapp::legacy::app_utils::create_ssl_profile \\\n        $name_prefix \\\n        $key \\\n        $cert]\n}\n\nproc create_basic_server_ssl_profile { name_prefix } {\n    package require iapp::legacy 1.0.0\n    return [iapp::legacy::app_utils::create_server_ssl_profile_with_key_cert \\\n        $name_prefix \\\n        $::EMPTY_STRING \\\n        $::EMPTY_STRING \\\n        $::NO_ANSWER]\n}\n\nproc create_server_ssl_profile_with_key_cert {\n        name_prefix\n        key\n        cert\n        insecure_compatible } {\n    package require iapp::legacy 1.0.0\n    return [iapp::legacy::app_utils::create_server_ssl_profile_with_key_cert \\\n        $name_prefix \\\n        $key \\\n        $cert \\\n        $insecure_compatible]\n}\n\nproc create_https_redirect_irule { name_prefix } {\n    package require iapp::legacy 1.0.0\n    return [iapp::legacy::app_utils::create_https_redirect_irule_specific_ports \\\n        $name_prefix 80 443]\n}\n\nproc create_https_redirect_irule_specific_ports {\n        name_prefix\n        original_port\n        new_port } {\n    package require iapp::legacy 1.0.0\n    return [iapp::legacy::app_utils::create_https_redirect_irule_specific_ports \\\n        $name_prefix \\\n        $original_port \\\n        $new_port]\n}\n\nproc create_wa_app {\n        name_prefix\n        wa_policy_name\n        wa_description\n        hosts } {\n    package require iapp::legacy 1.0.0\n    return [iapp::legacy::app_utils::create_wa_app \\\n        $name_prefix \\\n        $wa_policy_name \\\n        $wa_description \\\n        $hosts]\n}\n\nproc create_wa_app_new {\n        name_prefix\n        wa_policy_name\n        wa_description\n        hosts\n        x_wa_info_header\n        perf_monitor\n        data_retention_period } {\n    package require iapp::legacy 1.0.0\n    return [iapp::legacy::app_utils::create_wa_app_new \\\n        $name_prefix \\\n        $wa_policy_name \\\n        $wa_description \\\n        $hosts \\\n        $x_wa_info_header \\\n        $perf_monitor \\\n        $data_retention_period]\n}\n\n\nproc is_safe_app_name { app_name } {\n    package require iapp::legacy 1.0.0\n    return [iapp::legacy::app_utils::is_safe_app_name $app_name]\n}\n\nproc create_http_class {\n        name_prefix\n        asm_predefined_policy_name\n        asm_language_choice\n        wa_enabled } {\n    package require iapp::legacy 1.0.0\n    return [iapp::legacy::app_utils::create_http_class \\\n        $name_prefix \\\n        $asm_predefined_policy_name \\\n        $asm_language_choice \\\n        $wa_enabled]\n}\n\nproc create_monitor {\n        name_prefix\n        monitor_type\n        monitor_interval\n        monitor_send\n        monitor_recv\n        http_version\n        dns_name } {\n    package require iapp::legacy 1.0.0\n    return [iapp::legacy::app_utils::create_monitor \\\n        $name_prefix \\\n        $monitor_type \\\n        $monitor_interval \\\n        monitor_send \\\n        monitor_recv \\\n        http_version \\\n        $dns_name]\n}\n\nproc is_ipv6 { addr } {\n    package require iapp::legacy 1.0.0\n    return [iapp::legacy::app_utils::is_ipv6 $addr]\n}\n\nproc create_destination {\n        addr\n        port } {\n    package require iapp::legacy 1.0.0\n    return [iapp::legacy::app_utils::create_destination $addr $port]\n}\n\nproc create_pool {\n        name_prefix\n        monitor_name\n        servers\n        lb_method } {\n    package require iapp::legacy 1.0.0\n    return [iapp::legacy::app_utils::create_pool \\\n        $name_prefix \\\n        $monitor_name \\\n        $servers \\\n        $lb_method]\n}\n\nproc create_pool_with_port_override {\n        name_prefix\n        monitor_name\n        servers\n        lb_method\n        port_number } {\n    package require iapp::legacy 1.0.0\n    return [iapp::legacy::app_utils::create_pool_with_port_override \\\n        $name_prefix \\\n        $monitor_name \\\n        $servers \\\n        $lb_method \\\n        $port_number]\n}\n\n\nproc do_tcp_request_queue_settings {\n        pool_name\n        do_request_queuing\n        queue_depth\n        timeout } {\n    package require iapp::legacy 1.0.0\n    return [iapp::legacy::app_utils::do_tcp_request_queue_settings \\\n        $pool_name \\\n        $do_request_queuing \\\n        $queue_depth \\\n        $timeout]\n}\n\nproc get_file_contents { filename } {\n    package require iapp::legacy 1.0.0\n    return [iapp::legacy::app_utils::get_file_contents $filename]\n}\n\n\nproc create_http_vs {\n        name_prefix\n        destination\n        snat\n        pool_name\n        profile_names\n        persist_profile\n        tcp_server_profile_name\n        tcp_client_profile_name } {\n    set name_prefix "${name_prefix}_http"\n    package require iapp::legacy 1.0.0\n    return [iapp::legacy::app_utils::create_vs \\\n         $name_prefix \\\n         $destination \\\n         $snat \\\n         $pool_name \\\n         $profile_names \\\n         $persist_profile \\\n         $tcp_server_profile_name \\\n         $tcp_client_profile_name]\n}\n\nproc create_https_vs {\n        name_prefix\n        destination\n        snat\n        pool_name\n        profile_names\n        persist_profile\n        tcp_server_profile_name\n        tcp_client_profile_name } {\n    set name_prefix "${name_prefix}_https"\n    package require iapp::legacy 1.0.0\n    return [iapp::legacy::app_utils::create_vs \\\n         $name_prefix \\\n         $destination \\\n         $snat \\\n         $pool_name \\\n         $profile_names \\\n         $persist_profile \\\n         $tcp_server_profile_name \\\n         $tcp_client_profile_name]\n}\n\nproc create_vs {\n        name_prefix\n        destination\n        snat\n        pool_name\n        profile_names\n        persist_profile\n        tcp_server_profile_name\n        tcp_client_profile_name } {\n    package require iapp::legacy 1.0.0\n    return [iapp::legacy::app_utils::create_vs \\\n        $name_prefix \\\n        $destination \\\n        $snat \\\n        $pool_name \\\n        $profile_names \\\n        $persist_profile \\\n        $tcp_server_profile_name \\\n        $tcp_client_profile_name]\n}\n',
                    "ignoreVerification": "false",
                    "scriptSignature": "n6luHqJPEeNNYgGPj+oPcHefMzvYGQY6Y9U6uFx1cXhBlbwJPAmt7oKTUFzGtcqfuO8o65M7GhcDZP06ffWNqSNKCpVWgFOTsGOQU0UwQlhWwwj7HeBe83IckmMDE1U8Qbo7bWjWzKyeZ3RpkPwXzMGUNr/7PR9GPytLHiB7rjmy2a7JY4r2b7x4EKSMW9OhYxCwfBrBDz1jU8VXI0fbXUZrGNJQ7xzPQqD7fMwz9jmLTQD9almwAY6lMsJB+868QLPKHzbWAbrcB/vk2QOoQ4oqo7o5PxWbfM8H5g5t6QYg+y70opBI/GXEP9m/Bi5PF08AdghI1MWujhVAEZPi+A==",
                    "signingKey": "/Common/f5-irule",
                    "signingKeyReference": {
                        "link": "https://localhost/mgmt/tm/sys/file/ssl-key/~Common~f5-irule?ver=14.1.2.1"
                    },
                    "totalSigningStatus": "one-cert-signed",
                    "verificationStatus": "signature-verified",
                }
            ],
        }


class test_get_cli_script(unittest.TestCase):

    maxDiff = None

    empty_output = {"get.return_value": {}}

    golden_parsed_output = {
        "items": [
            {
                "apiAnonymous": "proc init_logging {  } {\n"
                "    # get the desired log level from /sys scriptd "
                "log-level\n"
                "    set scriptd_details [lindex [tmsh::get_config "
                "/sys scriptd log-level] 0]\n"
                "    set log_level [tmsh::get_field_value "
                '$scriptd_details "log-level"]\n'
                "\n"
                "    # set the log level\n"
                "    tmsh::log_level $log_level\n"
                "}\n"
                "\n"
                "proc get_items { args } {\n"
                "    package require iapp::legacy 1.0.0\n"
                "    return [eval "
                "iapp::legacy::app_utils::get_items $args]\n"
                "}\n"
                "\n"
                "proc get_items_local_only { args } {\n"
                "    package require iapp::legacy 1.0.0\n"
                "    return [eval "
                "iapp::legacy::app_utils::get_items_local_only "
                "$args]\n"
                "}\n"
                "\n"
                "proc get_items_not_recursive { args } {\n"
                "    package require iapp::legacy 1.0.0\n"
                "    return [eval "
                "iapp::legacy::app_utils::get_items_not_recursive "
                "$args]\n"
                "}\n"
                "\n"
                "proc get_items_local_only_not_recursive { args } "
                "{\n"
                "    package require iapp::legacy 1.0.0\n"
                "    return [eval "
                "iapp::legacy::app_utils::get_items_local_only_not_recursive "
                "$args]\n"
                "}\n"
                "\n"
                "proc get_items_filter {\n"
                "        field_name\n"
                "        field\n"
                "        args } {\n"
                "    package require iapp::legacy 1.0.0\n"
                "    return [eval "
                "iapp::legacy::app_utils::get_items_filter \\\n"
                "        $field_name \\\n"
                "        $field \\\n"
                "        $args]\n"
                "}\n"
                "\n"
                "proc get_items_prefix { prefix args } {\n"
                "    package require iapp::legacy 1.0.0\n"
                "    return [eval "
                "iapp::legacy::app_utils::get_items_prefix \\\n"
                "        $prefix \\\n"
                "        $args]\n"
                "}\n"
                "\n"
                "\n"
                "proc get_vlans {  } {\n"
                "    package require iapp::legacy 1.0.0\n"
                "    return [iapp::legacy::app_utils::get_vlans]\n"
                "}\n"
                "\n"
                "proc sort_results { results } {\n"
                "    package require iapp::legacy 1.0.0\n"
                "    return [iapp::legacy::app_utils::sort_results "
                "$results]\n"
                "}\n"
                "\n"
                "proc sort_results_with_spaces { results } {\n"
                "    package require iapp::legacy 1.0.0\n"
                "    return "
                "[iapp::legacy::app_utils::sort_results_with_spaces "
                "$results]\n"
                "}\n"
                "\n"
                "\n"
                "proc sort_wa_policy_results { results } {\n"
                "    package require iapp::legacy 1.0.0\n"
                "    return "
                "[iapp::legacy::app_utils::sort_results_with_spaces "
                "$results]\n"
                "}\n"
                "\n"
                "\n"
                "proc get_custom_wa_policies {  } {\n"
                "    package require iapp::legacy 1.0.0\n"
                "    return "
                "[iapp::legacy::app_utils::get_custom_wa_policies]\n"
                "}\n"
                "\n"
                "\n"
                "proc get_provisioned { module } {\n"
                "    package require iapp::legacy 1.0.0\n"
                "    return "
                "[iapp::legacy::app_utils::get_provisioned "
                "$module]\n"
                "}\n"
                "\n"
                "proc get_platform {  } {\n"
                "    package require iapp::legacy 1.0.0\n"
                "    return "
                "[iapp::legacy::app_utils::get_platform]\n"
                "}\n"
                "\n"
                "proc get_is_viprion {  } {\n"
                "    package require iapp::legacy 1.0.0\n"
                "    return "
                "[iapp::legacy::app_utils::get_is_viprion]\n"
                "}\n"
                "\n"
                "proc get_ltm_monitors_filter { args } {\n"
                "    package require iapp::legacy 1.0.0\n"
                "    return [eval "
                "iapp::legacy::app_utils::get_ltm_monitors_filter "
                "$args]\n"
                "}\n"
                "\n"
                "proc get_bigip_version {  } {\n"
                "    package require iapp::legacy 1.0.0\n"
                "    return "
                "[iapp::legacy::app_utils::get_bigip_version]\n"
                "}\n"
                "\n"
                "proc get_bigip_version_is_equal_or_later { "
                "compare_version } {\n"
                "    package require iapp::legacy 1.0.0\n"
                "    return "
                "[iapp::legacy::app_utils::get_bigip_version_is_equal_or_later "
                "\\\n"
                "        $compare_version]\n"
                "}\n"
                "\n"
                "proc get_bigip_version_is_equal_or_earlier { "
                "compare_version } {\n"
                "    package require iapp::legacy 1.0.0\n"
                "    return "
                "[iapp::legacy::app_utils::get_bigip_version_is_equal_or_earlier "
                "\\\n"
                "        $compare_version]\n"
                "}\n"
                "\n"
                "proc get_bigip_version_is_equal { compare_version "
                "} {\n"
                "    package require iapp::legacy 1.0.0\n"
                "    return "
                "[iapp::legacy::app_utils::get_bigip_version_is_equal "
                "\\\n"
                "        $compare_version]\n"
                "}\n"
                "\n"
                "proc get_ssl_keys {  } {\n"
                "    package require iapp::legacy 1.0.0\n"
                "    return "
                "[iapp::legacy::app_utils::get_ssl_keys]\n"
                "}\n"
                "\n"
                "proc get_ssl_certs {  } {\n"
                "    package require iapp::legacy 1.0.0\n"
                "    return "
                "[iapp::legacy::app_utils::get_ssl_certs]\n"
                "}\n"
                "\n"
                "proc do_tmsh_create { component arguments } {\n"
                "    package require iapp::legacy 1.0.0\n"
                '    set config_string "$component $arguments"\n'
                "    return "
                "[iapp::legacy::app_utils::tmsh_create_wrapper "
                "config_string]\n"
                "}\n"
                "\n"
                "proc do_tmsh_modify { component arguments } {\n"
                "    package require iapp::legacy 1.0.0\n"
                '    set config_string "$component $arguments"\n'
                "    return "
                "[iapp::legacy::app_utils::tmsh_modify_wrapper "
                "config_string]\n"
                "}\n"
                "\n"
                "proc do_tmsh_create_no_log { component arguments "
                "} {\n"
                "    package require iapp::legacy 1.0.0\n"
                '    set config_string "$component $arguments"\n'
                "    return "
                "[iapp::legacy::app_utils::tmsh_create_wrapper_no_log "
                "config_string]\n"
                "}\n"
                "\n"
                "proc do_tmsh_modify_no_log { component arguments "
                "} {\n"
                "    package require iapp::legacy 1.0.0\n"
                '    set config_string "$component $arguments"\n'
                "    return "
                "[iapp::legacy::app_utils::tmsh_modify_wrapper_no_log "
                "config_string]\n"
                "}\n"
                "\n"
                "proc add_password { component object_name "
                "password_argument password } {\n"
                "    package require iapp::legacy 1.0.0\n"
                '    set config_string "$component $object_name '
                '$password_argument $password"\n'
                "    return "
                "[iapp::legacy::app_utils::tmsh_modify_wrapper_no_log "
                "config_string]\n"
                "}\n"
                "\n"
                "proc do_tmsh_load { component arguments } {\n"
                "    package require iapp::legacy 1.0.0\n"
                '    set config_string "$component $arguments"\n'
                "    return [eval "
                "iapp::legacy::app_utils::tmsh_load_wrapper "
                "config_string]\n"
                "}\n"
                "\n"
                "proc get_compression_content_type_includes { } {\n"
                "    package require iapp::legacy 1.0.0\n"
                "    return "
                "[iapp::legacy::app_utils::get_compression_content_type_includes]\n"
                "}\n"
                "\n"
                "proc add_compression_content_type_includes { "
                "profile_name } {\n"
                "    package require iapp::legacy 1.0.0\n"
                "    return "
                "[iapp::legacy::app_utils::add_compression_content_type_includes "
                "\\\n"
                "        $profile_name]\n"
                "}\n"
                "\n"
                "proc get_http_parent_profile {  } {\n"
                "    package require iapp::legacy 1.0.0\n"
                "    return "
                "[iapp::legacy::app_utils::get_http_parent_profile]\n"
                "}\n"
                "\n"
                "proc get_compress_parent_profle {  } {\n"
                "    package require iapp::legacy 1.0.0\n"
                "    return "
                "[iapp::legacy::app_utils::get_compress_parent_profle]\n"
                "}\n"
                "\n"
                "proc get_caching_parent_profle { do_configure_wa "
                "} {\n"
                "    package require iapp::legacy 1.0.0\n"
                "    return "
                "[iapp::legacy::app_utils::get_caching_parent_profle "
                "$do_configure_wa]\n"
                "}\n"
                "\n"
                "proc is_lb_method_ratio { lb_method } {\n"
                "    package require iapp::legacy 1.0.0\n"
                "    return "
                "[iapp::legacy::app_utils::is_lb_method_ratio "
                "$lb_method]\n"
                "}\n"
                "\n"
                "proc create_http_comp_accel_profiles {\n"
                "        name_prefix\n"
                "        clients_connect_on_lan_or_wan\n"
                "        use_cache\n"
                "        do_configure_wa\n"
                "        wa_app_name\n"
                "        ssl_rewrite } {\n"
                "    package require iapp::legacy 1.0.0\n"
                "    return "
                "[iapp::legacy::app_utils::create_http_comp_accel_profiles "
                "\\\n"
                "        $name_prefix \\\n"
                "        $clients_connect_on_lan_or_wan \\\n"
                "        $use_cache \\\n"
                "        $do_configure_wa \\\n"
                "        $wa_app_name \\\n"
                "        $ssl_rewrite]\n"
                "}\n"
                "\n"
                "proc create_one_connect_and_ntlm_profiles {\n"
                "        name_prefix\n"
                "        create_ntlm_profile\n"
                "        using_snat } {\n"
                "    package require iapp::legacy 1.0.0\n"
                "    return "
                "[iapp::legacy::app_utils::create_one_connect_and_ntlm_profiles "
                "\\\n"
                "        $name_prefix \\\n"
                "        $create_ntlm_profile \\\n"
                "        $using_snat]\n"
                "}\n"
                "\n"
                "proc create_ssl_profile {\n"
                "        name_prefix\n"
                "        key\n"
                "        cert } {\n"
                "    package require iapp::legacy 1.0.0\n"
                "    return "
                "[iapp::legacy::app_utils::create_ssl_profile \\\n"
                "        $name_prefix \\\n"
                "        $key \\\n"
                "        $cert]\n"
                "}\n"
                "\n"
                "proc create_basic_server_ssl_profile { "
                "name_prefix } {\n"
                "    package require iapp::legacy 1.0.0\n"
                "    return "
                "[iapp::legacy::app_utils::create_server_ssl_profile_with_key_cert "
                "\\\n"
                "        $name_prefix \\\n"
                "        $::EMPTY_STRING \\\n"
                "        $::EMPTY_STRING \\\n"
                "        $::NO_ANSWER]\n"
                "}\n"
                "\n"
                "proc create_server_ssl_profile_with_key_cert {\n"
                "        name_prefix\n"
                "        key\n"
                "        cert\n"
                "        insecure_compatible } {\n"
                "    package require iapp::legacy 1.0.0\n"
                "    return "
                "[iapp::legacy::app_utils::create_server_ssl_profile_with_key_cert "
                "\\\n"
                "        $name_prefix \\\n"
                "        $key \\\n"
                "        $cert \\\n"
                "        $insecure_compatible]\n"
                "}\n"
                "\n"
                "proc create_https_redirect_irule { name_prefix } "
                "{\n"
                "    package require iapp::legacy 1.0.0\n"
                "    return "
                "[iapp::legacy::app_utils::create_https_redirect_irule_specific_ports "
                "\\\n"
                "        $name_prefix 80 443]\n"
                "}\n"
                "\n"
                "proc create_https_redirect_irule_specific_ports "
                "{\n"
                "        name_prefix\n"
                "        original_port\n"
                "        new_port } {\n"
                "    package require iapp::legacy 1.0.0\n"
                "    return "
                "[iapp::legacy::app_utils::create_https_redirect_irule_specific_ports "
                "\\\n"
                "        $name_prefix \\\n"
                "        $original_port \\\n"
                "        $new_port]\n"
                "}\n"
                "\n"
                "proc create_wa_app {\n"
                "        name_prefix\n"
                "        wa_policy_name\n"
                "        wa_description\n"
                "        hosts } {\n"
                "    package require iapp::legacy 1.0.0\n"
                "    return "
                "[iapp::legacy::app_utils::create_wa_app \\\n"
                "        $name_prefix \\\n"
                "        $wa_policy_name \\\n"
                "        $wa_description \\\n"
                "        $hosts]\n"
                "}\n"
                "\n"
                "proc create_wa_app_new {\n"
                "        name_prefix\n"
                "        wa_policy_name\n"
                "        wa_description\n"
                "        hosts\n"
                "        x_wa_info_header\n"
                "        perf_monitor\n"
                "        data_retention_period } {\n"
                "    package require iapp::legacy 1.0.0\n"
                "    return "
                "[iapp::legacy::app_utils::create_wa_app_new \\\n"
                "        $name_prefix \\\n"
                "        $wa_policy_name \\\n"
                "        $wa_description \\\n"
                "        $hosts \\\n"
                "        $x_wa_info_header \\\n"
                "        $perf_monitor \\\n"
                "        $data_retention_period]\n"
                "}\n"
                "\n"
                "\n"
                "proc is_safe_app_name { app_name } {\n"
                "    package require iapp::legacy 1.0.0\n"
                "    return "
                "[iapp::legacy::app_utils::is_safe_app_name "
                "$app_name]\n"
                "}\n"
                "\n"
                "proc create_http_class {\n"
                "        name_prefix\n"
                "        asm_predefined_policy_name\n"
                "        asm_language_choice\n"
                "        wa_enabled } {\n"
                "    package require iapp::legacy 1.0.0\n"
                "    return "
                "[iapp::legacy::app_utils::create_http_class \\\n"
                "        $name_prefix \\\n"
                "        $asm_predefined_policy_name \\\n"
                "        $asm_language_choice \\\n"
                "        $wa_enabled]\n"
                "}\n"
                "\n"
                "proc create_monitor {\n"
                "        name_prefix\n"
                "        monitor_type\n"
                "        monitor_interval\n"
                "        monitor_send\n"
                "        monitor_recv\n"
                "        http_version\n"
                "        dns_name } {\n"
                "    package require iapp::legacy 1.0.0\n"
                "    return "
                "[iapp::legacy::app_utils::create_monitor \\\n"
                "        $name_prefix \\\n"
                "        $monitor_type \\\n"
                "        $monitor_interval \\\n"
                "        monitor_send \\\n"
                "        monitor_recv \\\n"
                "        http_version \\\n"
                "        $dns_name]\n"
                "}\n"
                "\n"
                "proc is_ipv6 { addr } {\n"
                "    package require iapp::legacy 1.0.0\n"
                "    return [iapp::legacy::app_utils::is_ipv6 "
                "$addr]\n"
                "}\n"
                "\n"
                "proc create_destination {\n"
                "        addr\n"
                "        port } {\n"
                "    package require iapp::legacy 1.0.0\n"
                "    return "
                "[iapp::legacy::app_utils::create_destination "
                "$addr $port]\n"
                "}\n"
                "\n"
                "proc create_pool {\n"
                "        name_prefix\n"
                "        monitor_name\n"
                "        servers\n"
                "        lb_method } {\n"
                "    package require iapp::legacy 1.0.0\n"
                "    return [iapp::legacy::app_utils::create_pool "
                "\\\n"
                "        $name_prefix \\\n"
                "        $monitor_name \\\n"
                "        $servers \\\n"
                "        $lb_method]\n"
                "}\n"
                "\n"
                "proc create_pool_with_port_override {\n"
                "        name_prefix\n"
                "        monitor_name\n"
                "        servers\n"
                "        lb_method\n"
                "        port_number } {\n"
                "    package require iapp::legacy 1.0.0\n"
                "    return "
                "[iapp::legacy::app_utils::create_pool_with_port_override "
                "\\\n"
                "        $name_prefix \\\n"
                "        $monitor_name \\\n"
                "        $servers \\\n"
                "        $lb_method \\\n"
                "        $port_number]\n"
                "}\n"
                "\n"
                "\n"
                "proc do_tcp_request_queue_settings {\n"
                "        pool_name\n"
                "        do_request_queuing\n"
                "        queue_depth\n"
                "        timeout } {\n"
                "    package require iapp::legacy 1.0.0\n"
                "    return "
                "[iapp::legacy::app_utils::do_tcp_request_queue_settings "
                "\\\n"
                "        $pool_name \\\n"
                "        $do_request_queuing \\\n"
                "        $queue_depth \\\n"
                "        $timeout]\n"
                "}\n"
                "\n"
                "proc get_file_contents { filename } {\n"
                "    package require iapp::legacy 1.0.0\n"
                "    return "
                "[iapp::legacy::app_utils::get_file_contents "
                "$filename]\n"
                "}\n"
                "\n"
                "\n"
                "proc create_http_vs {\n"
                "        name_prefix\n"
                "        destination\n"
                "        snat\n"
                "        pool_name\n"
                "        profile_names\n"
                "        persist_profile\n"
                "        tcp_server_profile_name\n"
                "        tcp_client_profile_name } {\n"
                '    set name_prefix "${name_prefix}_http"\n'
                "    package require iapp::legacy 1.0.0\n"
                "    return [iapp::legacy::app_utils::create_vs "
                "\\\n"
                "         $name_prefix \\\n"
                "         $destination \\\n"
                "         $snat \\\n"
                "         $pool_name \\\n"
                "         $profile_names \\\n"
                "         $persist_profile \\\n"
                "         $tcp_server_profile_name \\\n"
                "         $tcp_client_profile_name]\n"
                "}\n"
                "\n"
                "proc create_https_vs {\n"
                "        name_prefix\n"
                "        destination\n"
                "        snat\n"
                "        pool_name\n"
                "        profile_names\n"
                "        persist_profile\n"
                "        tcp_server_profile_name\n"
                "        tcp_client_profile_name } {\n"
                '    set name_prefix "${name_prefix}_https"\n'
                "    package require iapp::legacy 1.0.0\n"
                "    return [iapp::legacy::app_utils::create_vs "
                "\\\n"
                "         $name_prefix \\\n"
                "         $destination \\\n"
                "         $snat \\\n"
                "         $pool_name \\\n"
                "         $profile_names \\\n"
                "         $persist_profile \\\n"
                "         $tcp_server_profile_name \\\n"
                "         $tcp_client_profile_name]\n"
                "}\n"
                "\n"
                "proc create_vs {\n"
                "        name_prefix\n"
                "        destination\n"
                "        snat\n"
                "        pool_name\n"
                "        profile_names\n"
                "        persist_profile\n"
                "        tcp_server_profile_name\n"
                "        tcp_client_profile_name } {\n"
                "    package require iapp::legacy 1.0.0\n"
                "    return [iapp::legacy::app_utils::create_vs "
                "\\\n"
                "        $name_prefix \\\n"
                "        $destination \\\n"
                "        $snat \\\n"
                "        $pool_name \\\n"
                "        $profile_names \\\n"
                "        $persist_profile \\\n"
                "        $tcp_server_profile_name \\\n"
                "        $tcp_client_profile_name]\n"
                "}\n",
                "fullPath": "/Common/f5.app_utils",
                "generation": 1,
                "ignoreVerification": "false",
                "kind": "tm:cli:script:scriptstate",
                "name": "f5.app_utils",
                "partition": "Common",
                "scriptSignature": "n6luHqJPEeNNYgGPj+oPcHefMzvYGQY6Y9U6uFx1cXhBlbwJPAmt7oKTUFzGtcqfuO8o65M7GhcDZP06ffWNqSNKCpVWgFOTsGOQU0UwQlhWwwj7HeBe83IckmMDE1U8Qbo7bWjWzKyeZ3RpkPwXzMGUNr/7PR9GPytLHiB7rjmy2a7JY4r2b7x4EKSMW9OhYxCwfBrBDz1jU8VXI0fbXUZrGNJQ7xzPQqD7fMwz9jmLTQD9almwAY6lMsJB+868QLPKHzbWAbrcB/vk2QOoQ4oqo7o5PxWbfM8H5g5t6QYg+y70opBI/GXEP9m/Bi5PF08AdghI1MWujhVAEZPi+A==",
                "selfLink": "https://localhost/mgmt/tm/cli/script/~Common~f5.app_utils?ver=14.1.2.1",
                "signingKey": "/Common/f5-irule",
                "signingKeyReference": {
                    "link": "https://localhost/mgmt/tm/sys/file/ssl-key/~Common~f5-irule?ver=14.1.2.1"
                },
                "totalSigningStatus": "one-cert-signed",
                "verificationStatus": "signature-verified",
            }
        ],
        "kind": "tm:cli:script:scriptcollectionstate",
        "selfLink": "https://localhost/mgmt/tm/cli/script?ver=14.1.2.1",
    }

    golden_output = {"get.return_value": FakeResponse()}

    # def test_empty(self):
    #     self.device1 = Mock(**self.empty_output)
    #     obj = CliScript(device=self.device1, alias='rest', via='rest', context='rest')
    #     with self.assertRaises(SchemaEmptyParserError):
    #         parsed_output = obj.parse()

    def test_golden(self):
        self.device = Mock(**self.golden_output)
        obj = CliScript(
            device=self.device, alias="rest", via="rest", context="rest"
        )
        parsed_output = obj.parse()
        self.assertEqual(parsed_output, self.golden_parsed_output)


if __name__ == "__main__":
    unittest.main()
