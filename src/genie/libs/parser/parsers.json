{"show bgp {address_family} neighbors {neighbor} advertised-routes": {"iosxe": {"uid": "show_bgp_address_family_neighbors_neighbor_advertised-routes", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'neighbor': {\n      Any  (str) *: {\n        'address_family': {\n          Any  (str) *: {\n            Optional  (str) route_distinguisher: <class 'str'>,\n            Optional  (str) bgp_table_version: <class 'int'>,\n            Optional  (str) default_vrf: <class 'str'>,\n            Optional  (str) local_router_id: <class 'str'>,\n            Optional  (str) advertised: {\n              Optional  (Any) Any  (str) *: {\n                Optional  (str) index: {\n                  Optional  (Any) Any  (str) *: {\n                    Optional  (str) origin_codes: <class 'str'>,\n                    Optional  (str) metric: <class 'int'>,\n                    Optional  (str) localprf: <class 'int'>,\n                    Optional  (str) next_hop: <class 'str'>,\n                    Optional  (str) weight: <class 'int'>,\n                    Optional  (str) status_codes: <class 'str'>,\n                    Optional  (str) path: <class 'str'>,\n                    Optional  (str) path_type: <class 'str'>,\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "doc": " Parser for:\n        * 'show bgp {address_family} neighbors {neighbor} advertised-routes'\n        * 'show bgp neighbors {neighbor} advertised-routes'\n    ", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_bgp.py#L4485", "class": "ShowBgpNeighborsAdvertisedRoutes", "module_name": "show_bgp"}}, "show fabric multicast ipv4 l2-mroute vni all": {"nxos": {"uid": "show_fabric_multicast_ipv4_l2-mroute_vni_all", "schema": "{\n'multicast': {\n  'l2_mroute': {\n    'vni': {\n      Any  (str) *: {\n        Optional  (str) fabric_l2_mroutes: {\n          'gaddr': {\n            Any  (str) *: {\n              'saddr': {\n                Any  (str) *: {\n                  'interested_fabric_nodes': {\n                    Any  (str) *: {\n                      'node': <class 'str'>,\n                      },\n                    },\n                  },\n                },\n              },\n            },\n          },\n        'vnid': <class 'str'>,\n        },\n      },\n    },\n  },\n}", "doc": "parser for:\n        show fabric multicast ipv4 l2-mroute\n        show fabric multicast ipv4 l2-mroute vni <vni>\n        show fabric multicast ipv4 l2-mroute vni all", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_vxlan.py#L2138", "class": "ShowFabricMulticastIpL2Mroute", "module_name": "show_vxlan"}}, "show bgp l2vpn evpn neighbors": {"nxos": {"uid": "show_bgp_l2vpn_evpn_neighbors", "schema": "{\n'instance': {\n  Any  (str) *: {\n    'vrf': {\n      Any  (str) *: {\n        'address_family': {\n          Any  (str) *: {\n            'neighbor': {\n              Any  (str) *: {\n                Optional  (str) firstkeepalive: <class 'bool'>,\n                Optional  (str) remote_id: <class 'str'>,\n                Optional  (str) capgradvertised: <class 'bool'>,\n                Optional  (str) caprefreshrecvd: <class 'bool'>,\n                Optional  (str) state: <class 'str'>,\n                Optional  (str) capgrrecvd: <class 'bool'>,\n                Optional  (str) up: <class 'bool'>,\n                'updatessent': <class 'int'>,\n                Optional  (str) fd: <class 'int'>,\n                Optional  (str) retry: <class 'str'>,\n                'connsestablished': <class 'int'>,\n                'bytessent': <class 'int'>,\n                Optional  (str) elapsedtime: <class 'str'>,\n                'remoteas': <class 'int'>,\n                Optional  (str) bfd: <class 'bool'>,\n                Optional  (str) localaddr: <class 'str'>,\n                'openssent': <class 'int'>,\n                Optional  (str) ttlsecurity: <class 'bool'>,\n                Optional  (str) graf: {\n                  Any  (str) *: {\n                    Optional  (str) gr_recv: <class 'bool'>,\n                    Optional  (str) gr_af_name: <class 'str'>,\n                    Optional  (str) gr_fwd: <class 'bool'>,\n                    Optional  (str) gr_adv: <class 'bool'>,\n                    },\n                  },\n                Optional  (str) password: <class 'bool'>,\n                Optional  (str) grrestarttime: <class 'int'>,\n                Optional  (str) passiveonly: <class 'bool'>,\n                Optional  (str) grstaletiem: <class 'int'>,\n                Optional  (str) localas_inactive: <class 'bool'>,\n                'keepaliverecvd': <class 'int'>,\n                Optional  (str) grrecvdrestarttime: <class 'int'>,\n                Optional  (str) remote_privateas: <class 'bool'>,\n                Optional  (str) capextendednhadvertised: <class 'bool'>,\n                Optional  (str) lastwrite: <class 'str'>,\n                'holdtime': <class 'int'>,\n                Optional  (str) capextendednhrecvd: <class 'bool'>,\n                Optional  (str) keepalive: <class 'str'>,\n                'updatesrecvd': <class 'int'>,\n                'lastread': <class 'str'>,\n                Optional  (str) totalbytessent: <class 'int'>,\n                'bytesrecvd': <class 'int'>,\n                Optional  (str) remoteport: <class 'int'>,\n                Optional  (str) resettime: <class 'str'>,\n                'neighbor': <class 'str'>,\n                Optional  (str) capextendednhaf: {\n                  Any  (str) *: {\n                    Optional  (str) capextendednh_af_name: <class 'str'>,\n                    },\n                  },\n                Optional  (str) resetreason: <class 'str'>,\n                Optional  (str) epe: <class 'bool'>,\n                Optional  (str) peerresettime: <class 'str'>,\n                'keepalivetime': <class 'int'>,\n                Optional  (str) peerresetreason: <class 'str'>,\n                'msgrecvd': <class 'int'>,\n                'connsdropped': <class 'int'>,\n                Optional  (str) capsnegotiated: <class 'bool'>,\n                Optional  (str) capmpadvertised: <class 'bool'>,\n                Optional  (str) localport: <class 'int'>,\n                'capabilitiesrecvd': <class 'int'>,\n                Optional  (str) caprefreshadvertised: <class 'bool'>,\n                'notificationssent': <class 'int'>,\n                Optional  (str) capgrdynamicadvertised: <class 'bool'>,\n                'sentbytesoutstanding': <class 'int'>,\n                Optional  (str) capmprecvd: <class 'bool'>,\n                'notificationsrcvd': <class 'int'>,\n                'msgsent': <class 'int'>,\n                Optional  (str) capgrdynamicrecvd: <class 'bool'>,\n                'rtrefreshsent': <class 'int'>,\n                Optional  (str) capolddynamicadvertised: <class 'bool'>,\n                Optional  (str) capolddynamicrecvd: <class 'bool'>,\n                Optional  (str) remoteaddr: <class 'str'>,\n                Optional  (str) caprradvertised: <class 'bool'>,\n                'keepalivesent': <class 'int'>,\n                'recvbufbytes': <class 'int'>,\n                Optional  (str) caprrrecvd: <class 'bool'>,\n                Optional  (str) capoldrradvertised: <class 'bool'>,\n                'rtrefreshrecvd': <class 'int'>,\n                Optional  (str) capoldrrrecvd: <class 'bool'>,\n                Optional  (str) localas: <class 'int'>,\n                Optional  (str) capas4advertised: <class 'bool'>,\n                'opensrecvd': <class 'int'>,\n                'capabilitiessent': <class 'int'>,\n                Optional  (str) capas4recvd: <class 'bool'>,\n                Optional  (str) peraf: {\n                  Any  (str) *: {\n                    Optional  (str) per_af_name: <class 'str'>,\n                    Optional  (str) rrconfigured: <class 'bool'>,\n                    Optional  (str) tableversion: <class 'int'>,\n                    Optional  (str) neighbortableversion: <class 'int'>,\n                    Optional  (str) pfxrecvd: <class 'int'>,\n                    Optional  (str) pfxbytes: <class 'int'>,\n                    Optional  (str) peerascheckdisabled: <class 'bool'>,\n                    Optional  (str) insoftreconfigallowed: <class 'bool'>,\n                    Optional  (str) sendcommunity: <class 'bool'>,\n                    Optional  (str) sendextcommunity: <class 'bool'>,\n                    Optional  (str) pfxbytes: <class 'int'>,\n                    Optional  (str) asoverride: <class 'bool'>,\n                    },\n                  },\n                Optional  (str) link: <class 'str'>,\n                Optional  (str) connectedif: <class 'str'>,\n                Optional  (str) index: <class 'int'>,\n                Optional  (str) af: {\n                  Any  (str) *: {\n                    'af_recvd': <class 'bool'>,\n                    'af_advertised': <class 'bool'>,\n                    'af_name': <class 'str'>,\n                    },\n                  },\n                Optional  (str) version: <class 'int'>,\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "doc": "parser for:\n        show bgp l2vpn evpn neighbors", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_bgp.py#L10462", "class": "ShowBgpL2vpnEvpnNeighbors", "module_name": "show_bgp"}}, "show bgp ipv4 mvpn sa-ad detail": {"nxos": {"uid": "show_bgp_ipv4_mvpn_sa-ad_detail", "schema": "{\n'instance': {\n  Any  (str) *: {\n    'vrf': {\n      Any  (str) *: {\n        'vrf_name_out': <class 'str'>,\n        'address_family': {\n          Any  (str) *: {\n            'af_name': <class 'str'>,\n            'rd': {\n              Any  (str) *: {\n                Optional  (str) rd_vrf: <class 'str'>,\n                Optional  (str) rd_val: <class 'str'>,\n                'prefix': {\n                  Any  (str) *: {\n                    'bestpathnr': <class 'int'>,\n                    Optional  (str) suppressed: <class 'bool'>,\n                    Optional  (str) totalpaths: <class 'int'>,\n                    Optional  (str) needsresync: <class 'bool'>,\n                    'nonipprefix': <class 'str'>,\n                    Optional  (str) mpath: <class 'str'>,\n                    Optional  (str) locked: <class 'bool'>,\n                    Optional  (str) on_newlist: <class 'bool'>,\n                    'path': {\n                      Any  (str) *: {\n                        Optional  (str) origin: <class 'str'>,\n                        Optional  (str) policyincomplete: <class 'bool'>,\n                        'localpref': <class 'int'>,\n                        Optional  (str) pathdeleted: <class 'bool'>,\n                        Optional  (str) pathstaled: <class 'bool'>,\n                        'pathvalid': <class 'bool'>,\n                        'pathtype': <class 'str'>,\n                        Optional  (str) pathhistory: <class 'bool'>,\n                        Optional  (str) pathovermaxaslimit: <class 'bool'>,\n                        Optional  (str) pathmultipath: <class 'bool'>,\n                        Optional  (str) pathnolabeledrnh: <class 'bool'>,\n                        Optional  (str) nexthop_status: <class 'str'>,\n                        'weight': <class 'int'>,\n                        'neighborid': <class 'str'>,\n                        Optional  (str) inlabel: <class 'int'>,\n                        Optional  (str) extcommunity: <class 'list'>,\n                        Optional  (str) advertisedto: <class 'list'>,\n                        Optional  (str) originatorid: <class 'str'>,\n                        Optional  (str) pathnr: <class 'int'>,\n                        Optional  (str) clusterlist: <class 'list'>,\n                        'nexthopmetric': <class 'int'>,\n                        'neighbor': <class 'str'>,\n                        'pathbest': <class 'bool'>,\n                        'ipnexthop': <class 'str'>,\n                        },\n                      },\n                    'prefixversion': <class 'int'>,\n                    Optional  (str) on_xmitlist: <class 'bool'>,\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "doc": "parser for:\n        show bgp ipv4 mvpn sa-ad detail\n        show bgp ipv4 mvpn sa-ad detail vrf <vrf>\n        show bgp ipv4 mvpn sa-ad detail vrf all", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_bgp.py#L11258", "class": "ShowBgpIpMvpnSaadDetail", "module_name": "show_bgp"}}, "show lisp all instance-id {instance_id} {service} server detail internal": {"iosxe": {"uid": "show_lisp_all_instance-id_instance_id_service_server_detail_internal", "schema": "{\n'lisp_router_instances': {\n  Any  (str) *: {\n    Optional  (str) service: {\n      Any  (str) *: {\n        'map_server': {\n          Optional  (str) virtual_network_ids: {\n            Any  (str) *: {\n              'mappings': {\n                Any  (str) *: {\n                  'state': <class 'str'>,\n                  'eid_address': {\n                    Optional  (str) ipv4: {\n                      'ipv4': <class 'str'>,\n                      },\n                    Optional  (str) ipv6: {\n                      'ipv6': <class 'str'>,\n                      },\n                    'address_type': <class 'str'>,\n                    Optional  (str) ipv4_prefix: {\n                      'ipv4_prefix': <class 'str'>,\n                      },\n                    Optional  (str) ipv6_prefix: {\n                      'ipv6_prefix': <class 'str'>,\n                      },\n                    'virtual_network_id': <class 'str'>,\n                    },\n                  Optional  (str) mapping_records: {\n                    Any  (str) *: {\n                      'hash_function': <class 'str'>,\n                      'nonce': <class 'str'>,\n                      'eid': {\n                        Optional  (str) ipv4: {\n                          'ipv4': <class 'str'>,\n                          },\n                        Optional  (str) ipv6: {\n                          'ipv6': <class 'str'>,\n                          },\n                        'virtual_network_id': <class 'str'>,\n                        Optional  (str) ipv4_prefix: {\n                          'ipv4_prefix': <class 'str'>,\n                          },\n                        Optional  (str) ipv6_prefix: {\n                          'ipv6_prefix': <class 'str'>,\n                          },\n                        'address_type': <class 'str'>,\n                        },\n                      'locator': {\n                        Any  (str) *: {\n                          'state': <class 'str'>,\n                          'scope': <class 'str'>,\n                          'local': <class 'bool'>,\n                          'priority': <class 'int'>,\n                          'weight': <class 'int'>,\n                          },\n                        },\n                      'time_to_live': <class 'int'>,\n                      'map_notify': <class 'bool'>,\n                      'xtr_id': <class 'str'>,\n                      'site_id': <class 'str'>,\n                      'proxy_reply': <class 'bool'>,\n                      'creation_time': <class 'str'>,\n                      'ttl': <class 'str'>,\n                      'merge': <class 'bool'>,\n                      'etr': <class 'str'>,\n                      'sourced_by': <class 'str'>,\n                      'security_capability': <class 'bool'>,\n                      'state': <class 'str'>,\n                      },\n                    },\n                  'merge_active': <class 'bool'>,\n                  'site_id': <class 'str'>,\n                  'first_registered': <class 'str'>,\n                  'origin': <class 'str'>,\n                  'eid_id': <class 'str'>,\n                  'ttl': <class 'str'>,\n                  'routing_table_tag': <class 'int'>,\n                  'proxy_reply': <class 'bool'>,\n                  'registration_errors': {\n                    'allowed_locators_mismatch': <class 'int'>,\n                    'authentication_failures': <class 'int'>,\n                    },\n                  'last_registered': <class 'str'>,\n                  Optional  (str) more_specifics_accepted: <class 'bool'>,\n                  },\n                },\n              'vni': <class 'str'>,\n              },\n            },\n          'sites': {\n            Any  (str) *: {\n              'site_id': <class 'str'>,\n              'allowed_configured_locators': <class 'str'>,\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "doc": "Parser for \"show lisp all instance-id <instance_id> <service> server detail internal\"", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_lisp.py#L2689", "class": "ShowLispServiceServerDetailInternal", "module_name": "show_lisp"}}, "show ip pim vrf {vrf} bsr-router": {"ios": {"uid": "show_ip_pim_vrf_vrf_bsr-router", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'address_family': {\n      Any  (str) *: {\n        'rp': {\n          'bsr': {\n            Any  (str) *: {\n              Optional  (str) priority: <class 'int'>,\n              Optional  (str) interface: <class 'str'>,\n              Optional  (str) interval: <class 'int'>,\n              Optional  (str) address: <class 'str'>,\n              Optional  (str) holdtime: <class 'int'>,\n              Optional  (str) next_advertisment: <class 'str'>,\n              },\n            Optional  (str) bsr_next_bootstrap: <class 'str'>,\n            Optional  (str) bsr: {\n              Optional  (str) address_host: <class 'str'>,\n              Optional  (str) priority: <class 'int'>,\n              Optional  (str) up_time: <class 'str'>,\n              Optional  (str) address: <class 'str'>,\n              Optional  (str) expires: <class 'str'>,\n              Optional  (str) hash_mask_length: <class 'int'>,\n              },\n            Optional  (str) bsr_candidate: {\n              Optional  (str) hash_mask_length: <class 'int'>,\n              Optional  (str) address: <class 'str'>,\n              Optional  (str) priority: <class 'int'>,\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "doc": "Parser for:\n        show ip pim bsr-router\n        show ip pim vrf <vrf> bsr-router", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_pim.py#L56", "class": "ShowIpPimBsrRouter", "module_name": "show_pim"}, "iosxe": {"uid": "show_ip_pim_vrf_vrf_bsr-router", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'address_family': {\n      Any  (str) *: {\n        'rp': {\n          'bsr': {\n            Any  (str) *: {\n              Optional  (str) priority: <class 'int'>,\n              Optional  (str) interface: <class 'str'>,\n              Optional  (str) interval: <class 'int'>,\n              Optional  (str) address: <class 'str'>,\n              Optional  (str) holdtime: <class 'int'>,\n              Optional  (str) next_advertisment: <class 'str'>,\n              },\n            Optional  (str) bsr_next_bootstrap: <class 'str'>,\n            Optional  (str) bsr: {\n              Optional  (str) address_host: <class 'str'>,\n              Optional  (str) priority: <class 'int'>,\n              Optional  (str) up_time: <class 'str'>,\n              Optional  (str) address: <class 'str'>,\n              Optional  (str) expires: <class 'str'>,\n              Optional  (str) hash_mask_length: <class 'int'>,\n              },\n            Optional  (str) bsr_candidate: {\n              Optional  (str) hash_mask_length: <class 'int'>,\n              Optional  (str) address: <class 'str'>,\n              Optional  (str) priority: <class 'int'>,\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "doc": "Parser for:\n        show ip pim bsr-router\n        show ip pim vrf <vrf> bsr-router", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_pim.py#L619", "class": "ShowIpPimBsrRouter", "module_name": "show_pim"}}, "show ip ospf database router": {"ios": {"uid": "show_ip_ospf_database_router", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'address_family': {\n      Any  (str) *: {\n        'instance': {\n          Any  (str) *: {\n            Optional  (str) areas: {\n              Any  (str) *: {\n                'database': {\n                  'lsa_types': {\n                    Any  (str) *: {\n                      'lsa_type': <class 'int'>,\n                      'lsas': {\n                        Any  (str) *: {\n                          'ospfv2': {\n                            'header': {\n                              Optional  (str) as_boundary_router: <class 'bool'>,\n                              Optional  (str) area_border_router: <class 'bool'>,\n                              'seq_num': <class 'str'>,\n                              'checksum': <class 'str'>,\n                              'type': <class 'int'>,\n                              'option': <class 'str'>,\n                              'age': <class 'int'>,\n                              'option_desc': <class 'str'>,\n                              'length': <class 'int'>,\n                              Optional  (str) routing_bit_enable: <class 'bool'>,\n                              'lsa_id': <class 'str'>,\n                              'adv_router': <class 'str'>,\n                              },\n                            'body': {\n                              'router': {\n                                Optional  (str) flags: <class 'str'>,\n                                'num_of_links': <class 'int'>,\n                                Optional  (str) links: {\n                                  Any  (str) *: {\n                                    'topologies': {\n                                      Any  (str) *: {\n                                        Optional  (str) metric: <class 'int'>,\n                                        'mt_id': <class 'int'>,\n                                        Optional  (str) tos: <class 'int'>,\n                                        },\n                                      },\n                                    'link_id': <class 'str'>,\n                                    'num_mtid_metrics': <class 'int'>,\n                                    'type': <class 'str'>,\n                                    'link_data': <class 'str'>,\n                                    },\n                                  },\n                                },\n                              },\n                            },\n                          'lsa_id': <class 'str'>,\n                          'adv_router': <class 'str'>,\n                          },\n                        },\n                      },\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "doc": " Parser for \"show ip ospf database router\" ", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_ospf.py#L72", "class": "ShowIpOspfDatabaseRouter", "module_name": "show_ospf"}, "iosxe": {"uid": "show_ip_ospf_database_router", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'address_family': {\n      Any  (str) *: {\n        'instance': {\n          Any  (str) *: {\n            Optional  (str) areas: {\n              Any  (str) *: {\n                'database': {\n                  'lsa_types': {\n                    Any  (str) *: {\n                      'lsa_type': <class 'int'>,\n                      'lsas': {\n                        Any  (str) *: {\n                          'ospfv2': {\n                            'header': {\n                              Optional  (str) as_boundary_router: <class 'bool'>,\n                              Optional  (str) area_border_router: <class 'bool'>,\n                              'seq_num': <class 'str'>,\n                              'checksum': <class 'str'>,\n                              'type': <class 'int'>,\n                              'option': <class 'str'>,\n                              'age': <class 'int'>,\n                              'option_desc': <class 'str'>,\n                              'length': <class 'int'>,\n                              Optional  (str) routing_bit_enable: <class 'bool'>,\n                              'lsa_id': <class 'str'>,\n                              'adv_router': <class 'str'>,\n                              },\n                            'body': {\n                              'router': {\n                                Optional  (str) flags: <class 'str'>,\n                                'num_of_links': <class 'int'>,\n                                Optional  (str) links: {\n                                  Any  (str) *: {\n                                    'topologies': {\n                                      Any  (str) *: {\n                                        Optional  (str) metric: <class 'int'>,\n                                        'mt_id': <class 'int'>,\n                                        Optional  (str) tos: <class 'int'>,\n                                        },\n                                      },\n                                    'link_id': <class 'str'>,\n                                    'num_mtid_metrics': <class 'int'>,\n                                    'type': <class 'str'>,\n                                    'link_data': <class 'str'>,\n                                    },\n                                  },\n                                },\n                              },\n                            },\n                          'lsa_id': <class 'str'>,\n                          'adv_router': <class 'str'>,\n                          },\n                        },\n                      },\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "doc": " Parser for:\n        * 'show ip ospf database router'\n    ", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_ospf.py#L4175", "class": "ShowIpOspfDatabaseRouter", "module_name": "show_ospf"}}, "show pagp internal": {"iosxe": {"uid": "show_pagp_internal", "schema": "{\n'interfaces': {\n  Any  (str) *: {\n    'protocol': <class 'str'>,\n    'name': <class 'str'>,\n    'members': {\n      Any  (str) *: {\n        'state': <class 'str'>,\n        'learn_method': <class 'str'>,\n        'hello_interval': <class 'int'>,\n        'partner_count': <class 'int'>,\n        Optional  (str) timers: <class 'str'>,\n        'interface': <class 'str'>,\n        'flags': <class 'str'>,\n        'group_ifindex': <class 'int'>,\n        'pagp_port_priority': <class 'int'>,\n        },\n      },\n    },\n  },\n}", "doc": "Parser for :\n      show pagp internal\n      show pagp <channel_group> internal", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_lag.py#L590", "class": "ShowPagpInternal", "module_name": "show_lag"}}, "show running-config | sec '^advertise evpn multicast'": {"nxos": {"uid": "show_running-config___sec_'^advertise_evpn_multicast'", "schema": "{\nOptional  (str) advertise_evpn_multicast: <class 'bool'>,\n}", "doc": "Parser for show running-config | sec '^advertise evpn multicast'", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_trm.py#L34", "class": "ShowRunningConfigTrm", "module_name": "show_trm"}}, "show feature-set": {"nxos": {"uid": "show_feature-set", "schema": "{\n'feature': {\n  Any  (str) *: {\n    'instance': {\n      Any  (str) *: {\n        'state': <class 'str'>,\n        Optional  (str) running: <class 'str'>,\n        },\n      },\n    },\n  },\n}", "doc": "Parser for show feature-set", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_feature.py#L77", "class": "ShowFeatureSet", "module_name": "show_feature"}}, "show arp detail": {"iosxr": {"uid": "show_arp_detail", "schema": "{\n'interfaces': {\n  Any  (str) *: {\n    'ipv4': {\n      'neighbors': {\n        Any  (str) *: {\n          'ip': <class 'str'>,\n          'age': <class 'str'>,\n          'origin': <class 'str'>,\n          'type': <class 'str'>,\n          'link_layer_address': <class 'str'>,\n          },\n        },\n      },\n    },\n  },\n}", "doc": "Parser for:\n        show arp detail\n        show arp vrf <WORD> detail\n        parser class - implements detail parsing mechanisms for cli,xml and yang output.\n    ", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_arp.py#L51", "class": "ShowArpDetail", "module_name": "show_arp"}}, "show archive": {"ios": {"uid": "show_archive", "schema": "{\n'archive': {\n  Any  (str) *: {\n    'file': <class 'str'>,\n    },\n  'most_recent_file': <class 'str'>,\n  'total': <class 'int'>,\n  Optional  (str) max_archive_configurations: <class 'int'>,\n  },\n}", "doc": " Parser for show archive ", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_archive.py#L12", "class": "ShowArchive", "module_name": "show_archive"}, "iosxe": {"uid": "show_archive", "schema": "{\n'archive': {\n  Any  (str) *: {\n    'file': <class 'str'>,\n    },\n  'most_recent_file': <class 'str'>,\n  'total': <class 'int'>,\n  Optional  (str) max_archive_configurations: <class 'int'>,\n  },\n}", "doc": " Parser for show archive ", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_archive.py#L38", "class": "ShowArchive", "module_name": "show_archive"}}, "show ip arp statistics": {"nxos": {"uid": "show_ip_arp_statistics", "schema": "{\n'statistics': {\n  'sent': {\n    'tunneled': <class 'int'>,\n    'drops_details': {\n      'invalid_src_ip': <class 'int'>,\n      'adjacency_couldnt_be_added': <class 'int'>,\n      Optional  (str) arp_refresh_skipped_over_core_and_flooded: <class 'int'>,\n      'null_source_ip': <class 'int'>,\n      'client_enqueue_failed': <class 'int'>,\n      'context_not_created': <class 'int'>,\n      'mbuf_operation_failed': <class 'int'>,\n      'dest_not_reachable_for_proxy_arp': <class 'int'>,\n      'invalid_context': <class 'int'>,\n      'vip_is_not_active': <class 'int'>,\n      'null_source_mac': <class 'int'>,\n      Optional  (str) destnination_on_l2_port_tracked: <class 'int'>,\n      'invalid_proxy_arp': <class 'int'>,\n      'invalid_local_proxy_arp': <class 'int'>,\n      'invalid_ifindex': <class 'int'>,\n      'unattached_ip': <class 'int'>,\n      'destnination_is_our_own_ip': <class 'int'>,\n      Optional  (str) dest_unreachable_for_enhanced_proxy: <class 'int'>,\n      'invalid_dest_ip': <class 'int'>,\n      },\n    'l2_requests': <class 'int'>,\n    'total': <class 'int'>,\n    'requests': <class 'int'>,\n    'replies': <class 'int'>,\n    'gratuitous': <class 'int'>,\n    'dropped': <class 'int'>,\n    'l2_replies': <class 'int'>,\n    },\n  'adjacency': {\n    'adjacency_deletes': <class 'int'>,\n    Optional  (str) failed_due_to_limits: <class 'int'>,\n    'adjacency_timeouts': <class 'int'>,\n    'adjacency_adds': <class 'int'>,\n    },\n  'received': {\n    'fastpath': <class 'int'>,\n    'l2_requests': <class 'int'>,\n    'total': <class 'int'>,\n    'local_proxy_arp': <class 'int'>,\n    Optional  (str) enhanced_proxy_arp: <class 'int'>,\n    'drops_details': {\n      'received_before_arp_initialization': <class 'int'>,\n      'context_not_created': <class 'int'>,\n      'grat_arp_received_on_proxy': <class 'int'>,\n      'directed_broadcast_source': <class 'int'>,\n      'invalid_layer2_address_length': <class 'int'>,\n      'invalid_context': <class 'int'>,\n      'incorrect_length': <class 'int'>,\n      'requests_came_for_exising_entries': <class 'int'>,\n      'requests_came_on_a_l2_interface': <class 'int'>,\n      Optional  (str) number_of_signals_received_from_l2rib: <class 'int'>,\n      'non_active_fhrp_dest_ip': <class 'int'>,\n      'no_mem_to_create_per_intf_structure': <class 'int'>,\n      'invalid_destination_ip_address': <class 'int'>,\n      'packet_with_vip_on_standby_fhrp': <class 'int'>,\n      'non_local_destination_ip_address': <class 'int'>,\n      'source_address_mismatch_with_subnet': <class 'int'>,\n      'l2_packet_on_untrusted_l2_port': <class 'int'>,\n      'invalid_protocol_packet': <class 'int'>,\n      'appeared_on_a_wrong_interface': <class 'int'>,\n      'dropping_due_to_tunneling_failures': <class 'int'>,\n      'invalid_layer3_address_length': <class 'int'>,\n      'invalid_hardwaretype': <class 'int'>,\n      'l2fm_query_failed_for_a_l2address': <class 'int'>,\n      Optional  (str) glean_requests_recv_count: <class 'int'>,\n      'invalid_source_ip_address': <class 'int'>,\n      Optional  (str) arp_refresh_requests_received_from_clients: <class 'int'>,\n      'source_mac_address_is_our_own': <class 'int'>,\n      'invalid_source_mac_address': <class 'int'>,\n      },\n    Optional  (str) anycast_proxy_arp: <class 'int'>,\n    'l2_replies': <class 'int'>,\n    'tunneled': <class 'int'>,\n    Optional  (str) l2_port_track_proxy_arp: <class 'int'>,\n    Optional  (str) dropped_server_port: <class 'int'>,\n    'snooped': <class 'int'>,\n    'requests': <class 'int'>,\n    'replies': <class 'int'>,\n    'dropped': <class 'int'>,\n    'proxy_arp': <class 'int'>,\n    },\n  },\n}", "doc": "Parser for:\n\t\tshow ip arp statistics vrf all\n\t\tparser class - implements detail parsing mechanisms for cli,xml and yang output.\n\t", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_arp.py#L330", "class": "ShowIpArpstatisticsVrfAll", "module_name": "show_arp"}}, "show l2vpn forwarding bridge-domain mac-address location {location}": {"iosxr": {"uid": "show_l2vpn_forwarding_bridge-domain_mac-address_location_location", "schema": null, "doc": "Parser for:\n        show l2vpn forwarding bridge-domain mac-address location <location>\n        show l2vpn forwarding bridge-domain <bridge_domain> mac-address location <location>\n    ", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_l2vpn.py#L69", "class": "ShowL2vpnForwardingBridgeDomainMacAddress", "module_name": "show_l2vpn"}}, "show evpn evi vpn-id {vpn_id} mac": {"iosxr": {"uid": "show_evpn_evi_vpn-id_vpn_id_mac", "schema": null, "doc": "Parser class for 'show evpn evi mac' CLI.", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_evpn.py#L73", "class": "ShowEvpnEviMac", "module_name": "show_evpn"}}, "show isis neighbors": {"iosxr": {"uid": "show_isis_neighbors", "schema": "{\n'isis': {\n  Any  (str) *: {\n    'neighbors': {\n      Any  (str) *: {\n        'state': <class 'str'>,\n        'holdtime': <class 'str'>,\n        'type': <class 'str'>,\n        'interface': <class 'str'>,\n        'snpa': <class 'str'>,\n        Optional  (str) ietf_nsf: <class 'str'>,\n        },\n      },\n    'total_neighbor_count': <class 'int'>,\n    },\n  },\n}", "doc": "Parser for show isis neighbors", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_isis.py#L125", "class": "ShowIsisNeighbors", "module_name": "show_isis"}}, "show ntp config": {"ios": {"uid": "show_ntp_config", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'address': {\n      Any  (str) *: {\n        'isconfigured': {\n          Any  (str) *: {\n            'address': <class 'str'>,\n            'isconfigured': <class 'bool'>,\n            },\n          },\n        'type': {\n          Any  (str) *: {\n            'address': <class 'str'>,\n            'vrf': <class 'str'>,\n            'type': <class 'str'>,\n            Optional  (str) source: <class 'str'>,\n            },\n          },\n        },\n      },\n    },\n  },\n}", "doc": "Parser for: show ntp config", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_ntp.py#L197", "class": "ShowNtpConfig", "module_name": "show_ntp"}, "iosxe": {"uid": "show_ntp_config", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'address': {\n      Any  (str) *: {\n        'isconfigured': {\n          Any  (str) *: {\n            'address': <class 'str'>,\n            'isconfigured': <class 'bool'>,\n            },\n          },\n        'type': {\n          Any  (str) *: {\n            'address': <class 'str'>,\n            'vrf': <class 'str'>,\n            'type': <class 'str'>,\n            Optional  (str) source: <class 'str'>,\n            },\n          },\n        },\n      },\n    },\n  },\n}", "doc": "Parser for: show ntp config", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_ntp.py#L350", "class": "ShowNtpConfig", "module_name": "show_ntp"}}, "show dot1x": {"ios": {"uid": "show_dot1x", "schema": "{\nOptional  (str) interfaces: {\n  Any  (str) *: {\n    Optional  (str) authenticator: {\n      'eap': {\n        'profile': <class 'str'>,\n        },\n      },\n    Optional  (str) credentials: <class 'str'>,\n    Optional  (str) supplicant: {\n      'eap': {\n        'profile': <class 'str'>,\n        },\n      },\n    Optional  (str) port_control: <class 'str'>,\n    Optional  (str) control_direction: <class 'str'>,\n    'interface': <class 'str'>,\n    Optional  (str) host_mode: <class 'str'>,\n    'pae': <class 'str'>,\n    Optional  (str) re_authentication: <class 'bool'>,\n    Optional  (str) clients: {\n      Any  (str) *: {\n        'eap_method': <class 'str'>,\n        Optional  (str) session: {\n          Any  (str) *: {\n            'auth_sm_state': <class 'str'>,\n            'auth_bend_sm_state': <class 'str'>,\n            'session_id': <class 'str'>,\n            },\n          },\n        'client': <class 'str'>,\n        },\n      },\n    Optional  (str) max_reauth_req: <class 'int'>,\n    Optional  (str) max_req: <class 'int'>,\n    Optional  (str) max_start: <class 'int'>,\n    Optional  (str) timeout: {\n      Optional  (str) supp_timeout: <class 'int'>,\n      Optional  (str) ratelimit_period: <class 'int'>,\n      Optional  (str) quiet_period: <class 'int'>,\n      Optional  (str) start_period: <class 'int'>,\n      Optional  (str) tx_period: <class 'int'>,\n      Optional  (str) re_auth_period: <class 'int'>,\n      Optional  (str) auth_period: <class 'int'>,\n      Optional  (str) server_timeout: <class 'int'>,\n      Optional  (str) held_period: <class 'int'>,\n      },\n    },\n  },\n'version': <class 'int'>,\n'system_auth_control': <class 'bool'>,\n}", "doc": "Parser for show dot1x", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_dot1x.py#L34", "class": "ShowDot1x", "module_name": "show_dot1x"}, "iosxe": {"uid": "show_dot1x", "schema": "{\nOptional  (str) interfaces: {\n  Any  (str) *: {\n    Optional  (str) authenticator: {\n      'eap': {\n        'profile': <class 'str'>,\n        },\n      },\n    Optional  (str) credentials: <class 'str'>,\n    Optional  (str) supplicant: {\n      'eap': {\n        'profile': <class 'str'>,\n        },\n      },\n    Optional  (str) port_control: <class 'str'>,\n    Optional  (str) control_direction: <class 'str'>,\n    'interface': <class 'str'>,\n    Optional  (str) host_mode: <class 'str'>,\n    'pae': <class 'str'>,\n    Optional  (str) re_authentication: <class 'bool'>,\n    Optional  (str) clients: {\n      Any  (str) *: {\n        'eap_method': <class 'str'>,\n        Optional  (str) session: {\n          Any  (str) *: {\n            'auth_sm_state': <class 'str'>,\n            'auth_bend_sm_state': <class 'str'>,\n            'session_id': <class 'str'>,\n            },\n          },\n        'client': <class 'str'>,\n        },\n      },\n    Optional  (str) max_reauth_req: <class 'int'>,\n    Optional  (str) max_req: <class 'int'>,\n    Optional  (str) max_start: <class 'int'>,\n    Optional  (str) timeout: {\n      Optional  (str) supp_timeout: <class 'int'>,\n      Optional  (str) ratelimit_period: <class 'int'>,\n      Optional  (str) quiet_period: <class 'int'>,\n      Optional  (str) start_period: <class 'int'>,\n      Optional  (str) tx_period: <class 'int'>,\n      Optional  (str) re_auth_period: <class 'int'>,\n      Optional  (str) auth_period: <class 'int'>,\n      Optional  (str) server_timeout: <class 'int'>,\n      Optional  (str) held_period: <class 'int'>,\n      },\n    },\n  },\n'version': <class 'int'>,\n'system_auth_control': <class 'bool'>,\n}", "doc": "Parser for show dot1x", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_dot1x.py#L266", "class": "ShowDot1x", "module_name": "show_dot1x"}}, "show nve interface {intf} detail": {"nxos": {"uid": "show_nve_interface_intf_detail", "schema": "{\nAny  (str) *: {\n  Optional  (str) local_rmac: <class 'str'>,\n  Optional  (str) dwn_strm_vni_cfg_mode: <class 'str'>,\n  Optional  (str) host_reach_mode: <class 'str'>,\n  Optional  (str) src_intf_last_reinit_notify_type: <class 'str'>,\n  Optional  (str) source_if: <class 'str'>,\n  Optional  (str) mcast_src_intf_last_reinit_notify_type: <class 'str'>,\n  Optional  (str) primary_ip: <class 'str'>,\n  Optional  (str) multi_src_intf_last_reinit_notify_type: <class 'str'>,\n  Optional  (str) secondary_ip: <class 'str'>,\n  Optional  (str) multisite_bgw_if: <class 'str'>,\n  Optional  (str) src_if_state: <class 'str'>,\n  Optional  (str) multisite_bgw_if_ip: <class 'str'>,\n  Optional  (str) ir_cap_mode: <class 'str'>,\n  Optional  (str) multisite_bgw_if_admin_state: <class 'str'>,\n  Optional  (str) adv_vmac: <class 'bool'>,\n  Optional  (str) multisite_bgw_if_oper_state: <class 'str'>,\n  Optional  (str) nve_flags: <class 'str'>,\n  Optional  (str) multisite_bgw_if_oper_state_down_reason: <class 'str'>,\n  Optional  (str) nve_if_handle: <class 'int'>,\n  'nve_name': <class 'str'>,\n  Optional  (str) src_if_holddown_tm: <class 'int'>,\n  Optional  (str) src_if_holdup_tm: <class 'int'>,\n  Optional  (str) src_if_holddown_left: <class 'int'>,\n  Optional  (str) multisite_convergence_time: <class 'int'>,\n  Optional  (str) multisite_convergence_time_left: <class 'int'>,\n  Optional  (str) vip_rmac: <class 'str'>,\n  Optional  (str) if_state: <class 'str'>,\n  Optional  (str) vip_rmac_ro: <class 'str'>,\n  Optional  (str) encap_type: <class 'str'>,\n  Optional  (str) sm_state: <class 'str'>,\n  Optional  (str) vpc_capability: <class 'str'>,\n  Optional  (str) peer_forwarding_mode: <class 'bool'>,\n  },\n}", "doc": "parser for:\n        show nve interface <nve> detail", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_vxlan.py#L328", "class": "ShowNveInterfaceDetail", "module_name": "show_vxlan"}}, "show platform power": {"ios": {"uid": "show_platform_power", "schema": "{\n'redundant_alc': <class 'int'>,\n'load_capacity_percent': <class 'int'>,\n'allocation_status': <class 'str'>,\n'fan_alc': <class 'int'>,\n'fru_alc': <class 'int'>,\n'slot': {\n  Any  (str) *: {\n    'state': <class 'str'>,\n    Optional  (str) load: <class 'int'>,\n    'type': <class 'str'>,\n    Optional  (str) capacity: <class 'int'>,\n    Optional  (str) allocation: <class 'float'>,\n    },\n  },\n'chassis': <class 'str'>,\n'total_load': <class 'int'>,\n'total_capacity': <class 'int'>,\n'excess_power': <class 'int'>,\n'power_capacity': <class 'int'>,\n'excess_capacity_percent': <class 'int'>,\n'redundancy_mode': <class 'str'>,\n}", "doc": "Parser for Parser for show platform power", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_platform.py#L321", "class": "ShowPlatformPower", "module_name": "show_platform"}, "iosxe": {"uid": "show_platform_power", "schema": "{\n'redundant_alc': <class 'int'>,\n'load_capacity_percent': <class 'int'>,\n'allocation_status': <class 'str'>,\n'fan_alc': <class 'int'>,\n'fru_alc': <class 'int'>,\n'slot': {\n  Any  (str) *: {\n    'state': <class 'str'>,\n    Optional  (str) load: <class 'int'>,\n    'type': <class 'str'>,\n    Optional  (str) capacity: <class 'int'>,\n    Optional  (str) allocation: <class 'float'>,\n    },\n  },\n'chassis': <class 'str'>,\n'total_load': <class 'int'>,\n'total_capacity': <class 'int'>,\n'excess_power': <class 'int'>,\n'power_capacity': <class 'int'>,\n'excess_capacity_percent': <class 'int'>,\n'redundancy_mode': <class 'str'>,\n}", "doc": "Parser for show platform power", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_platform.py#L3761", "class": "ShowPlatformPower", "module_name": "show_platform"}}, "show bgp l2vpn evpn advertised": {"iosxr": {"uid": "show_bgp_l2vpn_evpn_advertised", "schema": null, "doc": "Parser class for 'show bgp l2vpn evpn advertised' CLI.", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_bgp.py#L5097", "class": "ShowBgpL2vpnEvpnAdvertised", "module_name": "show_bgp"}}, "show ip mroute static": {"ios": {"uid": "show_ip_mroute_static", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'mroute': {\n      Any  (str) *: {\n        'path': {\n          Any  (str) *: {\n            Optional  (str) admin_distance: <class 'str'>,\n            'neighbor_address': <class 'str'>,\n            },\n          },\n        },\n      },\n    },\n  },\n}", "doc": "Parser for:\n            show ip mroute static\n            show ip mroute vrf <vrf> static\n        ", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_mcast.py#L35", "class": "ShowIpMrouteStatic", "module_name": "show_mcast"}, "iosxe": {"uid": "show_ip_mroute_static", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'mroute': {\n      Any  (str) *: {\n        'path': {\n          Any  (str) *: {\n            Optional  (str) admin_distance: <class 'str'>,\n            'neighbor_address': <class 'str'>,\n            },\n          },\n        },\n      },\n    },\n  },\n}", "doc": "Parser for:\n            show ip mroute static\n            show ip mroute vrf <vrf> static\n        ", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_mcast.py#L329", "class": "ShowIpMrouteStatic", "module_name": "show_mcast"}}, "show access-session": {"iosxe": {"uid": "show_access-session", "schema": "{\nOptional  (str) interfaces: {\n  Any  (str) *: {\n    'interface': <class 'str'>,\n    'client': {\n      Any  (str) *: {\n        'session': {\n          Any  (str) *: {\n            'session_id': <class 'str'>,\n            },\n          },\n        'method': <class 'str'>,\n        'client': <class 'str'>,\n        'domain': <class 'str'>,\n        'status': <class 'str'>,\n        },\n      },\n    },\n  },\n'session_count': <class 'int'>,\n}", "doc": "Parser for show access-session", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_access_session.py#L49", "class": "ShowAccessSession", "module_name": "show_access_session"}}, "show l2vpn forwarding protection main-interface location {location}": {"iosxr": {"uid": "show_l2vpn_forwarding_protection_main-interface_location_location", "schema": null, "doc": "Parser for show l2vpn forwarding protection main-interface location <location>", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_l2vpn.py#L171", "class": "ShowL2vpnForwardingProtectionMainInterface", "module_name": "show_l2vpn"}}, "show running-config vrf {vrf} | sec '^vrf'": {"nxos": {"uid": "show_running-config_vrf_vrf___sec_'^vrf'", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    Optional  (str) rd: <class 'str'>,\n    Optional  (str) vni: <class 'int'>,\n    Optional  (str) vrf_name: <class 'str'>,\n    Optional  (str) address_family: {\n      Any  (str) *: {\n        Optional  (str) route_target: {\n          Any  (str) *: {\n            Optional  (str) protocol: {\n              Any  (str) *: {\n                Optional  (str) rt_mvpn: <class 'bool'>,\n                Optional  (str) rt_evpn: <class 'bool'>,\n                },\n              },\n            Optional  (str) rt_type: <class 'str'>,\n            },\n          },\n        },\n      },\n    },\n  },\n}", "doc": "Parser for show running-config vrf <vrf> | sec '^vrf' ", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_vrf.py#L260", "class": "ShowRunningConfigVrf", "module_name": "show_vrf"}}, "show ntp peers": {"nxos": {"uid": "show_ntp_peers", "schema": "{\n'peer': {\n  Any  (str) *: {\n    'isconfigured': {\n      Any  (str) *: {\n        'address': <class 'str'>,\n        'isconfigured': <class 'bool'>,\n        'type': <class 'str'>,\n        },\n      },\n    },\n  },\n}", "doc": "Parser for: show ntp peers", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_ntp.py#L163", "class": "ShowNtpPeers", "module_name": "show_ntp"}}, "show ipv6 pim group-range": {"nxos": {"uid": "show_ipv6_pim_group-range", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'address_family': {\n      Any  (str) *: {\n        'sm': {\n          Any  (str) *: {\n            Any  (str) *: {\n              Optional  (str) range: <class 'str'>,\n              Optional  (str) rp_address: <class 'str'>,\n              Optional  (str) mode: <class 'str'>,\n              Optional  (str) shared_tree_only: <class 'str'>,\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "doc": "Parser for:\n        show ipv6 pim group-range\n        show ipv6 pim group-range vrf <vrf>", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_pim.py#L2463", "class": "ShowIpv6PimGroupRange", "module_name": "show_pim"}}, "show ip ospf database summary detail vrf {vrf}": {"nxos": {"uid": "show_ip_ospf_database_summary_detail_vrf_vrf", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'address_family': {\n      Any  (str) *: {\n        'instance': {\n          Any  (str) *: {\n            Optional  (str) areas: {\n              Any  (str) *: {\n                'database': {\n                  'lsa_types': {\n                    Any  (str) *: {\n                      'lsa_type': <class 'int'>,\n                      'lsas': {\n                        Any  (str) *: {\n                          'ospfv2': {\n                            'header': {\n                              'age': <class 'int'>,\n                              'option_desc': <class 'str'>,\n                              'adv_router': <class 'str'>,\n                              'seq_num': <class 'str'>,\n                              'length': <class 'int'>,\n                              'checksum': <class 'str'>,\n                              'type': <class 'int'>,\n                              'lsa_id': <class 'str'>,\n                              'option': <class 'str'>,\n                              Optional  (str) maxage: <class 'bool'>,\n                              },\n                            'body': {\n                              'summary': {\n                                'topologies': {\n                                  Any  (str) *: {\n                                    'tos': <class 'int'>,\n                                    'metric': <class 'int'>,\n                                    'mt_id': <class 'int'>,\n                                    },\n                                  },\n                                'network_mask': <class 'str'>,\n                                },\n                              },\n                            },\n                          'lsa_id': <class 'str'>,\n                          'adv_router': <class 'str'>,\n                          },\n                        },\n                      },\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "doc": "Parser for:\n        show ip ospf database summary detail\n        show ip ospf database summary detail vrf <vrf>", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_ospf.py#L3401", "class": "ShowIpOspfDatabaseSummaryDetail", "module_name": "show_ospf"}}, "show ipv6 pim interface {interface} vrf {vrf}": {"nxos": {"uid": "show_ipv6_pim_interface_interface_vrf_vrf", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'interfaces': {\n      Any  (str) *: {\n        'address_family': {\n          Any  (str) *: {\n            Optional  (str) dr_address: <class 'str'>,\n            Optional  (str) sm: {\n              Optional  (str) passive: <class 'bool'>,\n              },\n            Optional  (str) dr_priority: <class 'int'>,\n            Optional  (str) vpc_svi: <class 'bool'>,\n            Optional  (str) configured_dr_priority: <class 'int'>,\n            Optional  (str) auto_enabled: <class 'bool'>,\n            Optional  (str) neighbor_count: <class 'int'>,\n            Optional  (str) hello_interval: <class 'int'>,\n            Optional  (str) hello_expiration: <class 'str'>,\n            Optional  (str) neighbor_holdtime: <class 'int'>,\n            Optional  (str) dr_delay: <class 'int'>,\n            Optional  (str) bsr_border: <class 'bool'>,\n            Optional  (str) genid: <class 'str'>,\n            Optional  (str) hello_md5_ah_authentication: <class 'str'>,\n            Optional  (str) neighbor_filter: <class 'str'>,\n            Optional  (str) jp_inbound_policy: <class 'str'>,\n            Optional  (str) jp_outbound_policy: <class 'str'>,\n            Optional  (str) jp_interval: <class 'int'>,\n            Optional  (str) oper_status: <class 'str'>,\n            Optional  (str) statistics: {\n              Optional  (str) general: {\n                Optional  (str) graft_acks: <class 'str'>,\n                Optional  (str) hellos: <class 'str'>,\n                Optional  (str) df_offers: <class 'str'>,\n                Optional  (str) jps: <class 'str'>,\n                Optional  (str) df_winners: <class 'str'>,\n                Optional  (str) asserts: <class 'str'>,\n                Optional  (str) df_backoffs: <class 'str'>,\n                Optional  (str) grafts: <class 'str'>,\n                Optional  (str) df_passes: <class 'str'>,\n                },\n              Optional  (str) errors: {\n                Optional  (str) joins_received_with_wrong_rp: <class 'int'>,\n                Optional  (str) jps_filtered_by_inbound_policy: <class 'int'>,\n                Optional  (str) authentication_failed: <class 'int'>,\n                Optional  (str) packets_received_on_passiveinterface: <class 'int'>,\n                Optional  (str) joins_received_with_bidir_groups: <class 'int'>,\n                Optional  (str) packet_length_errors: <class 'int'>,\n                Optional  (str) bad_version_packets: <class 'int'>,\n                Optional  (str) joins_received_with_no_rp: <class 'int'>,\n                Optional  (str) jps_filtered_by_outbound_policy: <class 'int'>,\n                Optional  (str) packets_from_self: <class 'int'>,\n                Optional  (str) packets_from_non_neighbors: <class 'int'>,\n                Optional  (str) checksum: <class 'int'>,\n                Optional  (str) jps_received_on_rpf_interface: <class 'int'>,\n                Optional  (str) invalid_packet_types: <class 'int'>,\n                Optional  (str) invalid_df_subtypes: <class 'int'>,\n                Optional  (str) joins_received_with_ssm_groups: <class 'int'>,\n                },\n              Optional  (str) last_reset: <class 'str'>,\n              },\n            Optional  (str) jp_next_sending: <class 'int'>,\n            Optional  (str) link_status: <class 'str'>,\n            Optional  (str) admin_status: <class 'str'>,\n            Optional  (str) bfd: {\n              Optional  (str) enable: <class 'bool'>,\n              },\n            Optional  (str) address: <class 'list'>,\n            },\n          },\n        },\n      },\n    },\n  },\n}", "doc": "Parser for:\n        show ipv6 pim interface vrf <vrf>\n        show ipv6 pim interface\n        show ipv6 pim interface <interface>\n        show ipv6 pim interface <interface> vrf <vrf>", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_pim.py#L95", "class": "ShowIpv6PimInterface", "module_name": "show_pim"}}, "show platform hardware qfp {status} bqs {slot} ipm mapping": {"ios": {"uid": "show_platform_hardware_qfp_status_bqs_slot_ipm_mapping", "schema": "{\n'channel': {\n  Any  (str) *: {\n    Optional  (str) logical_channel: <class 'int'>,\n    'name': <class 'str'>,\n    Optional  (str) drain_mode: <class 'bool'>,\n    Optional  (str) port: <class 'int'>,\n    Optional  (str) interface: <class 'str'>,\n    Optional  (str) cfifo: <class 'int'>,\n    },\n  },\n}", "doc": "Parser for show platform hardware qfp active bqs <x> ipm mapping\n                  show platform hardware qfp standby bqs <x> ipm mapping", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_platform.py#L365", "class": "ShowPlatformHardwareQfpBqsIpmMapping", "module_name": "show_platform"}, "iosxe": {"uid": "show_platform_hardware_qfp_status_bqs_slot_ipm_mapping", "schema": "{\n'channel': {\n  Any  (str) *: {\n    Optional  (str) logical_channel: <class 'int'>,\n    'name': <class 'str'>,\n    Optional  (str) drain_mode: <class 'bool'>,\n    Optional  (str) port: <class 'int'>,\n    Optional  (str) interface: <class 'str'>,\n    Optional  (str) cfifo: <class 'int'>,\n    },\n  },\n}", "doc": "Parser for show platform hardware qfp active bqs <x> ipm mapping\n                  show platform hardware qfp standby bqs <x> ipm mapping", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_platform.py#L3345", "class": "ShowPlatformHardwareQfpBqsIpmMapping", "module_name": "show_platform"}}, "show platform hardware port {port} plim statistics": {"ios": {"uid": "show_platform_hardware_port_port_plim_statistics", "schema": "{\nOptional  (str) slot: {\n  Any  (str) *: {\n    'subslot': {\n      Any  (str) *: {\n        'transmitted': {\n          Optional  (str) spi4_interrupt_counters: {\n            'frame_error': <class 'int'>,\n            'fifo_over_flow': <class 'int'>,\n            'dip2_error': <class 'int'>,\n            'out_of_frame': <class 'int'>,\n            },\n          Optional  (str) ipc_pkts: <class 'int'>,\n          Optional  (str) bytes: <class 'int'>,\n          Optional  (str) ipc_bytes: <class 'int'>,\n          Optional  (str) ipc_err: <class 'int'>,\n          Optional  (str) pkts: <class 'int'>,\n          },\n        'received': {\n          Optional  (str) bytes: <class 'int'>,\n          Optional  (str) ipc_bytes: <class 'int'>,\n          Optional  (str) ipc_err: <class 'int'>,\n          Optional  (str) pkts: <class 'int'>,\n          Optional  (str) spi4_interrupt_counters: {\n            'sequence_error': <class 'int'>,\n            'burst_error': <class 'int'>,\n            'dip4_error': <class 'int'>,\n            'packet_gap_error': <class 'int'>,\n            'control_word_error': <class 'int'>,\n            'disabled': <class 'int'>,\n            'loss_of_sync': <class 'int'>,\n            'eop_abort': <class 'int'>,\n            'out_of_frame': <class 'int'>,\n            },\n          Optional  (str) ipc_pkts: <class 'int'>,\n          },\n        'name': <class 'str'>,\n        'status': <class 'str'>,\n        },\n      },\n    },\n  },\nOptional  (str) port: {\n  Any  (str) *: {\n    'transmitted': {\n      'low_priority': {\n        'dropped_bytes': <class 'int'>,\n        'bytes': <class 'int'>,\n        'pkts': <class 'int'>,\n        'dropped_pkts': <class 'int'>,\n        },\n      'high_priority': {\n        'dropped_bytes': <class 'int'>,\n        'bytes': <class 'int'>,\n        'pkts': <class 'int'>,\n        'dropped_pkts': <class 'int'>,\n        },\n      },\n    'received': {\n      'low_priority': {\n        'dropped_pkts': <class 'int'>,\n        'errored_bytes': <class 'int'>,\n        'pkts': <class 'int'>,\n        'errored_pkts': <class 'int'>,\n        'bytes': <class 'int'>,\n        'dropped_bytes': <class 'int'>,\n        },\n      'high_priority': {\n        'dropped_pkts': <class 'int'>,\n        'errored_bytes': <class 'int'>,\n        'pkts': <class 'int'>,\n        'errored_pkts': <class 'int'>,\n        'bytes': <class 'int'>,\n        'dropped_bytes': <class 'int'>,\n        },\n      },\n    },\n  },\n}", "doc": "Parser for show platform hardware port <x/x/x> plim statistics\n                  show platform hardware slot <x> plim statistics\n                  show platform hardware slot <x> plim statistics internal\n                  show platform hardware subslot <x/x> plim statistics", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_platform.py#L351", "class": "ShowPlatformHardwarePlim", "module_name": "show_platform"}, "iosxe": {"uid": "show_platform_hardware_port_port_plim_statistics", "schema": "{\nOptional  (str) slot: {\n  Any  (str) *: {\n    'subslot': {\n      Any  (str) *: {\n        'transmitted': {\n          Optional  (str) spi4_interrupt_counters: {\n            'frame_error': <class 'int'>,\n            'fifo_over_flow': <class 'int'>,\n            'dip2_error': <class 'int'>,\n            'out_of_frame': <class 'int'>,\n            },\n          Optional  (str) ipc_pkts: <class 'int'>,\n          Optional  (str) bytes: <class 'int'>,\n          Optional  (str) ipc_bytes: <class 'int'>,\n          Optional  (str) ipc_err: <class 'int'>,\n          Optional  (str) pkts: <class 'int'>,\n          },\n        'received': {\n          Optional  (str) bytes: <class 'int'>,\n          Optional  (str) ipc_bytes: <class 'int'>,\n          Optional  (str) ipc_err: <class 'int'>,\n          Optional  (str) pkts: <class 'int'>,\n          Optional  (str) spi4_interrupt_counters: {\n            'sequence_error': <class 'int'>,\n            'burst_error': <class 'int'>,\n            'dip4_error': <class 'int'>,\n            'packet_gap_error': <class 'int'>,\n            'control_word_error': <class 'int'>,\n            'disabled': <class 'int'>,\n            'loss_of_sync': <class 'int'>,\n            'eop_abort': <class 'int'>,\n            'out_of_frame': <class 'int'>,\n            },\n          Optional  (str) ipc_pkts: <class 'int'>,\n          },\n        'name': <class 'str'>,\n        'status': <class 'str'>,\n        },\n      },\n    },\n  },\nOptional  (str) port: {\n  Any  (str) *: {\n    'transmitted': {\n      'low_priority': {\n        'dropped_bytes': <class 'int'>,\n        'bytes': <class 'int'>,\n        'pkts': <class 'int'>,\n        'dropped_pkts': <class 'int'>,\n        },\n      'high_priority': {\n        'dropped_bytes': <class 'int'>,\n        'bytes': <class 'int'>,\n        'pkts': <class 'int'>,\n        'dropped_pkts': <class 'int'>,\n        },\n      },\n    'received': {\n      'low_priority': {\n        'dropped_pkts': <class 'int'>,\n        'errored_bytes': <class 'int'>,\n        'pkts': <class 'int'>,\n        'errored_pkts': <class 'int'>,\n        'bytes': <class 'int'>,\n        'dropped_bytes': <class 'int'>,\n        },\n      'high_priority': {\n        'dropped_pkts': <class 'int'>,\n        'errored_bytes': <class 'int'>,\n        'pkts': <class 'int'>,\n        'errored_pkts': <class 'int'>,\n        'bytes': <class 'int'>,\n        'dropped_bytes': <class 'int'>,\n        },\n      },\n    },\n  },\n}", "doc": "Parser for show platform hardware port <x/x/x> plim statistics\n                  show platform hardware slot <x> plim statistics\n                  show platform hardware slot <x> plim statistics internal\n                  show platform hardware subslot <x/x> plim statistics", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_platform.py#L2892", "class": "ShowPlatformHardwarePlim", "module_name": "show_platform"}}, "show platform software status control-processor brief": {"ios": {"uid": "show_platform_software_status_control-processor_brief", "schema": "{\n'slot': {\n  Any  (str) *: {\n    'memory': {\n      'committed_percentage': <class 'int'>,\n      'free_percentage': <class 'int'>,\n      'used': <class 'int'>,\n      'total': <class 'int'>,\n      'used_percentage': <class 'int'>,\n      'committed': <class 'int'>,\n      'status': <class 'str'>,\n      'free': <class 'int'>,\n      },\n    'load_average': {\n      '5_min': <class 'float'>,\n      '15_min': <class 'float'>,\n      'status': <class 'str'>,\n      '1_min': <class 'float'>,\n      },\n    'cpu': {\n      Any  (str) *: {\n        'nice_process': <class 'float'>,\n        'system': <class 'float'>,\n        'irq': <class 'float'>,\n        'idle': <class 'float'>,\n        'sirq': <class 'float'>,\n        'user': <class 'float'>,\n        'waiting': <class 'float'>,\n        },\n      },\n    },\n  },\n}", "doc": "Parser for show platform software status control-processor brief", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_platform.py#L336", "class": "ShowPlatformSoftwareStatusControl", "module_name": "show_platform"}, "iosxe": {"uid": "show_platform_software_status_control-processor_brief", "schema": "{\n'slot': {\n  Any  (str) *: {\n    'memory': {\n      'committed_percentage': <class 'int'>,\n      'free_percentage': <class 'int'>,\n      'used': <class 'int'>,\n      'total': <class 'int'>,\n      'used_percentage': <class 'int'>,\n      'committed': <class 'int'>,\n      'status': <class 'str'>,\n      'free': <class 'int'>,\n      },\n    'load_average': {\n      '5_min': <class 'float'>,\n      '15_min': <class 'float'>,\n      'status': <class 'str'>,\n      '1_min': <class 'float'>,\n      },\n    'cpu': {\n      Any  (str) *: {\n        'nice_process': <class 'float'>,\n        'system': <class 'float'>,\n        'irq': <class 'float'>,\n        'idle': <class 'float'>,\n        'sirq': <class 'float'>,\n        'user': <class 'float'>,\n        'waiting': <class 'float'>,\n        },\n      },\n    },\n  },\n}", "doc": "Parser for show platform software status control-processor brief", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_platform.py#L1998", "class": "ShowPlatformSoftwareStatusControl", "module_name": "show_platform"}}, "show bgp sessions vrf {vrf}": {"nxos": {"uid": "show_bgp_sessions_vrf_vrf", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'router_id': <class 'str'>,\n    'local_as': <class 'int'>,\n    Optional  (str) neighbor: {\n      Any  (str) *: {\n        'state': <class 'str'>,\n        'remote_as': <class 'int'>,\n        'connections_dropped': <class 'int'>,\n        'remote_port': <class 'int'>,\n        'notifications_received': <class 'int'>,\n        'notifications_sent': <class 'int'>,\n        'local_port': <class 'int'>,\n        'last_read': <class 'str'>,\n        'last_write': <class 'str'>,\n        'last_flap': <class 'str'>,\n        },\n      },\n    'vrf_peers': <class 'int'>,\n    'vrf_established_peers': <class 'int'>,\n    },\n  },\n'local_as': <class 'int'>,\n'total_peers': <class 'int'>,\n'total_established_peers': <class 'int'>,\n}", "doc": "Parser for:\n        show bgp sessions", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_bgp.py#L8995", "class": "ShowBgpSessions", "module_name": "show_bgp"}}, "show running-config | inc peer": {"nxos": {"uid": "show_running-config___inc_peer", "schema": "{\n'peer_template': {\n  Any  (str) *: {\n    Optional  (str) tcp_md5_auth: <class 'str'>,\n    Optional  (str) nbr_transport_connection_mode: <class 'str'>,\n    Optional  (str) remote_as: <class 'int'>,\n    Optional  (str) nbr_local_as_cmd: <class 'str'>,\n    Optional  (str) private_as_updates: <class 'bool'>,\n    Optional  (str) inherit_template: <class 'str'>,\n    Optional  (str) description: <class 'str'>,\n    Optional  (str) keepalive_interval: <class 'int'>,\n    Optional  (str) update_source: <class 'str'>,\n    Optional  (str) disable_connected_check: <class 'bool'>,\n    Optional  (str) bfd_live_detection: <class 'bool'>,\n    Optional  (str) holdtime: <class 'int'>,\n    Optional  (str) num_hops_bgp_peer: <class 'int'>,\n    },\n  },\n}", "doc": "Parser for show bgp peer-template <peer_template>\n       Executing 'show running-config bgp | inc peer' to colllect\n       configured peer-template names.\n    ", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_bgp.py#L1481", "class": "ShowBgpPeerTemplate", "module_name": "show_bgp"}}, "show ospf vrf all-inclusive database router": {"iosxr": {"uid": "show_ospf_vrf_all-inclusive_database_router", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'address_family': {\n      Any  (str) *: {\n        'instance': {\n          Any  (str) *: {\n            Optional  (str) areas: {\n              Any  (str) *: {\n                'database': {\n                  'lsa_types': {\n                    Any  (str) *: {\n                      'lsa_type': <class 'int'>,\n                      'lsas': {\n                        Any  (str) *: {\n                          'ospfv2': {\n                            'header': {\n                              'seq_num': <class 'str'>,\n                              Optional  (str) routing_bit_enable: <class 'bool'>,\n                              Optional  (str) area_border_router: <class 'bool'>,\n                              'checksum': <class 'str'>,\n                              'type': <class 'int'>,\n                              Optional  (str) as_boundary_router: <class 'bool'>,\n                              'option': <class 'str'>,\n                              'age': <class 'int'>,\n                              'option_desc': <class 'str'>,\n                              'length': <class 'int'>,\n                              'lsa_id': <class 'str'>,\n                              'adv_router': <class 'str'>,\n                              },\n                            'body': {\n                              'router': {\n                                'links': {\n                                  Any  (str) *: {\n                                    'topologies': {\n                                      Any  (str) *: {\n                                        Optional  (str) metric: <class 'int'>,\n                                        Optional  (str) tos: <class 'int'>,\n                                        'mt_id': <class 'int'>,\n                                        },\n                                      },\n                                    'link_id': <class 'str'>,\n                                    'num_tos_metrics': <class 'int'>,\n                                    'type': <class 'str'>,\n                                    'link_data': <class 'str'>,\n                                    },\n                                  },\n                                'num_of_links': <class 'int'>,\n                                Optional  (str) flags: <class 'str'>,\n                                },\n                              },\n                            },\n                          'lsa_id': <class 'str'>,\n                          'adv_router': <class 'str'>,\n                          },\n                        },\n                      },\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "doc": "\n    Parser for show ospf vrf all-inclusive database router\n    For checking any output with the parser ,below mandatory key(s) are needed and have to be in cli command.\n\n    - db_type\n    ", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_ospf.py#L3612", "class": "ShowOspfVrfAllInclusiveDatabaseRouter", "module_name": "show_ospf"}}, "show ip arp": {"ios": {"uid": "show_ip_arp", "schema": "{\n'interfaces': {\n  Any  (str) *: {\n    'ipv4': {\n      'neighbors': {\n        Any  (str) *: {\n          'ip': <class 'str'>,\n          'age': <class 'str'>,\n          'origin': <class 'str'>,\n          'protocol': <class 'str'>,\n          'type': <class 'str'>,\n          'link_layer_address': <class 'str'>,\n          },\n        },\n      },\n    },\n  },\n}", "doc": " Parser for show arp\n                  show ip arp <WROD>\n                  show ip arp vrf <vrf>\n                  show ip arp vrf <vrf> <WROD> ", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_arp.py#L27", "class": "ShowIpArp", "module_name": "show_arp"}, "nxos": {"uid": "show_ip_arp", "schema": "{\nAny  (str) *: {\n  Optional  (str) Flags: <class 'str'>,\n  'MAC Address': <class 'str'>,\n  'Interface': <class 'str'>,\n  'Age': <class 'str'>,\n  'Address': <class 'str'>,\n  },\n}", "doc": "Parser for:\n\t\tshow ip arp\n\t\tparser class - implements detail parsing mechanisms for cli,xml and yang output.\n\t", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_arp.py#L34", "class": "ShowIpArp", "module_name": "show_arp"}}, "show ipv6 pim df vrf {vrf}": {"nxos": {"uid": "show_ipv6_pim_df_vrf_vrf", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'address_family': {\n      Any  (str) *: {\n        Optional  (str) rp: {\n          Optional  (str) bidir: {\n            Optional  (str) interface_df_election: {\n              Optional  (Any) Any  (str) *: {\n                Optional  (str) group_range: <class 'str'>,\n                Optional  (str) winner_metric_pref: <class 'int'>,\n                Optional  (str) interface_name: <class 'str'>,\n                Optional  (str) winner_metric: <class 'int'>,\n                Optional  (str) df_ordinal: <class 'int'>,\n                Optional  (str) df_address: <class 'str'>,\n                Optional  (str) metric_pref: <class 'int'>,\n                Optional  (str) df_uptime: <class 'str'>,\n                Optional  (str) metric: <class 'int'>,\n                Optional  (str) interface_state: <class 'str'>,\n                Optional  (str) address: <class 'str'>,\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "doc": "Parser for:\n        show ipv6 pim df\n        show ipv6 pim df vrf <vrf>", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_pim.py#L1380", "class": "ShowIpv6PimDf", "module_name": "show_pim"}}, "show mpls interfaces {all}": {"iosxe": {"uid": "show_mpls_interfaces_all", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'interfaces': {\n      Any  (str) *: {\n        Optional  (str) bgp: <class 'str'>,\n        Optional  (str) ip_labeling_enabled: {\n          Any  (str) *: {\n            'ldp': <class 'bool'>,\n            Optional  (str) interface_config: <class 'bool'>,\n            },\n          },\n        Optional  (str) lsp_tunnel_labeling_enabled: <class 'bool'>,\n        Optional  (str) tunnel: <class 'str'>,\n        Optional  (str) lp_frr_labeling_enabled: <class 'bool'>,\n        Optional  (str) mpls_operational: <class 'bool'>,\n        Optional  (str) bgp_labeling_enabled: <class 'bool'>,\n        Optional  (str) static: <class 'str'>,\n        Optional  (str) operational: <class 'str'>,\n        Optional  (str) mtu: <class 'int'>,\n        Optional  (str) type: <class 'str'>,\n        Optional  (str) session: <class 'str'>,\n        Optional  (str) ip: <class 'str'>,\n        },\n      },\n    },\n  },\n}", "doc": "Parser for\n        show mpls interfaces\n        show mpls interfaces all\n        show mpls interfaces vrf <vrf>\n        show mpls interfaces <interface>\n        show mpls interfaces <interface> detail\n        show mpls interfaces detail", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_mpls.py#L2049", "class": "ShowMplsInterface", "module_name": "show_mpls"}}, "show pagp {channel_group} internal": {"iosxe": {"uid": "show_pagp_channel_group_internal", "schema": "{\n'interfaces': {\n  Any  (str) *: {\n    'protocol': <class 'str'>,\n    'name': <class 'str'>,\n    'members': {\n      Any  (str) *: {\n        'state': <class 'str'>,\n        'learn_method': <class 'str'>,\n        'hello_interval': <class 'int'>,\n        'partner_count': <class 'int'>,\n        Optional  (str) timers: <class 'str'>,\n        'interface': <class 'str'>,\n        'flags': <class 'str'>,\n        'group_ifindex': <class 'int'>,\n        'pagp_port_priority': <class 'int'>,\n        },\n      },\n    },\n  },\n}", "doc": "Parser for :\n      show pagp internal\n      show pagp <channel_group> internal", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_lag.py#L590", "class": "ShowPagpInternal", "module_name": "show_lag"}}, "show lacp neighbor detail": {"iosxe": {"uid": "show_lacp_neighbor_detail", "schema": "{\n'interfaces': {\n  Any  (str) *: {\n    'protocol': <class 'str'>,\n    'name': <class 'str'>,\n    'members': {\n      Any  (str) *: {\n        'system_id': <class 'str'>,\n        'aggregatable': <class 'bool'>,\n        Optional  (str) activity: <class 'str'>,\n        'port_num': <class 'int'>,\n        'oper_key': <class 'int'>,\n        'collecting': <class 'bool'>,\n        'interface': <class 'str'>,\n        'synchronization': <class 'bool'>,\n        'expired': <class 'bool'>,\n        'flags': <class 'str'>,\n        'distributing': <class 'bool'>,\n        'age': <class 'int'>,\n        'lacp_port_priority': <class 'int'>,\n        'defaulted': <class 'bool'>,\n        'timeout': <class 'str'>,\n        'port_state': <class 'int'>,\n        },\n      },\n    },\n  },\n}", "doc": "Parser for :\n        show lacp neighbor detail", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_lag.py#L915", "class": "ShowLacpNeighborDetail", "module_name": "show_lag"}}, "show ipv6 mld local-groups": {"nxos": {"uid": "show_ipv6_mld_local-groups", "schema": "{\n'vrfs': {\n  Any  (str) *: {\n    Optional  (str) interface: {\n      Any  (str) *: {\n        'group': {\n          Any  (str) *: {\n            Optional  (str) last_reported: <class 'str'>,\n            Optional  (str) type: <class 'str'>,\n            Optional  (str) source: {\n              Any  (str) *: {\n                'last_reported': <class 'str'>,\n                'type': <class 'str'>,\n                },\n              },\n            },\n          },\n        Optional  (str) static_group: {\n          Any  (str) *: {\n            'source': <class 'str'>,\n            'group': <class 'str'>,\n            },\n          },\n        Optional  (str) join_group: {\n          Any  (str) *: {\n            'source': <class 'str'>,\n            'group': <class 'str'>,\n            },\n          },\n        },\n      },\n    },\n  },\n}", "doc": "Parser for:\n        show ipv6 mld local-groups\n        show ipv6 mld local-groups vrf all\n        show ipv6 mld local-groups vrf <vrf>", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_mld.py#L605", "class": "ShowIpv6MldLocalGroups", "module_name": "show_mld"}}, "show mpls ldp nsr statistics": {"iosxe": {"uid": "show_mpls_ldp_nsr_statistics", "schema": "{\n'statistics': {\n  'label_request_acks': {\n    'number_of_chkpt_messages': {\n      'sent': <class 'int'>,\n      'in_queue': <class 'int'>,\n      'in_state_wait': <class 'int'>,\n      'in_state_none': <class 'int'>,\n      'in_state_send': <class 'int'>,\n      },\n    },\n  'peer': {\n    Any  (str) *: {\n      'local_space_id': {\n        Any  (str) *: {\n          'transmit_contexts': {\n            'dequeued': <class 'int'>,\n            'enqueued': <class 'int'>,\n            },\n          'in_label_request_records': {\n            'created': <class 'int'>,\n            'freed': <class 'int'>,\n            },\n          'in_label_withdraw_records': {\n            'created': <class 'int'>,\n            'freed': <class 'int'>,\n            },\n          'local_address_withdraw': {\n            'cleared': <class 'int'>,\n            'set': <class 'int'>,\n            },\n          },\n        },\n      },\n    },\n  'address_withdraw_acks': {\n    'number_of_chkpt_messages': {\n      'sent': <class 'int'>,\n      'in_queue': <class 'int'>,\n      'in_state_wait': <class 'int'>,\n      'in_state_none': <class 'int'>,\n      'in_state_send': <class 'int'>,\n      },\n    },\n  'session_sync': {\n    Any  (str) *: <class 'int'>,\n    },\n  'label_withdraw_acks': {\n    'number_of_chkpt_messages': {\n      'sent': <class 'int'>,\n      'in_queue': <class 'int'>,\n      'in_state_wait': <class 'int'>,\n      'in_state_none': <class 'int'>,\n      'in_state_send': <class 'int'>,\n      },\n    },\n  'total_in_label_withdraw_records': {\n    'created': <class 'int'>,\n    'freed': <class 'int'>,\n    },\n  'total_local_address_withdraw_records': {\n    'created': <class 'int'>,\n    'freed': <class 'int'>,\n    },\n  'total_in_label_request_records': {\n    'created': <class 'int'>,\n    'freed': <class 'int'>,\n    },\n  },\n}", "doc": "Parser for show mpls ldp nsr statistics", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_mpls.py#L298", "class": "ShowMplsLdpNsrStatistics", "module_name": "show_mpls"}}, "show ipv6 static-route vrf {vrf}": {"nxos": {"uid": "show_ipv6_static-route_vrf_vrf", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    Optional  (str) address_family: {\n      Any  (str) *: {\n        Optional  (str) routes: {\n          Any  (str) *: {\n            Optional  (str) route: <class 'str'>,\n            Optional  (str) next_hop: {\n              Optional  (str) next_hop_list: {\n                Any  (str) *: {\n                  Optional  (str) bfd_enabled: <class 'bool'>,\n                  Optional  (str) next_hop: <class 'str'>,\n                  Optional  (str) preference: <class 'int'>,\n                  Optional  (str) next_hop_netmask: <class 'str'>,\n                  Optional  (str) resolved_tid: <class 'int'>,\n                  Optional  (str) index: <class 'int'>,\n                  Optional  (str) outgoing_interface: <class 'str'>,\n                  Optional  (str) next_hop_vrf: <class 'str'>,\n                  Optional  (str) rnh_active: <class 'bool'>,\n                  },\n                },\n              Optional  (str) outgoing_interface: {\n                Any  (str) *: {\n                  Optional  (str) rnh_active: <class 'bool'>,\n                  Optional  (str) preference: <class 'int'>,\n                  Optional  (str) bfd_enabled: <class 'bool'>,\n                  Optional  (str) resolved_tid: <class 'int'>,\n                  Optional  (str) next_hop_vrf: <class 'str'>,\n                  Optional  (str) outgoing_interface: <class 'str'>,\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "doc": "Parser for:\n        show ipv6 static-route\n        show ipv6 static-route vrf <vrf>\n        show ipv6 static-route vrf all", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_static_routing.py#L260", "class": "ShowIpv6StaticRoute", "module_name": "show_static_routing"}}, "show ipv6 routers": {"nxos": {"uid": "show_ipv6_routers", "schema": "{\n'interfaces': {\n  Any  (str) *: {\n    'neighbors': {\n      Any  (str) *: {\n        'preference': <class 'str'>,\n        'reachable_time': <class 'int'>,\n        'addr_flag': <class 'int'>,\n        'is_router': <class 'bool'>,\n        'prefix': <class 'str'>,\n        'current_hop_limit': <class 'int'>,\n        'autonomous_flag': <class 'int'>,\n        'last_update': <class 'str'>,\n        'ip': <class 'str'>,\n        'valid_lifetime': <class 'int'>,\n        'retransmission_time': <class 'int'>,\n        'homeagent_flag': <class 'int'>,\n        'mtu': <class 'int'>,\n        'preferred_lifetime': <class 'int'>,\n        'lifetime': <class 'int'>,\n        'onlink_flag': <class 'int'>,\n        'other_flag': <class 'int'>,\n        },\n      },\n    'interface': <class 'str'>,\n    },\n  },\n}", "doc": "Parser for :\n        show ipv6 routers\n        show ipv6 routers vrf all\n        show ipv6 routers vrf <vrf>", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_nd.py#L634", "class": "ShowIpv6Routers", "module_name": "show_nd"}}, "show ip arp {intf_or_ip}": {"ios": {"uid": "show_ip_arp_intf_or_ip", "schema": "{\n'interfaces': {\n  Any  (str) *: {\n    'ipv4': {\n      'neighbors': {\n        Any  (str) *: {\n          'ip': <class 'str'>,\n          'age': <class 'str'>,\n          'origin': <class 'str'>,\n          'protocol': <class 'str'>,\n          'type': <class 'str'>,\n          'link_layer_address': <class 'str'>,\n          },\n        },\n      },\n    },\n  },\n}", "doc": " Parser for show arp\n                  show ip arp <WROD>\n                  show ip arp vrf <vrf>\n                  show ip arp vrf <vrf> <WROD> ", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_arp.py#L27", "class": "ShowIpArp", "module_name": "show_arp"}}, "show ipv6 nd interface": {"nxos": {"uid": "show_ipv6_nd_interface", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'interfaces': {\n      Any  (str) *: {\n        'link_status': <class 'str'>,\n        'interface': <class 'str'>,\n        'enable': <class 'bool'>,\n        'mac_extract': <class 'str'>,\n        'ip': <class 'str'>,\n        'router_advertisement': {\n          'reachable_time': <class 'int'>,\n          'suppress': <class 'bool'>,\n          'managed_address_configuration': <class 'bool'>,\n          'suppress_mtu': <class 'bool'>,\n          'lifetime': <class 'int'>,\n          'current_hop_limit': <class 'int'>,\n          'suppress_route_information': <class 'bool'>,\n          'retrans_timer': <class 'int'>,\n          'interval': <class 'int'>,\n          'default_router_preference': <class 'str'>,\n          'other_stateful_configuration': <class 'bool'>,\n          'mtu': <class 'int'>,\n          },\n        'oper_status': <class 'str'>,\n        'active_timers': {\n          'last_neighbor_advertisement': <class 'str'>,\n          'last_router_advertisement': <class 'str'>,\n          'next_router_advertisement': <class 'str'>,\n          'last_neighbor_solicitation': <class 'str'>,\n          },\n        'dad': {\n          'current_attempt': <class 'int'>,\n          'maximum_attempts': <class 'int'>,\n          },\n        'error_message': {\n          'redirects': <class 'bool'>,\n          'unreachables': <class 'bool'>,\n          },\n        'neighbor_solicitation': {\n          'interval': <class 'int'>,\n          'retry_base': <class 'int'>,\n          'retry_interval': <class 'int'>,\n          'retry_attempts': <class 'int'>,\n          },\n        'local_address': <class 'str'>,\n        },\n      },\n    },\n  },\n}", "doc": "Parser for :\n        show ipv6 nd interface\n        show ipv6 nd interface vrf all\n        show ipv6 nd interface vrf <vrf>", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_nd.py#L227", "class": "ShowIpv6NdInterface", "module_name": "show_nd"}}, "show environment all": {"iosxe": {"uid": "show_environment_all", "schema": "{\n'switch': {\n  Any  (str) *: {\n    'fan': {\n      Any  (str) *: {\n        'state': <class 'str'>,\n        },\n      },\n    'hotspot_temperature': {\n      'state': <class 'str'>,\n      'yellow_threshold': <class 'str'>,\n      'red_threshold': <class 'str'>,\n      'value': <class 'str'>,\n      },\n    'power_supply': {\n      Any  (str) *: {\n        'state': <class 'str'>,\n        Optional  (str) watts: <class 'str'>,\n        Optional  (str) pid: <class 'str'>,\n        Optional  (str) serial_number: <class 'str'>,\n        Optional  (str) system_power: <class 'str'>,\n        'status': <class 'str'>,\n        Optional  (str) poe_power: <class 'str'>,\n        },\n      },\n    'inlet_temperature': {\n      'state': <class 'str'>,\n      'yellow_threshold': <class 'str'>,\n      'red_threshold': <class 'str'>,\n      'value': <class 'str'>,\n      },\n    'system_temperature_state': <class 'str'>,\n    },\n  },\n}", "doc": "Parser for show environment all", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_platform.py#L1731", "asr1k": {"uid": "show_environment_all", "schema": "{\n'sensor_list': {\n  Any  (str) *: {\n    'sensor': {\n      Any  (str) *: {\n        'state': <class 'str'>,\n        'location': <class 'str'>,\n        'reading': <class 'str'>,\n        },\n      },\n    },\n  },\n}", "doc": "Parser for show environment all\n                  show environment all | include <WORD>", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/asr1k/show_platform.py#L35", "class": "ShowEnvironmentAll", "module_name": "show_platform"}, "class": "ShowEnvironmentAll", "c3850": {"uid": "show_environment_all", "schema": "{\n'switch': {\n  Any  (str) *: {\n    'fan': {\n      Any  (str) *: {\n        'state': <class 'str'>,\n        },\n      },\n    'hotspot_temperature': {\n      'state': <class 'str'>,\n      'yellow_threshold': <class 'str'>,\n      'red_threshold': <class 'str'>,\n      'value': <class 'str'>,\n      },\n    'power_supply': {\n      Any  (str) *: {\n        'state': <class 'str'>,\n        Optional  (str) serial_number: <class 'str'>,\n        Optional  (str) system_power: <class 'str'>,\n        Optional  (str) poe_power: <class 'str'>,\n        Optional  (str) watts: <class 'str'>,\n        'status': <class 'str'>,\n        Optional  (str) pid: <class 'str'>,\n        },\n      },\n    'inlet_temperature': {\n      'state': <class 'str'>,\n      'yellow_threshold': <class 'str'>,\n      'red_threshold': <class 'str'>,\n      'value': <class 'str'>,\n      },\n    'system_temperature_state': <class 'str'>,\n    },\n  },\n}", "doc": "Parser for show environment all", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/c3850/show_platform.py#L55", "class": "ShowEnvironmentAll", "module_name": "show_platform"}, "module_name": "show_platform"}}, "show arp summary": {"iosxe": {"uid": "show_arp_summary", "schema": "{\n'interface_entries': {\n  Any  (str) *: <class 'int'>,\n  },\n'total_num_of_entries': {\n  Any  (str) *: <class 'int'>,\n  },\n}", "doc": " Parser for 'show arp summary'", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_arp.py#L1217", "class": "ShowArpSummary", "module_name": "show_arp"}}, "show running-config bgp": {"nxos": {"uid": "show_running-config_bgp", "schema": "{\n'bgp': {\n  'instance': {\n    'default': {\n      'vrf': {\n        Any  (str) *: {\n          Optional  (str) rd: <class 'str'>,\n          Optional  (str) always_compare_med: <class 'bool'>,\n          Optional  (str) bestpath_compare_routerid: <class 'bool'>,\n          Optional  (str) bestpath_cost_community_ignore: <class 'bool'>,\n          Optional  (str) bestpath_med_missing_at_worst: <class 'bool'>,\n          'enforce_first_as': <class 'bool'>,\n          Optional  (str) neighbor_id: {\n            Any  (str) *: {\n              Optional  (str) nbr_holdtime: <class 'int'>,\n              Optional  (str) nbr_description: <class 'str'>,\n              Optional  (str) nbr_local_as_replace_as: <class 'bool'>,\n              Optional  (str) nbr_remove_private_as: <class 'bool'>,\n              Optional  (str) nbr_disable_connected_check: <class 'bool'>,\n              Optional  (str) nbr_af_name: {\n                Any  (str) *: {\n                  Optional  (str) nbr_af_allowas_in: <class 'bool'>,\n                  Optional  (str) nbr_af_soo: <class 'str'>,\n                  Optional  (str) nbr_af_route_reflector_client: <class 'bool'>,\n                  Optional  (str) nbr_af_allowas_in_as_number: <class 'int'>,\n                  Optional  (str) nbr_af_route_map_name_out: <class 'str'>,\n                  Optional  (str) nbr_af_inherit_peer_policy: <class 'str'>,\n                  Optional  (str) nbr_af_default_originate_route_map: <class 'str'>,\n                  Optional  (str) nbr_af_rewrite_evpn_rt_asn: <class 'bool'>,\n                  Optional  (str) nbr_af_inherit_peer_seq: <class 'int'>,\n                  Optional  (str) nbr_af_maximum_prefix_max_prefix_no: <class 'int'>,\n                  Optional  (str) nbr_af_send_community: <class 'str'>,\n                  Optional  (str) nbr_af_next_hop_self: <class 'bool'>,\n                  Optional  (str) nbr_af_maximum_prefix_threshold: <class 'int'>,\n                  Optional  (str) nbr_af_maximum_prefix_restart: <class 'int'>,\n                  Optional  (str) nbr_af_default_originate: <class 'bool'>,\n                  Optional  (str) nbr_af_as_override: <class 'bool'>,\n                  Optional  (str) nbr_af_maximum_prefix_warning_only: <class 'bool'>,\n                  Optional  (str) nbr_af_soft_reconfiguration: <class 'bool'>,\n                  Optional  (str) nbr_af_route_map_name_in: <class 'str'>,\n                  },\n                },\n              Optional  (str) nbr_ebgp_multihop: <class 'bool'>,\n              Optional  (str) nbr_password_text: <class 'str'>,\n              Optional  (str) nbr_keepalive_interval: <class 'int'>,\n              Optional  (str) nbr_ebgp_multihop_max_hop: <class 'int'>,\n              Optional  (str) nbr_inherit_peer_session: <class 'str'>,\n              Optional  (str) nbr_shutdown: <class 'bool'>,\n              Optional  (str) nbr_remote_as: <class 'int'>,\n              Optional  (str) nbr_local_as_as_no: <class 'int'>,\n              Optional  (str) nbr_peer_type: <class 'str'>,\n              Optional  (str) nbr_local_as_no_prepend: <class 'bool'>,\n              Optional  (str) nbr_transport_connection_mode: <class 'str'>,\n              Optional  (str) nbr_fall_over_bfd: <class 'bool'>,\n              Optional  (str) nbr_update_source: <class 'str'>,\n              Optional  (str) nbr_local_as_dual_as: <class 'bool'>,\n              Optional  (str) nbr_suppress_four_byte_as_capability: <class 'bool'>,\n              },\n            },\n          Optional  (str) cluster_id: <class 'str'>,\n          Optional  (str) confederation_identifier: <class 'int'>,\n          Optional  (str) confederation_peers_as: <class 'str'>,\n          Optional  (str) graceful_restart_restart_time: <class 'int'>,\n          Optional  (str) router_id: <class 'str'>,\n          Optional  (str) graceful_restart_stalepath_time: <class 'int'>,\n          'fast_external_fallover': <class 'bool'>,\n          'flush_routes': <class 'bool'>,\n          Optional  (str) keepalive_interval: <class 'int'>,\n          Optional  (str) holdtime: <class 'int'>,\n          Optional  (str) default_choice_ipv4_unicast: <class 'str'>,\n          Optional  (str) dynamic_med_interval: <class 'int'>,\n          'isolate': <class 'bool'>,\n          Optional  (str) shutdown: <class 'str'>,\n          Optional  (str) af_name: {\n            Any  (str) *: {\n              Optional  (str) af_maximum_paths_eibgp: <class 'int'>,\n              Optional  (str) af_aggregate_address_ipv4_address: <class 'str'>,\n              Optional  (str) af_aggregate_address_ipv4_mask: <class 'int'>,\n              Optional  (str) af_aggregate_address_as_set: <class 'bool'>,\n              Optional  (str) af_aggregate_address_summary_only: <class 'bool'>,\n              Optional  (str) af_network_number: <class 'str'>,\n              Optional  (str) af_network_mask: <class 'int'>,\n              Optional  (str) af_network_route_map: <class 'str'>,\n              Optional  (str) af_redist_isis: <class 'str'>,\n              Optional  (str) af_redist_isis_metric: <class 'str'>,\n              Optional  (str) af_redist_isis_route_policy: <class 'str'>,\n              Optional  (str) af_redist_ospf: <class 'str'>,\n              Optional  (str) af_redist_ospf_metric: <class 'str'>,\n              Optional  (str) af_redist_ospf_route_policy: <class 'str'>,\n              Optional  (str) af_redist_rip: <class 'str'>,\n              Optional  (str) af_redist_rip_metric: <class 'str'>,\n              Optional  (str) af_redist_rip_route_policy: <class 'str'>,\n              Optional  (str) af_redist_static: <class 'bool'>,\n              Optional  (str) af_evpn_vni_rt_type: <class 'str'>,\n              Optional  (str) af_redist_static_metric: <class 'str'>,\n              Optional  (str) af_evpn_vni_rt: <class 'str'>,\n              Optional  (str) af_redist_static_route_policy: <class 'str'>,\n              Optional  (str) af_dampening: <class 'bool'>,\n              Optional  (str) af_redist_connected: <class 'bool'>,\n              Optional  (str) af_dampening_route_map: <class 'str'>,\n              Optional  (str) af_redist_connected_metric: <class 'str'>,\n              Optional  (str) af_dampening_half_life_time: <class 'int'>,\n              Optional  (str) af_redist_connected_route_policy: <class 'str'>,\n              Optional  (str) af_dampening_reuse_time: <class 'int'>,\n              Optional  (str) af_v6_aggregate_address_ipv6_address: <class 'str'>,\n              Optional  (str) af_dampening_suppress_time: <class 'int'>,\n              Optional  (str) af_v6_aggregate_address_as_set: <class 'bool'>,\n              Optional  (str) af_dampening_max_suppress_time: <class 'int'>,\n              Optional  (str) af_v6_aggregate_address_summary_only: <class 'bool'>,\n              Optional  (str) af_nexthop_route_map: <class 'str'>,\n              Optional  (str) af_v6_network_number: <class 'str'>,\n              Optional  (str) af_nexthop_trigger_enable: <class 'bool'>,\n              Optional  (str) af_v6_network_route_map: <class 'str'>,\n              Optional  (str) af_nexthop_trigger_delay_critical: <class 'int'>,\n              Optional  (str) af_v6_allocate_label_all: <class 'bool'>,\n              Optional  (str) af_nexthop_trigger_delay_non_critical: <class 'int'>,\n              Optional  (str) af_retain_rt_all: <class 'bool'>,\n              Optional  (str) af_client_to_client_reflection: <class 'bool'>,\n              Optional  (str) af_label_allocation_mode: <class 'str'>,\n              Optional  (str) af_distance_extern_as: <class 'int'>,\n              Optional  (str) af_advertise_pip: <class 'bool'>,\n              Optional  (str) af_distance_internal_as: <class 'int'>,\n              Optional  (str) af_distance_local: <class 'int'>,\n              Optional  (str) af_maximum_paths_ebgp: <class 'int'>,\n              Optional  (str) af_maximum_paths_ibgp: <class 'int'>,\n              },\n            },\n          'log_neighbor_changes': <class 'bool'>,\n          Optional  (str) disable_policy_batching_ipv4: <class 'str'>,\n          'graceful_restart': <class 'bool'>,\n          Optional  (str) disable_policy_batching_ipv6: <class 'str'>,\n          },\n        },\n      'protocol_shutdown': <class 'bool'>,\n      Optional  (str) ps_name: {\n        Any  (str) *: {\n          Optional  (str) ps_remote_as: <class 'int'>,\n          'ps_fall_over_bfd': <class 'bool'>,\n          'ps_disable_connected_check': <class 'bool'>,\n          'ps_suppress_four_byte_as_capability': <class 'bool'>,\n          Optional  (str) ps_hodltime: <class 'int'>,\n          Optional  (str) ps_transport_connection_mode: <class 'str'>,\n          Optional  (str) ps_update_source: <class 'str'>,\n          Optional  (str) ps_description: <class 'str'>,\n          'ps_local_as_replace_as': <class 'bool'>,\n          Optional  (str) ps_keepalive_interval: <class 'int'>,\n          Optional  (str) ps_ebgp_multihop_max_hop: <class 'int'>,\n          'ps_ebgp_multihop': <class 'bool'>,\n          'ps_local_as_dual_as': <class 'bool'>,\n          Optional  (str) ps_local_as_as_no: <class 'int'>,\n          'ps_shutdown': <class 'bool'>,\n          Optional  (str) ps_password_text: <class 'str'>,\n          'ps_local_as_no_prepend': <class 'bool'>,\n          },\n        },\n      Optional  (str) pp_name: {\n        Any  (str) *: {\n          'pp_as_override': <class 'bool'>,\n          Optional  (str) pp_route_map_name_out: <class 'str'>,\n          Optional  (str) pp_maximum_prefix_max_prefix_no: <class 'int'>,\n          'pp_default_originate': <class 'bool'>,\n          Optional  (str) pp_maximum_prefix_warning_only: <class 'bool'>,\n          Optional  (str) pp_soo: <class 'str'>,\n          Optional  (str) pp_maximum_prefix_threshold: <class 'int'>,\n          'pp_next_hop_self': <class 'bool'>,\n          Optional  (str) pp_maximum_prefix_restart: <class 'int'>,\n          'pp_soft_reconfiguration': <class 'bool'>,\n          'pp_allowas_in_as_number': <class 'int'>,\n          Optional  (str) pp_send_community: <class 'str'>,\n          'pp_route_reflector_client': <class 'bool'>,\n          Optional  (str) pp_allowas_in: <class 'bool'>,\n          Optional  (str) pp_default_originate_route_map: <class 'str'>,\n          Optional  (str) pp_route_map_name_in: <class 'str'>,\n          },\n        },\n      'bgp_id': <class 'int'>,\n      },\n    },\n  },\nOptional  (str) vxlan: {\n  'evpn': {\n    'evpn_vni': {\n      Any  (str) *: {\n        Optional  (str) evpn_vni: <class 'int'>,\n        Optional  (str) evpn_vni_rt: {\n          Any  (str) *: {\n            Optional  (str) evpn_vni_rt: <class 'str'>,\n            Optional  (str) evpn_vni_rt_type: <class 'str'>,\n            },\n          },\n        Optional  (str) evpn_vni_rd: <class 'str'>,\n        },\n      },\n    },\n  },\n}", "doc": "Parser for show running-config bgp", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_bgp.py#L5897", "class": "ShowRunningConfigBgp", "module_name": "show_bgp"}}, "show mpls ldp bindings {all} {detail}": {"iosxe": {"uid": "show_mpls_ldp_bindings_all_detail", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'lib_entry': {\n      Any  (str) *: {\n        Optional  (str) remote_binding: {\n          'label': {\n            Any  (str) *: {\n              'lsr_id': {\n                Any  (str) *: {\n                  'label_space_id': {\n                    Any  (str) *: {\n                      Optional  (str) checkpointed: <class 'bool'>,\n                      },\n                    },\n                  },\n                },\n              },\n            },\n          },\n        Optional  (str) checkpoint: <class 'str'>,\n        Optional  (str) label_binding: {\n          'label': {\n            Any  (str) *: {\n              Optional  (str) owner: <class 'str'>,\n              Optional  (str) advertised_to: <class 'list'>,\n              },\n            },\n          },\n        'rev': <class 'str'>,\n        },\n      },\n    },\n  },\n}", "doc": "\n       Parser for show mpls ldp bindings\n                  show mpls ldp bindings vrf <vrf>\n                  show mpls ldp bindings all\n                  show mpls ldp bindings all detail\n       ", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_mpls.py#L1073", "class": "ShowMplsLdpBindings", "module_name": "show_mpls"}}, "show ip msdp policy statistics sa-policy {peer} {method}": {"nxos": {"uid": "show_ip_msdp_policy_statistics_sa-policy_peer_method", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'peer': {\n      Any  (str) *: {\n        Optional  (str) in: {\n          'total_reject_count': <class 'int'>,\n          Any  (str) *: {\n            Any  (str) *: {\n              Optional  (str) num_of_matches: <class 'int'>,\n              Optional  (str) num_of_comparison: <class 'int'>,\n              'match': <class 'str'>,\n              },\n            },\n          'total_accept_count': <class 'int'>,\n          },\n        Optional  (str) out: {\n          'total_reject_count': <class 'int'>,\n          Any  (str) *: {\n            Any  (str) *: {\n              Optional  (str) num_of_comparison: <class 'int'>,\n              Optional  (str) num_of_matches: <class 'int'>,\n              'match': <class 'str'>,\n              },\n            },\n          'total_accept_count': <class 'int'>,\n          },\n        },\n      },\n    },\n  },\n}", "doc": "Parser for :\n        show ip msdp policy statistics sa-policy <address> out", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_msdp.py#L675", "class": "ShowIpMsdpPolicyStatisticsSaPolicyOut", "module_name": "show_msdp"}}, "show ospf vrf all-inclusive interface": {"iosxr": {"uid": "show_ospf_vrf_all-inclusive_interface", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'address_family': {\n      Any  (str) *: {\n        'instance': {\n          Any  (str) *: {\n            'areas': {\n              Any  (str) *: {\n                Optional  (str) interfaces: {\n                  Any  (str) *: {\n                    Optional  (str) ls_ack_list: <class 'str'>,\n                    Optional  (str) passive: <class 'bool'>,\n                    'bfd': {\n                      Optional  (str) mode: <class 'str'>,\n                      Optional  (str) min_interval: <class 'int'>,\n                      Optional  (str) interval: <class 'int'>,\n                      'enable': <class 'bool'>,\n                      Optional  (str) multiplier: <class 'int'>,\n                      },\n                    Optional  (str) dr_router_id: <class 'str'>,\n                    'demand_circuit': <class 'bool'>,\n                    Optional  (str) neighbors: {\n                      Any  (str) *: {\n                        Optional  (str) dr_router_id: <class 'str'>,\n                        Optional  (str) bdr_router_id: <class 'str'>,\n                        },\n                      },\n                    Optional  (str) high_water_mark: <class 'int'>,\n                    Optional  (str) dr_ip_addr: <class 'str'>,\n                    Optional  (str) flood_queue_length: <class 'int'>,\n                    Optional  (str) total_dcbitless_lsa: <class 'int'>,\n                    Optional  (str) bdr_router_id: <class 'str'>,\n                    'router_id': <class 'str'>,\n                    Optional  (str) bdr_ip_addr: <class 'str'>,\n                    Optional  (str) index: <class 'str'>,\n                    Optional  (str) hello_interval: <class 'int'>,\n                    Optional  (str) ls_ack_list_length: <class 'int'>,\n                    Optional  (str) donotage_lsa: <class 'bool'>,\n                    'line_protocol': <class 'bool'>,\n                    Optional  (str) last_flood_scan_time_msec: <class 'int'>,\n                    Optional  (str) wait_interval: <class 'int'>,\n                    Optional  (str) retransmit_interval: <class 'int'>,\n                    Optional  (str) statistics: {\n                      Optional  (str) num_nbrs_suppress_hello: <class 'int'>,\n                      Optional  (str) adj_nbr_count: <class 'int'>,\n                      Optional  (str) multi_area_intf_count: <class 'int'>,\n                      Optional  (str) nbr_count: <class 'int'>,\n                      },\n                    'ip_address': <class 'str'>,\n                    Optional  (str) hello_timer: <class 'str'>,\n                    'name': <class 'str'>,\n                    Optional  (str) dead_interval: <class 'int'>,\n                    Optional  (str) cost: <class 'int'>,\n                    'enable': <class 'bool'>,\n                    Optional  (str) last_flood_scan_length: <class 'int'>,\n                    Optional  (str) next: <class 'str'>,\n                    Optional  (str) transmit_delay: <class 'int'>,\n                    Optional  (str) state: <class 'str'>,\n                    Optional  (str) max_flood_scan_length: <class 'int'>,\n                    Optional  (str) priority: <class 'int'>,\n                    'interface_type': <class 'str'>,\n                    'process_id': <class 'str'>,\n                    Optional  (str) mtu: <class 'int'>,\n                    Optional  (str) max_flood_scan_time_msec: <class 'int'>,\n                    Optional  (str) max_pkt_sz: <class 'int'>,\n                    },\n                  },\n                Optional  (str) sham_links: {\n                  Any  (str) *: {\n                    Optional  (str) bdr_ip_addr: <class 'str'>,\n                    Optional  (str) cost: <class 'int'>,\n                    Optional  (str) high_water_mark: <class 'int'>,\n                    'bfd': {\n                      Optional  (str) multiplier: <class 'int'>,\n                      Optional  (str) interval: <class 'int'>,\n                      'enable': <class 'bool'>,\n                      Optional  (str) mode: <class 'str'>,\n                      Optional  (str) min_interval: <class 'int'>,\n                      },\n                    'demand_circuit': <class 'bool'>,\n                    Optional  (str) dead_interval: <class 'int'>,\n                    Optional  (str) wait_interval: <class 'int'>,\n                    'router_id': <class 'str'>,\n                    Optional  (str) statistics: {\n                      Optional  (str) num_nbrs_suppress_hello: <class 'int'>,\n                      Optional  (str) adj_nbr_count: <class 'int'>,\n                      Optional  (str) multi_area_intf_count: <class 'int'>,\n                      Optional  (str) nbr_count: <class 'int'>,\n                      },\n                    Optional  (str) passive: <class 'bool'>,\n                    Optional  (str) donotage_lsa: <class 'bool'>,\n                    Optional  (str) hello_interval: <class 'int'>,\n                    Optional  (str) retransmit_interval: <class 'int'>,\n                    'line_protocol': <class 'bool'>,\n                    Optional  (str) index: <class 'str'>,\n                    Optional  (str) flood_queue_length: <class 'int'>,\n                    Optional  (str) neighbors: {\n                      Any  (str) *: {\n                        Optional  (str) dr_router_id: <class 'str'>,\n                        Optional  (str) bdr_router_id: <class 'str'>,\n                        },\n                      },\n                    Optional  (str) next: <class 'str'>,\n                    'ip_address': <class 'str'>,\n                    Optional  (str) last_flood_scan_length: <class 'int'>,\n                    Optional  (str) transmit_delay: <class 'int'>,\n                    'name': <class 'str'>,\n                    Optional  (str) max_flood_scan_length: <class 'int'>,\n                    Optional  (str) state: <class 'str'>,\n                    Optional  (str) priority: <class 'int'>,\n                    Optional  (str) last_flood_scan_time_msec: <class 'int'>,\n                    'enable': <class 'bool'>,\n                    Optional  (str) max_flood_scan_time_msec: <class 'int'>,\n                    Optional  (str) mtu: <class 'int'>,\n                    Optional  (str) ls_ack_list: <class 'str'>,\n                    Optional  (str) max_pkt_sz: <class 'int'>,\n                    Optional  (str) ls_ack_list_length: <class 'int'>,\n                    Optional  (str) dr_router_id: <class 'str'>,\n                    'interface_type': <class 'str'>,\n                    'process_id': <class 'str'>,\n                    Optional  (str) dr_ip_addr: <class 'str'>,\n                    Optional  (str) total_dcbitless_lsa: <class 'int'>,\n                    Optional  (str) bdr_router_id: <class 'str'>,\n                    Optional  (str) hello_timer: <class 'str'>,\n                    },\n                  },\n                Optional  (str) virtual_links: {\n                  Any  (str) *: {\n                    Optional  (str) flood_queue_length: <class 'int'>,\n                    'bfd': {\n                      Optional  (str) interval: <class 'int'>,\n                      Optional  (str) min_interval: <class 'int'>,\n                      'enable': <class 'bool'>,\n                      Optional  (str) mode: <class 'str'>,\n                      Optional  (str) multiplier: <class 'int'>,\n                      },\n                    'demand_circuit': <class 'bool'>,\n                    Optional  (str) cost: <class 'int'>,\n                    Optional  (str) last_flood_scan_length: <class 'int'>,\n                    Optional  (str) transmit_delay: <class 'int'>,\n                    Optional  (str) passive: <class 'bool'>,\n                    Optional  (str) max_flood_scan_length: <class 'int'>,\n                    Optional  (str) state: <class 'str'>,\n                    'router_id': <class 'str'>,\n                    Optional  (str) last_flood_scan_time_msec: <class 'int'>,\n                    Optional  (str) priority: <class 'int'>,\n                    Optional  (str) max_flood_scan_time_msec: <class 'int'>,\n                    Optional  (str) mtu: <class 'int'>,\n                    'line_protocol': <class 'bool'>,\n                    Optional  (str) max_pkt_sz: <class 'int'>,\n                    Optional  (str) ls_ack_list: <class 'str'>,\n                    Optional  (str) next: <class 'str'>,\n                    Optional  (str) dr_router_id: <class 'str'>,\n                    Optional  (str) ls_ack_list_length: <class 'int'>,\n                    Optional  (str) dr_ip_addr: <class 'str'>,\n                    Optional  (str) bdr_ip_addr: <class 'str'>,\n                    'ip_address': <class 'str'>,\n                    Optional  (str) total_dcbitless_lsa: <class 'int'>,\n                    Optional  (str) bdr_router_id: <class 'str'>,\n                    Optional  (str) donotage_lsa: <class 'bool'>,\n                    'name': <class 'str'>,\n                    Optional  (str) hello_interval: <class 'int'>,\n                    'enable': <class 'bool'>,\n                    Optional  (str) dead_interval: <class 'int'>,\n                    Optional  (str) high_water_mark: <class 'int'>,\n                    Optional  (str) wait_interval: <class 'int'>,\n                    Optional  (str) neighbors: {\n                      Any  (str) *: {\n                        Optional  (str) dr_router_id: <class 'str'>,\n                        Optional  (str) bdr_router_id: <class 'str'>,\n                        },\n                      },\n                    Optional  (str) retransmit_interval: <class 'int'>,\n                    Optional  (str) statistics: {\n                      Optional  (str) adj_nbr_count: <class 'int'>,\n                      Optional  (str) multi_area_intf_count: <class 'int'>,\n                      Optional  (str) nbr_count: <class 'int'>,\n                      Optional  (str) num_nbrs_suppress_hello: <class 'int'>,\n                      },\n                    'interface_type': <class 'str'>,\n                    'process_id': <class 'str'>,\n                    Optional  (str) hello_timer: <class 'str'>,\n                    Optional  (str) index: <class 'str'>,\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "doc": "Parser for show ospf vrf all-inclusive interface", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_ospf.py#L233", "class": "ShowOspfVrfAllInclusiveInterface", "module_name": "show_ospf"}}, "show ip bgp {address_family} neighbors {neighbor} received-routes": {"iosxe": {"uid": "show_ip_bgp_address_family_neighbors_neighbor_received-routes", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'neighbor': {\n      Any  (str) *: {\n        'address_family': {\n          Any  (str) *: {\n            Optional  (str) received_routes: {\n              Optional  (Any) Any  (str) *: {\n                Optional  (str) index: {\n                  Optional  (Any) Any  (str) *: {\n                    Optional  (str) next_hop: <class 'str'>,\n                    Optional  (str) weight: <class 'int'>,\n                    Optional  (str) status_codes: <class 'str'>,\n                    Optional  (str) path: <class 'str'>,\n                    Optional  (str) path_type: <class 'str'>,\n                    Optional  (str) origin_codes: <class 'str'>,\n                    Optional  (str) metric: <class 'int'>,\n                    Optional  (str) localprf: <class 'int'>,\n                    },\n                  },\n                },\n              },\n            Optional  (str) route_distinguisher: <class 'str'>,\n            Optional  (str) bgp_table_version: <class 'int'>,\n            Optional  (str) default_vrf: <class 'str'>,\n            Optional  (str) local_router_id: <class 'str'>,\n            },\n          },\n        },\n      },\n    },\n  },\n}", "doc": " Parser for:\n        * 'show ip bgp neighbors {neighbor} received-routes'\n        * 'show ip bgp {address_family} neighbors {neighbor} received-routes'\n    ", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_bgp.py#L5160", "class": "ShowIpBgpNeighborsReceivedRoutes", "module_name": "show_bgp"}}, "show ipv4 vrf all interface": {"iosxr": {"uid": "show_ipv4_vrf_all_interface", "schema": "{\nAny  (str) *: {\n  'vrf_id': <class 'str'>,\n  'oper_status': <class 'str'>,\n  Optional  (str) multicast_groups_address: <class 'str'>,\n  'int_status': <class 'str'>,\n  'vrf': <class 'str'>,\n  Optional  (str) ipv4: {\n    Optional  (str) proxy_arp: <class 'str'>,\n    Any  (str) *: {\n      Optional  (str) ip: <class 'str'>,\n      Optional  (str) route_tag: <class 'int'>,\n      Optional  (str) prefix_length: <class 'str'>,\n      Optional  (str) secondary: <class 'bool'>,\n      },\n    Optional  (str) icmp_redirects: <class 'str'>,\n    Optional  (str) icmp_unreachables: <class 'str'>,\n    Optional  (str) mtu: <class 'int'>,\n    Optional  (str) mtu_available: <class 'int'>,\n    Optional  (str) icmp_replies: <class 'str'>,\n    Optional  (str) table_id: <class 'str'>,\n    Optional  (str) helper_address: <class 'str'>,\n    Optional  (str) broadcast_forwarding: <class 'str'>,\n    Optional  (str) unnumbered: {\n      Optional  (str) unnumbered_intf_ref: <class 'str'>,\n      },\n    Optional  (str) out_access_list: <class 'str'>,\n    Optional  (str) in_access_list: <class 'str'>,\n    Optional  (str) in_common_access_list: <class 'str'>,\n    },\n  Optional  (str) multicast_groups: <class 'list'>,\n  },\n}", "doc": "Parser for show ipv4 vrf all interface", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_interface.py#L1295", "class": "ShowIpv4VrfAllInterface", "module_name": "show_interface"}}, "show ip bgp {address_family} all neighbors {neighbor} routes": {"iosxe": {"uid": "show_ip_bgp_address_family_all_neighbors_neighbor_routes", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'neighbor': {\n      Any  (str) *: {\n        'address_family': {\n          Any  (str) *: {\n            Optional  (str) local_router_id: <class 'str'>,\n            Optional  (str) routes: {\n              Optional  (Any) Any  (str) *: {\n                Optional  (str) index: {\n                  Optional  (Any) Any  (str) *: {\n                    Optional  (str) path_type: <class 'str'>,\n                    Optional  (str) origin_codes: <class 'str'>,\n                    Optional  (str) metric: <class 'int'>,\n                    Optional  (str) localprf: <class 'int'>,\n                    Optional  (str) next_hop: <class 'str'>,\n                    Optional  (str) weight: <class 'int'>,\n                    Optional  (str) status_codes: <class 'str'>,\n                    Optional  (str) path: <class 'str'>,\n                    },\n                  },\n                },\n              },\n            Optional  (str) route_distinguisher: <class 'str'>,\n            Optional  (str) bgp_table_version: <class 'int'>,\n            Optional  (str) default_vrf: <class 'str'>,\n            },\n          },\n        },\n      },\n    },\n  },\n}", "doc": " Parser for:\n        * 'show ip bgp all neighbors {neighbor} routes'\n        * 'show ip bgp {address_family} all neighbors {neighbor} routes'\n    ", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_bgp.py#L5764", "class": "ShowIpBgpAllNeighborsRoutes", "module_name": "show_bgp"}}, "show ethernet service instance interface {interface} detail": {"ios": {"uid": "show_ethernet_service_instance_interface_interface_detail", "schema": "{\n'service_instance': {\n  Any  (str) *: {\n    Optional  (str) encapsulation: <class 'str'>,\n    Optional  (str) rewrite: <class 'str'>,\n    Optional  (str) control_policy: <class 'str'>,\n    Optional  (str) intiators: <class 'str'>,\n    Optional  (str) type: <class 'str'>,\n    'associated_interface': <class 'str'>,\n    Optional  (str) dot1q_tunnel_ethertype: <class 'str'>,\n    'state': <class 'str'>,\n    Optional  (str) description: <class 'str'>,\n    'efp_statistics': {\n      'pkts_out': <class 'int'>,\n      'pkts_in': <class 'int'>,\n      'bytes_out': <class 'int'>,\n      'bytes_in': <class 'int'>,\n      },\n    Optional  (str) associated_evc: <class 'str'>,\n    Optional  (str) l2protocol_drop: <class 'bool'>,\n    Optional  (str) ce_vlans: <class 'str'>,\n    },\n  },\n}", "doc": "Parser for show ethernet service instance detail\n                  show ethernet service instance interface <interface> detail\n    ", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_l2vpn.py#L70", "class": "ShowEthernetServiceInstanceDetail", "module_name": "show_l2vpn"}, "iosxe": {"uid": "show_ethernet_service_instance_interface_interface_detail", "schema": "{\n'service_instance': {\n  Any  (str) *: {\n    Optional  (str) encapsulation: <class 'str'>,\n    Optional  (str) rewrite: <class 'str'>,\n    Optional  (str) control_policy: <class 'str'>,\n    Optional  (str) intiators: <class 'str'>,\n    Optional  (str) type: <class 'str'>,\n    'associated_interface': <class 'str'>,\n    Optional  (str) dot1q_tunnel_ethertype: <class 'str'>,\n    'state': <class 'str'>,\n    Optional  (str) description: <class 'str'>,\n    'efp_statistics': {\n      'pkts_out': <class 'int'>,\n      'pkts_in': <class 'int'>,\n      'bytes_out': <class 'int'>,\n      'bytes_in': <class 'int'>,\n      },\n    Optional  (str) associated_evc: <class 'str'>,\n    Optional  (str) l2protocol_drop: <class 'bool'>,\n    Optional  (str) ce_vlans: <class 'str'>,\n    },\n  },\n}", "doc": "Parser for show ethernet service instance detail\n                  show ethernet service instance interface <interface> detail\n    ", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_l2vpn.py#L259", "class": "ShowEthernetServiceInstanceDetail", "module_name": "show_l2vpn"}}, "show ipv6 route vrf {vrf} updated": {"ios": {"uid": "show_ipv6_route_vrf_vrf_updated", "schema": "{\n'ipv6_unicast_routing_enabled': <class 'bool'>,\n'vrf': {\n  Any  (str) *: {\n    Optional  (str) address_family: {\n      Any  (str) *: {\n        Optional  (str) routes: {\n          Any  (str) *: {\n            Optional  (str) route_preference: <class 'int'>,\n            Optional  (str) next_hop: {\n              Optional  (str) next_hop_list: {\n                Any  (str) *: {\n                  Optional  (str) updated: <class 'str'>,\n                  Optional  (str) next_hop: <class 'str'>,\n                  Optional  (str) outgoing_interface: <class 'str'>,\n                  Optional  (str) index: <class 'int'>,\n                  },\n                },\n              Optional  (str) outgoing_interface: {\n                Any  (str) *: {\n                  Optional  (str) outgoing_interface: <class 'str'>,\n                  Optional  (str) updated: <class 'str'>,\n                  },\n                },\n              },\n            Optional  (str) metric: <class 'int'>,\n            Optional  (str) route: <class 'str'>,\n            Optional  (str) source_protocol: <class 'str'>,\n            Optional  (str) source_protocol_codes: <class 'str'>,\n            Optional  (str) active: <class 'bool'>,\n            },\n          },\n        },\n      },\n    },\n  },\n}", "doc": "Parser for :\n       show ipv6 route updated\n       show ipv6 route vrf <vrf> updated", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_routing.py#L18", "class": "ShowIpv6RouteUpdated", "module_name": "show_routing"}, "iosxe": {"uid": "show_ipv6_route_vrf_vrf_updated", "schema": "{\n'ipv6_unicast_routing_enabled': <class 'bool'>,\n'vrf': {\n  Any  (str) *: {\n    Optional  (str) address_family: {\n      Any  (str) *: {\n        Optional  (str) routes: {\n          Any  (str) *: {\n            Optional  (str) route_preference: <class 'int'>,\n            Optional  (str) next_hop: {\n              Optional  (str) next_hop_list: {\n                Any  (str) *: {\n                  Optional  (str) updated: <class 'str'>,\n                  Optional  (str) next_hop: <class 'str'>,\n                  Optional  (str) outgoing_interface: <class 'str'>,\n                  Optional  (str) index: <class 'int'>,\n                  },\n                },\n              Optional  (str) outgoing_interface: {\n                Any  (str) *: {\n                  Optional  (str) outgoing_interface: <class 'str'>,\n                  Optional  (str) updated: <class 'str'>,\n                  },\n                },\n              },\n            Optional  (str) metric: <class 'int'>,\n            Optional  (str) route: <class 'str'>,\n            Optional  (str) source_protocol: <class 'str'>,\n            Optional  (str) source_protocol_codes: <class 'str'>,\n            Optional  (str) active: <class 'bool'>,\n            },\n          },\n        },\n      },\n    },\n  },\n}", "doc": "Parser for :\n       show ipv6 route updated\n       show ipv6 route vrf <vrf> updated", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_routing.py#L619", "class": "ShowIpv6RouteUpdated", "module_name": "show_routing"}}, "show ipv6 pim vrf all detail": {"nxos": {"uid": "show_ipv6_pim_vrf_all_detail", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'address_family': {\n      Any  (str) *: {\n        Optional  (str) table_id: <class 'str'>,\n        Optional  (str) register_rate_limit: <class 'str'>,\n        Optional  (str) interface_count: <class 'int'>,\n        Optional  (str) shared_tree_route_map: <class 'str'>,\n        Optional  (str) shared_tree_route_ranges: <class 'str'>,\n        Optional  (str) vrf_id: <class 'int'>,\n        Optional  (str) bfd: {\n          Optional  (str) enable: <class 'bool'>,\n          },\n        Optional  (str) shared_tree_ranges: <class 'str'>,\n        Optional  (str) state_limit: <class 'str'>,\n        },\n      },\n    },\n  },\n}", "doc": "Parser for show ipv6 pim vrf all detail", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_pim.py#L4015", "class": "ShowIpv6PimVrfAllDetail", "module_name": "show_pim"}}, "show evpn internal-label detail": {"iosxr": {"uid": "show_evpn_internal-label_detail", "schema": null, "doc": null, "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_evpn.py#L341", "class": "ShowEvpnInternalLabelDetail", "module_name": "show_evpn"}}, "show ip ospf database network detail vrf {vrf}": {"nxos": {"uid": "show_ip_ospf_database_network_detail_vrf_vrf", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'address_family': {\n      Any  (str) *: {\n        'instance': {\n          Any  (str) *: {\n            Optional  (str) areas: {\n              Any  (str) *: {\n                'database': {\n                  'lsa_types': {\n                    Any  (str) *: {\n                      'lsa_type': <class 'int'>,\n                      'lsas': {\n                        Any  (str) *: {\n                          'ospfv2': {\n                            'header': {\n                              'age': <class 'int'>,\n                              'checksum': <class 'str'>,\n                              'option_desc': <class 'str'>,\n                              'adv_router': <class 'str'>,\n                              'seq_num': <class 'str'>,\n                              'length': <class 'int'>,\n                              Optional  (str) maxage: <class 'bool'>,\n                              'type': <class 'int'>,\n                              'lsa_id': <class 'str'>,\n                              'option': <class 'str'>,\n                              },\n                            'body': {\n                              'network': {\n                                'attached_routers': {\n                                  Any  (str) *: {\n                                    },\n                                  },\n                                'network_mask': <class 'str'>,\n                                },\n                              },\n                            },\n                          'lsa_id': <class 'str'>,\n                          'adv_router': <class 'str'>,\n                          },\n                        },\n                      },\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "doc": "Parser for:\n        show ip ospf database network detail\n        show ip ospf database network detail vrf <vrf>", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_ospf.py#L3316", "class": "ShowIpOspfDatabaseNetworkDetail", "module_name": "show_ospf"}}, "show redundancy": {"ios": {"uid": "show_redundancy", "schema": "{\n'red_sys_info': {\n  'last_switchover_reason': <class 'str'>,\n  'maint_mode': <class 'str'>,\n  'communications': <class 'str'>,\n  'standby_failures': <class 'str'>,\n  Optional  (str) oper_red_mode: <class 'str'>,\n  'hw_mode': <class 'str'>,\n  Optional  (str) conf_red_mode: <class 'str'>,\n  Optional  (str) communications_reason: <class 'str'>,\n  'available_system_uptime': <class 'str'>,\n  'switchovers_system_experienced': <class 'str'>,\n  },\n'slot': {\n  Any  (str) *: {\n    'config_register': <class 'str'>,\n    'curr_sw_state': <class 'str'>,\n    'image_ver': <class 'str'>,\n    'uptime_in_curr_state': <class 'str'>,\n    Optional  (str) boot: <class 'str'>,\n    Optional  (str) bootldr: <class 'str'>,\n    Optional  (str) config_file: <class 'str'>,\n    },\n  },\n}", "doc": "Parser for show redundancy\n    ", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_platform.py#L93", "class": "ShowRedundancy", "module_name": "show_platform"}, "iosxr": {"uid": "show_redundancy", "schema": "{\n'node': {\n  Any  (str) *: {\n    Optional  (str) primary_rmf_state: <class 'str'>,\n    'node_uptime_timestamp': <class 'str'>,\n    Optional  (str) primary_rmf_state_reason: <class 'str'>,\n    Optional  (str) standby_node: <class 'str'>,\n    Optional  (str) backup_process: <class 'str'>,\n    Optional  (str) last_switchover_timepstamp: <class 'str'>,\n    Optional  (str) time_since_last_switchover: <class 'str'>,\n    Optional  (str) standby_node_timestamp: <class 'str'>,\n    Optional  (str) time_since_standby_boot: <class 'str'>,\n    Optional  (str) standby_node_not_ready: <class 'str'>,\n    Optional  (str) time_since_standby_node_not_ready: <class 'str'>,\n    'last_reload_timestamp': <class 'str'>,\n    'time_since_last_reload': <class 'str'>,\n    Optional  (str) standby_node_ready: <class 'str'>,\n    Optional  (str) time_since_standby_node_ready: <class 'str'>,\n    'node_uptime': <class 'str'>,\n    Optional  (str) reload_cause: <class 'str'>,\n    Optional  (str) valid_partner: <class 'str'>,\n    Optional  (str) ready: <class 'str'>,\n    'node_uptime_in_seconds': <class 'int'>,\n    Optional  (str) group: {\n      Any  (str) *: {\n        'backup': <class 'str'>,\n        'primary': <class 'str'>,\n        'status': <class 'str'>,\n        },\n      },\n    'role': <class 'str'>,\n    },\n  },\n}", "doc": "Parser for show redundancy", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_platform.py#L1022", "class": "ShowRedundancy", "module_name": "show_platform"}, "iosxe": {"uid": "show_redundancy", "schema": "{\n'red_sys_info': {\n  'last_switchover_reason': <class 'str'>,\n  'maint_mode': <class 'str'>,\n  'conf_red_mode': <class 'str'>,\n  'oper_red_mode': <class 'str'>,\n  'standby_failures': <class 'str'>,\n  'hw_mode': <class 'str'>,\n  'communications': <class 'str'>,\n  'available_system_uptime': <class 'str'>,\n  Optional  (str) communications_reason: <class 'str'>,\n  'switchovers_system_experienced': <class 'str'>,\n  },\n'slot': {\n  Any  (str) *: {\n    'config_register': <class 'str'>,\n    'curr_sw_state': <class 'str'>,\n    Optional  (str) boot: <class 'str'>,\n    'uptime_in_curr_state': <class 'str'>,\n    Optional  (str) config_file: <class 'str'>,\n    Optional  (str) bootldr: <class 'str'>,\n    'image_ver': <class 'str'>,\n    },\n  },\n}", "doc": "Parser for show redundancy\n    parser class - implements detail parsing mechanisms for cli output.\n    ", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_platform.py#L688", "class": "ShowRedundancy", "module_name": "show_platform"}}, "show ip pim vrf {vrf} interface": {"ios": {"uid": "show_ip_pim_vrf_vrf_interface", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'interfaces': {\n      Any  (str) *: {\n        'address_family': {\n          Any  (str) *: {\n            Optional  (str) address: <class 'list'>,\n            Optional  (str) neighbor_count: <class 'int'>,\n            Optional  (str) version: <class 'int'>,\n            Optional  (str) dr_priority: <class 'int'>,\n            Optional  (str) mode: <class 'str'>,\n            Optional  (str) dr_address: <class 'str'>,\n            Optional  (str) hello_interval: <class 'int'>,\n            },\n          },\n        },\n      },\n    },\n  },\n}", "doc": "Parser for:\n            show ip pim interface\n            show ip pim vrf <vrf> interface", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_pim.py#L49", "class": "ShowIpPimInterface", "module_name": "show_pim"}, "iosxe": {"uid": "show_ip_pim_vrf_vrf_interface", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'interfaces': {\n      Any  (str) *: {\n        'address_family': {\n          Any  (str) *: {\n            Optional  (str) address: <class 'list'>,\n            Optional  (str) neighbor_count: <class 'int'>,\n            Optional  (str) version: <class 'int'>,\n            Optional  (str) dr_priority: <class 'int'>,\n            Optional  (str) mode: <class 'str'>,\n            Optional  (str) dr_address: <class 'str'>,\n            Optional  (str) hello_interval: <class 'int'>,\n            },\n          },\n        },\n      },\n    },\n  },\n}", "doc": "Parser for:\n            show ip pim interface\n            show ip pim vrf <vrf> interface", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_pim.py#L484", "class": "ShowIpPimInterface", "module_name": "show_pim"}}, "show l2route evpn mac evi {evi} mac {mac}": {"nxos": {"uid": "show_l2route_evpn_mac_evi_evi_mac_mac", "schema": "{\n'topology': {\n  Any  (str) *: {\n    'mac_address': {\n      Any  (str) *: {\n        'next_hops': <class 'str'>,\n        'prod': <class 'str'>,\n        'seq_no': <class 'str'>,\n        'flags': <class 'str'>,\n        },\n      },\n    },\n  },\n}", "doc": "Parser for show l2route evpn mac evi <WORD> mac <WORD>", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_l2route.py#L115", "class": "ShowL2routeEvpnMacEvi", "module_name": "show_l2route"}}, "show ip ospf database": {"iosxe": {"uid": "show_ip_ospf_database", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'address_family': {\n      Any  (str) *: {\n        'instance': {\n          Any  (str) *: {\n            Optional  (str) areas: {\n              Any  (str) *: {\n                'database': {\n                  'lsa_types': {\n                    Any  (str) *: {\n                      'lsa_type': <class 'int'>,\n                      'lsas': {\n                        Any  (str) *: {\n                          'ospfv2': {\n                            'header': {\n                              'age': <class 'int'>,\n                              Optional  (str) link_count: <class 'int'>,\n                              'seq_num': <class 'str'>,\n                              'checksum': <class 'str'>,\n                              'lsa_id': <class 'str'>,\n                              'adv_router': <class 'str'>,\n                              },\n                            },\n                          'lsa_id': <class 'str'>,\n                          'adv_router': <class 'str'>,\n                          },\n                        },\n                      },\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "doc": " Parser for:\n        * 'show ip ospf database'\n    ", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_ospf.py#L3182", "class": "ShowIpOspfDatabase", "module_name": "show_ospf"}}, "show ipv6 mroute": {"ios": {"uid": "show_ipv6_mroute", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'address_family': {\n      Any  (str) *: {\n        Optional  (str) multicast_group: {\n          Any  (str) *: {\n            Optional  (str) source_address: {\n              Any  (str) *: {\n                Optional  (str) rpf_nbr: <class 'str'>,\n                Optional  (str) rpf_info: <class 'str'>,\n                Optional  (str) msdp_learned: <class 'bool'>,\n                Optional  (str) expire: <class 'str'>,\n                Optional  (str) incoming_interface_list: {\n                  Any  (str) *: {\n                    'rpf_nbr': <class 'str'>,\n                    Optional  (str) rpf_info: <class 'str'>,\n                    },\n                  },\n                Optional  (str) rp: <class 'str'>,\n                Optional  (str) flags: <class 'str'>,\n                Optional  (str) rp_bit: <class 'bool'>,\n                Optional  (str) outgoing_interface_list: {\n                  Any  (str) *: {\n                    Optional  (str) vcd: <class 'str'>,\n                    'uptime': <class 'str'>,\n                    'state_mode': <class 'str'>,\n                    'expire': <class 'str'>,\n                    Optional  (str) flags: <class 'str'>,\n                    },\n                  },\n                Optional  (str) uptime: <class 'str'>,\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "doc": "Parser for:\n       show ipv6 mroute\n       show ipv6 mroute vrf <vrf>", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_mcast.py#L28", "class": "ShowIpv6Mroute", "module_name": "show_mcast"}, "iosxe": {"uid": "show_ipv6_mroute", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'address_family': {\n      Any  (str) *: {\n        Optional  (str) multicast_group: {\n          Any  (str) *: {\n            Optional  (str) source_address: {\n              Any  (str) *: {\n                Optional  (str) rpf_nbr: <class 'str'>,\n                Optional  (str) rpf_info: <class 'str'>,\n                Optional  (str) msdp_learned: <class 'bool'>,\n                Optional  (str) expire: <class 'str'>,\n                Optional  (str) incoming_interface_list: {\n                  Any  (str) *: {\n                    'rpf_nbr': <class 'str'>,\n                    Optional  (str) rpf_info: <class 'str'>,\n                    },\n                  },\n                Optional  (str) rp: <class 'str'>,\n                Optional  (str) flags: <class 'str'>,\n                Optional  (str) rp_bit: <class 'bool'>,\n                Optional  (str) outgoing_interface_list: {\n                  Any  (str) *: {\n                    Optional  (str) vcd: <class 'str'>,\n                    'uptime': <class 'str'>,\n                    'state_mode': <class 'str'>,\n                    'expire': <class 'str'>,\n                    Optional  (str) flags: <class 'str'>,\n                    },\n                  },\n                Optional  (str) uptime: <class 'str'>,\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "doc": "Parser for:\n       show ipv6 mroute\n       show ipv6 mroute vrf <vrf>", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_mcast.py#L292", "class": "ShowIpv6Mroute", "module_name": "show_mcast"}}, "show mpls ldp neighbor brief": {"iosxr": {"uid": "show_mpls_ldp_neighbor_brief", "schema": "{\n'peer': {\n  Any  (str) *: {\n    'labels': {\n      'ipv4': <class 'int'>,\n      'ipv6': <class 'int'>,\n      },\n    'up_time': <class 'str'>,\n    'gr': <class 'str'>,\n    'addresses': {\n      'ipv4': <class 'int'>,\n      'ipv6': <class 'int'>,\n      },\n    'nsr': <class 'str'>,\n    'discovery': {\n      'ipv4': <class 'int'>,\n      'ipv6': <class 'int'>,\n      },\n    },\n  },\n}", "doc": "Parser for show mpls ldp neighbor brief", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_mpls.py#L45", "class": "ShowMplsLdpNeighborBrief", "module_name": "show_mpls"}}, "show vtp status": {"iosxe": {"uid": "show_vtp_status", "schema": "{\n'vtp': {\n  'operating_mode': <class 'str'>,\n  'configuration_revision': <class 'int'>,\n  'existing_vlans': <class 'int'>,\n  'conf_last_modified_time': <class 'str'>,\n  'enabled': <class 'bool'>,\n  Optional  (str) version_capable: <class 'list'>,\n  'pruning_mode': <class 'bool'>,\n  'updater_id': <class 'str'>,\n  'traps_generation': <class 'bool'>,\n  'maximum_vlans': <class 'int'>,\n  'device_id': <class 'str'>,\n  Optional  (str) domain_name: <class 'str'>,\n  Optional  (str) updater_reason: <class 'str'>,\n  'conf_last_modified_by': <class 'str'>,\n  'updater_interface': <class 'str'>,\n  'version': <class 'str'>,\n  'md5_digest': <class 'str'>,\n  },\n}", "doc": "Parser for show vtp status ", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_vtp.py#L44", "class": "ShowVtpStatus", "module_name": "show_vtp"}}, "show ip bgp all": {"iosxe": {"uid": "show_ip_bgp_all", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'address_family': {\n      Any  (str) *: {\n        Optional  (str) pfx_limit: <class 'int'>,\n        Optional  (str) route_distinguisher: <class 'str'>,\n        Optional  (str) default_vrf: <class 'str'>,\n        Optional  (str) bgp_table_version: <class 'int'>,\n        Optional  (str) af_private_import_to_address_family: <class 'str'>,\n        Optional  (str) route_identifier: <class 'str'>,\n        Optional  (str) pfx_count: <class 'int'>,\n        Optional  (str) routes: {\n          Optional  (Any) Any  (str) *: {\n            Optional  (str) index: {\n              Optional  (Any) Any  (str) *: {\n                Optional  (str) weight: <class 'int'>,\n                Optional  (str) next_hop: <class 'str'>,\n                Optional  (str) path: <class 'str'>,\n                Optional  (str) status_codes: <class 'str'>,\n                Optional  (str) origin_codes: <class 'str'>,\n                Optional  (str) metric: <class 'int'>,\n                Optional  (str) localpref: <class 'int'>,\n                },\n              },\n            },\n          },\n        Optional  (str) vrf_route_identifier: <class 'str'>,\n        },\n      },\n    },\n  },\n}", "doc": " Parser for:\n        * 'show ip bgp all'\n        * 'show ip bgp {address_family} all'\n    ", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_bgp.py#L598", "class": "ShowIpBgpAll", "module_name": "show_bgp"}}, "show ip pim vrf {vrf} interface df": {"ios": {"uid": "show_ip_pim_vrf_vrf_interface_df", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'address_family': {\n      Any  (str) *: {\n        Optional  (str) rp: {\n          Optional  (str) bidir: {\n            Optional  (str) interface_df_election: {\n              Any  (str) *: {\n                Optional  (str) df_uptime: <class 'str'>,\n                Optional  (str) winner_metric: <class 'int'>,\n                Optional  (str) metric: <class 'int'>,\n                Optional  (str) interface_name: <class 'str'>,\n                Optional  (str) df_address: <class 'str'>,\n                Optional  (str) address: <class 'str'>,\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "doc": "Parser for show ip pim [vrf <WORD>] interface df", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_pim.py#L102", "class": "ShowIpPimInterfaceDf", "module_name": "show_pim"}, "iosxe": {"uid": "show_ip_pim_vrf_vrf_interface_df", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'address_family': {\n      Any  (str) *: {\n        Optional  (str) rp: {\n          Optional  (str) bidir: {\n            Optional  (str) interface_df_election: {\n              Any  (str) *: {\n                Optional  (str) df_uptime: <class 'str'>,\n                Optional  (str) winner_metric: <class 'int'>,\n                Optional  (str) metric: <class 'int'>,\n                Optional  (str) interface_name: <class 'str'>,\n                Optional  (str) df_address: <class 'str'>,\n                Optional  (str) address: <class 'str'>,\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "doc": "Parser for show ip pim [vrf <WORD>] interface df", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_pim.py#L1865", "class": "ShowIpPimInterfaceDf", "module_name": "show_pim"}}, "show bgp vrf {vrf} {address_family} policy statistics dampening": {"nxos": {"uid": "show_bgp_vrf_vrf_address_family_policy_statistics_dampening", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    Optional  (str) rpm_handle_count: <class 'int'>,\n    Optional  (str) route_map: {\n      Any  (str) *: {\n        Any  (str) *: {\n          'action': <class 'str'>,\n          'seq_num': <class 'int'>,\n          'total_accept_count': <class 'int'>,\n          Optional  (str) command: {\n            'command': <class 'str'>,\n            'compare_count': <class 'int'>,\n            'match_count': <class 'int'>,\n            },\n          'total_reject_count': <class 'int'>,\n          },\n        },\n      },\n    },\n  },\n}", "doc": "Parser for:\n        show bgp [vrf <vrf>] <address_family> policy statistics dampening\n        parser class implements detail parsing mechanisms for cli,xml output", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_bgp.py#L8928", "class": "ShowBgpPolicyStatisticsDampening", "module_name": "show_bgp"}}, "show mpls interfaces {interface}": {"iosxe": {"uid": "show_mpls_interfaces_interface", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'interfaces': {\n      Any  (str) *: {\n        Optional  (str) bgp: <class 'str'>,\n        Optional  (str) ip_labeling_enabled: {\n          Any  (str) *: {\n            'ldp': <class 'bool'>,\n            Optional  (str) interface_config: <class 'bool'>,\n            },\n          },\n        Optional  (str) lsp_tunnel_labeling_enabled: <class 'bool'>,\n        Optional  (str) tunnel: <class 'str'>,\n        Optional  (str) lp_frr_labeling_enabled: <class 'bool'>,\n        Optional  (str) mpls_operational: <class 'bool'>,\n        Optional  (str) bgp_labeling_enabled: <class 'bool'>,\n        Optional  (str) static: <class 'str'>,\n        Optional  (str) operational: <class 'str'>,\n        Optional  (str) mtu: <class 'int'>,\n        Optional  (str) type: <class 'str'>,\n        Optional  (str) session: <class 'str'>,\n        Optional  (str) ip: <class 'str'>,\n        },\n      },\n    },\n  },\n}", "doc": "Parser for\n        show mpls interfaces\n        show mpls interfaces all\n        show mpls interfaces vrf <vrf>\n        show mpls interfaces <interface>\n        show mpls interfaces <interface> detail\n        show mpls interfaces detail", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_mpls.py#L2049", "class": "ShowMplsInterface", "module_name": "show_mpls"}}, "show vlan remote-span": {"ios": {"uid": "show_vlan_remote-span", "schema": "{\n'vlan_id': {\n  Any  (str) *: {\n    'vlan_is_remote_span': <class 'bool'>,\n    },\n  },\n}", "doc": null, "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_vlan.py#L23", "class": "ShowVlanRemoteSpan", "module_name": "show_vlan"}, "iosxe": {"uid": "show_vlan_remote-span", "schema": "{\n'vlan_id': {\n  Any  (str) *: {\n    'vlan_is_remote_span': <class 'bool'>,\n    },\n  },\n}", "doc": "Parser for show vlan remote-span", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_vlan.py#L400", "class": "ShowVlanRemoteSpan", "module_name": "show_vlan"}}, "show interfaces {interface} stats": {"iosxe": {"uid": "show_interfaces_interface_stats", "schema": "{\nAny  (str) *: {\n  'switching_path': {\n    Any  (str) *: {\n      'chars_in': <class 'int'>,\n      'pkts_out': <class 'int'>,\n      'pkts_in': <class 'int'>,\n      'chars_out': <class 'int'>,\n      },\n    },\n  },\n}", "doc": "Parser for :\n        show interfaces <interface> stats\n        show interfaces stats", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_interface.py#L2820", "class": "ShowInterfacesStats", "module_name": "show_interface"}}, "show ip igmp vrf {vrf} groups detail": {"ios": {"uid": "show_ip_igmp_vrf_vrf_groups_detail", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'interface': {\n      Any  (str) *: {\n        Optional  (str) static_group: {\n          Any  (str) *: {\n            'source': <class 'str'>,\n            Optional  (str) source_flags: <class 'str'>,\n            'up_time': <class 'str'>,\n            Optional  (str) flags: <class 'str'>,\n            Optional  (str) expire: <class 'str'>,\n            Optional  (str) v3_exp: <class 'str'>,\n            Optional  (str) csr_exp: <class 'str'>,\n            'group': <class 'str'>,\n            'last_reporter': <class 'str'>,\n            Optional  (str) forward: <class 'bool'>,\n            },\n          },\n        'group': {\n          Any  (str) *: {\n            'group_mode': <class 'str'>,\n            'up_time': <class 'str'>,\n            Optional  (str) flags: <class 'str'>,\n            Optional  (str) expire: <class 'str'>,\n            'last_reporter': <class 'str'>,\n            Optional  (str) source: {\n              Any  (str) *: {\n                'csr_exp': <class 'str'>,\n                'v3_exp': <class 'str'>,\n                'up_time': <class 'str'>,\n                Optional  (str) flags: <class 'str'>,\n                'forward': <class 'bool'>,\n                },\n              },\n            },\n          },\n        Optional  (str) join_group: {\n          Any  (str) *: {\n            'source': <class 'str'>,\n            'up_time': <class 'str'>,\n            Optional  (str) source_flags: <class 'str'>,\n            Optional  (str) expire: <class 'str'>,\n            Optional  (str) flags: <class 'str'>,\n            Optional  (str) v3_exp: <class 'str'>,\n            Optional  (str) forward: <class 'bool'>,\n            'group': <class 'str'>,\n            'last_reporter': <class 'str'>,\n            Optional  (str) csr_exp: <class 'str'>,\n            },\n          },\n        },\n      },\n    },\n  },\n}", "doc": "\n    Parser for 'show ip igmp groups detail'\n    Parser for 'show ip igmp vrf <WORD> groups detail'\n    ", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_igmp.py#L24", "class": "ShowIpIgmpGroupsDetail", "module_name": "show_igmp"}, "iosxe": {"uid": "show_ip_igmp_vrf_vrf_groups_detail", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'interface': {\n      Any  (str) *: {\n        Optional  (str) static_group: {\n          Any  (str) *: {\n            'source': <class 'str'>,\n            Optional  (str) source_flags: <class 'str'>,\n            'up_time': <class 'str'>,\n            Optional  (str) flags: <class 'str'>,\n            Optional  (str) expire: <class 'str'>,\n            Optional  (str) v3_exp: <class 'str'>,\n            Optional  (str) csr_exp: <class 'str'>,\n            'group': <class 'str'>,\n            'last_reporter': <class 'str'>,\n            Optional  (str) forward: <class 'bool'>,\n            },\n          },\n        'group': {\n          Any  (str) *: {\n            'group_mode': <class 'str'>,\n            'up_time': <class 'str'>,\n            Optional  (str) flags: <class 'str'>,\n            Optional  (str) expire: <class 'str'>,\n            'last_reporter': <class 'str'>,\n            Optional  (str) source: {\n              Any  (str) *: {\n                'csr_exp': <class 'str'>,\n                'v3_exp': <class 'str'>,\n                'up_time': <class 'str'>,\n                Optional  (str) flags: <class 'str'>,\n                'forward': <class 'bool'>,\n                },\n              },\n            },\n          },\n        Optional  (str) join_group: {\n          Any  (str) *: {\n            'source': <class 'str'>,\n            'up_time': <class 'str'>,\n            Optional  (str) source_flags: <class 'str'>,\n            Optional  (str) expire: <class 'str'>,\n            Optional  (str) flags: <class 'str'>,\n            Optional  (str) v3_exp: <class 'str'>,\n            Optional  (str) forward: <class 'bool'>,\n            'group': <class 'str'>,\n            'last_reporter': <class 'str'>,\n            Optional  (str) csr_exp: <class 'str'>,\n            },\n          },\n        },\n      },\n    },\n  },\n}", "doc": "\n    Parser for 'show ip igmp groups detail'\n    Parser for 'show ip igmp vrf <WORD> groups detail'\n    ", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_igmp.py#L403", "class": "ShowIpIgmpGroupsDetail", "module_name": "show_igmp"}}, "show ipv6 rip database": {"iosxe": {"uid": "show_ipv6_rip_database", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'address_family': {\n      Any  (str) *: {\n        'routes': {\n          Any  (str) *: {\n            'index': {\n              Any  (str) *: {\n                Optional  (str) installed: <class 'bool'>,\n                Optional  (str) next_hop: <class 'str'>,\n                Optional  (str) route_type: <class 'str'>,\n                Optional  (str) expire_time: <class 'str'>,\n                Optional  (str) interface: <class 'str'>,\n                Optional  (str) metric: <class 'int'>,\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "doc": "Parser for :\n           show ipv6 rip database\n           show ipv6 rip database vrf {vrf}\n           ", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_rip.py#L213", "class": "ShowIpv6RipDatabase", "module_name": "show_rip"}}, "show ipv6 protocols | sec rip": {"iosxe": {"uid": "show_ipv6_protocols___sec_rip", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'address_family': {\n      Any  (str) *: {\n        Optional  (str) instance: {\n          Any  (str) *: {\n            Optional  (str) redistribute: {\n              Any  (str) *: {\n                Optional  (str) route_policy: <class 'str'>,\n                Optional  (str) metric: <class 'int'>,\n                },\n              },\n            Optional  (str) interfaces: {\n              Any  (str) *: {\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "doc": "Parser for :\n           show ipv6 protocols | sec rip\n           show ipv6 protocols vrf {vrf} | sec rip\n           ", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_protocols.py#L1128", "class": "ShowIpv6ProtocolsSectionRip", "module_name": "show_protocols"}}, "show ip bgp {address_family} neighbors": {"iosxe": {"uid": "show_ip_bgp_address_family_neighbors", "schema": "{\nOptional  (str) list_of_neighbors: <class 'list'>,\n'vrf': {\n  Any  (str) *: {\n    'neighbor': {\n      Any  (str) *: {\n        Optional  (str) bgp_event_timer: {\n          'starts': {\n            Any  (str) *: <class 'int'>,\n            },\n          'wakeups': {\n            Any  (str) *: <class 'int'>,\n            },\n          'next': {\n            Any  (str) *: <class 'str'>,\n            },\n          },\n        'address_family': {\n          Any  (str) *: {\n            Optional  (str) refresh_epoch: <class 'int'>,\n            Optional  (str) session_state: <class 'str'>,\n            Optional  (str) max_nlri: <class 'int'>,\n            Optional  (str) up_time: <class 'str'>,\n            Optional  (str) min_nlri: <class 'int'>,\n            Optional  (str) down_time: <class 'str'>,\n            Optional  (str) refresh_activity_counters: {\n              'sent': {\n                Any  (str) *: <class 'int'>,\n                },\n              'received': {\n                Any  (str) *: <class 'int'>,\n                },\n              },\n            Optional  (str) local_policy_denied_prefixes_counters: {\n              'inbound': {\n                Any  (str) *: Any  (str) *,\n                },\n              'outbound': {\n                Any  (str) *: Any  (str) *,\n                },\n              },\n            Optional  (str) last_detected_dynamic_slow_peer: <class 'str'>,\n            Optional  (str) last_read: <class 'str'>,\n            Optional  (str) dynamic_slow_peer_recovered: <class 'str'>,\n            Optional  (str) last_write: <class 'str'>,\n            Optional  (str) last_sent_refresh_start_of_rib: <class 'str'>,\n            Optional  (str) current_time: <class 'str'>,\n            Optional  (str) last_received_refresh_start_of_rib: <class 'str'>,\n            Optional  (str) bgp_table_version: <class 'int'>,\n            Optional  (str) last_sent_refresh_end_of_rib: <class 'str'>,\n            Optional  (str) neighbor_version: <class 'str'>,\n            Optional  (str) last_received_refresh_end_of_rib: <class 'str'>,\n            Optional  (str) output_queue_size: <class 'int'>,\n            Optional  (str) refresh_out: <class 'int'>,\n            Optional  (str) index: <class 'int'>,\n            Optional  (str) refresh_in: <class 'int'>,\n            Optional  (str) advertise_bit: <class 'int'>,\n            Optional  (str) route_reflector_client: <class 'bool'>,\n            Optional  (str) update_group_member: <class 'int'>,\n            Optional  (str) community_attribute_sent: <class 'bool'>,\n            Optional  (str) extended_community_attribute_sent: <class 'bool'>,\n            Optional  (str) prefix_activity_counters: {\n              'sent': {\n                Any  (str) *: Any  (str) *,\n                },\n              'received': {\n                Any  (str) *: Any  (str) *,\n                },\n              },\n            Optional  (str) suppress_ldp_signaling: <class 'bool'>,\n            Optional  (str) slow_peer_detection: <class 'bool'>,\n            Optional  (str) slow_peer_split_update_group_dynamic: <class 'bool'>,\n            },\n          },\n        'bgp_neighbor_counters': {\n          'messages': {\n            'sent': {\n              'notifications': <class 'int'>,\n              'route_refresh': <class 'int'>,\n              'total': <class 'int'>,\n              'opens': <class 'int'>,\n              'keepalives': <class 'int'>,\n              'updates': <class 'int'>,\n              },\n            'in_queue_depth': <class 'int'>,\n            'received': {\n              'notifications': <class 'int'>,\n              'route_refresh': <class 'int'>,\n              'total': <class 'int'>,\n              'opens': <class 'int'>,\n              'keepalives': <class 'int'>,\n              'updates': <class 'int'>,\n              },\n            'out_queue_depth': <class 'int'>,\n            },\n          },\n        'bgp_negotiated_keepalive_timers': {\n          'keepalive_interval': <class 'int'>,\n          'hold_time': <class 'int'>,\n          Optional  (str) min_holdtime: <class 'int'>,\n          },\n        'link': <class 'str'>,\n        'router_id': <class 'str'>,\n        Optional  (str) bgp_session_transport: {\n          Optional  (str) enqueued_packets: {\n            'mis_ordered_packet': <class 'int'>,\n            'input_packet': <class 'int'>,\n            'retransmit_packet': <class 'int'>,\n            },\n          Optional  (str) iss: <class 'int'>,\n          Optional  (str) snduna: <class 'int'>,\n          'connection': {\n            Optional  (str) reset_reason: <class 'str'>,\n            'dropped': <class 'int'>,\n            'established': <class 'int'>,\n            'last_reset': <class 'str'>,\n            },\n          Optional  (str) sndnxt: <class 'int'>,\n          Optional  (str) irs: <class 'int'>,\n          'address_tracking_status': <class 'str'>,\n          Optional  (str) sndwnd: <class 'int'>,\n          Optional  (str) snd_scale: <class 'int'>,\n          Optional  (str) maxrcvwnd: <class 'int'>,\n          Optional  (str) rcvwnd: <class 'int'>,\n          Optional  (str) rcv_scale: <class 'int'>,\n          Optional  (str) delrcvwnd: <class 'int'>,\n          Optional  (str) srtt: <class 'int'>,\n          'min_time_between_advertisement_runs': <class 'int'>,\n          Optional  (str) rtto: <class 'int'>,\n          Optional  (str) rtv: <class 'int'>,\n          Optional  (str) krtt: <class 'int'>,\n          Optional  (str) min_rtt: <class 'int'>,\n          Optional  (str) max_rtt: <class 'int'>,\n          Optional  (str) ack_hold: <class 'int'>,\n          Optional  (str) uptime: <class 'int'>,\n          Optional  (str) sent_idletime: <class 'int'>,\n          Optional  (str) receive_idletime: <class 'int'>,\n          Optional  (str) tcp_connection: <class 'bool'>,\n          Optional  (str) status_flags: <class 'str'>,\n          Optional  (str) option_flags: <class 'str'>,\n          Optional  (str) ip_precedence_value: <class 'int'>,\n          'tcp_path_mtu_discovery': <class 'str'>,\n          Optional  (str) transport: {\n            'local_port': <class 'str'>,\n            'local_host': <class 'str'>,\n            'foreign_port': <class 'str'>,\n            Optional  (str) mss: <class 'int'>,\n            'foreign_host': <class 'str'>,\n            },\n          Optional  (str) datagram: {\n            'datagram_sent': {\n              'second_congestion': <class 'int'>,\n              'with_data': <class 'int'>,\n              'retransmit': <class 'int'>,\n              'partialack': <class 'int'>,\n              'value': <class 'int'>,\n              'fastretransmit': <class 'int'>,\n              'total_data': <class 'int'>,\n              },\n            'datagram_received': {\n              'out_of_order': <class 'int'>,\n              'with_data': <class 'int'>,\n              'total_data': <class 'int'>,\n              'value': <class 'int'>,\n              },\n            },\n          Optional  (str) graceful_restart: <class 'str'>,\n          Optional  (str) packet_fast_path: <class 'int'>,\n          Optional  (str) gr_restart_time: <class 'int'>,\n          Optional  (str) packet_fast_processed: <class 'int'>,\n          Optional  (str) gr_stalepath_time: <class 'int'>,\n          Optional  (str) packet_slow_path: <class 'int'>,\n          Optional  (str) connection_state: <class 'str'>,\n          Optional  (str) fast_lock_acquisition_failures: <class 'int'>,\n          Optional  (str) io_status: <class 'int'>,\n          Optional  (str) lock_slow_path: <class 'int'>,\n          Optional  (str) unread_input_bytes: <class 'int'>,\n          Optional  (str) tcp_semaphore: <class 'str'>,\n          Optional  (str) ecn_connection: <class 'str'>,\n          Optional  (str) tcp_semaphore_status: <class 'str'>,\n          Optional  (str) minimum_incoming_ttl: <class 'int'>,\n          Optional  (str) sso: <class 'bool'>,\n          Optional  (str) outgoing_ttl: <class 'int'>,\n          Optional  (str) rcvnxt: <class 'int'>,\n          Optional  (str) connection_tableid: <class 'int'>,\n          'rib_route_ip': <class 'str'>,\n          Optional  (str) maximum_output_segment_queue_size: <class 'int'>,\n          },\n        'remote_as': <class 'int'>,\n        'bgp_version': <class 'int'>,\n        'session_state': <class 'str'>,\n        'shutdown': <class 'bool'>,\n        Optional  (str) local_as: <class 'int'>,\n        'bgp_negotiated_capabilities': {\n          'four_octets_asn': <class 'str'>,\n          Optional  (str) vpnv4_unicast: <class 'str'>,\n          Optional  (str) graceful_restart: <class 'str'>,\n          'route_refresh': <class 'str'>,\n          Optional  (str) vpnv6_unicast: <class 'str'>,\n          'stateful_switchover': <class 'str'>,\n          Optional  (str) ipv4_unicast: <class 'str'>,\n          Optional  (str) remote_restart_timer: <class 'int'>,\n          Optional  (str) ipv6_unicast: <class 'str'>,\n          Optional  (str) l2vpn_vpls: <class 'str'>,\n          Optional  (str) l2vpn_evpn: <class 'str'>,\n          Optional  (str) vpnv4_multicast: <class 'str'>,\n          Optional  (str) multisession: <class 'str'>,\n          Optional  (str) graceful_restart_af_advertised_by_peer: <class 'list'>,\n          Optional  (str) vpnv6_multicast: <class 'str'>,\n          'enhanced_refresh': <class 'str'>,\n          Optional  (str) mvpnv4_multicast: <class 'str'>,\n          Optional  (str) mvpnv6_multicast: <class 'str'>,\n          },\n        Optional  (str) description: <class 'str'>,\n        },\n      },\n    },\n  },\n}", "doc": " Parser for:\n        * 'show ip bgp neighbors'\n        * 'show ip bgp neighbors {neighbor}'\n        * 'show ip bgp {address_family} neighbors'\n        * 'show ip bgp {address_family} neighbors {neighbor}'\n        * 'show ip bgp {address_family} vrf {vrf} neighbors'\n        * 'show ip bgp {address_family} vrf {vrf} neighbors {neighbor}'\n    ", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_bgp.py#L3872", "class": "ShowIpBgpNeighbors", "module_name": "show_bgp"}}, "show ip ospf database opaque-area": {"ios": {"uid": "show_ip_ospf_database_opaque-area", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'address_family': {\n      Any  (str) *: {\n        'instance': {\n          Any  (str) *: {\n            Optional  (str) areas: {\n              Any  (str) *: {\n                'database': {\n                  'lsa_types': {\n                    Any  (str) *: {\n                      'lsa_type': <class 'int'>,\n                      'lsas': {\n                        Any  (str) *: {\n                          'ospfv2': {\n                            'header': {\n                              'opaque_type': <class 'int'>,\n                              'seq_num': <class 'str'>,\n                              Optional  (str) mpls_te_router_id: <class 'str'>,\n                              'fragment_number': <class 'int'>,\n                              'opaque_id': <class 'int'>,\n                              'checksum': <class 'str'>,\n                              'type': <class 'int'>,\n                              'option': <class 'str'>,\n                              'age': <class 'int'>,\n                              'option_desc': <class 'str'>,\n                              'length': <class 'int'>,\n                              'lsa_id': <class 'str'>,\n                              'adv_router': <class 'str'>,\n                              },\n                            'body': {\n                              'opaque': {\n                                'num_of_links': <class 'int'>,\n                                Optional  (str) link_tlvs: {\n                                  Any  (str) *: {\n                                    'link_type': <class 'int'>,\n                                    Optional  (str) unreserved_bandwidths: {\n                                      Any  (str) *: {\n                                        'unreserved_bandwidth': <class 'int'>,\n                                        'priority': <class 'int'>,\n                                        },\n                                      },\n                                    'max_reservable_bandwidth': <class 'int'>,\n                                    Optional  (str) igp_metric: <class 'int'>,\n                                    'admin_group': <class 'str'>,\n                                    Optional  (str) total_priority: <class 'int'>,\n                                    'te_metric': <class 'int'>,\n                                    'link_id': <class 'str'>,\n                                    Optional  (str) extended_admin_group: {\n                                      'length': <class 'int'>,\n                                      Optional  (str) groups: {\n                                        Any  (str) *: {\n                                          'value': <class 'int'>,\n                                          },\n                                        },\n                                      },\n                                    Optional  (str) local_if_ipv4_addrs: {\n                                      Any  (str) *: {\n                                        },\n                                      },\n                                    Optional  (str) unknown_tlvs: {\n                                      Any  (str) *: {\n                                        'length': <class 'int'>,\n                                        'type': <class 'int'>,\n                                        'value': <class 'str'>,\n                                        },\n                                      },\n                                    'max_bandwidth': <class 'int'>,\n                                    Optional  (str) remote_if_ipv4_addrs: {\n                                      Any  (str) *: {\n                                        },\n                                      },\n                                    'link_name': <class 'str'>,\n                                    },\n                                  },\n                                },\n                              },\n                            },\n                          'lsa_id': <class 'str'>,\n                          'adv_router': <class 'str'>,\n                          },\n                        },\n                      },\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "doc": " Parser for \"show ip ospf database opaque-area\" ", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_ospf.py#L93", "class": "ShowIpOspfDatabaseOpaqueArea", "module_name": "show_ospf"}, "iosxe": {"uid": "show_ip_ospf_database_opaque-area", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'address_family': {\n      Any  (str) *: {\n        'instance': {\n          Any  (str) *: {\n            Optional  (str) areas: {\n              Any  (str) *: {\n                'database': {\n                  'lsa_types': {\n                    Any  (str) *: {\n                      'lsa_type': <class 'int'>,\n                      'lsas': {\n                        Any  (str) *: {\n                          'ospfv2': {\n                            'header': {\n                              'opaque_type': <class 'int'>,\n                              'seq_num': <class 'str'>,\n                              Optional  (str) mpls_te_router_id: <class 'str'>,\n                              'fragment_number': <class 'int'>,\n                              'opaque_id': <class 'int'>,\n                              'checksum': <class 'str'>,\n                              'type': <class 'int'>,\n                              'option': <class 'str'>,\n                              'age': <class 'int'>,\n                              'option_desc': <class 'str'>,\n                              'length': <class 'int'>,\n                              'lsa_id': <class 'str'>,\n                              'adv_router': <class 'str'>,\n                              },\n                            'body': {\n                              'opaque': {\n                                'num_of_links': <class 'int'>,\n                                Optional  (str) link_tlvs: {\n                                  Any  (str) *: {\n                                    'link_type': <class 'int'>,\n                                    Optional  (str) unreserved_bandwidths: {\n                                      Any  (str) *: {\n                                        'unreserved_bandwidth': <class 'int'>,\n                                        'priority': <class 'int'>,\n                                        },\n                                      },\n                                    'max_reservable_bandwidth': <class 'int'>,\n                                    Optional  (str) igp_metric: <class 'int'>,\n                                    'admin_group': <class 'str'>,\n                                    Optional  (str) total_priority: <class 'int'>,\n                                    'te_metric': <class 'int'>,\n                                    'link_id': <class 'str'>,\n                                    Optional  (str) extended_admin_group: {\n                                      'length': <class 'int'>,\n                                      Optional  (str) groups: {\n                                        Any  (str) *: {\n                                          'value': <class 'int'>,\n                                          },\n                                        },\n                                      },\n                                    Optional  (str) local_if_ipv4_addrs: {\n                                      Any  (str) *: {\n                                        },\n                                      },\n                                    Optional  (str) unknown_tlvs: {\n                                      Any  (str) *: {\n                                        'length': <class 'int'>,\n                                        'type': <class 'int'>,\n                                        'value': <class 'str'>,\n                                        },\n                                      },\n                                    'max_bandwidth': <class 'int'>,\n                                    Optional  (str) remote_if_ipv4_addrs: {\n                                      Any  (str) *: {\n                                        },\n                                      },\n                                    'link_name': <class 'str'>,\n                                    },\n                                  },\n                                },\n                              },\n                            },\n                          'lsa_id': <class 'str'>,\n                          'adv_router': <class 'str'>,\n                          },\n                        },\n                      },\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "doc": " Parser for:\n        * 'show ip ospf database opaque-area'\n    ", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_ospf.py#L4544", "class": "ShowIpOspfDatabaseOpaqueArea", "module_name": "show_ospf"}}, "show policy-map interface {interface} class {class_name}": {"iosxe": {"uid": "show_policy-map_interface_interface_class_class_name", "schema": "{\n}", "doc": " Parser for\n        * 'show policy-map interface {interface} class {class_name}'\n        * 'show policy-map interface {interface}'\n        * 'show policy-map interface'\n    ", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_policy_map.py#L440", "class": "ShowPolicyMapInterface", "module_name": "show_policy_map"}}, "show ip access-lists": {"ios": {"uid": "show_ip_access-lists", "schema": "{\nAny  (str) *: {\n  'type': <class 'str'>,\n  'name': <class 'str'>,\n  Optional  (str) per_user: <class 'bool'>,\n  Optional  (str) aces: {\n    Any  (str) *: {\n      'matches': {\n        Optional  (str) l4: {\n          Any  (str) *: {\n            Optional  (str) window_size: <class 'int'>,\n            Optional  (str) urgent_pointer: <class 'int'>,\n            Optional  (str) data_offset: <class 'int'>,\n            Optional  (str) options: <class 'int'>,\n            Optional  (str) destination_port: {\n              Optional  (str) operator: {\n                'port': <class 'int'>,\n                'operator': <class 'str'>,\n                },\n              Optional  (str) range: {\n                'upper_port': <class 'int'>,\n                'lower_port': <class 'int'>,\n                },\n              },\n            Optional  (str) source_port: {\n              Optional  (str) operator: {\n                'port': <class 'str'>,\n                'operator': <class 'str'>,\n                },\n              Optional  (str) range: {\n                'upper_port': <class 'int'>,\n                'lower_port': <class 'int'>,\n                },\n              },\n            Optional  (str) code: <class 'int'>,\n            Optional  (str) flags: <class 'str'>,\n            Optional  (str) acknowledgement_number: <class 'int'>,\n            Optional  (str) reserved: <class 'int'>,\n            Optional  (str) type: <class 'int'>,\n            Optional  (str) options_name: <class 'str'>,\n            Optional  (str) established: <class 'bool'>,\n            },\n          },\n        Optional  (str) l2: {\n          'eth': {\n            'destination_mac_address': <class 'str'>,\n            Optional  (str) vlan: <class 'int'>,\n            Optional  (str) lsap: <class 'str'>,\n            Optional  (str) protocol_family: <class 'str'>,\n            Optional  (str) ether_type: <class 'str'>,\n            Optional  (str) cos: <class 'int'>,\n            'source_mac_address': <class 'str'>,\n            },\n          },\n        Optional  (str) l3: {\n          Any  (str) *: {\n            'protocol': <class 'str'>,\n            Optional  (str) ttl: <class 'int'>,\n            'destination_network': {\n              Any  (str) *: {\n                'destination_network': <class 'str'>,\n                },\n              },\n            Optional  (str) precedence: <class 'str'>,\n            Optional  (str) ttl_operator: <class 'str'>,\n            Optional  (str) dscp: <class 'str'>,\n            'source_network': {\n              Any  (str) *: {\n                'source_network': <class 'str'>,\n                },\n              },\n            Optional  (str) precedence_code: <class 'int'>,\n            },\n          },\n        },\n      Optional  (str) statistics: {\n        'matched_packets': <class 'int'>,\n        },\n      'name': <class 'str'>,\n      'actions': {\n        'forwarding': <class 'str'>,\n        Optional  (str) logging: <class 'str'>,\n        },\n      },\n    },\n  },\n}", "doc": "Parser for show access-lists\n                  show ip access-lists\n                  show ip access-lists <acl>\n                  show ipv6 access-lists\n                  show ipv6 access-lists <acl>", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_acl.py#L9", "class": "ShowAccessLists", "module_name": "show_acl"}, "iosxe": {"uid": "show_ip_access-lists", "schema": "{\nAny  (str) *: {\n  'type': <class 'str'>,\n  'name': <class 'str'>,\n  Optional  (str) per_user: <class 'bool'>,\n  Optional  (str) aces: {\n    Any  (str) *: {\n      'matches': {\n        Optional  (str) l4: {\n          Any  (str) *: {\n            Optional  (str) window_size: <class 'int'>,\n            Optional  (str) urgent_pointer: <class 'int'>,\n            Optional  (str) data_offset: <class 'int'>,\n            Optional  (str) options: <class 'int'>,\n            Optional  (str) destination_port: {\n              Optional  (str) operator: {\n                'port': <class 'int'>,\n                'operator': <class 'str'>,\n                },\n              Optional  (str) range: {\n                'upper_port': <class 'int'>,\n                'lower_port': <class 'int'>,\n                },\n              },\n            Optional  (str) source_port: {\n              Optional  (str) operator: {\n                'port': <class 'str'>,\n                'operator': <class 'str'>,\n                },\n              Optional  (str) range: {\n                'upper_port': <class 'int'>,\n                'lower_port': <class 'int'>,\n                },\n              },\n            Optional  (str) code: <class 'int'>,\n            Optional  (str) flags: <class 'str'>,\n            Optional  (str) acknowledgement_number: <class 'int'>,\n            Optional  (str) reserved: <class 'int'>,\n            Optional  (str) type: <class 'int'>,\n            Optional  (str) options_name: <class 'str'>,\n            Optional  (str) established: <class 'bool'>,\n            },\n          },\n        Optional  (str) l2: {\n          'eth': {\n            'destination_mac_address': <class 'str'>,\n            Optional  (str) vlan: <class 'int'>,\n            Optional  (str) lsap: <class 'str'>,\n            Optional  (str) protocol_family: <class 'str'>,\n            Optional  (str) ether_type: <class 'str'>,\n            Optional  (str) cos: <class 'int'>,\n            'source_mac_address': <class 'str'>,\n            },\n          },\n        Optional  (str) l3: {\n          Any  (str) *: {\n            'protocol': <class 'str'>,\n            Optional  (str) ttl: <class 'int'>,\n            'destination_network': {\n              Any  (str) *: {\n                'destination_network': <class 'str'>,\n                },\n              },\n            Optional  (str) precedence: <class 'str'>,\n            Optional  (str) ttl_operator: <class 'str'>,\n            Optional  (str) dscp: <class 'str'>,\n            'source_network': {\n              Any  (str) *: {\n                'source_network': <class 'str'>,\n                },\n              },\n            Optional  (str) precedence_code: <class 'int'>,\n            },\n          },\n        },\n      Optional  (str) statistics: {\n        'matched_packets': <class 'int'>,\n        },\n      'name': <class 'str'>,\n      'actions': {\n        'forwarding': <class 'str'>,\n        Optional  (str) logging: <class 'str'>,\n        },\n      },\n    },\n  },\n}", "doc": "Parser for show access-lists\n                  show ip access-lists\n                  show ip access-lists <acl>\n                  show ipv6 access-lists\n                  show ipv6 access-lists <acl>", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_acl.py#L118", "class": "ShowAccessLists", "module_name": "show_acl"}}, "show version RP {rp} {status}": {"ios": {"uid": "show_version_RP_rp_status", "schema": "{\n'rp': {\n  Optional  (str) active: {\n    'slot': {\n      Any  (str) *: {\n        'package': {\n          Any  (str) *: {\n            'file': <class 'str'>,\n            'built_time': <class 'str'>,\n            'version': <class 'str'>,\n            'built_by': <class 'str'>,\n            'status': <class 'str'>,\n            'file_sha1_checksum': <class 'str'>,\n            },\n          },\n        },\n      },\n    },\n  Optional  (str) standby: {\n    'slot': {\n      Any  (str) *: {\n        'package': {\n          Any  (str) *: {\n            'file': <class 'str'>,\n            'built_time': <class 'str'>,\n            'version': <class 'str'>,\n            'built_by': <class 'str'>,\n            'status': <class 'str'>,\n            'file_sha1_checksum': <class 'str'>,\n            },\n          },\n        },\n      },\n    },\n  },\n}", "doc": "Parser for show version RP active [running|provisioned|installed]\n                  show version RP standby [running|provisioned|installed]", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_platform.py#L310", "class": "ShowVersionRp", "module_name": "show_platform"}, "iosxe": {"uid": "show_version_RP_rp_status", "schema": "{\n'rp': {\n  Optional  (str) active: {\n    'slot': {\n      Any  (str) *: {\n        'package': {\n          Any  (str) *: {\n            'file': <class 'str'>,\n            'built_time': <class 'str'>,\n            'version': <class 'str'>,\n            'built_by': <class 'str'>,\n            'status': <class 'str'>,\n            'file_sha1_checksum': <class 'str'>,\n            },\n          },\n        },\n      },\n    },\n  Optional  (str) standby: {\n    'slot': {\n      Any  (str) *: {\n        'package': {\n          Any  (str) *: {\n            'file': <class 'str'>,\n            'built_time': <class 'str'>,\n            'version': <class 'str'>,\n            'built_by': <class 'str'>,\n            'status': <class 'str'>,\n            'file_sha1_checksum': <class 'str'>,\n            },\n          },\n        },\n      },\n    },\n  },\n}", "doc": "Parser for show version RP active [running|provisioned|installed]\n                  show version RP standby [running|provisioned|installed]", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_platform.py#L2412", "class": "ShowVersionRp", "module_name": "show_platform"}}, "show ipv6 interface {interface}": {"ios": {"uid": "show_ipv6_interface_interface", "schema": "{\nAny  (str) *: {\n  'oper_status': <class 'str'>,\n  Optional  (str) addresses_config_method: <class 'str'>,\n  'enabled': <class 'bool'>,\n  Optional  (str) mtu: <class 'int'>,\n  Optional  (str) autoconf: <class 'bool'>,\n  Optional  (str) vrf: <class 'str'>,\n  'ipv6': {\n    Any  (str) *: {\n      'ip': <class 'str'>,\n      Optional  (str) prefix_length: <class 'str'>,\n      Optional  (str) autoconf: {\n        'valid_lifetime': <class 'int'>,\n        'preferred_lifetime': <class 'int'>,\n        },\n      Optional  (str) eui_64: <class 'bool'>,\n      Optional  (str) anycast: <class 'bool'>,\n      Optional  (str) virtual: <class 'bool'>,\n      Optional  (str) origin: <class 'str'>,\n      Optional  (str) status: <class 'str'>,\n      },\n    'enabled': <class 'bool'>,\n    Optional  (str) icmp: {\n      Optional  (str) redirects: <class 'bool'>,\n      Optional  (str) error_messages_limited: <class 'int'>,\n      Optional  (str) unreachables: <class 'str'>,\n      },\n    Optional  (str) unnumbered: {\n      'interface_ref': <class 'str'>,\n      },\n    Optional  (str) nd: {\n      Optional  (str) router_advertisements_interval: <class 'int'>,\n      Optional  (str) dad_attempts: <class 'int'>,\n      Optional  (str) ns_retransmit_interval: <class 'int'>,\n      Optional  (str) advertised_reachable_time: <class 'int'>,\n      Optional  (str) reachable_time: <class 'int'>,\n      Optional  (str) router_advertisements_live: <class 'int'>,\n      Optional  (str) advertised_retransmit_interval: <class 'int'>,\n      Optional  (str) using_time: <class 'int'>,\n      Optional  (str) dad_enabled: <class 'bool'>,\n      Optional  (str) advertised_retransmit_interval_unspecified: <class 'bool'>,\n      Optional  (str) advertised_default_router_preference: <class 'str'>,\n      Optional  (str) advertised_reachable_time_unspecified: <class 'bool'>,\n      },\n    },\n  Optional  (str) joined_group_addresses: <class 'list'>,\n  },\n}", "doc": "Parser for show ipv6 interface", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_interface.py#L63", "class": "ShowIpv6Interface", "module_name": "show_interface"}, "iosxe": {"uid": "show_ipv6_interface_interface", "schema": "{\nAny  (str) *: {\n  'oper_status': <class 'str'>,\n  Optional  (str) addresses_config_method: <class 'str'>,\n  'enabled': <class 'bool'>,\n  Optional  (str) mtu: <class 'int'>,\n  Optional  (str) autoconf: <class 'bool'>,\n  Optional  (str) vrf: <class 'str'>,\n  'ipv6': {\n    Any  (str) *: {\n      'ip': <class 'str'>,\n      Optional  (str) prefix_length: <class 'str'>,\n      Optional  (str) autoconf: {\n        'valid_lifetime': <class 'int'>,\n        'preferred_lifetime': <class 'int'>,\n        },\n      Optional  (str) eui_64: <class 'bool'>,\n      Optional  (str) anycast: <class 'bool'>,\n      Optional  (str) virtual: <class 'bool'>,\n      Optional  (str) origin: <class 'str'>,\n      Optional  (str) status: <class 'str'>,\n      },\n    'enabled': <class 'bool'>,\n    Optional  (str) icmp: {\n      Optional  (str) redirects: <class 'bool'>,\n      Optional  (str) error_messages_limited: <class 'int'>,\n      Optional  (str) unreachables: <class 'str'>,\n      },\n    Optional  (str) unnumbered: {\n      'interface_ref': <class 'str'>,\n      },\n    Optional  (str) nd: {\n      Optional  (str) router_advertisements_interval: <class 'int'>,\n      Optional  (str) dad_attempts: <class 'int'>,\n      Optional  (str) ns_retransmit_interval: <class 'int'>,\n      Optional  (str) advertised_reachable_time: <class 'int'>,\n      Optional  (str) reachable_time: <class 'int'>,\n      Optional  (str) router_advertisements_live: <class 'int'>,\n      Optional  (str) advertised_retransmit_interval: <class 'int'>,\n      Optional  (str) using_time: <class 'int'>,\n      Optional  (str) dad_enabled: <class 'bool'>,\n      Optional  (str) advertised_retransmit_interval_unspecified: <class 'bool'>,\n      Optional  (str) advertised_default_router_preference: <class 'str'>,\n      Optional  (str) advertised_reachable_time_unspecified: <class 'bool'>,\n      },\n    },\n  Optional  (str) joined_group_addresses: <class 'list'>,\n  },\n}", "doc": "Parser for show ipv6 interface", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_interface.py#L2176", "class": "ShowIpv6Interface", "module_name": "show_interface"}}, "show bgp instance all {vrf_type} all {af_type} neighbors detail": {"iosxr": {"uid": "show_bgp_instance_all_vrf_type_all_af_type_neighbors_detail", "schema": "{\n'instance': {\n  Any  (str) *: {\n    Optional  (str) vrf: {\n      Any  (str) *: {\n        'neighbor': {\n          Any  (str) *: {\n            Optional  (str) bgp_negotiated_capabilities: {\n              Optional  (str) four_octets_asn: <class 'str'>,\n              Optional  (str) graceful_restart: <class 'str'>,\n              Optional  (str) vpnv4_unicast: <class 'str'>,\n              Optional  (str) enhanced_refresh: <class 'str'>,\n              Optional  (str) vpnv6_unicast: <class 'str'>,\n              Optional  (str) multisession: <class 'str'>,\n              Optional  (str) ipv4_unicast: <class 'str'>,\n              Optional  (str) stateful_switchover: <class 'str'>,\n              Optional  (str) route_refresh: <class 'str'>,\n              Optional  (str) ipv6_unicast: <class 'str'>,\n              },\n            Optional  (str) up_time: <class 'str'>,\n            Optional  (str) tcp_initial_sync_phase_two: <class 'str'>,\n            Optional  (str) session_state_reason: <class 'str'>,\n            Optional  (str) tcp_initial_sync_done: <class 'str'>,\n            Optional  (str) nsr_state: <class 'str'>,\n            Optional  (str) enforcing_first_as: <class 'str'>,\n            Optional  (str) last_read: <class 'str'>,\n            Optional  (str) multiprotocol_capability: <class 'str'>,\n            Optional  (str) last_read_before_reset: <class 'str'>,\n            Optional  (str) address_family: {\n              Any  (str) *: {\n                Optional  (str) neighbor_version: <class 'int'>,\n                Optional  (str) default_originate: <class 'bool'>,\n                Optional  (str) update_group: <class 'str'>,\n                Optional  (str) default_originate_route_map: <class 'str'>,\n                Optional  (str) filter_group: <class 'str'>,\n                Optional  (str) soo: <class 'str'>,\n                Optional  (str) refresh_request_status: <class 'str'>,\n                Optional  (str) route_refresh_request_received: <class 'int'>,\n                Optional  (str) route_refresh_request_sent: <class 'int'>,\n                Optional  (str) route_map_name_in: <class 'str'>,\n                Optional  (str) route_map_name_out: <class 'str'>,\n                Optional  (str) accepted_prefixes: <class 'int'>,\n                Optional  (str) best_paths: <class 'int'>,\n                Optional  (str) exact_no_prefixes_denied: <class 'int'>,\n                Optional  (str) cummulative_no_prefixes_denied: <class 'int'>,\n                Optional  (str) cummulative_no_no_policy: <class 'int'>,\n                Optional  (str) cummulative_no_failed_rt_match: <class 'int'>,\n                Optional  (str) cummulative_no_by_orf_policy: <class 'int'>,\n                Optional  (str) cummulative_no_by_policy: <class 'int'>,\n                Optional  (str) prefix_advertised: <class 'int'>,\n                Optional  (str) prefix_suppressed: <class 'int'>,\n                Optional  (str) prefix_withdrawn: <class 'int'>,\n                Optional  (str) maximum_prefix_max_prefix_no: <class 'int'>,\n                Optional  (str) maximum_prefix_threshold: <class 'str'>,\n                Optional  (str) maximum_prefix_restart: <class 'int'>,\n                Optional  (str) maximum_prefix_warning_only: <class 'bool'>,\n                Optional  (str) eor_status: <class 'str'>,\n                Optional  (str) last_ack_version: <class 'int'>,\n                Optional  (str) last_synced_ack_version: <class 'int'>,\n                Optional  (str) outstanding_version_objects_current: <class 'int'>,\n                Optional  (str) outstanding_version_objects_max: <class 'int'>,\n                Optional  (str) additional_paths_operation: <class 'str'>,\n                Optional  (str) additional_routes_local_label: <class 'str'>,\n                Optional  (str) enabled: <class 'bool'>,\n                Optional  (str) allowas_in: <class 'bool'>,\n                Optional  (str) graceful_restart: <class 'bool'>,\n                Optional  (str) allowas_in_as_number: <class 'int'>,\n                Optional  (str) ipv4_unicast_send_default_route: <class 'bool'>,\n                Optional  (str) route_reflector_client: <class 'bool'>,\n                Optional  (str) ipv6_unicast_send_default_route: <class 'bool'>,\n                Optional  (str) send_community: <class 'str'>,\n                Optional  (str) prefixes_received: <class 'int'>,\n                Optional  (str) soft_configuration: <class 'bool'>,\n                Optional  (str) prefixes_sent: <class 'int'>,\n                Optional  (str) as_override: <class 'bool'>,\n                Optional  (str) active: <class 'bool'>,\n                },\n              },\n            Optional  (str) message_stats_input_queue: <class 'int'>,\n            Optional  (str) ebgp_multihop: <class 'bool'>,\n            Optional  (str) ebgp_multihop_max_hop: <class 'int'>,\n            Optional  (str) bgp_negotiated_keepalive_timers: {\n              Optional  (str) hold_time: <class 'int'>,\n              Optional  (str) keepalive_interval: <class 'int'>,\n              },\n            Optional  (str) shutdown: <class 'bool'>,\n            Optional  (str) suppress_four_byte_as_capability: <class 'bool'>,\n            Optional  (str) last_write: <class 'str'>,\n            Optional  (str) inbound_message: <class 'str'>,\n            Optional  (str) attempted: <class 'int'>,\n            Optional  (str) written: <class 'int'>,\n            Optional  (str) description: <class 'str'>,\n            Optional  (str) second_last_write: <class 'str'>,\n            Optional  (str) peer_group: <class 'str'>,\n            Optional  (str) second_attempted: <class 'int'>,\n            Optional  (str) send_community: <class 'str'>,\n            Optional  (str) second_written: <class 'int'>,\n            Optional  (str) input_queue: <class 'int'>,\n            Optional  (str) last_write_before_reset: <class 'str'>,\n            Optional  (str) output_queue: <class 'int'>,\n            Optional  (str) last_write_attempted: <class 'int'>,\n            Optional  (str) minimum_time_between_adv_runs: <class 'int'>,\n            Optional  (str) graceful_restart: <class 'bool'>,\n            Optional  (str) bgp_session_transport: {\n              Optional  (str) connection: {\n                Optional  (str) reset_reason: <class 'str'>,\n                Optional  (str) connections_established: <class 'int'>,\n                Optional  (str) state: <class 'str'>,\n                Optional  (str) connections_dropped: <class 'int'>,\n                Optional  (str) mode: <class 'str'>,\n                Optional  (str) last_reset: <class 'str'>,\n                },\n              Optional  (str) transport: {\n                Optional  (str) mss: <class 'str'>,\n                Optional  (str) local_port: <class 'str'>,\n                Optional  (str) passive_mode: <class 'str'>,\n                Optional  (str) if_handle: <class 'str'>,\n                Optional  (str) foreign_host: <class 'str'>,\n                Optional  (str) foreign_port: <class 'str'>,\n                Optional  (str) local_host: <class 'str'>,\n                },\n              },\n            Optional  (str) last_write_written: <class 'int'>,\n            Optional  (str) graceful_restart_helper_only: <class 'bool'>,\n            Optional  (str) second_last_write_before_reset: <class 'str'>,\n            Optional  (str) graceful_restart_restart_time: <class 'int'>,\n            Optional  (str) second_last_write_before_attempted: <class 'int'>,\n            Optional  (str) graceful_restart_stalepath_time: <class 'int'>,\n            Optional  (str) second_last_write_before_written: <class 'int'>,\n            Optional  (str) allow_own_as: <class 'int'>,\n            Optional  (str) last_write_pulse_rcvd: <class 'str'>,\n            Optional  (str) minimum_advertisement_interval: <class 'int'>,\n            Optional  (str) last_full_not_set_pulse_count: <class 'int'>,\n            Optional  (str) bgp_neighbor_counters: {\n              Optional  (str) messages: {\n                Optional  (str) received: {\n                  Any  (str) *: <class 'int'>,\n                  },\n                Optional  (str) sent: {\n                  Any  (str) *: <class 'int'>,\n                  },\n                },\n              },\n            Optional  (str) route_reflector_client: <class 'bool'>,\n            Optional  (str) last_write_pulse_rcvd_before_reset: <class 'str'>,\n            Optional  (str) route_reflector_cluster_id: <class 'int'>,\n            Optional  (str) socket_status: <class 'str'>,\n            Optional  (str) remote_as: <class 'int'>,\n            Optional  (str) last_write_thread_event_before_reset: <class 'str'>,\n            Optional  (str) local_as_as_no: <class 'int'>,\n            Optional  (str) last_write_thread_event_second_last: <class 'str'>,\n            Optional  (str) local_as_no_prepend: <class 'bool'>,\n            Optional  (str) last_ka_expiry_before_reset: <class 'str'>,\n            Optional  (str) local_as_replace_as: <class 'bool'>,\n            Optional  (str) last_ka_expiry_before_second_last: <class 'str'>,\n            Optional  (str) outbound_message: <class 'str'>,\n            Optional  (str) local_as_dual_as: <class 'bool'>,\n            Optional  (str) last_ka_error_before_reset: <class 'str'>,\n            Optional  (str) remove_private_as: <class 'bool'>,\n            Optional  (str) last_ka_error_ka_not_sent: <class 'str'>,\n            Optional  (str) keepalive_interval: <class 'int'>,\n            Optional  (str) last_ka_start_before_reset: <class 'str'>,\n            Optional  (str) holdtime: <class 'int'>,\n            Optional  (str) last_ka_start_before_second_last: <class 'str'>,\n            Optional  (str) min_acceptable_hold_time: <class 'int'>,\n            Optional  (str) precedence: <class 'str'>,\n            Optional  (str) link_state: <class 'str'>,\n            Optional  (str) non_stop_routing: <class 'bool'>,\n            Optional  (str) router_id: <class 'str'>,\n            Optional  (str) message_stats_output_queue: <class 'int'>,\n            Optional  (str) tcp_initial_sync: <class 'str'>,\n            Optional  (str) session_state: <class 'str'>,\n            },\n          },\n        },\n      },\n    },\n  },\n}", "doc": " Parser for:\n        show bgp instance all all all neighbors detail\n        show bgp instance all vrf all neighbors detail\n        show bgp instance all vrf all ipv4 unicast neighbors detail\n        show bgp instance all vrf all ipv6 unicast neighbors detail\n        For checking any output with the parser ,below mandatory keys have to be in cli command.\n\n        - vrf_type\n    ", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_bgp.py#L2172", "class": "ShowBgpInstanceNeighborsDetail", "module_name": "show_bgp"}}, "show ip static-route": {"nxos": {"uid": "show_ip_static-route", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    Optional  (str) address_family: {\n      Any  (str) *: {\n        Optional  (str) routes: {\n          Any  (str) *: {\n            Optional  (str) route: <class 'str'>,\n            Optional  (str) next_hop: {\n              Optional  (str) next_hop_list: {\n                Any  (str) *: {\n                  Optional  (str) index: <class 'int'>,\n                  Optional  (str) next_hop_netmask: <class 'str'>,\n                  Optional  (str) rnh_active: <class 'bool'>,\n                  Optional  (str) outgoing_interface: <class 'str'>,\n                  Optional  (str) next_hop: <class 'str'>,\n                  Optional  (str) active: <class 'bool'>,\n                  },\n                },\n              Optional  (str) outgoing_interface: {\n                Any  (str) *: {\n                  Optional  (str) rnh_active: <class 'bool'>,\n                  Optional  (str) active: <class 'bool'>,\n                  Optional  (str) outgoing_interface: <class 'str'>,\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "doc": "Parser for:\n       show ip static-route\n       show ip static-route vrf <vrf>\n       show ip static-route vrf all\n    ", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_static_routing.py#L52", "class": "ShowIpStaticRoute", "module_name": "show_static_routing"}}, "show ip pim vrf detail": {"nxos": {"uid": "show_ip_pim_vrf_detail", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'address_family': {\n      Any  (str) *: {\n        Optional  (str) vxlan_vni_id: <class 'int'>,\n        Optional  (str) shared_tree_ranges: <class 'str'>,\n        Optional  (str) register_rate_limit: <class 'str'>,\n        Optional  (str) pre_build_spt: <class 'str'>,\n        Optional  (str) bfd: {\n          Optional  (str) enable: <class 'bool'>,\n          },\n        Optional  (str) state_limit: <class 'str'>,\n        Optional  (str) interface_count: <class 'int'>,\n        Optional  (str) sm: {\n          Optional  (str) asm: {\n            Optional  (str) register_source_address: <class 'str'>,\n            Optional  (str) register_source: <class 'str'>,\n            Optional  (str) sg_expiry_timer: {\n              Optional  (str) sg_expiry_timer: <class 'int'>,\n              Optional  (str) config_version: <class 'int'>,\n              Optional  (str) sg_list: <class 'str'>,\n              Optional  (str) active_version: <class 'int'>,\n              Optional  (str) infinity: <class 'bool'>,\n              Optional  (str) sg_expiry_timer_configured: <class 'bool'>,\n              },\n            },\n          },\n        Optional  (str) vrf_id: <class 'int'>,\n        Optional  (str) table_id: <class 'str'>,\n        Optional  (str) cli_vrf_done: <class 'bool'>,\n        Optional  (str) mvpn: {\n          Optional  (str) enable: <class 'bool'>,\n          },\n        Optional  (str) cibtype_auto_enabled: <class 'bool'>,\n        },\n      },\n    },\n  },\n}", "doc": "Parser for:\n        show ip pim vrf detail\n        show ip pim vrf <vrf> detail", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_pim.py#L2746", "class": "ShowIpPimVrfDetail", "module_name": "show_pim"}}, "show ip multicast": {"ios": {"uid": "show_ip_multicast", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'fallback_group_mode': <class 'str'>,\n    'multipath': <class 'bool'>,\n    'route_limit': <class 'str'>,\n    'enable': <class 'bool'>,\n    'multicast_bound_with_filter_autorp': <class 'int'>,\n    'mo_frr': <class 'bool'>,\n    },\n  },\n}", "doc": "Parser for:\n        show ip multicast\n        show ip multicast vrf <vrf>\n    ", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_mcast.py#L42", "class": "ShowIpMulticast", "module_name": "show_mcast"}, "iosxe": {"uid": "show_ip_multicast", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'fallback_group_mode': <class 'str'>,\n    'multipath': <class 'bool'>,\n    'route_limit': <class 'str'>,\n    'enable': <class 'bool'>,\n    'multicast_bound_with_filter_autorp': <class 'int'>,\n    'mo_frr': <class 'bool'>,\n    },\n  },\n}", "doc": "Parser for:\n        show ip multicast\n        show ip multicast vrf <vrf>\n    ", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_mcast.py#L419", "class": "ShowIpMulticast", "module_name": "show_mcast"}}, "show mpls forwarding-table vrf {vrf} detail": {"iosxe": {"uid": "show_mpls_forwarding-table_vrf_vrf_detail", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'local_label': {\n      Any  (str) *: {\n        'outgoing_label_or_vc': {\n          Any  (str) *: {\n            'prefix_or_tunnel_id': {\n              Any  (str) *: {\n                Optional  (str) outgoing_interface: {\n                  Any  (str) *: {\n                    Optional  (str) lstack: <class 'str'>,\n                    Optional  (str) via: <class 'str'>,\n                    Optional  (str) broadcast: <class 'bool'>,\n                    'bytes_label_switched': <class 'int'>,\n                    Optional  (str) mru: <class 'int'>,\n                    Optional  (str) label_stack: <class 'str'>,\n                    Optional  (str) next_hop: <class 'str'>,\n                    Optional  (str) encaps: <class 'int'>,\n                    Optional  (str) vpn_route: <class 'str'>,\n                    Optional  (str) output_feature_configured: <class 'bool'>,\n                    Optional  (str) tsp_tunnel: <class 'bool'>,\n                    Optional  (str) mac: <class 'int'>,\n                    Optional  (str) load_sharing: {\n                      Optional  (str) slots: <class 'list'>,\n                      'method': <class 'str'>,\n                      },\n                    Optional  (str) macstr: <class 'str'>,\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "doc": "Parser for\n        show mpls forwarding-table\n        show mpls forwarding-table detail\n        show mpls forwarding-table vrf <vrf>\n        show mpls forwarding-table vrf <vrf> detail", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_mpls.py#L1794", "class": "ShowMplsForwardingTable", "module_name": "show_mpls"}}, "show {af} pim rp vrf {vrf}": {"nxos": {"uid": "show_af_pim_rp_vrf_vrf", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'address_family': {\n      Any  (str) *: {\n        Optional  (str) rp: {\n          Optional  (str) rp_mappings: {\n            Any  (str) *: {\n              'protocol': <class 'str'>,\n              'up_time': <class 'str'>,\n              'group': <class 'str'>,\n              Optional  (str) expiration: <class 'str'>,\n              'rp_address': <class 'str'>,\n              },\n            },\n          Optional  (str) autorp: {\n            Optional  (str) bsr_next_discovery: <class 'str'>,\n            Optional  (str) discovery_policy: <class 'str'>,\n            Optional  (str) address: <class 'str'>,\n            Optional  (str) announce_policy: <class 'str'>,\n            Optional  (str) send_rp_announce: {\n              Optional  (str) rp_source: <class 'str'>,\n              Optional  (str) group_list: <class 'str'>,\n              Optional  (str) group: <class 'str'>,\n              Optional  (str) bidir: <class 'bool'>,\n              Optional  (str) scope: <class 'int'>,\n              },\n            },\n          Optional  (str) bsr: {\n            Optional  (str) bsr_address: {\n              Any  (str) *: {\n                'address': <class 'str'>,\n                'policy': <class 'str'>,\n                'mode': <class 'str'>,\n                'priority': <class 'int'>,\n                },\n              },\n            Optional  (str) bsr: {\n              'address': <class 'str'>,\n              Optional  (str) up_time: <class 'str'>,\n              'hash_mask_length': <class 'int'>,\n              'priority': <class 'int'>,\n              Optional  (str) expires: <class 'str'>,\n              },\n            Optional  (str) bsr_next_bootstrap: <class 'str'>,\n            Optional  (str) bsr_candidate: {\n              'address': <class 'str'>,\n              'hash_mask_length': <class 'int'>,\n              'priority': <class 'int'>,\n              },\n            Optional  (str) rp_candidate_policy: <class 'str'>,\n            Optional  (str) rp: {\n              'group_policy': <class 'str'>,\n              'up_time': <class 'str'>,\n              Optional  (str) rp_address: <class 'str'>,\n              },\n            Optional  (str) rp_policy: <class 'str'>,\n            Optional  (str) rp_candidate_next_advertisement: <class 'str'>,\n            },\n          Optional  (str) static_rp: {\n            Any  (str) *: {\n              Optional  (str) bidir: {\n                Optional  (str) route_map: <class 'str'>,\n                'policy_name': <class 'str'>,\n                },\n              Optional  (str) sm: {\n                Optional  (str) route_map: <class 'str'>,\n                'policy_name': <class 'str'>,\n                },\n              },\n            },\n          Optional  (str) rp_list: {\n            Any  (str) *: {\n              Optional  (str) info_source_address: <class 'str'>,\n              Optional  (str) priority: <class 'int'>,\n              Optional  (str) info_source_type: <class 'str'>,\n              Optional  (str) mode: <class 'str'>,\n              Optional  (str) up_time: <class 'str'>,\n              Optional  (str) group_ranges: <class 'str'>,\n              Optional  (str) expiration: <class 'str'>,\n              Optional  (str) address: <class 'str'>,\n              Optional  (str) df_ordinal: <class 'int'>,\n              },\n            },\n          },\n        Optional  (str) sm: {\n          Optional  (str) asm: {\n            Optional  (str) anycast_rp: {\n              Any  (str) *: {\n                Optional  (str) anycast_address: <class 'str'>,\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "doc": "Parser for:\n        show <address_family> pim rp\n        show <address_family> pim rp vrf <vrf>", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_pim.py#L761", "class": "ShowPimRp", "module_name": "show_pim"}}, "show ip ospf vrf {vrf}": {"nxos": {"uid": "show_ip_ospf_vrf_vrf", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'address_family': {\n      Any  (str) *: {\n        'instance': {\n          Any  (str) *: {\n            Optional  (str) bfd: {\n              'enable': <class 'bool'>,\n              },\n            Optional  (str) enable: <class 'bool'>,\n            Optional  (str) nsr: {\n              'enable': <class 'bool'>,\n              },\n            'instance': <class 'int'>,\n            Optional  (str) spf_control: {\n              'throttle': {\n                'spf': {\n                  'maximum': <class 'int'>,\n                  'hold': <class 'int'>,\n                  'start': <class 'int'>,\n                  },\n                'lsa': {\n                  'hold': <class 'int'>,\n                  'start': <class 'int'>,\n                  'maximum': <class 'int'>,\n                  Optional  (str) numbers: {\n                    Optional  (str) external_lsas: {\n                      Optional  (str) total: <class 'int'>,\n                      Optional  (str) checksum: <class 'str'>,\n                      },\n                    Optional  (str) opaque_as_lsas: {\n                      Optional  (str) checksum: <class 'str'>,\n                      Optional  (str) total: <class 'int'>,\n                      },\n                    },\n                  Optional  (str) minimum: <class 'int'>,\n                  Optional  (str) group_pacing: <class 'int'>,\n                  },\n                },\n              'paths': <class 'int'>,\n              },\n            Optional  (str) stub_router: {\n              Optional  (str) on_startup: {\n                'on_startup': <class 'int'>,\n                Optional  (str) include_stub: <class 'bool'>,\n                Optional  (str) summary_lsa: <class 'bool'>,\n                Optional  (str) external_lsa: <class 'bool'>,\n                },\n              'always': {\n                Optional  (str) summary_lsa: <class 'bool'>,\n                'always': <class 'bool'>,\n                Optional  (str) external_lsa: <class 'bool'>,\n                Optional  (str) include_stub: <class 'bool'>,\n                },\n              },\n            Optional  (str) database_control: {\n              'max_lsa': <class 'int'>,\n              },\n            'router_id': <class 'str'>,\n            Optional  (str) auto_cost: {\n              'bandwidth_unit': <class 'str'>,\n              'reference_bandwidth': <class 'int'>,\n              'enable': <class 'bool'>,\n              },\n            Optional  (str) graceful_restart: {\n              Any  (str) *: {\n                'state': <class 'str'>,\n                'restart_interval': <class 'int'>,\n                'type': <class 'str'>,\n                'enable': <class 'bool'>,\n                'exist_status': <class 'str'>,\n                },\n              },\n            Optional  (str) numbers: {\n              'active_areas': {\n                'stub': <class 'int'>,\n                'nssa': <class 'int'>,\n                'normal': <class 'int'>,\n                'total': <class 'int'>,\n                },\n              'areas': {\n                'stub': <class 'int'>,\n                'nssa': <class 'int'>,\n                'normal': <class 'int'>,\n                'total': <class 'int'>,\n                },\n              },\n            Optional  (str) single_tos_routes_enable: <class 'bool'>,\n            Optional  (str) discard_route_internal: <class 'bool'>,\n            Optional  (str) opaque_lsa_enable: <class 'bool'>,\n            Optional  (str) areas: {\n              Any  (str) *: {\n                'area_type': <class 'str'>,\n                'area_id': <class 'str'>,\n                Optional  (str) numbers: {\n                  'loopback_interfaces': <class 'int'>,\n                  'passive_interfaces': <class 'int'>,\n                  'active_interfaces': <class 'int'>,\n                  'interfaces': <class 'int'>,\n                  },\n                Optional  (str) statistics: {\n                  Optional  (str) as_nssa_translator_event_count: <class 'int'>,\n                  'spf_runs_count': <class 'int'>,\n                  'spf_last_run_time': <class 'float'>,\n                  'area_scope_lsa_cksum_sum': <class 'str'>,\n                  'area_scope_lsa_count': <class 'int'>,\n                  },\n                Optional  (str) ranges: {\n                  Any  (str) *: {\n                    'cost': <class 'int'>,\n                    'prefix': <class 'str'>,\n                    'net': <class 'int'>,\n                    'advertise': <class 'bool'>,\n                    },\n                  },\n                Optional  (str) existed: <class 'str'>,\n                Optional  (str) authentication: <class 'str'>,\n                Optional  (str) default_cost: <class 'int'>,\n                },\n              },\n            Optional  (str) preference: {\n              'single_value': {\n                'all': <class 'int'>,\n                },\n              },\n            Optional  (str) discard_route_external: <class 'bool'>,\n            },\n          },\n        },\n      },\n    },\n  },\n}", "doc": "Parser for:\n        show ip ospf\n        show ip ospf vrf <vrf>", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_ospf.py#L168", "class": "ShowIpOspf", "module_name": "show_ospf"}}, "show mpls ldp discovery vrf {vrf}": {"iosxe": {"uid": "show_mpls_ldp_discovery_vrf_vrf", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'local_ldp_identifier': {\n      Any  (str) *: {\n        'discovery_sources': {\n          'interfaces': {\n            Any  (str) *: {\n              Optional  (str) recv: <class 'bool'>,\n              Any  (str) *: {\n                Any  (str) *: {\n                  Optional  (str) proposed_peer: <class 'int'>,\n                  Optional  (str) transport_ip_address: <class 'str'>,\n                  Optional  (str) reachable_via: <class 'str'>,\n                  Optional  (str) source_ip_address: <class 'str'>,\n                  Optional  (str) password: <class 'str'>,\n                  Optional  (str) holdtime_sec: <class 'int'>,\n                  Optional  (str) clients: <class 'str'>,\n                  Optional  (str) proposed_local: <class 'int'>,\n                  },\n                },\n              Optional  (str) hello_interval_ms: <class 'int'>,\n              'session': <class 'str'>,\n              Optional  (str) transport_ip_addr: <class 'str'>,\n              Optional  (str) xmit: <class 'bool'>,\n              Optional  (str) enabled: <class 'str'>,\n              },\n            },\n          },\n        Optional  (str) targeted_hellos: {\n          Any  (str) *: {\n            Any  (str) *: {\n              Optional  (str) xmit: <class 'bool'>,\n              Optional  (str) recv: <class 'bool'>,\n              'active': <class 'bool'>,\n              'session': <class 'str'>,\n              Optional  (str) ldp_id: <class 'str'>,\n              Optional  (str) tdp_id: <class 'str'>,\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "doc": "\n        Parser for show mpls ldp discovery\n                   show mpls ldp discovery all\n                   show mpls ldp discovery all detail\n                   show mpls ldp discovery detail\n                   show mpls ldp discovery vrf <vrf>\n                   show mpls ldp discovery vrf <vrf> detail\n       ", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_mpls.py#L1354", "class": "ShowMplsLdpDiscovery", "module_name": "show_mpls"}}, "show ip ospf interface": {"ios": {"uid": "show_ip_ospf_interface", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'address_family': {\n      Any  (str) *: {\n        'instance': {\n          Any  (str) *: {\n            'areas': {\n              Any  (str) *: {\n                Optional  (str) sham_links: {\n                  Any  (str) *: {\n                    Optional  (str) neighbors: {\n                      Any  (str) *: {\n                        Optional  (str) dr_router_id: <class 'str'>,\n                        Optional  (str) bdr_router_id: <class 'str'>,\n                        },\n                      },\n                    Optional  (str) transmit_delay: <class 'int'>,\n                    Optional  (str) bdr_ip_addr: <class 'str'>,\n                    Optional  (str) passive: <class 'bool'>,\n                    Optional  (str) hello_interval: <class 'int'>,\n                    Optional  (str) authentication: {\n                      'auth_trailer_key': {\n                        Optional  (str) youngest_key_id: <class 'int'>,\n                        'crypto_algorithm': <class 'str'>,\n                        },\n                      },\n                    Optional  (str) dead_interval: <class 'int'>,\n                    Optional  (str) wait_interval: <class 'int'>,\n                    Optional  (str) retransmit_interval: <class 'int'>,\n                    'line_protocol': <class 'bool'>,\n                    Optional  (str) oob_resync_timeout: <class 'int'>,\n                    'enable': <class 'bool'>,\n                    Optional  (str) hello_timer: <class 'str'>,\n                    Optional  (str) index: <class 'str'>,\n                    Optional  (str) flood_queue_length: <class 'int'>,\n                    Optional  (str) next: <class 'str'>,\n                    Optional  (str) lls: <class 'bool'>,\n                    Optional  (str) last_flood_scan_length: <class 'int'>,\n                    Optional  (str) max_flood_scan_length: <class 'int'>,\n                    Optional  (str) last_flood_scan_time_msec: <class 'int'>,\n                    Optional  (str) max_flood_scan_time_msec: <class 'int'>,\n                    Optional  (str) total_dcbitless_lsa: <class 'int'>,\n                    Optional  (str) donotage_lsa: <class 'bool'>,\n                    'ip_address': <class 'str'>,\n                    Optional  (str) ti_lfa_protected: <class 'bool'>,\n                    Optional  (str) ipfrr_candidate: <class 'bool'>,\n                    Optional  (str) ipfrr_protected: <class 'bool'>,\n                    'router_id': <class 'str'>,\n                    Optional  (str) prefix_suppression: <class 'bool'>,\n                    Optional  (str) stub_host: <class 'bool'>,\n                    'demand_circuit': <class 'bool'>,\n                    Optional  (str) ttl_security: {\n                      'enable': <class 'bool'>,\n                      Optional  (str) hops: <class 'int'>,\n                      },\n                    Optional  (str) interface_id: <class 'int'>,\n                    Optional  (str) graceful_restart: {\n                      Any  (str) *: {\n                        'helper': <class 'bool'>,\n                        'type': <class 'str'>,\n                        },\n                      },\n                    Optional  (str) attached: <class 'str'>,\n                    Optional  (str) if_cfg: <class 'bool'>,\n                    'name': <class 'str'>,\n                    Optional  (str) topology: {\n                      Any  (str) *: {\n                        'cost': <class 'int'>,\n                        'shutdown': <class 'bool'>,\n                        'name': <class 'str'>,\n                        'disabled': <class 'bool'>,\n                        },\n                      },\n                    Optional  (str) cost: <class 'int'>,\n                    'bfd': {\n                      'enable': <class 'bool'>,\n                      },\n                    Optional  (str) state: <class 'str'>,\n                    Optional  (str) priority: <class 'int'>,\n                    Optional  (str) statistics: {\n                      Optional  (str) num_nbrs_suppress_hello: <class 'int'>,\n                      Optional  (str) adj_nbr_count: <class 'int'>,\n                      Optional  (str) nbr_count: <class 'int'>,\n                      },\n                    Optional  (str) dr_router_id: <class 'str'>,\n                    'interface_type': <class 'str'>,\n                    Optional  (str) dr_ip_addr: <class 'str'>,\n                    Optional  (str) bdr_router_id: <class 'str'>,\n                    },\n                  },\n                Optional  (str) virtual_links: {\n                  Any  (str) *: {\n                    Optional  (str) max_flood_scan_time_msec: <class 'int'>,\n                    'enable': <class 'bool'>,\n                    Optional  (str) total_dcbitless_lsa: <class 'int'>,\n                    Optional  (str) donotage_lsa: <class 'bool'>,\n                    Optional  (str) ti_lfa_protected: <class 'bool'>,\n                    Optional  (str) ipfrr_candidate: <class 'bool'>,\n                    Optional  (str) ipfrr_protected: <class 'bool'>,\n                    'line_protocol': <class 'bool'>,\n                    Optional  (str) stub_host: <class 'bool'>,\n                    Optional  (str) prefix_suppression: <class 'bool'>,\n                    'ip_address': <class 'str'>,\n                    Optional  (str) ttl_security: {\n                      'enable': <class 'bool'>,\n                      Optional  (str) hops: <class 'int'>,\n                      },\n                    Optional  (str) graceful_restart: {\n                      Any  (str) *: {\n                        'helper': <class 'bool'>,\n                        'type': <class 'str'>,\n                        },\n                      },\n                    Optional  (str) interface_id: <class 'int'>,\n                    Optional  (str) attached: <class 'str'>,\n                    Optional  (str) topology: {\n                      Any  (str) *: {\n                        'cost': <class 'int'>,\n                        'shutdown': <class 'bool'>,\n                        'name': <class 'str'>,\n                        'disabled': <class 'bool'>,\n                        },\n                      },\n                    Optional  (str) if_cfg: <class 'bool'>,\n                    Optional  (str) cost: <class 'int'>,\n                    Optional  (str) transmit_delay: <class 'int'>,\n                    Optional  (str) state: <class 'str'>,\n                    Optional  (str) statistics: {\n                      Optional  (str) num_nbrs_suppress_hello: <class 'int'>,\n                      Optional  (str) adj_nbr_count: <class 'int'>,\n                      Optional  (str) nbr_count: <class 'int'>,\n                      },\n                    Optional  (str) priority: <class 'int'>,\n                    Optional  (str) dr_router_id: <class 'str'>,\n                    Optional  (str) dr_ip_addr: <class 'str'>,\n                    Optional  (str) bdr_router_id: <class 'str'>,\n                    Optional  (str) neighbors: {\n                      Any  (str) *: {\n                        Optional  (str) dr_router_id: <class 'str'>,\n                        Optional  (str) bdr_router_id: <class 'str'>,\n                        },\n                      },\n                    'router_id': <class 'str'>,\n                    Optional  (str) hello_interval: <class 'int'>,\n                    Optional  (str) authentication: {\n                      'auth_trailer_key': {\n                        'crypto_algorithm': <class 'str'>,\n                        Optional  (str) youngest_key_id: <class 'int'>,\n                        },\n                      },\n                    Optional  (str) bdr_ip_addr: <class 'str'>,\n                    'demand_circuit': <class 'bool'>,\n                    Optional  (str) wait_interval: <class 'int'>,\n                    Optional  (str) retransmit_interval: <class 'int'>,\n                    Optional  (str) passive: <class 'bool'>,\n                    Optional  (str) oob_resync_timeout: <class 'int'>,\n                    'name': <class 'str'>,\n                    Optional  (str) hello_timer: <class 'str'>,\n                    Optional  (str) index: <class 'str'>,\n                    'bfd': {\n                      'enable': <class 'bool'>,\n                      },\n                    Optional  (str) flood_queue_length: <class 'int'>,\n                    Optional  (str) dead_interval: <class 'int'>,\n                    Optional  (str) next: <class 'str'>,\n                    Optional  (str) lls: <class 'bool'>,\n                    'interface_type': <class 'str'>,\n                    Optional  (str) last_flood_scan_length: <class 'int'>,\n                    Optional  (str) max_flood_scan_length: <class 'int'>,\n                    Optional  (str) last_flood_scan_time_msec: <class 'int'>,\n                    },\n                  },\n                Optional  (str) interfaces: {\n                  Any  (str) *: {\n                    Optional  (str) transmit_delay: <class 'int'>,\n                    Optional  (str) ttl_security: {\n                      Optional  (str) hops: <class 'int'>,\n                      'enable': <class 'bool'>,\n                      },\n                    Optional  (str) ti_lfa_protected: <class 'bool'>,\n                    Optional  (str) state: <class 'str'>,\n                    Optional  (str) priority: <class 'int'>,\n                    Optional  (str) statistics: {\n                      Optional  (str) num_nbrs_suppress_hello: <class 'int'>,\n                      Optional  (str) nbr_count: <class 'int'>,\n                      Optional  (str) adj_nbr_count: <class 'int'>,\n                      },\n                    Optional  (str) dr_router_id: <class 'str'>,\n                    Optional  (str) dr_ip_addr: <class 'str'>,\n                    Optional  (str) bdr_router_id: <class 'str'>,\n                    'line_protocol': <class 'bool'>,\n                    Optional  (str) bdr_ip_addr: <class 'str'>,\n                    Optional  (str) neighbors: {\n                      Any  (str) *: {\n                        Optional  (str) bdr_router_id: <class 'str'>,\n                        Optional  (str) dr_router_id: <class 'str'>,\n                        },\n                      },\n                    Optional  (str) hello_interval: <class 'int'>,\n                    Optional  (str) dead_interval: <class 'int'>,\n                    'ip_address': <class 'str'>,\n                    Optional  (str) wait_interval: <class 'int'>,\n                    Optional  (str) retransmit_interval: <class 'int'>,\n                    Optional  (str) passive: <class 'bool'>,\n                    Optional  (str) authentication: {\n                      'auth_trailer_key': {\n                        Optional  (str) youngest_key_id: <class 'int'>,\n                        'crypto_algorithm': <class 'str'>,\n                        },\n                      },\n                    'enable': <class 'bool'>,\n                    Optional  (str) oob_resync_timeout: <class 'int'>,\n                    Optional  (str) hello_timer: <class 'str'>,\n                    Optional  (str) index: <class 'str'>,\n                    Optional  (str) flood_queue_length: <class 'int'>,\n                    Optional  (str) next: <class 'str'>,\n                    Optional  (str) lls: <class 'bool'>,\n                    Optional  (str) last_flood_scan_length: <class 'int'>,\n                    Optional  (str) max_flood_scan_length: <class 'int'>,\n                    Optional  (str) last_flood_scan_time_msec: <class 'int'>,\n                    Optional  (str) max_flood_scan_time_msec: <class 'int'>,\n                    'router_id': <class 'str'>,\n                    Optional  (str) total_dcbitless_lsa: <class 'int'>,\n                    Optional  (str) donotage_lsa: <class 'bool'>,\n                    'demand_circuit': <class 'bool'>,\n                    Optional  (str) ipfrr_candidate: <class 'bool'>,\n                    Optional  (str) ipfrr_protected: <class 'bool'>,\n                    Optional  (str) stub_host: <class 'bool'>,\n                    Optional  (str) prefix_suppression: <class 'bool'>,\n                    'name': <class 'str'>,\n                    'bfd': {\n                      'enable': <class 'bool'>,\n                      },\n                    Optional  (str) interface_id: <class 'int'>,\n                    Optional  (str) graceful_restart: {\n                      Any  (str) *: {\n                        'helper': <class 'bool'>,\n                        'type': <class 'str'>,\n                        },\n                      },\n                    'interface_type': <class 'str'>,\n                    Optional  (str) attached: <class 'str'>,\n                    Optional  (str) topology: {\n                      Any  (str) *: {\n                        'cost': <class 'int'>,\n                        'shutdown': <class 'bool'>,\n                        'name': <class 'str'>,\n                        'disabled': <class 'bool'>,\n                        },\n                      },\n                    Optional  (str) if_cfg: <class 'bool'>,\n                    Optional  (str) cost: <class 'int'>,\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "doc": " Parser for \"show ip ospf interface\" ", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_ospf.py#L46", "class": "ShowIpOspfInterface", "module_name": "show_ospf"}, "nxos": {"uid": "show_ip_ospf_interface", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'address_family': {\n      Any  (str) *: {\n        'instance': {\n          Any  (str) *: {\n            'areas': {\n              Any  (str) *: {\n                Optional  (str) virtual_links: {\n                  Any  (str) *: {\n                    Optional  (str) hello_interval: <class 'int'>,\n                    'cost': <class 'int'>,\n                    Optional  (str) dead_interval: <class 'int'>,\n                    Optional  (str) retransmit_interval: <class 'int'>,\n                    Optional  (str) wait_interval: <class 'int'>,\n                    Optional  (str) hello_timer: <class 'str'>,\n                    'state': <class 'str'>,\n                    Optional  (str) passive: <class 'bool'>,\n                    'if_cfg': <class 'bool'>,\n                    'line_protocol': <class 'str'>,\n                    'bfd': {\n                      'enable': <class 'bool'>,\n                      },\n                    Optional  (str) statistics: {\n                      Optional  (str) num_nbrs_adjacent: <class 'int'>,\n                      'link_scope_lsa_count': <class 'int'>,\n                      Optional  (str) num_nbrs_flooding: <class 'int'>,\n                      Optional  (str) total_neighbors: <class 'int'>,\n                      'link_scope_lsa_cksum_sum': <class 'int'>,\n                      },\n                    'ip_address': <class 'str'>,\n                    'name': <class 'str'>,\n                    Optional  (str) transmit_delay: <class 'int'>,\n                    'enable': <class 'bool'>,\n                    'backbone_area_id': <class 'str'>,\n                    Optional  (str) priority: <class 'int'>,\n                    Optional  (str) authentication: {\n                      Optional  (str) auth_trailer_key_chain: {\n                        Optional  (str) key_chain: <class 'str'>,\n                        },\n                      Optional  (str) auth_trailer_key: {\n                        Optional  (str) crypto_algorithm: <class 'str'>,\n                        Optional  (str) key: <class 'str'>,\n                        },\n                      },\n                    Optional  (str) dr_router_id: <class 'str'>,\n                    Optional  (str) dr_ip_addr: <class 'str'>,\n                    'interface_type': <class 'str'>,\n                    Optional  (str) bdr_router_id: <class 'str'>,\n                    Optional  (str) bdr_ip_addr: <class 'str'>,\n                    'index': <class 'int'>,\n                    },\n                  },\n                Optional  (str) sham_links: {\n                  Any  (str) *: {\n                    'cost': <class 'int'>,\n                    'bfd': {\n                      'enable': <class 'bool'>,\n                      },\n                    'line_protocol': <class 'str'>,\n                    Optional  (str) statistics: {\n                      'link_scope_lsa_count': <class 'int'>,\n                      Optional  (str) total_neighbors: <class 'int'>,\n                      Optional  (str) num_nbrs_adjacent: <class 'int'>,\n                      Optional  (str) num_nbrs_flooding: <class 'int'>,\n                      'link_scope_lsa_cksum_sum': <class 'int'>,\n                      },\n                    Optional  (str) transmit_delay: <class 'int'>,\n                    'state': <class 'str'>,\n                    Optional  (str) passive: <class 'bool'>,\n                    Optional  (str) priority: <class 'int'>,\n                    Optional  (str) dr_router_id: <class 'str'>,\n                    'if_cfg': <class 'bool'>,\n                    Optional  (str) dr_ip_addr: <class 'str'>,\n                    Optional  (str) dead_interval: <class 'int'>,\n                    'ip_address': <class 'str'>,\n                    Optional  (str) bdr_router_id: <class 'str'>,\n                    Optional  (str) bdr_ip_addr: <class 'str'>,\n                    'name': <class 'str'>,\n                    Optional  (str) hello_interval: <class 'int'>,\n                    'enable': <class 'bool'>,\n                    Optional  (str) authentication: {\n                      Optional  (str) auth_trailer_key: {\n                        Optional  (str) key: <class 'str'>,\n                        Optional  (str) crypto_algorithm: <class 'str'>,\n                        },\n                      Optional  (str) auth_trailer_key_chain: {\n                        Optional  (str) key_chain: <class 'str'>,\n                        },\n                      },\n                    Optional  (str) retransmit_interval: <class 'int'>,\n                    Optional  (str) wait_interval: <class 'int'>,\n                    Optional  (str) hello_timer: <class 'str'>,\n                    'interface_type': <class 'str'>,\n                    'index': <class 'int'>,\n                    },\n                  },\n                Optional  (str) interfaces: {\n                  Any  (str) *: {\n                    'cost': <class 'int'>,\n                    Optional  (str) priority: <class 'int'>,\n                    'bfd': {\n                      'enable': <class 'bool'>,\n                      },\n                    Optional  (str) authentication: {\n                      Optional  (str) auth_trailer_key: {\n                        Optional  (str) key: <class 'str'>,\n                        Optional  (str) crypto_algorithm: <class 'str'>,\n                        },\n                      Optional  (str) auth_trailer_key_chain: {\n                        Optional  (str) key_chain: <class 'str'>,\n                        },\n                      },\n                    Optional  (str) dr_router_id: <class 'str'>,\n                    Optional  (str) dr_ip_addr: <class 'str'>,\n                    Optional  (str) bdr_router_id: <class 'str'>,\n                    'state': <class 'str'>,\n                    'if_cfg': <class 'bool'>,\n                    Optional  (str) hello_interval: <class 'int'>,\n                    'line_protocol': <class 'str'>,\n                    Optional  (str) dead_interval: <class 'int'>,\n                    Optional  (str) retransmit_interval: <class 'int'>,\n                    Optional  (str) wait_interval: <class 'int'>,\n                    'ip_address': <class 'str'>,\n                    Optional  (str) bdr_ip_addr: <class 'str'>,\n                    Optional  (str) hello_timer: <class 'str'>,\n                    'name': <class 'str'>,\n                    'enable': <class 'bool'>,\n                    Optional  (str) statistics: {\n                      'link_scope_lsa_count': <class 'int'>,\n                      Optional  (str) num_nbrs_adjacent: <class 'int'>,\n                      Optional  (str) num_nbrs_flooding: <class 'int'>,\n                      Optional  (str) total_neighbors: <class 'int'>,\n                      'link_scope_lsa_cksum_sum': <class 'int'>,\n                      },\n                    'interface_type': <class 'str'>,\n                    Optional  (str) transmit_delay: <class 'int'>,\n                    'index': <class 'int'>,\n                    Optional  (str) passive: <class 'bool'>,\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "doc": "Parser for:\n        show ip ospf interface\n        show ip ospf interface vrf <vrf>", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_ospf.py#L1783", "class": "ShowIpOspfInterface", "module_name": "show_ospf"}, "iosxe": {"uid": "show_ip_ospf_interface", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'address_family': {\n      Any  (str) *: {\n        'instance': {\n          Any  (str) *: {\n            'areas': {\n              Any  (str) *: {\n                Optional  (str) sham_links: {\n                  Any  (str) *: {\n                    Optional  (str) neighbors: {\n                      Any  (str) *: {\n                        Optional  (str) dr_router_id: <class 'str'>,\n                        Optional  (str) bdr_router_id: <class 'str'>,\n                        },\n                      },\n                    Optional  (str) transmit_delay: <class 'int'>,\n                    Optional  (str) bdr_ip_addr: <class 'str'>,\n                    Optional  (str) passive: <class 'bool'>,\n                    Optional  (str) hello_interval: <class 'int'>,\n                    Optional  (str) authentication: {\n                      'auth_trailer_key': {\n                        Optional  (str) youngest_key_id: <class 'int'>,\n                        'crypto_algorithm': <class 'str'>,\n                        },\n                      },\n                    Optional  (str) dead_interval: <class 'int'>,\n                    Optional  (str) wait_interval: <class 'int'>,\n                    Optional  (str) retransmit_interval: <class 'int'>,\n                    'line_protocol': <class 'bool'>,\n                    Optional  (str) oob_resync_timeout: <class 'int'>,\n                    'enable': <class 'bool'>,\n                    Optional  (str) hello_timer: <class 'str'>,\n                    Optional  (str) index: <class 'str'>,\n                    Optional  (str) flood_queue_length: <class 'int'>,\n                    Optional  (str) next: <class 'str'>,\n                    Optional  (str) lls: <class 'bool'>,\n                    Optional  (str) last_flood_scan_length: <class 'int'>,\n                    Optional  (str) max_flood_scan_length: <class 'int'>,\n                    Optional  (str) last_flood_scan_time_msec: <class 'int'>,\n                    Optional  (str) max_flood_scan_time_msec: <class 'int'>,\n                    Optional  (str) total_dcbitless_lsa: <class 'int'>,\n                    Optional  (str) donotage_lsa: <class 'bool'>,\n                    'ip_address': <class 'str'>,\n                    Optional  (str) ti_lfa_protected: <class 'bool'>,\n                    Optional  (str) ipfrr_candidate: <class 'bool'>,\n                    Optional  (str) ipfrr_protected: <class 'bool'>,\n                    'router_id': <class 'str'>,\n                    Optional  (str) prefix_suppression: <class 'bool'>,\n                    Optional  (str) stub_host: <class 'bool'>,\n                    'demand_circuit': <class 'bool'>,\n                    Optional  (str) ttl_security: {\n                      'enable': <class 'bool'>,\n                      Optional  (str) hops: <class 'int'>,\n                      },\n                    Optional  (str) interface_id: <class 'int'>,\n                    Optional  (str) graceful_restart: {\n                      Any  (str) *: {\n                        'helper': <class 'bool'>,\n                        'type': <class 'str'>,\n                        },\n                      },\n                    Optional  (str) attached: <class 'str'>,\n                    Optional  (str) if_cfg: <class 'bool'>,\n                    'name': <class 'str'>,\n                    Optional  (str) topology: {\n                      Any  (str) *: {\n                        'cost': <class 'int'>,\n                        'shutdown': <class 'bool'>,\n                        'name': <class 'str'>,\n                        'disabled': <class 'bool'>,\n                        },\n                      },\n                    Optional  (str) cost: <class 'int'>,\n                    'bfd': {\n                      'enable': <class 'bool'>,\n                      },\n                    Optional  (str) state: <class 'str'>,\n                    Optional  (str) priority: <class 'int'>,\n                    Optional  (str) statistics: {\n                      Optional  (str) num_nbrs_suppress_hello: <class 'int'>,\n                      Optional  (str) adj_nbr_count: <class 'int'>,\n                      Optional  (str) nbr_count: <class 'int'>,\n                      },\n                    Optional  (str) dr_router_id: <class 'str'>,\n                    'interface_type': <class 'str'>,\n                    Optional  (str) dr_ip_addr: <class 'str'>,\n                    Optional  (str) bdr_router_id: <class 'str'>,\n                    },\n                  },\n                Optional  (str) virtual_links: {\n                  Any  (str) *: {\n                    Optional  (str) max_flood_scan_time_msec: <class 'int'>,\n                    'enable': <class 'bool'>,\n                    Optional  (str) total_dcbitless_lsa: <class 'int'>,\n                    Optional  (str) donotage_lsa: <class 'bool'>,\n                    Optional  (str) ti_lfa_protected: <class 'bool'>,\n                    Optional  (str) ipfrr_candidate: <class 'bool'>,\n                    Optional  (str) ipfrr_protected: <class 'bool'>,\n                    'line_protocol': <class 'bool'>,\n                    Optional  (str) stub_host: <class 'bool'>,\n                    Optional  (str) prefix_suppression: <class 'bool'>,\n                    'ip_address': <class 'str'>,\n                    Optional  (str) ttl_security: {\n                      'enable': <class 'bool'>,\n                      Optional  (str) hops: <class 'int'>,\n                      },\n                    Optional  (str) graceful_restart: {\n                      Any  (str) *: {\n                        'helper': <class 'bool'>,\n                        'type': <class 'str'>,\n                        },\n                      },\n                    Optional  (str) interface_id: <class 'int'>,\n                    Optional  (str) attached: <class 'str'>,\n                    Optional  (str) topology: {\n                      Any  (str) *: {\n                        'cost': <class 'int'>,\n                        'shutdown': <class 'bool'>,\n                        'name': <class 'str'>,\n                        'disabled': <class 'bool'>,\n                        },\n                      },\n                    Optional  (str) if_cfg: <class 'bool'>,\n                    Optional  (str) cost: <class 'int'>,\n                    Optional  (str) transmit_delay: <class 'int'>,\n                    Optional  (str) state: <class 'str'>,\n                    Optional  (str) statistics: {\n                      Optional  (str) num_nbrs_suppress_hello: <class 'int'>,\n                      Optional  (str) adj_nbr_count: <class 'int'>,\n                      Optional  (str) nbr_count: <class 'int'>,\n                      },\n                    Optional  (str) priority: <class 'int'>,\n                    Optional  (str) dr_router_id: <class 'str'>,\n                    Optional  (str) dr_ip_addr: <class 'str'>,\n                    Optional  (str) bdr_router_id: <class 'str'>,\n                    Optional  (str) neighbors: {\n                      Any  (str) *: {\n                        Optional  (str) dr_router_id: <class 'str'>,\n                        Optional  (str) bdr_router_id: <class 'str'>,\n                        },\n                      },\n                    'router_id': <class 'str'>,\n                    Optional  (str) hello_interval: <class 'int'>,\n                    Optional  (str) authentication: {\n                      'auth_trailer_key': {\n                        'crypto_algorithm': <class 'str'>,\n                        Optional  (str) youngest_key_id: <class 'int'>,\n                        },\n                      },\n                    Optional  (str) bdr_ip_addr: <class 'str'>,\n                    'demand_circuit': <class 'bool'>,\n                    Optional  (str) wait_interval: <class 'int'>,\n                    Optional  (str) retransmit_interval: <class 'int'>,\n                    Optional  (str) passive: <class 'bool'>,\n                    Optional  (str) oob_resync_timeout: <class 'int'>,\n                    'name': <class 'str'>,\n                    Optional  (str) hello_timer: <class 'str'>,\n                    Optional  (str) index: <class 'str'>,\n                    'bfd': {\n                      'enable': <class 'bool'>,\n                      },\n                    Optional  (str) flood_queue_length: <class 'int'>,\n                    Optional  (str) dead_interval: <class 'int'>,\n                    Optional  (str) next: <class 'str'>,\n                    Optional  (str) lls: <class 'bool'>,\n                    'interface_type': <class 'str'>,\n                    Optional  (str) last_flood_scan_length: <class 'int'>,\n                    Optional  (str) max_flood_scan_length: <class 'int'>,\n                    Optional  (str) last_flood_scan_time_msec: <class 'int'>,\n                    },\n                  },\n                Optional  (str) interfaces: {\n                  Any  (str) *: {\n                    Optional  (str) transmit_delay: <class 'int'>,\n                    Optional  (str) ttl_security: {\n                      Optional  (str) hops: <class 'int'>,\n                      'enable': <class 'bool'>,\n                      },\n                    Optional  (str) ti_lfa_protected: <class 'bool'>,\n                    Optional  (str) state: <class 'str'>,\n                    Optional  (str) priority: <class 'int'>,\n                    Optional  (str) statistics: {\n                      Optional  (str) num_nbrs_suppress_hello: <class 'int'>,\n                      Optional  (str) nbr_count: <class 'int'>,\n                      Optional  (str) adj_nbr_count: <class 'int'>,\n                      },\n                    Optional  (str) dr_router_id: <class 'str'>,\n                    Optional  (str) dr_ip_addr: <class 'str'>,\n                    Optional  (str) bdr_router_id: <class 'str'>,\n                    'line_protocol': <class 'bool'>,\n                    Optional  (str) bdr_ip_addr: <class 'str'>,\n                    Optional  (str) neighbors: {\n                      Any  (str) *: {\n                        Optional  (str) bdr_router_id: <class 'str'>,\n                        Optional  (str) dr_router_id: <class 'str'>,\n                        },\n                      },\n                    Optional  (str) hello_interval: <class 'int'>,\n                    Optional  (str) dead_interval: <class 'int'>,\n                    'ip_address': <class 'str'>,\n                    Optional  (str) wait_interval: <class 'int'>,\n                    Optional  (str) retransmit_interval: <class 'int'>,\n                    Optional  (str) passive: <class 'bool'>,\n                    Optional  (str) authentication: {\n                      'auth_trailer_key': {\n                        Optional  (str) youngest_key_id: <class 'int'>,\n                        'crypto_algorithm': <class 'str'>,\n                        },\n                      },\n                    'enable': <class 'bool'>,\n                    Optional  (str) oob_resync_timeout: <class 'int'>,\n                    Optional  (str) hello_timer: <class 'str'>,\n                    Optional  (str) index: <class 'str'>,\n                    Optional  (str) flood_queue_length: <class 'int'>,\n                    Optional  (str) next: <class 'str'>,\n                    Optional  (str) lls: <class 'bool'>,\n                    Optional  (str) last_flood_scan_length: <class 'int'>,\n                    Optional  (str) max_flood_scan_length: <class 'int'>,\n                    Optional  (str) last_flood_scan_time_msec: <class 'int'>,\n                    Optional  (str) max_flood_scan_time_msec: <class 'int'>,\n                    'router_id': <class 'str'>,\n                    Optional  (str) total_dcbitless_lsa: <class 'int'>,\n                    Optional  (str) donotage_lsa: <class 'bool'>,\n                    'demand_circuit': <class 'bool'>,\n                    Optional  (str) ipfrr_candidate: <class 'bool'>,\n                    Optional  (str) ipfrr_protected: <class 'bool'>,\n                    Optional  (str) stub_host: <class 'bool'>,\n                    Optional  (str) prefix_suppression: <class 'bool'>,\n                    'name': <class 'str'>,\n                    'bfd': {\n                      'enable': <class 'bool'>,\n                      },\n                    Optional  (str) interface_id: <class 'int'>,\n                    Optional  (str) graceful_restart: {\n                      Any  (str) *: {\n                        'helper': <class 'bool'>,\n                        'type': <class 'str'>,\n                        },\n                      },\n                    'interface_type': <class 'str'>,\n                    Optional  (str) attached: <class 'str'>,\n                    Optional  (str) topology: {\n                      Any  (str) *: {\n                        'cost': <class 'int'>,\n                        'shutdown': <class 'bool'>,\n                        'name': <class 'str'>,\n                        'disabled': <class 'bool'>,\n                        },\n                      },\n                    Optional  (str) if_cfg: <class 'bool'>,\n                    Optional  (str) cost: <class 'int'>,\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "doc": " Parser for:\n        * 'show ip ospf interface'\n    ", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_ospf.py#L1420", "class": "ShowIpOspfInterface", "module_name": "show_ospf"}}, "show l2vpn xconnect brief": {"iosxr": {"uid": "show_l2vpn_xconnect_brief", "schema": null, "doc": "Parser for show l2vpn xconnect brief", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_xconnect.py#L83", "class": "ShowL2VpnXconnectBrief", "module_name": "show_xconnect"}}, "show stack-power": {"iosxe": {"uid": "show_stack-power", "schema": "{\n'power_stack': {\n  Any  (str) *: {\n    'total_power': <class 'int'>,\n    'topology': <class 'str'>,\n    'power_supply_num': <class 'int'>,\n    'reserved_power': <class 'int'>,\n    'switch_num': <class 'int'>,\n    'allocated_power': <class 'int'>,\n    'mode': <class 'str'>,\n    'unused_power': <class 'int'>,\n    },\n  },\n}", "doc": "Parser for show stack-power", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_power.py#L37", "class": "ShowStackPower", "module_name": "show_power"}}, "show nve multisite fabric-links": {"nxos": {"uid": "show_nve_multisite_fabric-links", "schema": "{\n'multisite': {\n  'fabric_links': {\n    Any  (str) *: {\n      'if_state': <class 'str'>,\n      'if_name': <class 'str'>,\n      },\n    },\n  },\n}", "doc": "parser for:\n        show nve multisite fabric-links", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_vxlan.py#L663", "class": "ShowNveMultisiteFabricLinks", "module_name": "show_vxlan"}}, "show ip bgp {address_family} vrf {vrf}": {"iosxe": {"uid": "show_ip_bgp_address_family_vrf_vrf", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'address_family': {\n      Any  (str) *: {\n        Optional  (str) pfx_limit: <class 'int'>,\n        Optional  (str) route_distinguisher: <class 'str'>,\n        Optional  (str) default_vrf: <class 'str'>,\n        Optional  (str) bgp_table_version: <class 'int'>,\n        Optional  (str) af_private_import_to_address_family: <class 'str'>,\n        Optional  (str) route_identifier: <class 'str'>,\n        Optional  (str) pfx_count: <class 'int'>,\n        Optional  (str) routes: {\n          Optional  (Any) Any  (str) *: {\n            Optional  (str) index: {\n              Optional  (Any) Any  (str) *: {\n                Optional  (str) weight: <class 'int'>,\n                Optional  (str) next_hop: <class 'str'>,\n                Optional  (str) path: <class 'str'>,\n                Optional  (str) status_codes: <class 'str'>,\n                Optional  (str) origin_codes: <class 'str'>,\n                Optional  (str) metric: <class 'int'>,\n                Optional  (str) localpref: <class 'int'>,\n                },\n              },\n            },\n          },\n        Optional  (str) vrf_route_identifier: <class 'str'>,\n        },\n      },\n    },\n  },\n}", "doc": " Parser for:\n        * 'show ip bgp'\n        * 'show ip bgp {address_family}'\n        * 'show ip bgp {address_family} rd {rd}'\n        * 'show ip bgp {address_family} vrf {vrf}'\n    ", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_bgp.py#L669", "class": "ShowIpBgp", "module_name": "show_bgp"}}, "show ipv6 route": {"nxos": {"uid": "show_ipv6_route", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    Optional  (str) address_family: {\n      Any  (str) *: {\n        Optional  (str) routes: {\n          Any  (str) *: {\n            Optional  (str) next_hop: {\n              Optional  (str) next_hop_list: {\n                Any  (str) *: {\n                  Optional  (str) best_mcast_nexthop: <class 'bool'>,\n                  Optional  (str) next_hop: <class 'str'>,\n                  Optional  (str) best_ucast_nexthop: <class 'bool'>,\n                  Optional  (str) updated: <class 'str'>,\n                  Optional  (str) outgoing_interface: <class 'str'>,\n                  Optional  (str) index: <class 'int'>,\n                  Optional  (str) next_hop_vrf: <class 'str'>,\n                  Optional  (str) next_hop_af: <class 'str'>,\n                  },\n                },\n              Optional  (str) outgoing_interface: {\n                Any  (str) *: {\n                  Optional  (str) outgoing_interface: <class 'str'>,\n                  Optional  (str) best_ucast_nexthop: <class 'bool'>,\n                  Optional  (str) updated: <class 'str'>,\n                  Optional  (str) best_mcast_nexthop: <class 'bool'>,\n                  },\n                },\n              },\n            Optional  (str) ubest: <class 'int'>,\n            Optional  (str) process_id: <class 'str'>,\n            Optional  (str) route_preference: <class 'int'>,\n            Optional  (str) active: <class 'bool'>,\n            Optional  (str) source_protocol_status: <class 'str'>,\n            Optional  (str) attached: <class 'bool'>,\n            Optional  (str) route: <class 'str'>,\n            Optional  (str) source_protocol: <class 'str'>,\n            Optional  (str) tag: <class 'int'>,\n            Optional  (str) mbest: <class 'int'>,\n            Optional  (str) metric: <class 'int'>,\n            },\n          },\n        },\n      },\n    },\n  },\n}", "doc": "Parser for :\n       show ipv6 route\n       show ipv6 route vrf <vrf>\n       show ipv6 route vrf all", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_routing.py#L634", "class": "ShowIpv6Route", "module_name": "show_routing"}}, "show install active": {"nxos": {"uid": "show_install_active", "schema": "{\nOptional  (str) active_packages: {\n  Any  (str) *: {\n    Optional  (str) active_package_name: <class 'str'>,\n    },\n  },\n'boot_images': {\n  Optional  (str) kickstart_image: <class 'str'>,\n  Optional  (str) system_image: <class 'str'>,\n  },\n}", "doc": "Parser for show install active", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_platform.py#L434", "class": "ShowInstallActive", "module_name": "show_platform"}}, "show ospf vrf all-inclusive database summary": {"iosxr": {"uid": "show_ospf_vrf_all-inclusive_database_summary", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'address_family': {\n      Any  (str) *: {\n        'instance': {\n          Any  (str) *: {\n            Optional  (str) areas: {\n              Any  (str) *: {\n                'database': {\n                  'lsa_types': {\n                    Any  (str) *: {\n                      'lsa_type': <class 'int'>,\n                      'lsas': {\n                        Any  (str) *: {\n                          'ospfv2': {\n                            'header': {\n                              'age': <class 'int'>,\n                              'option_desc': <class 'str'>,\n                              'adv_router': <class 'str'>,\n                              Optional  (str) routing_bit_enable: <class 'bool'>,\n                              'seq_num': <class 'str'>,\n                              'length': <class 'int'>,\n                              'checksum': <class 'str'>,\n                              'type': <class 'int'>,\n                              'lsa_id': <class 'str'>,\n                              'option': <class 'str'>,\n                              },\n                            'body': {\n                              'summary': {\n                                'topologies': {\n                                  Any  (str) *: {\n                                    'tos': <class 'int'>,\n                                    'metric': <class 'int'>,\n                                    'mt_id': <class 'int'>,\n                                    },\n                                  },\n                                'network_mask': <class 'str'>,\n                                },\n                              },\n                            },\n                          'lsa_id': <class 'str'>,\n                          'adv_router': <class 'str'>,\n                          },\n                        },\n                      },\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "doc": "\n    Parser for show ospf vrf all-inclusive database summary\n    For checking any output with the parser ,below mandatory key(s) are needed and have to be in cli command.\n\n    - db_type\n    ", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_ospf.py#L3857", "class": "ShowOspfVrfAllInclusiveDatabaseSummary", "module_name": "show_ospf"}}, "show mpls ldp capabilities {all}": {"iosxe": {"uid": "show_mpls_ldp_capabilities_all", "schema": "{\n'ldp_capabilities': {\n  Optional  (str) min_version: <class 'int'>,\n  Optional  (str) mldp_point_to_multipoint: <class 'str'>,\n  Optional  (str) iccp_type: <class 'str'>,\n  Optional  (str) mldp_multipoint_to_multipoint: <class 'str'>,\n  'typed_wildcard': <class 'str'>,\n  Optional  (str) maj_version: <class 'int'>,\n  'dynamic_anouncement': <class 'str'>,\n  },\n}", "doc": "\n       Parser for show mpls ldp capabilities\n                  show mpls ldp capabilities all\n       ", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_mpls.py#L1210", "class": "ShowMplsLdpCapabilities", "module_name": "show_mpls"}}, "show platform hardware qfp active infrastructure bqs queue output default all": {"ios": {"uid": "show_platform_hardware_qfp_active_infrastructure_bqs_queue_output_default_all", "schema": "{\nAny  (str) *: {\n  Optional  (str) index: {\n    Any  (str) *: {\n      'software_control_info': {\n        'max_dflt': <class 'int'>,\n        'wred': <class 'str'>,\n        'min_dflt': <class 'int'>,\n        'port_uidb': <class 'int'>,\n        'cache_queue_id': <class 'str'>,\n        'priority': <class 'int'>,\n        'max': <class 'int'>,\n        'defer_obj_refcnt': <class 'int'>,\n        'sw_flags': <class 'str'>,\n        'min_qos': <class 'int'>,\n        'sw_state': <class 'str'>,\n        'min': <class 'int'>,\n        'orig_min': <class 'int'>,\n        'qlimit_bytes': <class 'int'>,\n        'parent_sid': <class 'str'>,\n        'orig_max': <class 'int'>,\n        'max_qos': <class 'int'>,\n        'plevel': <class 'int'>,\n        'share': <class 'int'>,\n        'debug_name': <class 'str'>,\n        },\n      'statistics': {\n        'queue_depth_bytes': <class 'int'>,\n        'tail_drops_packets': <class 'int'>,\n        'tail_drops_bytes': <class 'int'>,\n        'total_enqs_packets': <class 'int'>,\n        'lic_throughput_oversub_drops_packets': <class 'int'>,\n        'total_enqs_bytes': <class 'int'>,\n        'lic_throughput_oversub_drops_bytes': <class 'int'>,\n        },\n      'name': <class 'str'>,\n      'queue_id': <class 'str'>,\n      },\n    },\n  'if_h': <class 'int'>,\n  },\n}", "doc": "Parser for show platform hardware qfp active infrastructure bqs queue output default all", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_platform.py#L346", "class": "ShowPlatformHardware", "module_name": "show_platform"}, "iosxe": {"uid": "show_platform_hardware_qfp_active_infrastructure_bqs_queue_output_default_all", "schema": "{\nAny  (str) *: {\n  Optional  (str) index: {\n    Any  (str) *: {\n      'software_control_info': {\n        'max_dflt': <class 'int'>,\n        'wred': <class 'str'>,\n        'min_dflt': <class 'int'>,\n        'port_uidb': <class 'int'>,\n        'cache_queue_id': <class 'str'>,\n        'priority': <class 'int'>,\n        'max': <class 'int'>,\n        'defer_obj_refcnt': <class 'int'>,\n        'sw_flags': <class 'str'>,\n        'min_qos': <class 'int'>,\n        'sw_state': <class 'str'>,\n        'min': <class 'int'>,\n        'orig_min': <class 'int'>,\n        'qlimit_bytes': <class 'int'>,\n        'parent_sid': <class 'str'>,\n        'orig_max': <class 'int'>,\n        'max_qos': <class 'int'>,\n        'plevel': <class 'int'>,\n        'share': <class 'int'>,\n        'debug_name': <class 'str'>,\n        },\n      'statistics': {\n        'queue_depth_bytes': <class 'int'>,\n        'tail_drops_packets': <class 'int'>,\n        'tail_drops_bytes': <class 'int'>,\n        'total_enqs_packets': <class 'int'>,\n        'lic_throughput_oversub_drops_packets': <class 'int'>,\n        'total_enqs_bytes': <class 'int'>,\n        'lic_throughput_oversub_drops_bytes': <class 'int'>,\n        },\n      'name': <class 'str'>,\n      'queue_id': <class 'str'>,\n      },\n    },\n  'if_h': <class 'int'>,\n  },\n}", "doc": "Parser for show platform hardware qfp active infrastructure bqs queue output default all", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_platform.py#L2568", "class": "ShowPlatformHardware", "module_name": "show_platform"}}, "show ipv6 mld vrf {vrf} ssm-map {group}": {"ios": {"uid": "show_ipv6_mld_vrf_vrf_ssm-map_group", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'ssm_map': {\n      Any  (str) *: {\n        'group_address': <class 'str'>,\n        'group_mode_ssm': <class 'bool'>,\n        'database': <class 'str'>,\n        'source_addr': <class 'str'>,\n        },\n      },\n    },\n  },\n}", "doc": "Parser for:\n        show ipv6 mld ssm-map <group_address>\n        show ipv6 mld vrf <vrf> ssm-map <group_address>", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_mld.py#L30", "class": "ShowIpv6MldSsmMap", "module_name": "show_mld"}, "iosxe": {"uid": "show_ipv6_mld_vrf_vrf_ssm-map_group", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'ssm_map': {\n      Any  (str) *: {\n        'group_address': <class 'str'>,\n        'group_mode_ssm': <class 'bool'>,\n        'database': <class 'str'>,\n        'source_addr': <class 'str'>,\n        },\n      },\n    },\n  },\n}", "doc": "Parser for:\n        show ipv6 mld ssm-map <group_address>\n        show ipv6 mld vrf <vrf> ssm-map <group_address>", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_mld.py#L451", "class": "ShowIpv6MldSsmMap", "module_name": "show_mld"}}, "show mpls interfaces": {"iosxe": {"uid": "show_mpls_interfaces", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'interfaces': {\n      Any  (str) *: {\n        Optional  (str) bgp: <class 'str'>,\n        Optional  (str) ip_labeling_enabled: {\n          Any  (str) *: {\n            'ldp': <class 'bool'>,\n            Optional  (str) interface_config: <class 'bool'>,\n            },\n          },\n        Optional  (str) lsp_tunnel_labeling_enabled: <class 'bool'>,\n        Optional  (str) tunnel: <class 'str'>,\n        Optional  (str) lp_frr_labeling_enabled: <class 'bool'>,\n        Optional  (str) mpls_operational: <class 'bool'>,\n        Optional  (str) bgp_labeling_enabled: <class 'bool'>,\n        Optional  (str) static: <class 'str'>,\n        Optional  (str) operational: <class 'str'>,\n        Optional  (str) mtu: <class 'int'>,\n        Optional  (str) type: <class 'str'>,\n        Optional  (str) session: <class 'str'>,\n        Optional  (str) ip: <class 'str'>,\n        },\n      },\n    },\n  },\n}", "doc": "Parser for\n        show mpls interfaces\n        show mpls interfaces all\n        show mpls interfaces vrf <vrf>\n        show mpls interfaces <interface>\n        show mpls interfaces <interface> detail\n        show mpls interfaces detail", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_mpls.py#L2049", "class": "ShowMplsInterface", "module_name": "show_mpls"}}, "show protocols afi-all all": {"iosxr": {"uid": "show_protocols_afi-all_all", "schema": "{\n'protocols': {\n  Optional  (str) ospf: {\n    'vrf': {\n      Any  (str) *: {\n        'address_family': {\n          Any  (str) *: {\n            'instance': {\n              Any  (str) *: {\n                Optional  (str) areas: {\n                  Any  (str) *: {\n                    Optional  (str) mpls: {\n                      Optional  (str) te: {\n                        Optional  (str) enable: <class 'bool'>,\n                        },\n                      },\n                    'interfaces': <class 'list'>,\n                    },\n                  },\n                Optional  (str) redistribution: {\n                  Optional  (str) isis: {\n                    Optional  (str) metric: <class 'int'>,\n                    'isis_pid': <class 'str'>,\n                    },\n                  Optional  (str) bgp: {\n                    Optional  (str) metric: <class 'int'>,\n                    'bgp_id': <class 'int'>,\n                    },\n                  Optional  (str) static: {\n                    'enabled': <class 'bool'>,\n                    Optional  (str) metric: <class 'int'>,\n                    },\n                  Optional  (str) connected: {\n                    'enabled': <class 'bool'>,\n                    Optional  (str) metric: <class 'int'>,\n                    },\n                  },\n                Optional  (str) preference: {\n                  Optional  (str) multi_values: {\n                    'granularity': {\n                      'detail': {\n                        'inter_area': <class 'int'>,\n                        'intra_area': <class 'int'>,\n                        },\n                      },\n                    'external': <class 'int'>,\n                    },\n                  Optional  (str) single_value: {\n                    'all': <class 'int'>,\n                    },\n                  },\n                'router_id': <class 'str'>,\n                Optional  (str) nsf: <class 'bool'>,\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  Optional  (str) bgp: {\n    'bgp_pid': <class 'int'>,\n    Optional  (str) address_family: {\n      Any  (str) *: {\n        Optional  (str) neighbors: {\n          Any  (str) *: {\n            'nsr_state': <class 'str'>,\n            'gr_enable': <class 'str'>,\n            'last_update': <class 'str'>,\n            },\n          },\n        Optional  (str) distance: {\n          Optional  (str) local: <class 'int'>,\n          Optional  (str) external: <class 'int'>,\n          Optional  (str) internal: <class 'int'>,\n          },\n        },\n      },\n    Optional  (str) nsr: {\n      'current_state': <class 'str'>,\n      'enable': <class 'bool'>,\n      },\n    Optional  (str) graceful_restart: {\n      'enable': <class 'bool'>,\n      },\n    },\n  Optional  (str) ospfv3: {\n    'vrf': {\n      Any  (str) *: {\n        'address_family': {\n          Any  (str) *: {\n            'instance': {\n              Any  (str) *: {\n                Optional  (str) nsf: <class 'bool'>,\n                Optional  (str) redistribution: {\n                  Optional  (str) isis: {\n                    Optional  (str) metric: <class 'int'>,\n                    'isis_pid': <class 'str'>,\n                    },\n                  Optional  (str) bgp: {\n                    Optional  (str) metric: <class 'int'>,\n                    'bgp_id': <class 'int'>,\n                    },\n                  Optional  (str) static: {\n                    'enabled': <class 'bool'>,\n                    Optional  (str) metric: <class 'int'>,\n                    },\n                  Optional  (str) connected: {\n                    'enabled': <class 'bool'>,\n                    Optional  (str) metric: <class 'int'>,\n                    },\n                  },\n                Optional  (str) preference: {\n                  Optional  (str) multi_values: {\n                    'granularity': {\n                      'detail': {\n                        'inter_area': <class 'int'>,\n                        'intra_area': <class 'int'>,\n                        },\n                      },\n                    'external': <class 'int'>,\n                    },\n                  Optional  (str) single_value: {\n                    'all': <class 'int'>,\n                    },\n                  },\n                'router_id': <class 'str'>,\n                Optional  (str) areas: {\n                  Any  (str) *: {\n                    Optional  (str) mpls: {\n                      Optional  (str) te: {\n                        Optional  (str) enable: <class 'bool'>,\n                        },\n                      },\n                    'interfaces': <class 'list'>,\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "doc": "Parser for show protocols afi-all all", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_protocol.py#L152", "class": "ShowProtocolsAfiAllAll", "module_name": "show_protocol"}}, "show ip ospf sham-links vrf {vrf}": {"nxos": {"uid": "show_ip_ospf_sham-links_vrf_vrf", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'address_family': {\n      Any  (str) *: {\n        'instance': {\n          Any  (str) *: {\n            'areas': {\n              Any  (str) *: {\n                'sham_links': {\n                  Any  (str) *: {\n                    'dead_interval': <class 'int'>,\n                    'retransmit_interval': <class 'int'>,\n                    'transit_area_id': <class 'str'>,\n                    'index': <class 'int'>,\n                    'wait_interval': <class 'int'>,\n                    'local_id': <class 'str'>,\n                    Optional  (str) authentication: {\n                      Optional  (str) key_id: <class 'str'>,\n                      Optional  (str) auth_trailer_key_chain: {\n                        Optional  (str) status: <class 'str'>,\n                        'key_chain': <class 'str'>,\n                        },\n                      Optional  (str) auth_trailer_key: {\n                        'crypto_algorithm': <class 'str'>,\n                        },\n                      },\n                    'statistics': {\n                      'link_scope_lsa_count': <class 'int'>,\n                      'link_scope_lsa_cksum_sum': <class 'int'>,\n                      },\n                    'state': <class 'str'>,\n                    Optional  (str) hello_timer: <class 'str'>,\n                    Optional  (str) wait_timer: <class 'int'>,\n                    'hello_interval': <class 'int'>,\n                    'destination': <class 'str'>,\n                    Optional  (str) neighbors: {\n                      Any  (str) *: {\n                        'dead_timer': <class 'str'>,\n                        'remote': <class 'str'>,\n                        'address': <class 'str'>,\n                        'area': <class 'str'>,\n                        'instance': <class 'str'>,\n                        'backbone_area_id': <class 'str'>,\n                        'statistics': {\n                          Optional  (str) nbr_retrans_qlen: <class 'str'>,\n                          'nbr_event_count': <class 'int'>,\n                          },\n                        'state': <class 'str'>,\n                        'hello_option': <class 'str'>,\n                        'neighbor_router_id': <class 'str'>,\n                        'last_change': <class 'str'>,\n                        'last_non_hello_received': <class 'str'>,\n                        'dbd_option': <class 'str'>,\n                        'local': <class 'str'>,\n                        },\n                      },\n                    'remote_id': <class 'str'>,\n                    'name': <class 'str'>,\n                    'transmit_delay': <class 'int'>,\n                    Optional  (str) unnumbered_interface: <class 'str'>,\n                    'backbone_area_id': <class 'str'>,\n                    Optional  (str) unnumbered_ip_address: <class 'str'>,\n                    Optional  (str) nbr_total: <class 'int'>,\n                    'interface_type': <class 'str'>,\n                    Optional  (str) nbr_flood: <class 'int'>,\n                    'link_state': <class 'str'>,\n                    Optional  (str) nbr_adjs: <class 'int'>,\n                    'cost': <class 'int'>,\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "doc": "Parser for:\n        show ip ospf sham-links\n        show ip ospf sham-links vrf <vrf>", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_ospf.py#L1615", "class": "ShowIpOspfShamLinks", "module_name": "show_ospf"}}, "show ip bgp {address_family} summary": {"iosxe": {"uid": "show_ip_bgp_address_family_summary", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    Optional  (str) neighbor: {\n      Any  (str) *: {\n        'address_family': {\n          Any  (str) *: {\n            Optional  (str) prefixes: {\n              'total_entries': <class 'int'>,\n              'memory_usage': <class 'int'>,\n              },\n            'msg_rcvd': <class 'int'>,\n            Optional  (str) path: {\n              'total_entries': <class 'int'>,\n              'memory_usage': <class 'int'>,\n              },\n            Optional  (str) cache_entries: {\n              Any  (str) *: {\n                'total_entries': <class 'int'>,\n                'memory_usage': <class 'int'>,\n                },\n              },\n            'input_queue': <class 'int'>,\n            'state_pfxrcd': <class 'str'>,\n            Optional  (str) entries: {\n              Any  (str) *: {\n                'total_entries': <class 'int'>,\n                'memory_usage': <class 'int'>,\n                },\n              },\n            Optional  (str) community_entries: {\n              'total_entries': <class 'int'>,\n              'memory_usage': <class 'int'>,\n              },\n            Optional  (str) attribute_entries: <class 'str'>,\n            'as': <class 'int'>,\n            Optional  (str) total_memory: <class 'int'>,\n            Optional  (str) activity_prefixes: <class 'str'>,\n            'tbl_ver': <class 'int'>,\n            Optional  (str) activity_paths: <class 'str'>,\n            Optional  (str) scan_interval: <class 'int'>,\n            'output_queue': <class 'int'>,\n            'msg_sent': <class 'int'>,\n            Optional  (str) route_identifier: <class 'str'>,\n            Optional  (str) local_as: <class 'int'>,\n            'up_down': <class 'str'>,\n            Optional  (str) bgp_table_version: <class 'int'>,\n            'version': <class 'int'>,\n            Optional  (str) routing_table_version: <class 'int'>,\n            },\n          },\n        },\n      },\n    },\n  },\n'bgp_id': <class 'int'>,\n}", "doc": " Parser for:\n        * 'show ip bgp summary'\n        * 'show ip bgp {address_family} summary'\n        * 'show ip bgp {address_family} vrf {vrf} summary'\n        * 'show ip bgp {address_family} rd {rd} summary'\n    ", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_bgp.py#L2132", "class": "ShowIpBgpSummary", "module_name": "show_bgp"}}, "show vlan filter": {"ios": {"uid": "show_vlan_filter", "schema": "{\n'vlan_id': {\n  Any  (str) *: {\n    'access_map_tag': <class 'str'>,\n    },\n  },\n}", "doc": null, "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_vlan.py#L26", "class": "ShowVlanFilter", "module_name": "show_vlan"}, "nxos": {"uid": "show_vlan_filter", "schema": "{\n'vlan_id': {\n  Any  (str) *: {\n    'access_map_tag': <class 'str'>,\n    },\n  },\n}", "doc": "Parser for show vlan filter", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_vlan.py#L516", "class": "ShowVlanFilter", "module_name": "show_vlan"}, "iosxe": {"uid": "show_vlan_filter", "schema": "{\n'vlan_id': {\n  Any  (str) *: {\n    'access_map_tag': <class 'str'>,\n    },\n  },\n}", "doc": "Parser for show vlan filter", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_vlan.py#L447", "class": "ShowVlanFilter", "module_name": "show_vlan"}}, "show routing vrf all": {"nxos": {"uid": "show_routing_vrf_all", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    Optional  (str) address_family: {\n      Any  (str) *: {\n        'ip': {\n          Any  (str) *: {\n            'mbest_num': <class 'str'>,\n            'ubest_num': <class 'str'>,\n            Optional  (str) attach: <class 'str'>,\n            Optional  (str) best_route: {\n              Optional  (Any) Any  (str) *: {\n                Optional  (str) nexthop: {\n                  Optional  (Any) Any  (str) *: {\n                    Optional  (str) protocol: {\n                      Optional  (Any) Any  (str) *: {\n                        Optional  (str) attribute: <class 'str'>,\n                        Optional  (str) tag: <class 'str'>,\n                        Optional  (str) tunnelid: <class 'str'>,\n                        Optional  (str) encap: <class 'str'>,\n                        Optional  (str) route_table: <class 'str'>,\n                        Optional  (str) interface: <class 'str'>,\n                        Optional  (str) mpls: <class 'bool'>,\n                        Optional  (str) evpn: <class 'bool'>,\n                        Optional  (str) metric: <class 'str'>,\n                        Optional  (str) uptime: <class 'str'>,\n                        Optional  (str) segid: <class 'int'>,\n                        Optional  (str) mpls_vpn: <class 'bool'>,\n                        Optional  (str) protocol_id: <class 'str'>,\n                        Optional  (str) preference: <class 'str'>,\n                        },\n                      },\n                    },\n                  },\n                },\n              },\n            },\n          },\n        Optional  (str) bgp_distance_extern_as: <class 'int'>,\n        Optional  (str) bgp_distance_internal_as: <class 'int'>,\n        Optional  (str) bgp_distance_local: <class 'int'>,\n        },\n      },\n    },\n  },\n}", "doc": "Parser for show ip routing vrf all", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_routing.py#L74", "class": "ShowRoutingVrfAll", "module_name": "show_routing"}}, "show ip ospf neighbors detail vrf {vrf}": {"nxos": {"uid": "show_ip_ospf_neighbors_detail_vrf_vrf", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'address_family': {\n      Any  (str) *: {\n        'instance': {\n          Any  (str) *: {\n            'areas': {\n              Any  (str) *: {\n                Optional  (str) sham_links: {\n                  Any  (str) *: {\n                    'neighbors': {\n                      Any  (str) *: {\n                        Optional  (str) bdr_router_id: <class 'str'>,\n                        Optional  (str) statistics: {\n                          Optional  (str) nbr_event_count: <class 'int'>,\n                          },\n                        'dead_timer': <class 'str'>,\n                        'address': <class 'str'>,\n                        'dbd_options': <class 'str'>,\n                        'last_non_hello_packet_received': <class 'str'>,\n                        'state': <class 'str'>,\n                        'hello_options': <class 'str'>,\n                        Optional  (str) priority: <class 'int'>,\n                        'neighbor_router_id': <class 'str'>,\n                        Optional  (str) dr_ip_addr: <class 'str'>,\n                        Optional  (str) bdr_ip_addr: <class 'str'>,\n                        Optional  (str) dr_router_id: <class 'str'>,\n                        'last_state_change': <class 'str'>,\n                        },\n                      },\n                    },\n                  },\n                'interfaces': {\n                  Any  (str) *: {\n                    'neighbors': {\n                      Any  (str) *: {\n                        'dead_timer': <class 'str'>,\n                        Optional  (str) statistics: {\n                          Optional  (str) nbr_event_count: <class 'int'>,\n                          },\n                        'hello_options': <class 'str'>,\n                        'dbd_options': <class 'str'>,\n                        Optional  (str) priority: <class 'int'>,\n                        'state': <class 'str'>,\n                        'address': <class 'str'>,\n                        Optional  (str) dr_ip_addr: <class 'str'>,\n                        'neighbor_router_id': <class 'str'>,\n                        Optional  (str) bdr_ip_addr: <class 'str'>,\n                        Optional  (str) dr_router_id: <class 'str'>,\n                        'last_non_hello_packet_received': <class 'str'>,\n                        Optional  (str) bdr_router_id: <class 'str'>,\n                        'last_state_change': <class 'str'>,\n                        },\n                      },\n                    },\n                  },\n                Optional  (str) virtual_links: {\n                  Any  (str) *: {\n                    'neighbors': {\n                      Any  (str) *: {\n                        Optional  (str) priority: <class 'int'>,\n                        'dead_timer': <class 'str'>,\n                        Optional  (str) statistics: {\n                          Optional  (str) nbr_event_count: <class 'int'>,\n                          },\n                        'address': <class 'str'>,\n                        'dbd_options': <class 'str'>,\n                        'state': <class 'str'>,\n                        'hello_options': <class 'str'>,\n                        Optional  (str) dr_ip_addr: <class 'str'>,\n                        'neighbor_router_id': <class 'str'>,\n                        Optional  (str) bdr_ip_addr: <class 'str'>,\n                        Optional  (str) dr_router_id: <class 'str'>,\n                        'last_non_hello_packet_received': <class 'str'>,\n                        Optional  (str) bdr_router_id: <class 'str'>,\n                        'last_state_change': <class 'str'>,\n                        },\n                      },\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "doc": "Parser for:\n        show ip ospf neighbors detail\n        show ip ospf neighbors detail vrf <vrf>", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_ospf.py#L2307", "class": "ShowIpOspfNeighborDetail", "module_name": "show_ospf"}}, "show hsrp delay": {"nxos": {"uid": "show_hsrp_delay", "schema": "{\nAny  (str) *: {\n  'delay': {\n    'minimum_delay': <class 'int'>,\n    'reload_delay': <class 'int'>,\n    },\n  },\n}", "doc": " Parser for show hsrp delay ", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_hsrp.py#L665", "class": "ShowHsrpDelay", "module_name": "show_hsrp"}}, "show ip igmp interface": {"ios": {"uid": "show_ip_igmp_interface", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    Optional  (str) global_active_groups: <class 'int'>,\n    Optional  (str) global_max_groups: <class 'int'>,\n    'interface': {\n      Any  (str) *: {\n        'querier_timeout': <class 'int'>,\n        Optional  (str) last_member_query_count: <class 'int'>,\n        'query_max_response_time': <class 'int'>,\n        Optional  (str) multicast: {\n          Optional  (str) dr_this_system: <class 'bool'>,\n          Optional  (str) designated_router: <class 'str'>,\n          Optional  (str) routing_enable: <class 'bool'>,\n          Optional  (str) routing_table: <class 'str'>,\n          Optional  (str) ttl_threshold: <class 'int'>,\n          },\n        Optional  (str) group_policy: <class 'str'>,\n        'query_interval': <class 'int'>,\n        Optional  (str) query_this_system: <class 'bool'>,\n        Optional  (str) max_groups: <class 'int'>,\n        'enable': <class 'bool'>,\n        'router_version': <class 'int'>,\n        'host_version': <class 'int'>,\n        Optional  (str) active_groups: <class 'int'>,\n        Optional  (str) counters: {\n          'leaves': <class 'int'>,\n          'joins': <class 'int'>,\n          },\n        'interface_status': <class 'str'>,\n        'oper_status': <class 'str'>,\n        Optional  (str) joined_group: {\n          Any  (str) *: {\n            'number_of_users': <class 'int'>,\n            },\n          },\n        Optional  (str) interface_adress: <class 'str'>,\n        Optional  (str) querier: <class 'str'>,\n        Optional  (str) configured_query_interval: <class 'int'>,\n        Optional  (str) configured_querier_timeout: <class 'int'>,\n        Optional  (str) last_member_query_interval: <class 'int'>,\n        },\n      },\n    },\n  },\n}", "doc": "\n    Parser for 'show ip igmp interface'\n    Parser for 'show ip igmp vrf <WORD> interface'\n    ", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_igmp.py#L17", "class": "ShowIpIgmpInterface", "module_name": "show_igmp"}, "nxos": {"uid": "show_ip_igmp_interface", "schema": "{\n'vrfs': {\n  Any  (str) *: {\n    Optional  (str) interface: {\n      Any  (str) *: {\n        Optional  (str) group_policy: <class 'str'>,\n        'link_status': <class 'str'>,\n        Optional  (str) max_groups: <class 'int'>,\n        Optional  (str) available_groups: <class 'int'>,\n        Optional  (str) startup_query: {\n          Optional  (str) interval: <class 'int'>,\n          Optional  (str) count: <class 'int'>,\n          Optional  (str) configured_interval: <class 'int'>,\n          },\n        Optional  (str) address: <class 'str'>,\n        Optional  (str) subnet: <class 'str'>,\n        'oper_status': <class 'str'>,\n        Optional  (str) last_member: {\n          Optional  (str) query_count: <class 'int'>,\n          Optional  (str) mrt: <class 'int'>,\n          },\n        Optional  (str) querier: <class 'str'>,\n        Optional  (str) configured_group_timeout: <class 'int'>,\n        Optional  (str) querier_version: <class 'int'>,\n        Optional  (str) group_timeout: <class 'int'>,\n        Optional  (str) expires: <class 'str'>,\n        Optional  (str) configured_querier_timeout: <class 'int'>,\n        Optional  (str) next_query_sent_in: <class 'str'>,\n        Optional  (str) querier_timeout: <class 'int'>,\n        Optional  (str) membership_count: <class 'int'>,\n        Optional  (str) unsolicited_report_interval: <class 'int'>,\n        Optional  (str) old_membership_count: <class 'int'>,\n        Optional  (str) configured_robustness_variable: <class 'int'>,\n        Optional  (str) version: <class 'int'>,\n        'enable': <class 'bool'>,\n        Optional  (str) robustness_variable: <class 'int'>,\n        Optional  (str) host_version: <class 'int'>,\n        Optional  (str) link_local_groups_reporting: <class 'bool'>,\n        Optional  (str) configured_query_interval: <class 'int'>,\n        Optional  (str) enable_refcount: <class 'int'>,\n        Optional  (str) query_interval: <class 'int'>,\n        Optional  (str) statistics: {\n          Optional  (str) errors: {\n            'router_alert_check': <class 'int'>,\n            },\n          Optional  (str) general: {\n            'sent': {\n              Optional  (str) v3_reports: <class 'int'>,\n              Optional  (str) v2_leaves: <class 'int'>,\n              Optional  (str) v2_queries: <class 'int'>,\n              Optional  (str) v3_queries: <class 'int'>,\n              Optional  (str) v2_reports: <class 'int'>,\n              },\n            'received': {\n              Optional  (str) v3_queries: <class 'int'>,\n              Optional  (str) v2_reports: <class 'int'>,\n              Optional  (str) v3_reports: <class 'int'>,\n              Optional  (str) v2_leaves: <class 'int'>,\n              Optional  (str) v2_queries: <class 'int'>,\n              },\n            },\n          },\n        Optional  (str) immediate_leave: <class 'bool'>,\n        Optional  (str) configured_query_max_response_time: <class 'int'>,\n        Optional  (str) pim_dr: <class 'bool'>,\n        Optional  (str) vrf_name: <class 'str'>,\n        Optional  (str) query_max_response_time: <class 'int'>,\n        Optional  (str) vpc_svi: <class 'bool'>,\n        Optional  (str) vrf_id: <class 'int'>,\n        },\n      },\n    'groups_count': <class 'int'>,\n    },\n  },\n}", "doc": "Parser for:\n            show ip igmp interface\n            show ip igmp interface vrf all\n            show ip igmp interface vrf <vrf>", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_igmp.py#L460", "class": "ShowIpIgmpInterface", "module_name": "show_igmp"}, "iosxe": {"uid": "show_ip_igmp_interface", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    Optional  (str) global_active_groups: <class 'int'>,\n    Optional  (str) global_max_groups: <class 'int'>,\n    'interface': {\n      Any  (str) *: {\n        'querier_timeout': <class 'int'>,\n        Optional  (str) last_member_query_count: <class 'int'>,\n        'query_max_response_time': <class 'int'>,\n        Optional  (str) multicast: {\n          Optional  (str) dr_this_system: <class 'bool'>,\n          Optional  (str) designated_router: <class 'str'>,\n          Optional  (str) routing_enable: <class 'bool'>,\n          Optional  (str) routing_table: <class 'str'>,\n          Optional  (str) ttl_threshold: <class 'int'>,\n          },\n        Optional  (str) group_policy: <class 'str'>,\n        'query_interval': <class 'int'>,\n        Optional  (str) query_this_system: <class 'bool'>,\n        Optional  (str) max_groups: <class 'int'>,\n        'enable': <class 'bool'>,\n        'router_version': <class 'int'>,\n        'host_version': <class 'int'>,\n        Optional  (str) active_groups: <class 'int'>,\n        Optional  (str) counters: {\n          'leaves': <class 'int'>,\n          'joins': <class 'int'>,\n          },\n        'interface_status': <class 'str'>,\n        'oper_status': <class 'str'>,\n        Optional  (str) joined_group: {\n          Any  (str) *: {\n            'number_of_users': <class 'int'>,\n            },\n          },\n        Optional  (str) interface_adress: <class 'str'>,\n        Optional  (str) querier: <class 'str'>,\n        Optional  (str) configured_query_interval: <class 'int'>,\n        Optional  (str) configured_querier_timeout: <class 'int'>,\n        Optional  (str) last_member_query_interval: <class 'int'>,\n        },\n      },\n    },\n  },\n}", "doc": "\n    Parser for 'show ip igmp interface'\n    Parser for 'show ip igmp vrf <WORD> interface'\n    ", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_igmp.py#L79", "class": "ShowIpIgmpInterface", "module_name": "show_igmp"}}, "show interfaces stats": {"iosxe": {"uid": "show_interfaces_stats", "schema": "{\nAny  (str) *: {\n  'switching_path': {\n    Any  (str) *: {\n      'chars_in': <class 'int'>,\n      'pkts_out': <class 'int'>,\n      'pkts_in': <class 'int'>,\n      'chars_out': <class 'int'>,\n      },\n    },\n  },\n}", "doc": "Parser for :\n        show interfaces <interface> stats\n        show interfaces stats", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_interface.py#L2820", "class": "ShowInterfacesStats", "module_name": "show_interface"}}, "show run formal | i session-group": {"iosxr": {"uid": "show_run_formal___i_session-group", "schema": "{\n'instance': {\n  Any  (str) *: {\n    'peer_session': {\n      Any  (str) *: {\n        Optional  (str) ebgp_multihop_max_hop: <class 'int'>,\n        Optional  (str) fall_over_bfd: <class 'bool'>,\n        Optional  (str) ebgp_multihop_inherit: <class 'str'>,\n        Optional  (str) fall_over_bfd_inherit: <class 'str'>,\n        Optional  (str) local_as_as_no: <class 'int'>,\n        Optional  (str) disable_connected_check: <class 'bool'>,\n        Optional  (str) local_no_prepend: <class 'bool'>,\n        Optional  (str) disable_connected_check_inherit: <class 'str'>,\n        Optional  (str) local_dual_as: <class 'bool'>,\n        Optional  (str) transport_connection_mode: <class 'str'>,\n        Optional  (str) local_replace_as: <class 'bool'>,\n        Optional  (str) transport_connection_mode_inherit: <class 'str'>,\n        Optional  (str) local_as_inherit: <class 'str'>,\n        Optional  (str) password_text: <class 'str'>,\n        Optional  (str) password_text_inherit: <class 'str'>,\n        Optional  (str) shutdown: <class 'bool'>,\n        Optional  (str) shutdown_inherit: <class 'str'>,\n        Optional  (str) keepalive_interval: <class 'int'>,\n        Optional  (str) holdtime: <class 'int'>,\n        Optional  (str) ps_minimum_holdtime: <class 'int'>,\n        Optional  (str) remote_as: <class 'int'>,\n        Optional  (str) timers_inherit: <class 'str'>,\n        Optional  (str) remote_as_inherit: <class 'str'>,\n        Optional  (str) update_source: <class 'str'>,\n        Optional  (str) description: <class 'str'>,\n        Optional  (str) update_source_inherit: <class 'str'>,\n        Optional  (str) description_inherit: <class 'str'>,\n        Optional  (str) suppress_four_byte_as_capability: <class 'bool'>,\n        Optional  (str) ebgp_multihop_enable: <class 'bool'>,\n        Optional  (str) suppress_4byteas_inherit: <class 'str'>,\n        },\n      },\n    },\n  },\n}", "doc": "Parser for show bgp instance session-group configuration", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_bgp.py#L596", "class": "ShowBgpInstanceSessionGroupConfiguration", "module_name": "show_bgp"}}, "show lisp all instance-id {instance_id} service {service} smr": {"iosxe": {"uid": "show_lisp_all_instance-id_instance_id_service_service_smr", "schema": "{\n'lisp_router_instances': {\n  Any  (str) *: {\n    'lisp_router_instance_id': <class 'int'>,\n    Optional  (str) service: {\n      Optional  (Any) Any  (str) *: {\n        'instance_id': {\n          Any  (str) *: {\n            Optional  (str) smr: {\n              'vrf': <class 'str'>,\n              'entries': <class 'int'>,\n              'prefixes': {\n                Any  (str) *: {\n                  'producer': <class 'str'>,\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "doc": "Parser for \"show lisp all instance-id <instance_id> <service> smr\"", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_lisp.py#L1857", "class": "ShowLispServiceSmr", "module_name": "show_lisp"}}, "show ip bgp neighbors": {"iosxe": {"uid": "show_ip_bgp_neighbors", "schema": "{\nOptional  (str) list_of_neighbors: <class 'list'>,\n'vrf': {\n  Any  (str) *: {\n    'neighbor': {\n      Any  (str) *: {\n        Optional  (str) bgp_event_timer: {\n          'starts': {\n            Any  (str) *: <class 'int'>,\n            },\n          'wakeups': {\n            Any  (str) *: <class 'int'>,\n            },\n          'next': {\n            Any  (str) *: <class 'str'>,\n            },\n          },\n        'address_family': {\n          Any  (str) *: {\n            Optional  (str) refresh_epoch: <class 'int'>,\n            Optional  (str) session_state: <class 'str'>,\n            Optional  (str) max_nlri: <class 'int'>,\n            Optional  (str) up_time: <class 'str'>,\n            Optional  (str) min_nlri: <class 'int'>,\n            Optional  (str) down_time: <class 'str'>,\n            Optional  (str) refresh_activity_counters: {\n              'sent': {\n                Any  (str) *: <class 'int'>,\n                },\n              'received': {\n                Any  (str) *: <class 'int'>,\n                },\n              },\n            Optional  (str) local_policy_denied_prefixes_counters: {\n              'inbound': {\n                Any  (str) *: Any  (str) *,\n                },\n              'outbound': {\n                Any  (str) *: Any  (str) *,\n                },\n              },\n            Optional  (str) last_detected_dynamic_slow_peer: <class 'str'>,\n            Optional  (str) last_read: <class 'str'>,\n            Optional  (str) dynamic_slow_peer_recovered: <class 'str'>,\n            Optional  (str) last_write: <class 'str'>,\n            Optional  (str) last_sent_refresh_start_of_rib: <class 'str'>,\n            Optional  (str) current_time: <class 'str'>,\n            Optional  (str) last_received_refresh_start_of_rib: <class 'str'>,\n            Optional  (str) bgp_table_version: <class 'int'>,\n            Optional  (str) last_sent_refresh_end_of_rib: <class 'str'>,\n            Optional  (str) neighbor_version: <class 'str'>,\n            Optional  (str) last_received_refresh_end_of_rib: <class 'str'>,\n            Optional  (str) output_queue_size: <class 'int'>,\n            Optional  (str) refresh_out: <class 'int'>,\n            Optional  (str) index: <class 'int'>,\n            Optional  (str) refresh_in: <class 'int'>,\n            Optional  (str) advertise_bit: <class 'int'>,\n            Optional  (str) route_reflector_client: <class 'bool'>,\n            Optional  (str) update_group_member: <class 'int'>,\n            Optional  (str) community_attribute_sent: <class 'bool'>,\n            Optional  (str) extended_community_attribute_sent: <class 'bool'>,\n            Optional  (str) prefix_activity_counters: {\n              'sent': {\n                Any  (str) *: Any  (str) *,\n                },\n              'received': {\n                Any  (str) *: Any  (str) *,\n                },\n              },\n            Optional  (str) suppress_ldp_signaling: <class 'bool'>,\n            Optional  (str) slow_peer_detection: <class 'bool'>,\n            Optional  (str) slow_peer_split_update_group_dynamic: <class 'bool'>,\n            },\n          },\n        'bgp_neighbor_counters': {\n          'messages': {\n            'sent': {\n              'notifications': <class 'int'>,\n              'route_refresh': <class 'int'>,\n              'total': <class 'int'>,\n              'opens': <class 'int'>,\n              'keepalives': <class 'int'>,\n              'updates': <class 'int'>,\n              },\n            'in_queue_depth': <class 'int'>,\n            'received': {\n              'notifications': <class 'int'>,\n              'route_refresh': <class 'int'>,\n              'total': <class 'int'>,\n              'opens': <class 'int'>,\n              'keepalives': <class 'int'>,\n              'updates': <class 'int'>,\n              },\n            'out_queue_depth': <class 'int'>,\n            },\n          },\n        'bgp_negotiated_keepalive_timers': {\n          'keepalive_interval': <class 'int'>,\n          'hold_time': <class 'int'>,\n          Optional  (str) min_holdtime: <class 'int'>,\n          },\n        'link': <class 'str'>,\n        'router_id': <class 'str'>,\n        Optional  (str) bgp_session_transport: {\n          Optional  (str) enqueued_packets: {\n            'mis_ordered_packet': <class 'int'>,\n            'input_packet': <class 'int'>,\n            'retransmit_packet': <class 'int'>,\n            },\n          Optional  (str) iss: <class 'int'>,\n          Optional  (str) snduna: <class 'int'>,\n          'connection': {\n            Optional  (str) reset_reason: <class 'str'>,\n            'dropped': <class 'int'>,\n            'established': <class 'int'>,\n            'last_reset': <class 'str'>,\n            },\n          Optional  (str) sndnxt: <class 'int'>,\n          Optional  (str) irs: <class 'int'>,\n          'address_tracking_status': <class 'str'>,\n          Optional  (str) sndwnd: <class 'int'>,\n          Optional  (str) snd_scale: <class 'int'>,\n          Optional  (str) maxrcvwnd: <class 'int'>,\n          Optional  (str) rcvwnd: <class 'int'>,\n          Optional  (str) rcv_scale: <class 'int'>,\n          Optional  (str) delrcvwnd: <class 'int'>,\n          Optional  (str) srtt: <class 'int'>,\n          'min_time_between_advertisement_runs': <class 'int'>,\n          Optional  (str) rtto: <class 'int'>,\n          Optional  (str) rtv: <class 'int'>,\n          Optional  (str) krtt: <class 'int'>,\n          Optional  (str) min_rtt: <class 'int'>,\n          Optional  (str) max_rtt: <class 'int'>,\n          Optional  (str) ack_hold: <class 'int'>,\n          Optional  (str) uptime: <class 'int'>,\n          Optional  (str) sent_idletime: <class 'int'>,\n          Optional  (str) receive_idletime: <class 'int'>,\n          Optional  (str) tcp_connection: <class 'bool'>,\n          Optional  (str) status_flags: <class 'str'>,\n          Optional  (str) option_flags: <class 'str'>,\n          Optional  (str) ip_precedence_value: <class 'int'>,\n          'tcp_path_mtu_discovery': <class 'str'>,\n          Optional  (str) transport: {\n            'local_port': <class 'str'>,\n            'local_host': <class 'str'>,\n            'foreign_port': <class 'str'>,\n            Optional  (str) mss: <class 'int'>,\n            'foreign_host': <class 'str'>,\n            },\n          Optional  (str) datagram: {\n            'datagram_sent': {\n              'second_congestion': <class 'int'>,\n              'with_data': <class 'int'>,\n              'retransmit': <class 'int'>,\n              'partialack': <class 'int'>,\n              'value': <class 'int'>,\n              'fastretransmit': <class 'int'>,\n              'total_data': <class 'int'>,\n              },\n            'datagram_received': {\n              'out_of_order': <class 'int'>,\n              'with_data': <class 'int'>,\n              'total_data': <class 'int'>,\n              'value': <class 'int'>,\n              },\n            },\n          Optional  (str) graceful_restart: <class 'str'>,\n          Optional  (str) packet_fast_path: <class 'int'>,\n          Optional  (str) gr_restart_time: <class 'int'>,\n          Optional  (str) packet_fast_processed: <class 'int'>,\n          Optional  (str) gr_stalepath_time: <class 'int'>,\n          Optional  (str) packet_slow_path: <class 'int'>,\n          Optional  (str) connection_state: <class 'str'>,\n          Optional  (str) fast_lock_acquisition_failures: <class 'int'>,\n          Optional  (str) io_status: <class 'int'>,\n          Optional  (str) lock_slow_path: <class 'int'>,\n          Optional  (str) unread_input_bytes: <class 'int'>,\n          Optional  (str) tcp_semaphore: <class 'str'>,\n          Optional  (str) ecn_connection: <class 'str'>,\n          Optional  (str) tcp_semaphore_status: <class 'str'>,\n          Optional  (str) minimum_incoming_ttl: <class 'int'>,\n          Optional  (str) sso: <class 'bool'>,\n          Optional  (str) outgoing_ttl: <class 'int'>,\n          Optional  (str) rcvnxt: <class 'int'>,\n          Optional  (str) connection_tableid: <class 'int'>,\n          'rib_route_ip': <class 'str'>,\n          Optional  (str) maximum_output_segment_queue_size: <class 'int'>,\n          },\n        'remote_as': <class 'int'>,\n        'bgp_version': <class 'int'>,\n        'session_state': <class 'str'>,\n        'shutdown': <class 'bool'>,\n        Optional  (str) local_as: <class 'int'>,\n        'bgp_negotiated_capabilities': {\n          'four_octets_asn': <class 'str'>,\n          Optional  (str) vpnv4_unicast: <class 'str'>,\n          Optional  (str) graceful_restart: <class 'str'>,\n          'route_refresh': <class 'str'>,\n          Optional  (str) vpnv6_unicast: <class 'str'>,\n          'stateful_switchover': <class 'str'>,\n          Optional  (str) ipv4_unicast: <class 'str'>,\n          Optional  (str) remote_restart_timer: <class 'int'>,\n          Optional  (str) ipv6_unicast: <class 'str'>,\n          Optional  (str) l2vpn_vpls: <class 'str'>,\n          Optional  (str) l2vpn_evpn: <class 'str'>,\n          Optional  (str) vpnv4_multicast: <class 'str'>,\n          Optional  (str) multisession: <class 'str'>,\n          Optional  (str) graceful_restart_af_advertised_by_peer: <class 'list'>,\n          Optional  (str) vpnv6_multicast: <class 'str'>,\n          'enhanced_refresh': <class 'str'>,\n          Optional  (str) mvpnv4_multicast: <class 'str'>,\n          Optional  (str) mvpnv6_multicast: <class 'str'>,\n          },\n        Optional  (str) description: <class 'str'>,\n        },\n      },\n    },\n  },\n}", "doc": " Parser for:\n        * 'show ip bgp neighbors'\n        * 'show ip bgp neighbors {neighbor}'\n        * 'show ip bgp {address_family} neighbors'\n        * 'show ip bgp {address_family} neighbors {neighbor}'\n        * 'show ip bgp {address_family} vrf {vrf} neighbors'\n        * 'show ip bgp {address_family} vrf {vrf} neighbors {neighbor}'\n    ", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_bgp.py#L3872", "class": "ShowIpBgpNeighbors", "module_name": "show_bgp"}}, "show platform hardware subslot {subslot} plim statistics": {"ios": {"uid": "show_platform_hardware_subslot_subslot_plim_statistics", "schema": "{\nOptional  (str) slot: {\n  Any  (str) *: {\n    'subslot': {\n      Any  (str) *: {\n        'transmitted': {\n          Optional  (str) spi4_interrupt_counters: {\n            'frame_error': <class 'int'>,\n            'fifo_over_flow': <class 'int'>,\n            'dip2_error': <class 'int'>,\n            'out_of_frame': <class 'int'>,\n            },\n          Optional  (str) ipc_pkts: <class 'int'>,\n          Optional  (str) bytes: <class 'int'>,\n          Optional  (str) ipc_bytes: <class 'int'>,\n          Optional  (str) ipc_err: <class 'int'>,\n          Optional  (str) pkts: <class 'int'>,\n          },\n        'received': {\n          Optional  (str) bytes: <class 'int'>,\n          Optional  (str) ipc_bytes: <class 'int'>,\n          Optional  (str) ipc_err: <class 'int'>,\n          Optional  (str) pkts: <class 'int'>,\n          Optional  (str) spi4_interrupt_counters: {\n            'sequence_error': <class 'int'>,\n            'burst_error': <class 'int'>,\n            'dip4_error': <class 'int'>,\n            'packet_gap_error': <class 'int'>,\n            'control_word_error': <class 'int'>,\n            'disabled': <class 'int'>,\n            'loss_of_sync': <class 'int'>,\n            'eop_abort': <class 'int'>,\n            'out_of_frame': <class 'int'>,\n            },\n          Optional  (str) ipc_pkts: <class 'int'>,\n          },\n        'name': <class 'str'>,\n        'status': <class 'str'>,\n        },\n      },\n    },\n  },\nOptional  (str) port: {\n  Any  (str) *: {\n    'transmitted': {\n      'low_priority': {\n        'dropped_bytes': <class 'int'>,\n        'bytes': <class 'int'>,\n        'pkts': <class 'int'>,\n        'dropped_pkts': <class 'int'>,\n        },\n      'high_priority': {\n        'dropped_bytes': <class 'int'>,\n        'bytes': <class 'int'>,\n        'pkts': <class 'int'>,\n        'dropped_pkts': <class 'int'>,\n        },\n      },\n    'received': {\n      'low_priority': {\n        'dropped_pkts': <class 'int'>,\n        'errored_bytes': <class 'int'>,\n        'pkts': <class 'int'>,\n        'errored_pkts': <class 'int'>,\n        'bytes': <class 'int'>,\n        'dropped_bytes': <class 'int'>,\n        },\n      'high_priority': {\n        'dropped_pkts': <class 'int'>,\n        'errored_bytes': <class 'int'>,\n        'pkts': <class 'int'>,\n        'errored_pkts': <class 'int'>,\n        'bytes': <class 'int'>,\n        'dropped_bytes': <class 'int'>,\n        },\n      },\n    },\n  },\n}", "doc": "Parser for show platform hardware port <x/x/x> plim statistics\n                  show platform hardware slot <x> plim statistics\n                  show platform hardware slot <x> plim statistics internal\n                  show platform hardware subslot <x/x> plim statistics", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_platform.py#L351", "class": "ShowPlatformHardwarePlim", "module_name": "show_platform"}, "iosxe": {"uid": "show_platform_hardware_subslot_subslot_plim_statistics", "schema": "{\nOptional  (str) slot: {\n  Any  (str) *: {\n    'subslot': {\n      Any  (str) *: {\n        'transmitted': {\n          Optional  (str) spi4_interrupt_counters: {\n            'frame_error': <class 'int'>,\n            'fifo_over_flow': <class 'int'>,\n            'dip2_error': <class 'int'>,\n            'out_of_frame': <class 'int'>,\n            },\n          Optional  (str) ipc_pkts: <class 'int'>,\n          Optional  (str) bytes: <class 'int'>,\n          Optional  (str) ipc_bytes: <class 'int'>,\n          Optional  (str) ipc_err: <class 'int'>,\n          Optional  (str) pkts: <class 'int'>,\n          },\n        'received': {\n          Optional  (str) bytes: <class 'int'>,\n          Optional  (str) ipc_bytes: <class 'int'>,\n          Optional  (str) ipc_err: <class 'int'>,\n          Optional  (str) pkts: <class 'int'>,\n          Optional  (str) spi4_interrupt_counters: {\n            'sequence_error': <class 'int'>,\n            'burst_error': <class 'int'>,\n            'dip4_error': <class 'int'>,\n            'packet_gap_error': <class 'int'>,\n            'control_word_error': <class 'int'>,\n            'disabled': <class 'int'>,\n            'loss_of_sync': <class 'int'>,\n            'eop_abort': <class 'int'>,\n            'out_of_frame': <class 'int'>,\n            },\n          Optional  (str) ipc_pkts: <class 'int'>,\n          },\n        'name': <class 'str'>,\n        'status': <class 'str'>,\n        },\n      },\n    },\n  },\nOptional  (str) port: {\n  Any  (str) *: {\n    'transmitted': {\n      'low_priority': {\n        'dropped_bytes': <class 'int'>,\n        'bytes': <class 'int'>,\n        'pkts': <class 'int'>,\n        'dropped_pkts': <class 'int'>,\n        },\n      'high_priority': {\n        'dropped_bytes': <class 'int'>,\n        'bytes': <class 'int'>,\n        'pkts': <class 'int'>,\n        'dropped_pkts': <class 'int'>,\n        },\n      },\n    'received': {\n      'low_priority': {\n        'dropped_pkts': <class 'int'>,\n        'errored_bytes': <class 'int'>,\n        'pkts': <class 'int'>,\n        'errored_pkts': <class 'int'>,\n        'bytes': <class 'int'>,\n        'dropped_bytes': <class 'int'>,\n        },\n      'high_priority': {\n        'dropped_pkts': <class 'int'>,\n        'errored_bytes': <class 'int'>,\n        'pkts': <class 'int'>,\n        'errored_pkts': <class 'int'>,\n        'bytes': <class 'int'>,\n        'dropped_bytes': <class 'int'>,\n        },\n      },\n    },\n  },\n}", "doc": "Parser for show platform hardware port <x/x/x> plim statistics\n                  show platform hardware slot <x> plim statistics\n                  show platform hardware slot <x> plim statistics internal\n                  show platform hardware subslot <x/x> plim statistics", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_platform.py#L2892", "class": "ShowPlatformHardwarePlim", "module_name": "show_platform"}}, "show policy-map": {"iosxe": {"uid": "show_policy-map", "schema": "{\n'policy_map': {\n  Any  (str) *: {\n    'class': {\n      Any  (str) *: {\n        Optional  (str) pir: <class 'int'>,\n        Optional  (str) peak_burst: <class 'int'>,\n        Optional  (str) conform_burst: <class 'int'>,\n        Optional  (str) police_cir: <class 'int'>,\n        },\n      },\n    },\n  },\n}", "doc": " Parser for\n        * \"show policy-map\"\n        * \"show policy-map {name}\"\n    ", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_policy_map.py#L396", "class": "ShowPolicyMap", "module_name": "show_policy_map"}}, "show ospf vrf all-inclusive": {"iosxr": {"uid": "show_ospf_vrf_all-inclusive", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'address_family': {\n      Any  (str) *: {\n        'instance': {\n          Any  (str) *: {\n            Optional  (str) strict_spf: <class 'bool'>,\n            Optional  (str) maximum_interfaces: <class 'int'>,\n            Optional  (str) mpls: {\n              'ldp': {\n                'ldp_sync_status': <class 'str'>,\n                'ldp_igp_sync': <class 'bool'>,\n                },\n              },\n            Optional  (str) flags: {\n              Optional  (str) abr: <class 'bool'>,\n              Optional  (str) asbr: <class 'bool'>,\n              },\n            'router_id': <class 'str'>,\n            Optional  (str) numbers: {\n              Optional  (str) opaque_as_lsa: <class 'int'>,\n              Optional  (str) opaque_as_lsa_checksum: <class 'str'>,\n              Optional  (str) external_lsa: <class 'int'>,\n              Optional  (str) dc_bitless: <class 'int'>,\n              Optional  (str) external_lsa_checksum: <class 'str'>,\n              Optional  (str) do_not_age: <class 'int'>,\n              },\n            Optional  (str) total_areas: <class 'int'>,\n            Optional  (str) total_normal_areas: <class 'int'>,\n            'nsr': {\n              'enable': <class 'bool'>,\n              },\n            Optional  (str) total_stub_areas: <class 'int'>,\n            Optional  (str) total_nssa_areas: <class 'int'>,\n            Optional  (str) stub_router: {\n              Optional  (str) on_startup: {\n                'on_startup': <class 'int'>,\n                'summary_lsa': <class 'bool'>,\n                'external_lsa': <class 'bool'>,\n                'state': <class 'str'>,\n                'external_lsa_metric': <class 'int'>,\n                'include_stub': <class 'bool'>,\n                'summary_lsa_metric': <class 'int'>,\n                },\n              Optional  (str) on_switchover: {\n                'on_switchover': <class 'int'>,\n                'summary_lsa': <class 'bool'>,\n                'external_lsa': <class 'bool'>,\n                'state': <class 'str'>,\n                'external_lsa_metric': <class 'int'>,\n                'include_stub': <class 'bool'>,\n                'summary_lsa_metric': <class 'int'>,\n                },\n              Optional  (str) always: {\n                'summary_lsa': <class 'bool'>,\n                Optional  (str) state: <class 'str'>,\n                'external_lsa': <class 'bool'>,\n                Optional  (str) summary_lsa_metric: <class 'int'>,\n                'always': <class 'bool'>,\n                'include_stub': <class 'bool'>,\n                Optional  (str) external_lsa_metric: <class 'int'>,\n                },\n              Optional  (str) on_procrestart: {\n                'state': <class 'str'>,\n                Optional  (str) summary_lsa_metric: <class 'int'>,\n                'on_procrestart': <class 'int'>,\n                Optional  (str) external_lsa: <class 'bool'>,\n                Optional  (str) external_lsa_metric: <class 'int'>,\n                'include_stub': <class 'bool'>,\n                Optional  (str) summary_lsa: <class 'bool'>,\n                },\n              },\n            Optional  (str) areas: {\n              Any  (str) *: {\n                'area_id': <class 'str'>,\n                'area_type': <class 'str'>,\n                Optional  (str) topology_version: <class 'int'>,\n                Optional  (str) lsa_translation: <class 'str'>,\n                Optional  (str) default_cost: <class 'int'>,\n                Optional  (str) statistics: {\n                  Optional  (str) donotage_lsa_count: <class 'int'>,\n                  Optional  (str) spf_runs_count: <class 'int'>,\n                  Optional  (str) flood_list_length: <class 'int'>,\n                  Optional  (str) lfa_interface_count: <class 'int'>,\n                  Optional  (str) interfaces_count: <class 'int'>,\n                  Optional  (str) area_scope_lsa_count: <class 'int'>,\n                  Optional  (str) lfa_revision: <class 'int'>,\n                  Optional  (str) lfa_per_prefix_interface_count: <class 'int'>,\n                  Optional  (str) area_scope_lsa_cksum_sum: <class 'str'>,\n                  Optional  (str) area_scope_opaque_lsa_count: <class 'int'>,\n                  Optional  (str) nbrs_full: <class 'int'>,\n                  Optional  (str) area_scope_opaque_lsa_cksum_sum: <class 'str'>,\n                  Optional  (str) nbrs_staggered_mode: <class 'int'>,\n                  Optional  (str) dcbitless_lsa_count: <class 'int'>,\n                  Optional  (str) indication_lsa_count: <class 'int'>,\n                  },\n                Optional  (str) ranges: {\n                  Any  (str) *: {\n                    'prefix': <class 'str'>,\n                    'advertise': <class 'bool'>,\n                    },\n                  },\n                Optional  (str) summary: <class 'bool'>,\n                Optional  (str) rrr_enabled: <class 'bool'>,\n                },\n              },\n            Optional  (str) flood_pacing_interval_msec: <class 'int'>,\n            Optional  (str) retransmission_pacing_interval: <class 'int'>,\n            Optional  (str) spf_control: {\n              Optional  (str) paths: <class 'str'>,\n              'throttle': {\n                'spf': {\n                  'maximum': <class 'int'>,\n                  'hold': <class 'int'>,\n                  'start': <class 'int'>,\n                  },\n                'lsa': {\n                  'hold': <class 'int'>,\n                  'interval': <class 'int'>,\n                  'refresh_interval': <class 'int'>,\n                  'arrival': <class 'int'>,\n                  'maximum': <class 'int'>,\n                  'start': <class 'int'>,\n                  },\n                },\n              },\n            Optional  (str) external_flood_list_length: <class 'int'>,\n            Optional  (str) snmp_trap: <class 'bool'>,\n            Optional  (str) adjacency_stagger: {\n              'nbrs_full': <class 'int'>,\n              'nbrs_forming': <class 'int'>,\n              'disable': <class 'bool'>,\n              'maximum_number': <class 'int'>,\n              'initial_number': <class 'int'>,\n              },\n            Optional  (str) lsd_state: <class 'str'>,\n            Optional  (str) redistribution: {\n              Optional  (str) isis: {\n                Optional  (str) metric: <class 'int'>,\n                'isis_pid': <class 'str'>,\n                },\n              Optional  (str) bgp: {\n                Optional  (str) metric: <class 'int'>,\n                'bgp_id': <class 'int'>,\n                },\n              Optional  (str) static: {\n                'enabled': <class 'bool'>,\n                Optional  (str) metric: <class 'int'>,\n                },\n              Optional  (str) connected: {\n                'enabled': <class 'bool'>,\n                Optional  (str) metric: <class 'int'>,\n                },\n              Optional  (str) max_prefix: {\n                Optional  (str) warn_only: <class 'bool'>,\n                Optional  (str) num_of_prefix: <class 'int'>,\n                Optional  (str) prefix_thld: <class 'int'>,\n                },\n              },\n            Optional  (str) lsd_revision: <class 'int'>,\n            Optional  (str) graceful_restart: {\n              Any  (str) *: {\n                'type': <class 'str'>,\n                'enable': <class 'bool'>,\n                },\n              },\n            Optional  (str) database_control: {\n              'max_lsa': <class 'int'>,\n              },\n            Optional  (str) segment_routing_global_block_default: <class 'str'>,\n            Optional  (str) segment_routing_global_block_status: <class 'str'>,\n            'role': <class 'str'>,\n            },\n          },\n        },\n      },\n    },\n  },\n}", "doc": "Parser for show ospf vrf all-inclusive", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_ospf.py#L1223", "class": "ShowOspfVrfAllInclusive", "module_name": "show_ospf"}}, "show fabric multicast ipv4 sa-ad-route vrf {vrf}": {"nxos": {"uid": "show_fabric_multicast_ipv4_sa-ad-route_vrf_vrf", "schema": "{\n'multicast': {\n  'vrf': {\n    Any  (str) *: {\n      Optional  (str) address_family: {\n        Any  (str) *: {\n          'sa_ad_routes': {\n            'gaddr': {\n              Any  (str) *: {\n                'saddr': {\n                  Any  (str) *: {\n                    'src_len': <class 'int'>,\n                    'uptime': <class 'str'>,\n                    Optional  (str) interested_fabric_nodes: {\n                      Any  (str) *: {\n                        'uptime': <class 'str'>,\n                        },\n                      },\n                    },\n                  },\n                'grp_len': <class 'int'>,\n                },\n              },\n            },\n          },\n        },\n      'vnid': <class 'str'>,\n      },\n    },\n  },\n}", "doc": "parser for:\n        show fabric multicast ipv4 sa-ad-route\n        show fabric multicast ipv4 sa-ad-route vrf <vrf>\n        show fabric multicast ipv4 sa-ad-route vrf all", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_vxlan.py#L2020", "class": "ShowFabricMulticastIpSaAdRoute", "module_name": "show_vxlan"}}, "show lisp all instance-id {instance_id} {service}": {"iosxe": {"uid": "show_lisp_all_instance-id_instance_id_service", "schema": "{\n'lisp_router_instances': {\n  Any  (str) *: {\n    Optional  (str) service: {\n      Any  (str) *: {\n        'locator_status_algorithms': {\n          'lsb_reports': <class 'str'>,\n          'rloc_probe_on_route_change': <class 'str'>,\n          'rloc_probe_algorithm': <class 'bool'>,\n          'ipv6_rloc_min_mask_len': <class 'int'>,\n          'ipv4_rloc_min_mask_len': <class 'int'>,\n          'rloc_probe_on_member_change': <class 'bool'>,\n          },\n        'delegated_database_tree': <class 'bool'>,\n        'instance_id': {\n          Any  (str) *: {\n            Optional  (str) eid_table: <class 'str'>,\n            'database': {\n              Optional  (str) import_site_db_size: <class 'int'>,\n              Optional  (str) import_site_db_limit: <class 'int'>,\n              Optional  (str) proxy_db_size: <class 'int'>,\n              Optional  (str) inactive_deconfig_away_size: <class 'int'>,\n              Optional  (str) route_import_database_limit: <class 'int'>,\n              Optional  (str) dynamic_database_limit: <class 'int'>,\n              Optional  (str) static_database_size: <class 'int'>,\n              Optional  (str) static_database_limit: <class 'int'>,\n              Optional  (str) total_database_mapping_size: <class 'int'>,\n              Optional  (str) dynamic_database_size: <class 'int'>,\n              Optional  (str) route_import_database_size: <class 'int'>,\n              Optional  (str) dynamic_database_mapping_limit: <class 'int'>,\n              },\n            Optional  (str) site_registration_limit: <class 'int'>,\n            'itr': {\n              'local_rloc_last_resort': <class 'str'>,\n              Optional  (str) use_proxy_etr_rloc: <class 'str'>,\n              },\n            Optional  (str) map_request_source: <class 'str'>,\n            Optional  (str) map_cache: {\n              Optional  (str) map_cache_size: <class 'int'>,\n              Optional  (str) imported_route_count: <class 'int'>,\n              Optional  (str) persistent_map_cache: <class 'bool'>,\n              Optional  (str) imported_route_limit: <class 'int'>,\n              Optional  (str) static_mappings_configured: <class 'int'>,\n              },\n            Optional  (str) mapping_servers: {\n              Any  (str) *: {\n                Optional  (str) uptime: <class 'str'>,\n                'ms_address': <class 'str'>,\n                },\n              },\n            },\n          },\n        'itr': {\n          'proxy_itr_router': <class 'bool'>,\n          Optional  (str) map_resolvers: {\n            Any  (str) *: {\n              'map_resolver': <class 'str'>,\n              },\n            },\n          'multiple_smr_suppression_time': <class 'int'>,\n          'enabled': <class 'bool'>,\n          'solicit_map_request': <class 'str'>,\n          Optional  (str) proxy_itrs: {\n            Any  (str) *: {\n              'proxy_etr_address': <class 'str'>,\n              },\n            },\n          'max_smr_per_map_cache_entry': <class 'str'>,\n          },\n        'etr': {\n          Optional  (str) encapsulation: <class 'str'>,\n          'proxy_etr_router': <class 'bool'>,\n          Optional  (str) mapping_servers: {\n            Any  (str) *: {\n              Optional  (str) uptime: <class 'str'>,\n              'ms_address': <class 'str'>,\n              },\n            },\n          'map_cache_ttl': <class 'str'>,\n          'enabled': <class 'bool'>,\n          'accept_mapping_data': <class 'str'>,\n          Optional  (str) use_petrs: {\n            Any  (str) *: {\n              'use_petr': <class 'str'>,\n              },\n            },\n          },\n        'map_resolver': {\n          'enabled': <class 'bool'>,\n          },\n        'locator_table': <class 'str'>,\n        'mobility_first_hop_router': <class 'bool'>,\n        'map_cache': {\n          'map_cache_limit': <class 'int'>,\n          Optional  (str) map_cache_fib_updates: <class 'str'>,\n          'map_cache_activity_check_period': <class 'int'>,\n          },\n        'service': <class 'str'>,\n        Optional  (str) source_locator_configuration: {\n          'vlans': {\n            Any  (str) *: {\n              'address': <class 'str'>,\n              'interface': <class 'str'>,\n              },\n            },\n          },\n        'map_server': {\n          'enabled': <class 'bool'>,\n          },\n        'nat_traversal_router': <class 'bool'>,\n        },\n      },\n    Optional  (str) lisp_router_id: {\n      'site_id': <class 'str'>,\n      'xtr_id': <class 'str'>,\n      },\n    'lisp_router_instance_id': <class 'int'>,\n    },\n  },\n}", "doc": "Parser for \"show lisp all instance-id <instance_id> <service>\"", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_lisp.py#L788", "class": "ShowLispService", "module_name": "show_lisp"}}, "show bgp all neighbors": {"ios": {"uid": "show_bgp_all_neighbors", "schema": "{\nOptional  (str) list_of_neighbors: <class 'list'>,\n'vrf': {\n  Any  (str) *: {\n    'neighbor': {\n      Any  (str) *: {\n        Optional  (str) bgp_event_timer: {\n          'starts': {\n            Any  (str) *: <class 'int'>,\n            },\n          'wakeups': {\n            Any  (str) *: <class 'int'>,\n            },\n          'next': {\n            Any  (str) *: <class 'str'>,\n            },\n          },\n        'address_family': {\n          Any  (str) *: {\n            Optional  (str) refresh_epoch: <class 'int'>,\n            Optional  (str) session_state: <class 'str'>,\n            Optional  (str) max_nlri: <class 'int'>,\n            Optional  (str) up_time: <class 'str'>,\n            Optional  (str) min_nlri: <class 'int'>,\n            Optional  (str) down_time: <class 'str'>,\n            Optional  (str) refresh_activity_counters: {\n              'sent': {\n                Any  (str) *: <class 'int'>,\n                },\n              'received': {\n                Any  (str) *: <class 'int'>,\n                },\n              },\n            Optional  (str) local_policy_denied_prefixes_counters: {\n              'inbound': {\n                Any  (str) *: Any  (str) *,\n                },\n              'outbound': {\n                Any  (str) *: Any  (str) *,\n                },\n              },\n            Optional  (str) last_detected_dynamic_slow_peer: <class 'str'>,\n            Optional  (str) last_read: <class 'str'>,\n            Optional  (str) dynamic_slow_peer_recovered: <class 'str'>,\n            Optional  (str) last_write: <class 'str'>,\n            Optional  (str) last_sent_refresh_start_of_rib: <class 'str'>,\n            Optional  (str) current_time: <class 'str'>,\n            Optional  (str) last_received_refresh_start_of_rib: <class 'str'>,\n            Optional  (str) bgp_table_version: <class 'int'>,\n            Optional  (str) last_sent_refresh_end_of_rib: <class 'str'>,\n            Optional  (str) neighbor_version: <class 'str'>,\n            Optional  (str) last_received_refresh_end_of_rib: <class 'str'>,\n            Optional  (str) output_queue_size: <class 'int'>,\n            Optional  (str) refresh_out: <class 'int'>,\n            Optional  (str) index: <class 'int'>,\n            Optional  (str) refresh_in: <class 'int'>,\n            Optional  (str) advertise_bit: <class 'int'>,\n            Optional  (str) route_reflector_client: <class 'bool'>,\n            Optional  (str) update_group_member: <class 'int'>,\n            Optional  (str) community_attribute_sent: <class 'bool'>,\n            Optional  (str) extended_community_attribute_sent: <class 'bool'>,\n            Optional  (str) prefix_activity_counters: {\n              'sent': {\n                Any  (str) *: Any  (str) *,\n                },\n              'received': {\n                Any  (str) *: Any  (str) *,\n                },\n              },\n            Optional  (str) suppress_ldp_signaling: <class 'bool'>,\n            Optional  (str) slow_peer_detection: <class 'bool'>,\n            Optional  (str) slow_peer_split_update_group_dynamic: <class 'bool'>,\n            },\n          },\n        'bgp_neighbor_counters': {\n          'messages': {\n            'sent': {\n              'notifications': <class 'int'>,\n              'route_refresh': <class 'int'>,\n              'total': <class 'int'>,\n              'opens': <class 'int'>,\n              'keepalives': <class 'int'>,\n              'updates': <class 'int'>,\n              },\n            'in_queue_depth': <class 'int'>,\n            'received': {\n              'notifications': <class 'int'>,\n              'route_refresh': <class 'int'>,\n              'total': <class 'int'>,\n              'opens': <class 'int'>,\n              'keepalives': <class 'int'>,\n              'updates': <class 'int'>,\n              },\n            'out_queue_depth': <class 'int'>,\n            },\n          },\n        'bgp_negotiated_keepalive_timers': {\n          'keepalive_interval': <class 'int'>,\n          'hold_time': <class 'int'>,\n          Optional  (str) min_holdtime: <class 'int'>,\n          },\n        'link': <class 'str'>,\n        'router_id': <class 'str'>,\n        Optional  (str) bgp_session_transport: {\n          Optional  (str) enqueued_packets: {\n            'mis_ordered_packet': <class 'int'>,\n            'input_packet': <class 'int'>,\n            'retransmit_packet': <class 'int'>,\n            },\n          Optional  (str) iss: <class 'int'>,\n          Optional  (str) snduna: <class 'int'>,\n          'connection': {\n            Optional  (str) reset_reason: <class 'str'>,\n            'dropped': <class 'int'>,\n            'established': <class 'int'>,\n            'last_reset': <class 'str'>,\n            },\n          Optional  (str) sndnxt: <class 'int'>,\n          Optional  (str) irs: <class 'int'>,\n          'address_tracking_status': <class 'str'>,\n          Optional  (str) sndwnd: <class 'int'>,\n          Optional  (str) snd_scale: <class 'int'>,\n          Optional  (str) maxrcvwnd: <class 'int'>,\n          Optional  (str) rcvwnd: <class 'int'>,\n          Optional  (str) rcv_scale: <class 'int'>,\n          Optional  (str) delrcvwnd: <class 'int'>,\n          Optional  (str) srtt: <class 'int'>,\n          'min_time_between_advertisement_runs': <class 'int'>,\n          Optional  (str) rtto: <class 'int'>,\n          Optional  (str) rtv: <class 'int'>,\n          Optional  (str) krtt: <class 'int'>,\n          Optional  (str) min_rtt: <class 'int'>,\n          Optional  (str) max_rtt: <class 'int'>,\n          Optional  (str) ack_hold: <class 'int'>,\n          Optional  (str) uptime: <class 'int'>,\n          Optional  (str) sent_idletime: <class 'int'>,\n          Optional  (str) receive_idletime: <class 'int'>,\n          Optional  (str) tcp_connection: <class 'bool'>,\n          Optional  (str) status_flags: <class 'str'>,\n          Optional  (str) option_flags: <class 'str'>,\n          Optional  (str) ip_precedence_value: <class 'int'>,\n          'tcp_path_mtu_discovery': <class 'str'>,\n          Optional  (str) transport: {\n            'local_port': <class 'str'>,\n            'local_host': <class 'str'>,\n            'foreign_port': <class 'str'>,\n            Optional  (str) mss: <class 'int'>,\n            'foreign_host': <class 'str'>,\n            },\n          Optional  (str) datagram: {\n            'datagram_sent': {\n              'second_congestion': <class 'int'>,\n              'with_data': <class 'int'>,\n              'retransmit': <class 'int'>,\n              'partialack': <class 'int'>,\n              'value': <class 'int'>,\n              'fastretransmit': <class 'int'>,\n              'total_data': <class 'int'>,\n              },\n            'datagram_received': {\n              'out_of_order': <class 'int'>,\n              'with_data': <class 'int'>,\n              'total_data': <class 'int'>,\n              'value': <class 'int'>,\n              },\n            },\n          Optional  (str) graceful_restart: <class 'str'>,\n          Optional  (str) packet_fast_path: <class 'int'>,\n          Optional  (str) gr_restart_time: <class 'int'>,\n          Optional  (str) packet_fast_processed: <class 'int'>,\n          Optional  (str) gr_stalepath_time: <class 'int'>,\n          Optional  (str) packet_slow_path: <class 'int'>,\n          Optional  (str) connection_state: <class 'str'>,\n          Optional  (str) fast_lock_acquisition_failures: <class 'int'>,\n          Optional  (str) io_status: <class 'int'>,\n          Optional  (str) lock_slow_path: <class 'int'>,\n          Optional  (str) unread_input_bytes: <class 'int'>,\n          Optional  (str) tcp_semaphore: <class 'str'>,\n          Optional  (str) ecn_connection: <class 'str'>,\n          Optional  (str) tcp_semaphore_status: <class 'str'>,\n          Optional  (str) minimum_incoming_ttl: <class 'int'>,\n          Optional  (str) sso: <class 'bool'>,\n          Optional  (str) outgoing_ttl: <class 'int'>,\n          Optional  (str) rcvnxt: <class 'int'>,\n          Optional  (str) connection_tableid: <class 'int'>,\n          'rib_route_ip': <class 'str'>,\n          Optional  (str) maximum_output_segment_queue_size: <class 'int'>,\n          },\n        'remote_as': <class 'int'>,\n        'bgp_version': <class 'int'>,\n        'session_state': <class 'str'>,\n        'shutdown': <class 'bool'>,\n        Optional  (str) local_as: <class 'int'>,\n        'bgp_negotiated_capabilities': {\n          'four_octets_asn': <class 'str'>,\n          Optional  (str) vpnv4_unicast: <class 'str'>,\n          Optional  (str) graceful_restart: <class 'str'>,\n          'route_refresh': <class 'str'>,\n          Optional  (str) vpnv6_unicast: <class 'str'>,\n          'stateful_switchover': <class 'str'>,\n          Optional  (str) ipv4_unicast: <class 'str'>,\n          Optional  (str) remote_restart_timer: <class 'int'>,\n          Optional  (str) ipv6_unicast: <class 'str'>,\n          Optional  (str) l2vpn_vpls: <class 'str'>,\n          Optional  (str) l2vpn_evpn: <class 'str'>,\n          Optional  (str) vpnv4_multicast: <class 'str'>,\n          Optional  (str) multisession: <class 'str'>,\n          Optional  (str) graceful_restart_af_advertised_by_peer: <class 'list'>,\n          Optional  (str) vpnv6_multicast: <class 'str'>,\n          'enhanced_refresh': <class 'str'>,\n          Optional  (str) mvpnv4_multicast: <class 'str'>,\n          Optional  (str) mvpnv6_multicast: <class 'str'>,\n          },\n        Optional  (str) description: <class 'str'>,\n        },\n      },\n    },\n  },\n}", "doc": "\n    Parser for show bgp all neighbors\n    ", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_bgp.py#L75", "class": "ShowBgpAllNeighbors", "module_name": "show_bgp"}, "iosxe": {"uid": "show_bgp_all_neighbors", "schema": "{\nOptional  (str) list_of_neighbors: <class 'list'>,\n'vrf': {\n  Any  (str) *: {\n    'neighbor': {\n      Any  (str) *: {\n        Optional  (str) bgp_event_timer: {\n          'starts': {\n            Any  (str) *: <class 'int'>,\n            },\n          'wakeups': {\n            Any  (str) *: <class 'int'>,\n            },\n          'next': {\n            Any  (str) *: <class 'str'>,\n            },\n          },\n        'address_family': {\n          Any  (str) *: {\n            Optional  (str) refresh_epoch: <class 'int'>,\n            Optional  (str) session_state: <class 'str'>,\n            Optional  (str) max_nlri: <class 'int'>,\n            Optional  (str) up_time: <class 'str'>,\n            Optional  (str) min_nlri: <class 'int'>,\n            Optional  (str) down_time: <class 'str'>,\n            Optional  (str) refresh_activity_counters: {\n              'sent': {\n                Any  (str) *: <class 'int'>,\n                },\n              'received': {\n                Any  (str) *: <class 'int'>,\n                },\n              },\n            Optional  (str) local_policy_denied_prefixes_counters: {\n              'inbound': {\n                Any  (str) *: Any  (str) *,\n                },\n              'outbound': {\n                Any  (str) *: Any  (str) *,\n                },\n              },\n            Optional  (str) last_detected_dynamic_slow_peer: <class 'str'>,\n            Optional  (str) last_read: <class 'str'>,\n            Optional  (str) dynamic_slow_peer_recovered: <class 'str'>,\n            Optional  (str) last_write: <class 'str'>,\n            Optional  (str) last_sent_refresh_start_of_rib: <class 'str'>,\n            Optional  (str) current_time: <class 'str'>,\n            Optional  (str) last_received_refresh_start_of_rib: <class 'str'>,\n            Optional  (str) bgp_table_version: <class 'int'>,\n            Optional  (str) last_sent_refresh_end_of_rib: <class 'str'>,\n            Optional  (str) neighbor_version: <class 'str'>,\n            Optional  (str) last_received_refresh_end_of_rib: <class 'str'>,\n            Optional  (str) output_queue_size: <class 'int'>,\n            Optional  (str) refresh_out: <class 'int'>,\n            Optional  (str) index: <class 'int'>,\n            Optional  (str) refresh_in: <class 'int'>,\n            Optional  (str) advertise_bit: <class 'int'>,\n            Optional  (str) route_reflector_client: <class 'bool'>,\n            Optional  (str) update_group_member: <class 'int'>,\n            Optional  (str) community_attribute_sent: <class 'bool'>,\n            Optional  (str) extended_community_attribute_sent: <class 'bool'>,\n            Optional  (str) prefix_activity_counters: {\n              'sent': {\n                Any  (str) *: Any  (str) *,\n                },\n              'received': {\n                Any  (str) *: Any  (str) *,\n                },\n              },\n            Optional  (str) suppress_ldp_signaling: <class 'bool'>,\n            Optional  (str) slow_peer_detection: <class 'bool'>,\n            Optional  (str) slow_peer_split_update_group_dynamic: <class 'bool'>,\n            },\n          },\n        'bgp_neighbor_counters': {\n          'messages': {\n            'sent': {\n              'notifications': <class 'int'>,\n              'route_refresh': <class 'int'>,\n              'total': <class 'int'>,\n              'opens': <class 'int'>,\n              'keepalives': <class 'int'>,\n              'updates': <class 'int'>,\n              },\n            'in_queue_depth': <class 'int'>,\n            'received': {\n              'notifications': <class 'int'>,\n              'route_refresh': <class 'int'>,\n              'total': <class 'int'>,\n              'opens': <class 'int'>,\n              'keepalives': <class 'int'>,\n              'updates': <class 'int'>,\n              },\n            'out_queue_depth': <class 'int'>,\n            },\n          },\n        'bgp_negotiated_keepalive_timers': {\n          'keepalive_interval': <class 'int'>,\n          'hold_time': <class 'int'>,\n          Optional  (str) min_holdtime: <class 'int'>,\n          },\n        'link': <class 'str'>,\n        'router_id': <class 'str'>,\n        Optional  (str) bgp_session_transport: {\n          Optional  (str) enqueued_packets: {\n            'mis_ordered_packet': <class 'int'>,\n            'input_packet': <class 'int'>,\n            'retransmit_packet': <class 'int'>,\n            },\n          Optional  (str) iss: <class 'int'>,\n          Optional  (str) snduna: <class 'int'>,\n          'connection': {\n            Optional  (str) reset_reason: <class 'str'>,\n            'dropped': <class 'int'>,\n            'established': <class 'int'>,\n            'last_reset': <class 'str'>,\n            },\n          Optional  (str) sndnxt: <class 'int'>,\n          Optional  (str) irs: <class 'int'>,\n          'address_tracking_status': <class 'str'>,\n          Optional  (str) sndwnd: <class 'int'>,\n          Optional  (str) snd_scale: <class 'int'>,\n          Optional  (str) maxrcvwnd: <class 'int'>,\n          Optional  (str) rcvwnd: <class 'int'>,\n          Optional  (str) rcv_scale: <class 'int'>,\n          Optional  (str) delrcvwnd: <class 'int'>,\n          Optional  (str) srtt: <class 'int'>,\n          'min_time_between_advertisement_runs': <class 'int'>,\n          Optional  (str) rtto: <class 'int'>,\n          Optional  (str) rtv: <class 'int'>,\n          Optional  (str) krtt: <class 'int'>,\n          Optional  (str) min_rtt: <class 'int'>,\n          Optional  (str) max_rtt: <class 'int'>,\n          Optional  (str) ack_hold: <class 'int'>,\n          Optional  (str) uptime: <class 'int'>,\n          Optional  (str) sent_idletime: <class 'int'>,\n          Optional  (str) receive_idletime: <class 'int'>,\n          Optional  (str) tcp_connection: <class 'bool'>,\n          Optional  (str) status_flags: <class 'str'>,\n          Optional  (str) option_flags: <class 'str'>,\n          Optional  (str) ip_precedence_value: <class 'int'>,\n          'tcp_path_mtu_discovery': <class 'str'>,\n          Optional  (str) transport: {\n            'local_port': <class 'str'>,\n            'local_host': <class 'str'>,\n            'foreign_port': <class 'str'>,\n            Optional  (str) mss: <class 'int'>,\n            'foreign_host': <class 'str'>,\n            },\n          Optional  (str) datagram: {\n            'datagram_sent': {\n              'second_congestion': <class 'int'>,\n              'with_data': <class 'int'>,\n              'retransmit': <class 'int'>,\n              'partialack': <class 'int'>,\n              'value': <class 'int'>,\n              'fastretransmit': <class 'int'>,\n              'total_data': <class 'int'>,\n              },\n            'datagram_received': {\n              'out_of_order': <class 'int'>,\n              'with_data': <class 'int'>,\n              'total_data': <class 'int'>,\n              'value': <class 'int'>,\n              },\n            },\n          Optional  (str) graceful_restart: <class 'str'>,\n          Optional  (str) packet_fast_path: <class 'int'>,\n          Optional  (str) gr_restart_time: <class 'int'>,\n          Optional  (str) packet_fast_processed: <class 'int'>,\n          Optional  (str) gr_stalepath_time: <class 'int'>,\n          Optional  (str) packet_slow_path: <class 'int'>,\n          Optional  (str) connection_state: <class 'str'>,\n          Optional  (str) fast_lock_acquisition_failures: <class 'int'>,\n          Optional  (str) io_status: <class 'int'>,\n          Optional  (str) lock_slow_path: <class 'int'>,\n          Optional  (str) unread_input_bytes: <class 'int'>,\n          Optional  (str) tcp_semaphore: <class 'str'>,\n          Optional  (str) ecn_connection: <class 'str'>,\n          Optional  (str) tcp_semaphore_status: <class 'str'>,\n          Optional  (str) minimum_incoming_ttl: <class 'int'>,\n          Optional  (str) sso: <class 'bool'>,\n          Optional  (str) outgoing_ttl: <class 'int'>,\n          Optional  (str) rcvnxt: <class 'int'>,\n          Optional  (str) connection_tableid: <class 'int'>,\n          'rib_route_ip': <class 'str'>,\n          Optional  (str) maximum_output_segment_queue_size: <class 'int'>,\n          },\n        'remote_as': <class 'int'>,\n        'bgp_version': <class 'int'>,\n        'session_state': <class 'str'>,\n        'shutdown': <class 'bool'>,\n        Optional  (str) local_as: <class 'int'>,\n        'bgp_negotiated_capabilities': {\n          'four_octets_asn': <class 'str'>,\n          Optional  (str) vpnv4_unicast: <class 'str'>,\n          Optional  (str) graceful_restart: <class 'str'>,\n          'route_refresh': <class 'str'>,\n          Optional  (str) vpnv6_unicast: <class 'str'>,\n          'stateful_switchover': <class 'str'>,\n          Optional  (str) ipv4_unicast: <class 'str'>,\n          Optional  (str) remote_restart_timer: <class 'int'>,\n          Optional  (str) ipv6_unicast: <class 'str'>,\n          Optional  (str) l2vpn_vpls: <class 'str'>,\n          Optional  (str) l2vpn_evpn: <class 'str'>,\n          Optional  (str) vpnv4_multicast: <class 'str'>,\n          Optional  (str) multisession: <class 'str'>,\n          Optional  (str) graceful_restart_af_advertised_by_peer: <class 'list'>,\n          Optional  (str) vpnv6_multicast: <class 'str'>,\n          'enhanced_refresh': <class 'str'>,\n          Optional  (str) mvpnv4_multicast: <class 'str'>,\n          Optional  (str) mvpnv6_multicast: <class 'str'>,\n          },\n        Optional  (str) description: <class 'str'>,\n        },\n      },\n    },\n  },\n}", "doc": " Parser for:\n        * 'show bgp all neighbors'\n        * 'show bgp all neighbors {neighbor}'\n        * 'show bgp {address_family} all neighbors'\n        * 'show bgp {address_family} all neighbors {neighbor}'\n    ", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_bgp.py#L3680", "class": "ShowBgpAllNeighbors", "module_name": "show_bgp"}}, "show mpls ldp discovery {all} {detail}": {"iosxe": {"uid": "show_mpls_ldp_discovery_all_detail", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'local_ldp_identifier': {\n      Any  (str) *: {\n        'discovery_sources': {\n          'interfaces': {\n            Any  (str) *: {\n              Optional  (str) recv: <class 'bool'>,\n              Any  (str) *: {\n                Any  (str) *: {\n                  Optional  (str) proposed_peer: <class 'int'>,\n                  Optional  (str) transport_ip_address: <class 'str'>,\n                  Optional  (str) reachable_via: <class 'str'>,\n                  Optional  (str) source_ip_address: <class 'str'>,\n                  Optional  (str) password: <class 'str'>,\n                  Optional  (str) holdtime_sec: <class 'int'>,\n                  Optional  (str) clients: <class 'str'>,\n                  Optional  (str) proposed_local: <class 'int'>,\n                  },\n                },\n              Optional  (str) hello_interval_ms: <class 'int'>,\n              'session': <class 'str'>,\n              Optional  (str) transport_ip_addr: <class 'str'>,\n              Optional  (str) xmit: <class 'bool'>,\n              Optional  (str) enabled: <class 'str'>,\n              },\n            },\n          },\n        Optional  (str) targeted_hellos: {\n          Any  (str) *: {\n            Any  (str) *: {\n              Optional  (str) xmit: <class 'bool'>,\n              Optional  (str) recv: <class 'bool'>,\n              'active': <class 'bool'>,\n              'session': <class 'str'>,\n              Optional  (str) ldp_id: <class 'str'>,\n              Optional  (str) tdp_id: <class 'str'>,\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "doc": "\n        Parser for show mpls ldp discovery\n                   show mpls ldp discovery all\n                   show mpls ldp discovery all detail\n                   show mpls ldp discovery detail\n                   show mpls ldp discovery vrf <vrf>\n                   show mpls ldp discovery vrf <vrf> detail\n       ", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_mpls.py#L1354", "class": "ShowMplsLdpDiscovery", "module_name": "show_mpls"}}, "show ip bgp neighbors {neighbor} advertised-routes": {"iosxe": {"uid": "show_ip_bgp_neighbors_neighbor_advertised-routes", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'neighbor': {\n      Any  (str) *: {\n        'address_family': {\n          Any  (str) *: {\n            Optional  (str) route_distinguisher: <class 'str'>,\n            Optional  (str) bgp_table_version: <class 'int'>,\n            Optional  (str) default_vrf: <class 'str'>,\n            Optional  (str) local_router_id: <class 'str'>,\n            Optional  (str) advertised: {\n              Optional  (Any) Any  (str) *: {\n                Optional  (str) index: {\n                  Optional  (Any) Any  (str) *: {\n                    Optional  (str) origin_codes: <class 'str'>,\n                    Optional  (str) metric: <class 'int'>,\n                    Optional  (str) localprf: <class 'int'>,\n                    Optional  (str) next_hop: <class 'str'>,\n                    Optional  (str) weight: <class 'int'>,\n                    Optional  (str) status_codes: <class 'str'>,\n                    Optional  (str) path: <class 'str'>,\n                    Optional  (str) path_type: <class 'str'>,\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "doc": " Parser for:\n        * 'show ip bgp neighbors {neighbor} advertised-routes'\n        * 'show ip bgp {address_family} neighbors {neighbor} advertised-routes'\n    ", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_bgp.py#L4555", "class": "ShowIpBgpNeighborsAdvertisedRoutes", "module_name": "show_bgp"}}, "show bgp instance all {vrf_type} all {af_type} neighbors {neighbor} advertised-routes": {"iosxr": {"uid": "show_bgp_instance_all_vrf_type_all_af_type_neighbors_neighbor_advertised-routes", "schema": "{\n'instance': {\n  Any  (str) *: {\n    Optional  (str) vrf: {\n      Any  (str) *: {\n        Optional  (str) address_family: {\n          Any  (str) *: {\n            Optional  (str) processed_paths: <class 'str'>,\n            Optional  (str) default_vrf: <class 'str'>,\n            Optional  (str) route_distinguisher: <class 'str'>,\n            Optional  (str) processed_prefixes: <class 'str'>,\n            Optional  (str) advertised: {\n              Any  (str) *: {\n                Optional  (str) index: {\n                  Any  (str) *: {\n                    Optional  (str) origin_code: <class 'str'>,\n                    Optional  (str) path: <class 'str'>,\n                    Optional  (str) locprf: <class 'str'>,\n                    Optional  (str) status_codes: <class 'str'>,\n                    Optional  (str) weight: <class 'str'>,\n                    Optional  (str) next_hop: <class 'str'>,\n                    Optional  (str) froms: <class 'str'>,\n                    Optional  (str) metric: <class 'str'>,\n                    Optional  (str) path: <class 'str'>,\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "doc": " Parser for:\n        show bgp instance all all all neighbors <neighbor> advertised-routes\n        show bgp instance all vrf all neighbors <neighbor> advertised-routes\n        show bgp instance all vrf all ipv4 unicast neighbors <neighbor> advertised-routes\n        show bgp instance all vrf all ipv6 unicast neighbors <neighbor> advertised-routes\n        For checking any output with the parser ,below mandatory keys have to be in cli command.\n\n        - vrf_type\n    ", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_bgp.py#L3654", "class": "ShowBgpInstanceNeighborsAdvertisedRoutes", "module_name": "show_bgp"}}, "show ip bgp {address_family} rd {rd}": {"iosxe": {"uid": "show_ip_bgp_address_family_rd_rd", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'address_family': {\n      Any  (str) *: {\n        Optional  (str) pfx_limit: <class 'int'>,\n        Optional  (str) route_distinguisher: <class 'str'>,\n        Optional  (str) default_vrf: <class 'str'>,\n        Optional  (str) bgp_table_version: <class 'int'>,\n        Optional  (str) af_private_import_to_address_family: <class 'str'>,\n        Optional  (str) route_identifier: <class 'str'>,\n        Optional  (str) pfx_count: <class 'int'>,\n        Optional  (str) routes: {\n          Optional  (Any) Any  (str) *: {\n            Optional  (str) index: {\n              Optional  (Any) Any  (str) *: {\n                Optional  (str) weight: <class 'int'>,\n                Optional  (str) next_hop: <class 'str'>,\n                Optional  (str) path: <class 'str'>,\n                Optional  (str) status_codes: <class 'str'>,\n                Optional  (str) origin_codes: <class 'str'>,\n                Optional  (str) metric: <class 'int'>,\n                Optional  (str) localpref: <class 'int'>,\n                },\n              },\n            },\n          },\n        Optional  (str) vrf_route_identifier: <class 'str'>,\n        },\n      },\n    },\n  },\n}", "doc": " Parser for:\n        * 'show ip bgp'\n        * 'show ip bgp {address_family}'\n        * 'show ip bgp {address_family} rd {rd}'\n        * 'show ip bgp {address_family} vrf {vrf}'\n    ", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_bgp.py#L669", "class": "ShowIpBgp", "module_name": "show_bgp"}}, "show ip route vrf {vrf} {protocol}": {"ios": {"uid": "show_ip_route_vrf_vrf_protocol", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    Optional  (str) address_family: {\n      Any  (str) *: {\n        'ip': {\n          Any  (str) *: {\n            Optional  (str) nexthop: {\n              Optional  (Any) Any  (str) *: {\n                Optional  (str) protocol: {\n                  Optional  (Any) Any  (str) *: {\n                    Optional  (str) candidate_default: <class 'bool'>,\n                    Optional  (str) metric: <class 'str'>,\n                    Optional  (str) route_table: <class 'str'>,\n                    Optional  (str) preference: <class 'str'>,\n                    Optional  (str) attribute: <class 'str'>,\n                    Optional  (str) uptime: <class 'str'>,\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "doc": "Parser for:\n        show ipv6 route bgp\n        show ipv6 route vrf <vrf> bgp", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_ip_route.py#L20", "class": "ShowIpv6Route", "module_name": "show_ip_route"}, "iosxe": {"uid": "show_ip_route_vrf_vrf_protocol", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    Optional  (str) address_family: {\n      Any  (str) *: {\n        'ip': {\n          Any  (str) *: {\n            Optional  (str) nexthop: {\n              Optional  (Any) Any  (str) *: {\n                Optional  (str) protocol: {\n                  Optional  (Any) Any  (str) *: {\n                    Optional  (str) candidate_default: <class 'bool'>,\n                    Optional  (str) metric: <class 'str'>,\n                    Optional  (str) route_table: <class 'str'>,\n                    Optional  (str) preference: <class 'str'>,\n                    Optional  (str) attribute: <class 'str'>,\n                    Optional  (str) uptime: <class 'str'>,\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "doc": "Parser for:\n        show ipv6 route bgp\n        show ipv6 route vrf <vrf> bgp", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_ip_route.py#L244", "class": "ShowIpv6Route", "module_name": "show_ip_route"}}, "show platform hardware slot {slot} serdes statistics": {"ios": {"uid": "show_platform_hardware_slot_slot_serdes_statistics", "schema": "{\n'link': {\n  Any  (str) *: {\n    Optional  (str) remote_rx_in_sync: <class 'bool'>,\n    Optional  (str) to: {\n      'pkts': {\n        Optional  (str) total: <class 'int'>,\n        Optional  (str) dropped: <class 'int'>,\n        Optional  (str) high: <class 'int'>,\n        Optional  (str) errored: <class 'int'>,\n        Optional  (str) low: <class 'int'>,\n        },\n      Optional  (str) bytes: {\n        Optional  (str) dropped: <class 'int'>,\n        Optional  (str) total: <class 'int'>,\n        Optional  (str) errored: <class 'int'>,\n        Optional  (str) low: <class 'int'>,\n        Optional  (str) high: <class 'int'>,\n        },\n      },\n    Optional  (str) from: {\n      Optional  (str) flow_ctrl_count: <class 'int'>,\n      'bytes': {\n        Optional  (str) errored: <class 'int'>,\n        Optional  (str) total: <class 'int'>,\n        Optional  (str) looped: <class 'int'>,\n        Optional  (str) high: <class 'int'>,\n        Optional  (str) bad: <class 'int'>,\n        Optional  (str) low: <class 'int'>,\n        Optional  (str) dropped: <class 'int'>,\n        },\n      'pkts': {\n        Optional  (str) high: <class 'int'>,\n        Optional  (str) bad: <class 'int'>,\n        Optional  (str) low: <class 'int'>,\n        Optional  (str) dropped: <class 'int'>,\n        Optional  (str) total: <class 'int'>,\n        Optional  (str) errored: <class 'int'>,\n        Optional  (str) looped: <class 'int'>,\n        },\n      Optional  (str) qstat_count: <class 'int'>,\n      },\n    Optional  (str) local_tx_in_sync: <class 'bool'>,\n    Optional  (str) errors: {\n      'tx_process': <class 'int'>,\n      'rx_parity': <class 'int'>,\n      'rx_statistics': <class 'int'>,\n      'rx_process': <class 'int'>,\n      'tx_schedule': <class 'int'>,\n      'rx_schedule': <class 'int'>,\n      'tx_statistics': <class 'int'>,\n      },\n    Optional  (str) local_rx_in_sync: <class 'bool'>,\n    Optional  (str) remote_tx_in_sync: <class 'bool'>,\n    },\n  },\nOptional  (str) serdes_exception_counts: {\n  Any  (str) *: {\n    Optional  (str) link: {\n      Any  (str) *: {\n        'msgEccError': <class 'int'>,\n        'msgTypeError': <class 'int'>,\n        'chicoEvent': <class 'int'>,\n        },\n      },\n    },\n  },\n}", "doc": "Parser for show platform hardware slot <x> serdes statistics", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_platform.py#L371", "class": "ShowPlatformHardwareSerdes", "module_name": "show_platform"}, "iosxe": {"uid": "show_platform_hardware_slot_slot_serdes_statistics", "schema": "{\n'link': {\n  Any  (str) *: {\n    Optional  (str) remote_rx_in_sync: <class 'bool'>,\n    Optional  (str) to: {\n      'pkts': {\n        Optional  (str) total: <class 'int'>,\n        Optional  (str) dropped: <class 'int'>,\n        Optional  (str) high: <class 'int'>,\n        Optional  (str) errored: <class 'int'>,\n        Optional  (str) low: <class 'int'>,\n        },\n      Optional  (str) bytes: {\n        Optional  (str) dropped: <class 'int'>,\n        Optional  (str) total: <class 'int'>,\n        Optional  (str) errored: <class 'int'>,\n        Optional  (str) low: <class 'int'>,\n        Optional  (str) high: <class 'int'>,\n        },\n      },\n    Optional  (str) from: {\n      Optional  (str) flow_ctrl_count: <class 'int'>,\n      'bytes': {\n        Optional  (str) errored: <class 'int'>,\n        Optional  (str) total: <class 'int'>,\n        Optional  (str) looped: <class 'int'>,\n        Optional  (str) high: <class 'int'>,\n        Optional  (str) bad: <class 'int'>,\n        Optional  (str) low: <class 'int'>,\n        Optional  (str) dropped: <class 'int'>,\n        },\n      'pkts': {\n        Optional  (str) high: <class 'int'>,\n        Optional  (str) bad: <class 'int'>,\n        Optional  (str) low: <class 'int'>,\n        Optional  (str) dropped: <class 'int'>,\n        Optional  (str) total: <class 'int'>,\n        Optional  (str) errored: <class 'int'>,\n        Optional  (str) looped: <class 'int'>,\n        },\n      Optional  (str) qstat_count: <class 'int'>,\n      },\n    Optional  (str) local_tx_in_sync: <class 'bool'>,\n    Optional  (str) errors: {\n      'tx_process': <class 'int'>,\n      'rx_parity': <class 'int'>,\n      'rx_statistics': <class 'int'>,\n      'rx_process': <class 'int'>,\n      'tx_schedule': <class 'int'>,\n      'rx_schedule': <class 'int'>,\n      'tx_statistics': <class 'int'>,\n      },\n    Optional  (str) local_rx_in_sync: <class 'bool'>,\n    Optional  (str) remote_tx_in_sync: <class 'bool'>,\n    },\n  },\nOptional  (str) serdes_exception_counts: {\n  Any  (str) *: {\n    Optional  (str) link: {\n      Any  (str) *: {\n        'msgEccError': <class 'int'>,\n        'msgTypeError': <class 'int'>,\n        'chicoEvent': <class 'int'>,\n        },\n      },\n    },\n  },\n}", "doc": "Parser for show platform hardware slot <x> serdes statistics", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_platform.py#L3475", "class": "ShowPlatformHardwareSerdes", "module_name": "show_platform"}}, "show ip interface": {"ios": {"uid": "show_ip_interface", "schema": "{\nAny  (str) *: {\n  Optional  (str) out_access_list: <class 'str'>,\n  Optional  (str) split_horizon: <class 'bool'>,\n  Optional  (str) policy_routing: <class 'bool'>,\n  Optional  (str) ip_fast_switching: <class 'bool'>,\n  Optional  (str) network_address_translation: <class 'bool'>,\n  Optional  (str) ip_cef_switching: <class 'bool'>,\n  Optional  (str) router_discovery: <class 'bool'>,\n  Optional  (str) ip_flow_switching: <class 'bool'>,\n  Optional  (str) input_features: <class 'list'>,\n  Optional  (str) mtu: <class 'int'>,\n  'oper_status': <class 'str'>,\n  Optional  (str) ip_cef_switching_turbo_vector: <class 'bool'>,\n  Optional  (str) icmp: {\n    Optional  (str) unreachables: <class 'str'>,\n    Optional  (str) mask_replies: <class 'str'>,\n    Optional  (str) redirects: <class 'str'>,\n    },\n  Optional  (str) rtp_ip_header_compression: <class 'bool'>,\n  Optional  (str) ip_access_violation_accounting: <class 'bool'>,\n  Optional  (str) address_determined_by: <class 'str'>,\n  Optional  (str) probe_proxy_name_replies: <class 'bool'>,\n  Optional  (str) ip_null_turbo_vector: <class 'bool'>,\n  Optional  (str) ipv4: {\n    Any  (str) *: {\n      'ip': <class 'str'>,\n      Optional  (str) prefix_length: <class 'str'>,\n      Optional  (str) broadcase_address: <class 'str'>,\n      Optional  (str) secondary: <class 'bool'>,\n      },\n    },\n  Optional  (str) multicast_groups: <class 'list'>,\n  Optional  (str) vrf: <class 'str'>,\n  'enabled': <class 'bool'>,\n  Optional  (str) inbound_common_access_list: <class 'str'>,\n  Optional  (str) tcp_ip_header_compression: <class 'bool'>,\n  Optional  (str) helper_address: <class 'str'>,\n  Optional  (str) directed_broadcast_forwarding: <class 'bool'>,\n  Optional  (str) sevurity_level: <class 'str'>,\n  Optional  (str) ip_multicast_distributed_fast_switching: <class 'bool'>,\n  Optional  (str) bgp_policy_mapping: <class 'bool'>,\n  Optional  (str) local_proxy_arp: <class 'bool'>,\n  Optional  (str) unicast_routing_topologies: {\n    'topology': {\n      Any  (str) *: {\n        'status': <class 'str'>,\n        },\n      },\n    },\n  Optional  (str) ip_multicast_fast_switching: <class 'bool'>,\n  Optional  (str) out_common_access_list: <class 'str'>,\n  Optional  (str) ip_output_packet_accounting: <class 'bool'>,\n  Optional  (str) wccp: {\n    Optional  (str) redirect_outbound: <class 'bool'>,\n    Optional  (str) redirect_exclude: <class 'bool'>,\n    Optional  (str) redirect_inbound: <class 'bool'>,\n    },\n  Optional  (str) inbound_access_list: <class 'str'>,\n  Optional  (str) ip_route_cache_flags: <class 'list'>,\n  Optional  (str) proxy_arp: <class 'bool'>,\n  },\n}", "doc": "Parser for show ip interface", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_interface.py#L58", "class": "ShowIpInterface", "module_name": "show_interface"}, "iosxe": {"uid": "show_ip_interface", "schema": "{\nAny  (str) *: {\n  Optional  (str) out_access_list: <class 'str'>,\n  Optional  (str) split_horizon: <class 'bool'>,\n  Optional  (str) policy_routing: <class 'bool'>,\n  Optional  (str) ip_fast_switching: <class 'bool'>,\n  Optional  (str) network_address_translation: <class 'bool'>,\n  Optional  (str) ip_cef_switching: <class 'bool'>,\n  Optional  (str) router_discovery: <class 'bool'>,\n  Optional  (str) ip_flow_switching: <class 'bool'>,\n  Optional  (str) input_features: <class 'list'>,\n  Optional  (str) mtu: <class 'int'>,\n  'oper_status': <class 'str'>,\n  Optional  (str) ip_cef_switching_turbo_vector: <class 'bool'>,\n  Optional  (str) icmp: {\n    Optional  (str) unreachables: <class 'str'>,\n    Optional  (str) mask_replies: <class 'str'>,\n    Optional  (str) redirects: <class 'str'>,\n    },\n  Optional  (str) rtp_ip_header_compression: <class 'bool'>,\n  Optional  (str) ip_access_violation_accounting: <class 'bool'>,\n  Optional  (str) address_determined_by: <class 'str'>,\n  Optional  (str) probe_proxy_name_replies: <class 'bool'>,\n  Optional  (str) ip_null_turbo_vector: <class 'bool'>,\n  Optional  (str) ipv4: {\n    Any  (str) *: {\n      'ip': <class 'str'>,\n      Optional  (str) prefix_length: <class 'str'>,\n      Optional  (str) broadcase_address: <class 'str'>,\n      Optional  (str) secondary: <class 'bool'>,\n      },\n    },\n  Optional  (str) multicast_groups: <class 'list'>,\n  Optional  (str) vrf: <class 'str'>,\n  'enabled': <class 'bool'>,\n  Optional  (str) inbound_common_access_list: <class 'str'>,\n  Optional  (str) tcp_ip_header_compression: <class 'bool'>,\n  Optional  (str) helper_address: <class 'str'>,\n  Optional  (str) directed_broadcast_forwarding: <class 'bool'>,\n  Optional  (str) sevurity_level: <class 'str'>,\n  Optional  (str) ip_multicast_distributed_fast_switching: <class 'bool'>,\n  Optional  (str) bgp_policy_mapping: <class 'bool'>,\n  Optional  (str) local_proxy_arp: <class 'bool'>,\n  Optional  (str) unicast_routing_topologies: {\n    'topology': {\n      Any  (str) *: {\n        'status': <class 'str'>,\n        },\n      },\n    },\n  Optional  (str) ip_multicast_fast_switching: <class 'bool'>,\n  Optional  (str) out_common_access_list: <class 'str'>,\n  Optional  (str) ip_output_packet_accounting: <class 'bool'>,\n  Optional  (str) wccp: {\n    Optional  (str) redirect_outbound: <class 'bool'>,\n    Optional  (str) redirect_exclude: <class 'bool'>,\n    Optional  (str) redirect_inbound: <class 'bool'>,\n    },\n  Optional  (str) inbound_access_list: <class 'str'>,\n  Optional  (str) ip_route_cache_flags: <class 'list'>,\n  Optional  (str) proxy_arp: <class 'bool'>,\n  },\n}", "doc": "Parser for show ip interface\n                  show ip interface <interface>", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_interface.py#L1558", "class": "ShowIpInterface", "module_name": "show_interface"}}, "show {ip} route {route}": {"iosxe": {"uid": "show_ip_route_route", "schema": "{\n'total_prefixes': <class 'int'>,\n'entry': {\n  Any  (str) *: {\n    'ip': <class 'str'>,\n    'known_via': <class 'str'>,\n    'mask': <class 'str'>,\n    'metric': <class 'str'>,\n    'paths': {\n      Any  (str) *: {\n        Optional  (str) from: <class 'str'>,\n        Optional  (str) fwd_ip: <class 'str'>,\n        Optional  (str) age: <class 'str'>,\n        Optional  (str) fwd_intf: <class 'str'>,\n        },\n      },\n    Optional  (str) type: <class 'str'>,\n    Optional  (str) share_count: <class 'str'>,\n    'distance': <class 'str'>,\n    Optional  (str) route_count: <class 'str'>,\n    },\n  },\n}", "doc": "Parser for :\n       show ipv6 route <Hostname or A.B.C.D>\n       show ipv6 route vrf <vrf> <Hostname or A.B.C.D>", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_routing.py#L1152", "class": "ShowIpv6RouteWord", "module_name": "show_routing"}}, "show bgp all neighbors {neighbor}": {"ios": {"uid": "show_bgp_all_neighbors_neighbor", "schema": "{\nOptional  (str) list_of_neighbors: <class 'list'>,\n'vrf': {\n  Any  (str) *: {\n    'neighbor': {\n      Any  (str) *: {\n        Optional  (str) bgp_event_timer: {\n          'starts': {\n            Any  (str) *: <class 'int'>,\n            },\n          'wakeups': {\n            Any  (str) *: <class 'int'>,\n            },\n          'next': {\n            Any  (str) *: <class 'str'>,\n            },\n          },\n        'address_family': {\n          Any  (str) *: {\n            Optional  (str) refresh_epoch: <class 'int'>,\n            Optional  (str) session_state: <class 'str'>,\n            Optional  (str) max_nlri: <class 'int'>,\n            Optional  (str) up_time: <class 'str'>,\n            Optional  (str) min_nlri: <class 'int'>,\n            Optional  (str) down_time: <class 'str'>,\n            Optional  (str) refresh_activity_counters: {\n              'sent': {\n                Any  (str) *: <class 'int'>,\n                },\n              'received': {\n                Any  (str) *: <class 'int'>,\n                },\n              },\n            Optional  (str) local_policy_denied_prefixes_counters: {\n              'inbound': {\n                Any  (str) *: Any  (str) *,\n                },\n              'outbound': {\n                Any  (str) *: Any  (str) *,\n                },\n              },\n            Optional  (str) last_detected_dynamic_slow_peer: <class 'str'>,\n            Optional  (str) last_read: <class 'str'>,\n            Optional  (str) dynamic_slow_peer_recovered: <class 'str'>,\n            Optional  (str) last_write: <class 'str'>,\n            Optional  (str) last_sent_refresh_start_of_rib: <class 'str'>,\n            Optional  (str) current_time: <class 'str'>,\n            Optional  (str) last_received_refresh_start_of_rib: <class 'str'>,\n            Optional  (str) bgp_table_version: <class 'int'>,\n            Optional  (str) last_sent_refresh_end_of_rib: <class 'str'>,\n            Optional  (str) neighbor_version: <class 'str'>,\n            Optional  (str) last_received_refresh_end_of_rib: <class 'str'>,\n            Optional  (str) output_queue_size: <class 'int'>,\n            Optional  (str) refresh_out: <class 'int'>,\n            Optional  (str) index: <class 'int'>,\n            Optional  (str) refresh_in: <class 'int'>,\n            Optional  (str) advertise_bit: <class 'int'>,\n            Optional  (str) route_reflector_client: <class 'bool'>,\n            Optional  (str) update_group_member: <class 'int'>,\n            Optional  (str) community_attribute_sent: <class 'bool'>,\n            Optional  (str) extended_community_attribute_sent: <class 'bool'>,\n            Optional  (str) prefix_activity_counters: {\n              'sent': {\n                Any  (str) *: Any  (str) *,\n                },\n              'received': {\n                Any  (str) *: Any  (str) *,\n                },\n              },\n            Optional  (str) suppress_ldp_signaling: <class 'bool'>,\n            Optional  (str) slow_peer_detection: <class 'bool'>,\n            Optional  (str) slow_peer_split_update_group_dynamic: <class 'bool'>,\n            },\n          },\n        'bgp_neighbor_counters': {\n          'messages': {\n            'sent': {\n              'notifications': <class 'int'>,\n              'route_refresh': <class 'int'>,\n              'total': <class 'int'>,\n              'opens': <class 'int'>,\n              'keepalives': <class 'int'>,\n              'updates': <class 'int'>,\n              },\n            'in_queue_depth': <class 'int'>,\n            'received': {\n              'notifications': <class 'int'>,\n              'route_refresh': <class 'int'>,\n              'total': <class 'int'>,\n              'opens': <class 'int'>,\n              'keepalives': <class 'int'>,\n              'updates': <class 'int'>,\n              },\n            'out_queue_depth': <class 'int'>,\n            },\n          },\n        'bgp_negotiated_keepalive_timers': {\n          'keepalive_interval': <class 'int'>,\n          'hold_time': <class 'int'>,\n          Optional  (str) min_holdtime: <class 'int'>,\n          },\n        'link': <class 'str'>,\n        'router_id': <class 'str'>,\n        Optional  (str) bgp_session_transport: {\n          Optional  (str) enqueued_packets: {\n            'mis_ordered_packet': <class 'int'>,\n            'input_packet': <class 'int'>,\n            'retransmit_packet': <class 'int'>,\n            },\n          Optional  (str) iss: <class 'int'>,\n          Optional  (str) snduna: <class 'int'>,\n          'connection': {\n            Optional  (str) reset_reason: <class 'str'>,\n            'dropped': <class 'int'>,\n            'established': <class 'int'>,\n            'last_reset': <class 'str'>,\n            },\n          Optional  (str) sndnxt: <class 'int'>,\n          Optional  (str) irs: <class 'int'>,\n          'address_tracking_status': <class 'str'>,\n          Optional  (str) sndwnd: <class 'int'>,\n          Optional  (str) snd_scale: <class 'int'>,\n          Optional  (str) maxrcvwnd: <class 'int'>,\n          Optional  (str) rcvwnd: <class 'int'>,\n          Optional  (str) rcv_scale: <class 'int'>,\n          Optional  (str) delrcvwnd: <class 'int'>,\n          Optional  (str) srtt: <class 'int'>,\n          'min_time_between_advertisement_runs': <class 'int'>,\n          Optional  (str) rtto: <class 'int'>,\n          Optional  (str) rtv: <class 'int'>,\n          Optional  (str) krtt: <class 'int'>,\n          Optional  (str) min_rtt: <class 'int'>,\n          Optional  (str) max_rtt: <class 'int'>,\n          Optional  (str) ack_hold: <class 'int'>,\n          Optional  (str) uptime: <class 'int'>,\n          Optional  (str) sent_idletime: <class 'int'>,\n          Optional  (str) receive_idletime: <class 'int'>,\n          Optional  (str) tcp_connection: <class 'bool'>,\n          Optional  (str) status_flags: <class 'str'>,\n          Optional  (str) option_flags: <class 'str'>,\n          Optional  (str) ip_precedence_value: <class 'int'>,\n          'tcp_path_mtu_discovery': <class 'str'>,\n          Optional  (str) transport: {\n            'local_port': <class 'str'>,\n            'local_host': <class 'str'>,\n            'foreign_port': <class 'str'>,\n            Optional  (str) mss: <class 'int'>,\n            'foreign_host': <class 'str'>,\n            },\n          Optional  (str) datagram: {\n            'datagram_sent': {\n              'second_congestion': <class 'int'>,\n              'with_data': <class 'int'>,\n              'retransmit': <class 'int'>,\n              'partialack': <class 'int'>,\n              'value': <class 'int'>,\n              'fastretransmit': <class 'int'>,\n              'total_data': <class 'int'>,\n              },\n            'datagram_received': {\n              'out_of_order': <class 'int'>,\n              'with_data': <class 'int'>,\n              'total_data': <class 'int'>,\n              'value': <class 'int'>,\n              },\n            },\n          Optional  (str) graceful_restart: <class 'str'>,\n          Optional  (str) packet_fast_path: <class 'int'>,\n          Optional  (str) gr_restart_time: <class 'int'>,\n          Optional  (str) packet_fast_processed: <class 'int'>,\n          Optional  (str) gr_stalepath_time: <class 'int'>,\n          Optional  (str) packet_slow_path: <class 'int'>,\n          Optional  (str) connection_state: <class 'str'>,\n          Optional  (str) fast_lock_acquisition_failures: <class 'int'>,\n          Optional  (str) io_status: <class 'int'>,\n          Optional  (str) lock_slow_path: <class 'int'>,\n          Optional  (str) unread_input_bytes: <class 'int'>,\n          Optional  (str) tcp_semaphore: <class 'str'>,\n          Optional  (str) ecn_connection: <class 'str'>,\n          Optional  (str) tcp_semaphore_status: <class 'str'>,\n          Optional  (str) minimum_incoming_ttl: <class 'int'>,\n          Optional  (str) sso: <class 'bool'>,\n          Optional  (str) outgoing_ttl: <class 'int'>,\n          Optional  (str) rcvnxt: <class 'int'>,\n          Optional  (str) connection_tableid: <class 'int'>,\n          'rib_route_ip': <class 'str'>,\n          Optional  (str) maximum_output_segment_queue_size: <class 'int'>,\n          },\n        'remote_as': <class 'int'>,\n        'bgp_version': <class 'int'>,\n        'session_state': <class 'str'>,\n        'shutdown': <class 'bool'>,\n        Optional  (str) local_as: <class 'int'>,\n        'bgp_negotiated_capabilities': {\n          'four_octets_asn': <class 'str'>,\n          Optional  (str) vpnv4_unicast: <class 'str'>,\n          Optional  (str) graceful_restart: <class 'str'>,\n          'route_refresh': <class 'str'>,\n          Optional  (str) vpnv6_unicast: <class 'str'>,\n          'stateful_switchover': <class 'str'>,\n          Optional  (str) ipv4_unicast: <class 'str'>,\n          Optional  (str) remote_restart_timer: <class 'int'>,\n          Optional  (str) ipv6_unicast: <class 'str'>,\n          Optional  (str) l2vpn_vpls: <class 'str'>,\n          Optional  (str) l2vpn_evpn: <class 'str'>,\n          Optional  (str) vpnv4_multicast: <class 'str'>,\n          Optional  (str) multisession: <class 'str'>,\n          Optional  (str) graceful_restart_af_advertised_by_peer: <class 'list'>,\n          Optional  (str) vpnv6_multicast: <class 'str'>,\n          'enhanced_refresh': <class 'str'>,\n          Optional  (str) mvpnv4_multicast: <class 'str'>,\n          Optional  (str) mvpnv6_multicast: <class 'str'>,\n          },\n        Optional  (str) description: <class 'str'>,\n        },\n      },\n    },\n  },\n}", "doc": "\n    Parser for show bgp all neighbors\n    ", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_bgp.py#L75", "class": "ShowBgpAllNeighbors", "module_name": "show_bgp"}, "iosxe": {"uid": "show_bgp_all_neighbors_neighbor", "schema": "{\nOptional  (str) list_of_neighbors: <class 'list'>,\n'vrf': {\n  Any  (str) *: {\n    'neighbor': {\n      Any  (str) *: {\n        Optional  (str) bgp_event_timer: {\n          'starts': {\n            Any  (str) *: <class 'int'>,\n            },\n          'wakeups': {\n            Any  (str) *: <class 'int'>,\n            },\n          'next': {\n            Any  (str) *: <class 'str'>,\n            },\n          },\n        'address_family': {\n          Any  (str) *: {\n            Optional  (str) refresh_epoch: <class 'int'>,\n            Optional  (str) session_state: <class 'str'>,\n            Optional  (str) max_nlri: <class 'int'>,\n            Optional  (str) up_time: <class 'str'>,\n            Optional  (str) min_nlri: <class 'int'>,\n            Optional  (str) down_time: <class 'str'>,\n            Optional  (str) refresh_activity_counters: {\n              'sent': {\n                Any  (str) *: <class 'int'>,\n                },\n              'received': {\n                Any  (str) *: <class 'int'>,\n                },\n              },\n            Optional  (str) local_policy_denied_prefixes_counters: {\n              'inbound': {\n                Any  (str) *: Any  (str) *,\n                },\n              'outbound': {\n                Any  (str) *: Any  (str) *,\n                },\n              },\n            Optional  (str) last_detected_dynamic_slow_peer: <class 'str'>,\n            Optional  (str) last_read: <class 'str'>,\n            Optional  (str) dynamic_slow_peer_recovered: <class 'str'>,\n            Optional  (str) last_write: <class 'str'>,\n            Optional  (str) last_sent_refresh_start_of_rib: <class 'str'>,\n            Optional  (str) current_time: <class 'str'>,\n            Optional  (str) last_received_refresh_start_of_rib: <class 'str'>,\n            Optional  (str) bgp_table_version: <class 'int'>,\n            Optional  (str) last_sent_refresh_end_of_rib: <class 'str'>,\n            Optional  (str) neighbor_version: <class 'str'>,\n            Optional  (str) last_received_refresh_end_of_rib: <class 'str'>,\n            Optional  (str) output_queue_size: <class 'int'>,\n            Optional  (str) refresh_out: <class 'int'>,\n            Optional  (str) index: <class 'int'>,\n            Optional  (str) refresh_in: <class 'int'>,\n            Optional  (str) advertise_bit: <class 'int'>,\n            Optional  (str) route_reflector_client: <class 'bool'>,\n            Optional  (str) update_group_member: <class 'int'>,\n            Optional  (str) community_attribute_sent: <class 'bool'>,\n            Optional  (str) extended_community_attribute_sent: <class 'bool'>,\n            Optional  (str) prefix_activity_counters: {\n              'sent': {\n                Any  (str) *: Any  (str) *,\n                },\n              'received': {\n                Any  (str) *: Any  (str) *,\n                },\n              },\n            Optional  (str) suppress_ldp_signaling: <class 'bool'>,\n            Optional  (str) slow_peer_detection: <class 'bool'>,\n            Optional  (str) slow_peer_split_update_group_dynamic: <class 'bool'>,\n            },\n          },\n        'bgp_neighbor_counters': {\n          'messages': {\n            'sent': {\n              'notifications': <class 'int'>,\n              'route_refresh': <class 'int'>,\n              'total': <class 'int'>,\n              'opens': <class 'int'>,\n              'keepalives': <class 'int'>,\n              'updates': <class 'int'>,\n              },\n            'in_queue_depth': <class 'int'>,\n            'received': {\n              'notifications': <class 'int'>,\n              'route_refresh': <class 'int'>,\n              'total': <class 'int'>,\n              'opens': <class 'int'>,\n              'keepalives': <class 'int'>,\n              'updates': <class 'int'>,\n              },\n            'out_queue_depth': <class 'int'>,\n            },\n          },\n        'bgp_negotiated_keepalive_timers': {\n          'keepalive_interval': <class 'int'>,\n          'hold_time': <class 'int'>,\n          Optional  (str) min_holdtime: <class 'int'>,\n          },\n        'link': <class 'str'>,\n        'router_id': <class 'str'>,\n        Optional  (str) bgp_session_transport: {\n          Optional  (str) enqueued_packets: {\n            'mis_ordered_packet': <class 'int'>,\n            'input_packet': <class 'int'>,\n            'retransmit_packet': <class 'int'>,\n            },\n          Optional  (str) iss: <class 'int'>,\n          Optional  (str) snduna: <class 'int'>,\n          'connection': {\n            Optional  (str) reset_reason: <class 'str'>,\n            'dropped': <class 'int'>,\n            'established': <class 'int'>,\n            'last_reset': <class 'str'>,\n            },\n          Optional  (str) sndnxt: <class 'int'>,\n          Optional  (str) irs: <class 'int'>,\n          'address_tracking_status': <class 'str'>,\n          Optional  (str) sndwnd: <class 'int'>,\n          Optional  (str) snd_scale: <class 'int'>,\n          Optional  (str) maxrcvwnd: <class 'int'>,\n          Optional  (str) rcvwnd: <class 'int'>,\n          Optional  (str) rcv_scale: <class 'int'>,\n          Optional  (str) delrcvwnd: <class 'int'>,\n          Optional  (str) srtt: <class 'int'>,\n          'min_time_between_advertisement_runs': <class 'int'>,\n          Optional  (str) rtto: <class 'int'>,\n          Optional  (str) rtv: <class 'int'>,\n          Optional  (str) krtt: <class 'int'>,\n          Optional  (str) min_rtt: <class 'int'>,\n          Optional  (str) max_rtt: <class 'int'>,\n          Optional  (str) ack_hold: <class 'int'>,\n          Optional  (str) uptime: <class 'int'>,\n          Optional  (str) sent_idletime: <class 'int'>,\n          Optional  (str) receive_idletime: <class 'int'>,\n          Optional  (str) tcp_connection: <class 'bool'>,\n          Optional  (str) status_flags: <class 'str'>,\n          Optional  (str) option_flags: <class 'str'>,\n          Optional  (str) ip_precedence_value: <class 'int'>,\n          'tcp_path_mtu_discovery': <class 'str'>,\n          Optional  (str) transport: {\n            'local_port': <class 'str'>,\n            'local_host': <class 'str'>,\n            'foreign_port': <class 'str'>,\n            Optional  (str) mss: <class 'int'>,\n            'foreign_host': <class 'str'>,\n            },\n          Optional  (str) datagram: {\n            'datagram_sent': {\n              'second_congestion': <class 'int'>,\n              'with_data': <class 'int'>,\n              'retransmit': <class 'int'>,\n              'partialack': <class 'int'>,\n              'value': <class 'int'>,\n              'fastretransmit': <class 'int'>,\n              'total_data': <class 'int'>,\n              },\n            'datagram_received': {\n              'out_of_order': <class 'int'>,\n              'with_data': <class 'int'>,\n              'total_data': <class 'int'>,\n              'value': <class 'int'>,\n              },\n            },\n          Optional  (str) graceful_restart: <class 'str'>,\n          Optional  (str) packet_fast_path: <class 'int'>,\n          Optional  (str) gr_restart_time: <class 'int'>,\n          Optional  (str) packet_fast_processed: <class 'int'>,\n          Optional  (str) gr_stalepath_time: <class 'int'>,\n          Optional  (str) packet_slow_path: <class 'int'>,\n          Optional  (str) connection_state: <class 'str'>,\n          Optional  (str) fast_lock_acquisition_failures: <class 'int'>,\n          Optional  (str) io_status: <class 'int'>,\n          Optional  (str) lock_slow_path: <class 'int'>,\n          Optional  (str) unread_input_bytes: <class 'int'>,\n          Optional  (str) tcp_semaphore: <class 'str'>,\n          Optional  (str) ecn_connection: <class 'str'>,\n          Optional  (str) tcp_semaphore_status: <class 'str'>,\n          Optional  (str) minimum_incoming_ttl: <class 'int'>,\n          Optional  (str) sso: <class 'bool'>,\n          Optional  (str) outgoing_ttl: <class 'int'>,\n          Optional  (str) rcvnxt: <class 'int'>,\n          Optional  (str) connection_tableid: <class 'int'>,\n          'rib_route_ip': <class 'str'>,\n          Optional  (str) maximum_output_segment_queue_size: <class 'int'>,\n          },\n        'remote_as': <class 'int'>,\n        'bgp_version': <class 'int'>,\n        'session_state': <class 'str'>,\n        'shutdown': <class 'bool'>,\n        Optional  (str) local_as: <class 'int'>,\n        'bgp_negotiated_capabilities': {\n          'four_octets_asn': <class 'str'>,\n          Optional  (str) vpnv4_unicast: <class 'str'>,\n          Optional  (str) graceful_restart: <class 'str'>,\n          'route_refresh': <class 'str'>,\n          Optional  (str) vpnv6_unicast: <class 'str'>,\n          'stateful_switchover': <class 'str'>,\n          Optional  (str) ipv4_unicast: <class 'str'>,\n          Optional  (str) remote_restart_timer: <class 'int'>,\n          Optional  (str) ipv6_unicast: <class 'str'>,\n          Optional  (str) l2vpn_vpls: <class 'str'>,\n          Optional  (str) l2vpn_evpn: <class 'str'>,\n          Optional  (str) vpnv4_multicast: <class 'str'>,\n          Optional  (str) multisession: <class 'str'>,\n          Optional  (str) graceful_restart_af_advertised_by_peer: <class 'list'>,\n          Optional  (str) vpnv6_multicast: <class 'str'>,\n          'enhanced_refresh': <class 'str'>,\n          Optional  (str) mvpnv4_multicast: <class 'str'>,\n          Optional  (str) mvpnv6_multicast: <class 'str'>,\n          },\n        Optional  (str) description: <class 'str'>,\n        },\n      },\n    },\n  },\n}", "doc": " Parser for:\n        * 'show bgp all neighbors'\n        * 'show bgp all neighbors {neighbor}'\n        * 'show bgp {address_family} all neighbors'\n        * 'show bgp {address_family} all neighbors {neighbor}'\n    ", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_bgp.py#L3680", "class": "ShowBgpAllNeighbors", "module_name": "show_bgp"}}, "show lisp session": {"iosxe": {"uid": "show_lisp_session", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'sessions': {\n      'established': <class 'int'>,\n      'total': <class 'int'>,\n      'peers': {\n        Any  (str) *: {\n          'state': <class 'str'>,\n          'time': <class 'str'>,\n          'total_in': <class 'int'>,\n          'users': <class 'int'>,\n          'total_out': <class 'int'>,\n          },\n        },\n      },\n    },\n  },\n}", "doc": " Parser for \"show lisp session\"", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_lisp.py#L80", "class": "ShowLispSession", "module_name": "show_lisp"}}, "show ip route vrf": {"nxos": {"uid": "show_ip_route_vrf", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    Optional  (str) address_family: {\n      Any  (str) *: {\n        Optional  (str) routes: {\n          Any  (str) *: {\n            Optional  (str) route_preference: <class 'int'>,\n            Optional  (str) metric: <class 'int'>,\n            Optional  (str) ubest: <class 'int'>,\n            Optional  (str) mbest: <class 'int'>,\n            Optional  (str) active: <class 'bool'>,\n            Optional  (str) process_id: <class 'str'>,\n            Optional  (str) tag: <class 'int'>,\n            Optional  (str) next_hop: {\n              Optional  (str) outgoing_interface: {\n                Any  (str) *: {\n                  Optional  (str) best_ucast_nexthop: <class 'bool'>,\n                  Optional  (str) best_mcast_nexthop: <class 'bool'>,\n                  Optional  (str) outgoing_interface: <class 'str'>,\n                  Optional  (str) updated: <class 'str'>,\n                  },\n                },\n              Optional  (str) next_hop_list: {\n                Any  (str) *: {\n                  Optional  (str) outgoing_interface: <class 'str'>,\n                  Optional  (str) next_hop: <class 'str'>,\n                  Optional  (str) best_mcast_nexthop: <class 'bool'>,\n                  Optional  (str) index: <class 'int'>,\n                  Optional  (str) updated: <class 'str'>,\n                  Optional  (str) best_ucast_nexthop: <class 'bool'>,\n                  Optional  (str) next_hop_vrf: <class 'str'>,\n                  },\n                },\n              },\n            Optional  (str) attached: <class 'bool'>,\n            Optional  (str) source_protocol_status: <class 'str'>,\n            Optional  (str) source_protocol: <class 'str'>,\n            Optional  (str) route: <class 'str'>,\n            },\n          },\n        },\n      },\n    },\n  },\n}", "doc": "Parser for :\n       show ip route\n       show ip route vrf <vrf>\n       show ip route vrf all", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_routing.py#L323", "class": "ShowIpRoute", "module_name": "show_routing"}}, "show ip arp detail vrf {vrf}": {"nxos": {"uid": "show_ip_arp_detail_vrf_vrf", "schema": "{\n'interfaces': {\n  Any  (str) *: {\n    'ipv4': {\n      'neighbors': {\n        Any  (str) *: {\n          'ip': <class 'str'>,\n          'age': <class 'str'>,\n          'origin': <class 'str'>,\n          Optional  (str) flag: <class 'str'>,\n          'physical_interface': <class 'str'>,\n          'link_layer_address': <class 'str'>,\n          },\n        },\n      },\n    },\n  },\n}", "doc": "Parser for:\n\t\tshow ip arp detail vrf all\n\t\tparser class - implements detail parsing mechanisms for cli,xml and yang output.\n\t", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_arp.py#L86", "class": "ShowIpArpDetailVrfAll", "module_name": "show_arp"}}, "show ipv6 route updated": {"ios": {"uid": "show_ipv6_route_updated", "schema": "{\n'ipv6_unicast_routing_enabled': <class 'bool'>,\n'vrf': {\n  Any  (str) *: {\n    Optional  (str) address_family: {\n      Any  (str) *: {\n        Optional  (str) routes: {\n          Any  (str) *: {\n            Optional  (str) route_preference: <class 'int'>,\n            Optional  (str) next_hop: {\n              Optional  (str) next_hop_list: {\n                Any  (str) *: {\n                  Optional  (str) updated: <class 'str'>,\n                  Optional  (str) next_hop: <class 'str'>,\n                  Optional  (str) outgoing_interface: <class 'str'>,\n                  Optional  (str) index: <class 'int'>,\n                  },\n                },\n              Optional  (str) outgoing_interface: {\n                Any  (str) *: {\n                  Optional  (str) outgoing_interface: <class 'str'>,\n                  Optional  (str) updated: <class 'str'>,\n                  },\n                },\n              },\n            Optional  (str) metric: <class 'int'>,\n            Optional  (str) route: <class 'str'>,\n            Optional  (str) source_protocol: <class 'str'>,\n            Optional  (str) source_protocol_codes: <class 'str'>,\n            Optional  (str) active: <class 'bool'>,\n            },\n          },\n        },\n      },\n    },\n  },\n}", "doc": "Parser for :\n       show ipv6 route updated\n       show ipv6 route vrf <vrf> updated", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_routing.py#L18", "class": "ShowIpv6RouteUpdated", "module_name": "show_routing"}, "iosxe": {"uid": "show_ipv6_route_updated", "schema": "{\n'ipv6_unicast_routing_enabled': <class 'bool'>,\n'vrf': {\n  Any  (str) *: {\n    Optional  (str) address_family: {\n      Any  (str) *: {\n        Optional  (str) routes: {\n          Any  (str) *: {\n            Optional  (str) route_preference: <class 'int'>,\n            Optional  (str) next_hop: {\n              Optional  (str) next_hop_list: {\n                Any  (str) *: {\n                  Optional  (str) updated: <class 'str'>,\n                  Optional  (str) next_hop: <class 'str'>,\n                  Optional  (str) outgoing_interface: <class 'str'>,\n                  Optional  (str) index: <class 'int'>,\n                  },\n                },\n              Optional  (str) outgoing_interface: {\n                Any  (str) *: {\n                  Optional  (str) outgoing_interface: <class 'str'>,\n                  Optional  (str) updated: <class 'str'>,\n                  },\n                },\n              },\n            Optional  (str) metric: <class 'int'>,\n            Optional  (str) route: <class 'str'>,\n            Optional  (str) source_protocol: <class 'str'>,\n            Optional  (str) source_protocol_codes: <class 'str'>,\n            Optional  (str) active: <class 'bool'>,\n            },\n          },\n        },\n      },\n    },\n  },\n}", "doc": "Parser for :\n       show ipv6 route updated\n       show ipv6 route vrf <vrf> updated", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_routing.py#L619", "class": "ShowIpv6RouteUpdated", "module_name": "show_routing"}}, "show ipv6 icmp neighbor detail": {"nxos": {"uid": "show_ipv6_icmp_neighbor_detail", "schema": "{\n'interfaces': {\n  Any  (str) *: {\n    'neighbors': {\n      Any  (str) *: {\n        'ip': <class 'str'>,\n        'neighbor_state': <class 'str'>,\n        Optional  (str) physical_interface: <class 'str'>,\n        'link_layer_address': <class 'str'>,\n        'age': <class 'str'>,\n        },\n      },\n    'interface': <class 'str'>,\n    },\n  },\n}", "doc": "Parser for :\n        show ipv6 icmp neighbor detail\n        show ipv6 icmp neighbor detail vrf all\n        show ipv6 icmp neighbor detail vrf <vrf>", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_nd.py#L524", "class": "ShowIpv6IcmpNeighborDetail", "module_name": "show_nd"}}, "show ip ospf database summary": {"ios": {"uid": "show_ip_ospf_database_summary", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'address_family': {\n      Any  (str) *: {\n        'instance': {\n          Any  (str) *: {\n            Optional  (str) areas: {\n              Any  (str) *: {\n                'database': {\n                  'lsa_types': {\n                    Any  (str) *: {\n                      'lsa_type': <class 'int'>,\n                      'lsas': {\n                        Any  (str) *: {\n                          'ospfv2': {\n                            'header': {\n                              'age': <class 'int'>,\n                              'option_desc': <class 'str'>,\n                              'adv_router': <class 'str'>,\n                              'seq_num': <class 'str'>,\n                              'length': <class 'int'>,\n                              'checksum': <class 'str'>,\n                              'type': <class 'int'>,\n                              Optional  (str) routing_bit_enable: <class 'bool'>,\n                              'lsa_id': <class 'str'>,\n                              'option': <class 'str'>,\n                              },\n                            'body': {\n                              'summary': {\n                                'topologies': {\n                                  Any  (str) *: {\n                                    'metric': <class 'int'>,\n                                    'mt_id': <class 'int'>,\n                                    },\n                                  },\n                                'network_mask': <class 'str'>,\n                                },\n                              },\n                            },\n                          'lsa_id': <class 'str'>,\n                          'adv_router': <class 'str'>,\n                          },\n                        },\n                      },\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "doc": " Parser for \"show ip ospf database summary\" ", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_ospf.py#L87", "class": "ShowIpOspfDatabaseSummary", "module_name": "show_ospf"}, "iosxe": {"uid": "show_ip_ospf_database_summary", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'address_family': {\n      Any  (str) *: {\n        'instance': {\n          Any  (str) *: {\n            Optional  (str) areas: {\n              Any  (str) *: {\n                'database': {\n                  'lsa_types': {\n                    Any  (str) *: {\n                      'lsa_type': <class 'int'>,\n                      'lsas': {\n                        Any  (str) *: {\n                          'ospfv2': {\n                            'header': {\n                              'age': <class 'int'>,\n                              'option_desc': <class 'str'>,\n                              'adv_router': <class 'str'>,\n                              'seq_num': <class 'str'>,\n                              'length': <class 'int'>,\n                              'checksum': <class 'str'>,\n                              'type': <class 'int'>,\n                              Optional  (str) routing_bit_enable: <class 'bool'>,\n                              'lsa_id': <class 'str'>,\n                              'option': <class 'str'>,\n                              },\n                            'body': {\n                              'summary': {\n                                'topologies': {\n                                  Any  (str) *: {\n                                    'metric': <class 'int'>,\n                                    'mt_id': <class 'int'>,\n                                    },\n                                  },\n                                'network_mask': <class 'str'>,\n                                },\n                              },\n                            },\n                          'lsa_id': <class 'str'>,\n                          'adv_router': <class 'str'>,\n                          },\n                        },\n                      },\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "doc": " Parser for:\n        * 'show ip ospf database summary'\n    ", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_ospf.py#L4428", "class": "ShowIpOspfDatabaseSummary", "module_name": "show_ospf"}}, "show vrf": {"nxos": {"uid": "show_vrf", "schema": "{\n'vrfs': {\n  Any  (str) *: {\n    'vrf_id': <class 'int'>,\n    'reason': <class 'str'>,\n    'vrf_state': <class 'str'>,\n    },\n  },\n}", "doc": "Parser for show vrf", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_vrf.py#L35", "class": "ShowVrf", "module_name": "show_vrf"}}, "show ipv6 pim neighbor vrf {vrf}": {"nxos": {"uid": "show_ipv6_pim_neighbor_vrf_vrf", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'interfaces': {\n      Any  (str) *: {\n        'address_family': {\n          Any  (str) *: {\n            'neighbors': {\n              Any  (str) *: {\n                Optional  (str) dr_priority: <class 'int'>,\n                Optional  (str) up_time: <class 'str'>,\n                Optional  (str) bfd_status: <class 'bool'>,\n                Optional  (str) interface: <class 'str'>,\n                Optional  (str) bidir_capable: <class 'bool'>,\n                Optional  (str) expiration: <class 'str'>,\n                },\n              Optional  (str) secondary_address: <class 'list'>,\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "doc": "Parser for:\n        show ipv6 pim neighbor\n        show ipv6 pim neighbor vrf <vrf>", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_pim.py#L2029", "class": "ShowIpv6PimNeighbor", "module_name": "show_pim"}}, "show pagp {channel_group} counters": {"iosxe": {"uid": "show_pagp_channel_group_counters", "schema": "{\n'interfaces': {\n  Any  (str) *: {\n    'protocol': <class 'str'>,\n    'name': <class 'str'>,\n    'members': {\n      Any  (str) *: {\n        'interface': <class 'str'>,\n        'counters': {\n          'information_in_pkts': <class 'int'>,\n          'flush_out_pkts': <class 'int'>,\n          'flush_in_pkts': <class 'int'>,\n          'information_out_pkts': <class 'int'>,\n          'pagp_errors': <class 'int'>,\n          },\n        },\n      },\n    },\n  },\n}", "doc": "Parser for :\n      show pagp counters", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_lag.py#L411", "class": "ShowPagpCounters", "module_name": "show_lag"}}, "show vrf all detail": {"iosxr": {"uid": "show_vrf_all_detail", "schema": "{\nAny  (str) *: {\n  Optional  (str) interfaces: <class 'list'>,\n  'address_family': {\n    Any  (str) *: {\n      Optional  (str) route_target: {\n        Any  (str) *: {\n          'route_target': <class 'str'>,\n          'rt_type': <class 'str'>,\n          },\n        },\n      Optional  (str) route_policy: {\n        'import': <class 'str'>,\n        'export': <class 'str'>,\n        },\n      },\n    },\n  Optional  (str) vrf_mode: <class 'str'>,\n  Optional  (str) route_distinguisher: <class 'str'>,\n  Optional  (str) description: <class 'str'>,\n  Optional  (str) vpn_id: <class 'str'>,\n  },\n}", "doc": "Parser for show vrf all detail", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_vrf.py#L44", "class": "ShowVrfAllDetail", "module_name": "show_vrf"}}, "show ipv6 mld interface vrf {vrf}": {"nxos": {"uid": "show_ipv6_mld_interface_vrf_vrf", "schema": "{\n'vrfs': {\n  Any  (str) *: {\n    Optional  (str) interface: {\n      Any  (str) *: {\n        Optional  (str) query_max_response_time: <class 'int'>,\n        'link_status': <class 'str'>,\n        'enable': <class 'bool'>,\n        Optional  (str) max_groups: <class 'int'>,\n        Optional  (str) available_groups: <class 'int'>,\n        Optional  (str) group_policy: <class 'str'>,\n        Optional  (str) startup_query: {\n          Optional  (str) interval: <class 'int'>,\n          Optional  (str) count: <class 'int'>,\n          Optional  (str) configured_interval: <class 'int'>,\n          },\n        'oper_status': <class 'str'>,\n        Optional  (str) configured_query_max_response_time: <class 'int'>,\n        Optional  (str) statistics: {\n          'sent': {\n            Any  (str) *: <class 'int'>,\n            },\n          'received': {\n            Any  (str) *: <class 'int'>,\n            },\n          },\n        Optional  (str) ipv6: {\n          Any  (str) *: {\n            'ip': <class 'str'>,\n            'prefix_length': <class 'str'>,\n            'status': <class 'str'>,\n            },\n          },\n        Optional  (str) last_member: {\n          Optional  (str) query_count: <class 'int'>,\n          Optional  (str) mrt: <class 'int'>,\n          },\n        Optional  (str) group_timeout: <class 'int'>,\n        Optional  (str) link_local: {\n          'address': <class 'str'>,\n          'status': <class 'str'>,\n          Optional  (str) ipv6_address: <class 'str'>,\n          },\n        Optional  (str) configured_group_timeout: <class 'int'>,\n        Optional  (str) querier: <class 'str'>,\n        Optional  (str) querier_timeout: <class 'int'>,\n        Optional  (str) querier_version: <class 'int'>,\n        Optional  (str) configured_querier_timeout: <class 'int'>,\n        Optional  (str) next_query_sent_in: <class 'str'>,\n        Optional  (str) unsolicited_report_interval: <class 'int'>,\n        Optional  (str) membership_count: <class 'int'>,\n        Optional  (str) robustness_variable: <class 'int'>,\n        Optional  (str) version: <class 'int'>,\n        Optional  (str) configured_robustness_variable: <class 'int'>,\n        Optional  (str) host_version: <class 'int'>,\n        Optional  (str) link_local_groups_reporting: <class 'bool'>,\n        Optional  (str) query_interval: <class 'int'>,\n        Optional  (str) immediate_leave: <class 'bool'>,\n        Optional  (str) configured_query_interval: <class 'int'>,\n        Optional  (str) enable_refcount: <class 'int'>,\n        },\n      },\n    },\n  },\n}", "doc": "Parser for:\n        show ipv6 mld interface\n        show ipv6 mld interface vrf all\n        show ipv6 mld interface vrf <vrf>", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_mld.py#L104", "class": "ShowIpv6MldInterface", "module_name": "show_mld"}}, "show bgp vrf {vrf} all neighbors {neighbor} routes": {"nxos": {"uid": "show_bgp_vrf_vrf_all_neighbors_neighbor_routes", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'neighbor': {\n      Any  (str) *: {\n        'address_family': {\n          Any  (str) *: {\n            Optional  (str) default_vrf: <class 'str'>,\n            Optional  (str) local_router_id: <class 'str'>,\n            Optional  (str) bgp_table_version: <class 'int'>,\n            Optional  (str) route_distinguisher: <class 'str'>,\n            Optional  (str) routes: {\n              Optional  (Any) Any  (str) *: {\n                Optional  (str) index: {\n                  Optional  (Any) Any  (str) *: {\n                    Optional  (str) locprf: <class 'int'>,\n                    Optional  (str) next_hop: <class 'str'>,\n                    Optional  (str) weight: <class 'int'>,\n                    Optional  (str) status_codes: <class 'str'>,\n                    Optional  (str) path: <class 'str'>,\n                    Optional  (str) path_type: <class 'str'>,\n                    Optional  (str) origin_codes: <class 'str'>,\n                    Optional  (str) metric: <class 'int'>,\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "doc": "Parser for show bgp vrf <vrf> all neighbors <neighbor> routes", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_bgp.py#L4864", "class": "ShowBgpVrfAllNeighborsRoutes", "module_name": "show_bgp"}}, "show bgp {address_family} vrf {vrf} neighbors {neighbor}": {"iosxe": {"uid": "show_bgp_address_family_vrf_vrf_neighbors_neighbor", "schema": "{\nOptional  (str) list_of_neighbors: <class 'list'>,\n'vrf': {\n  Any  (str) *: {\n    'neighbor': {\n      Any  (str) *: {\n        Optional  (str) bgp_event_timer: {\n          'starts': {\n            Any  (str) *: <class 'int'>,\n            },\n          'wakeups': {\n            Any  (str) *: <class 'int'>,\n            },\n          'next': {\n            Any  (str) *: <class 'str'>,\n            },\n          },\n        'address_family': {\n          Any  (str) *: {\n            Optional  (str) refresh_epoch: <class 'int'>,\n            Optional  (str) session_state: <class 'str'>,\n            Optional  (str) max_nlri: <class 'int'>,\n            Optional  (str) up_time: <class 'str'>,\n            Optional  (str) min_nlri: <class 'int'>,\n            Optional  (str) down_time: <class 'str'>,\n            Optional  (str) refresh_activity_counters: {\n              'sent': {\n                Any  (str) *: <class 'int'>,\n                },\n              'received': {\n                Any  (str) *: <class 'int'>,\n                },\n              },\n            Optional  (str) local_policy_denied_prefixes_counters: {\n              'inbound': {\n                Any  (str) *: Any  (str) *,\n                },\n              'outbound': {\n                Any  (str) *: Any  (str) *,\n                },\n              },\n            Optional  (str) last_detected_dynamic_slow_peer: <class 'str'>,\n            Optional  (str) last_read: <class 'str'>,\n            Optional  (str) dynamic_slow_peer_recovered: <class 'str'>,\n            Optional  (str) last_write: <class 'str'>,\n            Optional  (str) last_sent_refresh_start_of_rib: <class 'str'>,\n            Optional  (str) current_time: <class 'str'>,\n            Optional  (str) last_received_refresh_start_of_rib: <class 'str'>,\n            Optional  (str) bgp_table_version: <class 'int'>,\n            Optional  (str) last_sent_refresh_end_of_rib: <class 'str'>,\n            Optional  (str) neighbor_version: <class 'str'>,\n            Optional  (str) last_received_refresh_end_of_rib: <class 'str'>,\n            Optional  (str) output_queue_size: <class 'int'>,\n            Optional  (str) refresh_out: <class 'int'>,\n            Optional  (str) index: <class 'int'>,\n            Optional  (str) refresh_in: <class 'int'>,\n            Optional  (str) advertise_bit: <class 'int'>,\n            Optional  (str) route_reflector_client: <class 'bool'>,\n            Optional  (str) update_group_member: <class 'int'>,\n            Optional  (str) community_attribute_sent: <class 'bool'>,\n            Optional  (str) extended_community_attribute_sent: <class 'bool'>,\n            Optional  (str) prefix_activity_counters: {\n              'sent': {\n                Any  (str) *: Any  (str) *,\n                },\n              'received': {\n                Any  (str) *: Any  (str) *,\n                },\n              },\n            Optional  (str) suppress_ldp_signaling: <class 'bool'>,\n            Optional  (str) slow_peer_detection: <class 'bool'>,\n            Optional  (str) slow_peer_split_update_group_dynamic: <class 'bool'>,\n            },\n          },\n        'bgp_neighbor_counters': {\n          'messages': {\n            'sent': {\n              'notifications': <class 'int'>,\n              'route_refresh': <class 'int'>,\n              'total': <class 'int'>,\n              'opens': <class 'int'>,\n              'keepalives': <class 'int'>,\n              'updates': <class 'int'>,\n              },\n            'in_queue_depth': <class 'int'>,\n            'received': {\n              'notifications': <class 'int'>,\n              'route_refresh': <class 'int'>,\n              'total': <class 'int'>,\n              'opens': <class 'int'>,\n              'keepalives': <class 'int'>,\n              'updates': <class 'int'>,\n              },\n            'out_queue_depth': <class 'int'>,\n            },\n          },\n        'bgp_negotiated_keepalive_timers': {\n          'keepalive_interval': <class 'int'>,\n          'hold_time': <class 'int'>,\n          Optional  (str) min_holdtime: <class 'int'>,\n          },\n        'link': <class 'str'>,\n        'router_id': <class 'str'>,\n        Optional  (str) bgp_session_transport: {\n          Optional  (str) enqueued_packets: {\n            'mis_ordered_packet': <class 'int'>,\n            'input_packet': <class 'int'>,\n            'retransmit_packet': <class 'int'>,\n            },\n          Optional  (str) iss: <class 'int'>,\n          Optional  (str) snduna: <class 'int'>,\n          'connection': {\n            Optional  (str) reset_reason: <class 'str'>,\n            'dropped': <class 'int'>,\n            'established': <class 'int'>,\n            'last_reset': <class 'str'>,\n            },\n          Optional  (str) sndnxt: <class 'int'>,\n          Optional  (str) irs: <class 'int'>,\n          'address_tracking_status': <class 'str'>,\n          Optional  (str) sndwnd: <class 'int'>,\n          Optional  (str) snd_scale: <class 'int'>,\n          Optional  (str) maxrcvwnd: <class 'int'>,\n          Optional  (str) rcvwnd: <class 'int'>,\n          Optional  (str) rcv_scale: <class 'int'>,\n          Optional  (str) delrcvwnd: <class 'int'>,\n          Optional  (str) srtt: <class 'int'>,\n          'min_time_between_advertisement_runs': <class 'int'>,\n          Optional  (str) rtto: <class 'int'>,\n          Optional  (str) rtv: <class 'int'>,\n          Optional  (str) krtt: <class 'int'>,\n          Optional  (str) min_rtt: <class 'int'>,\n          Optional  (str) max_rtt: <class 'int'>,\n          Optional  (str) ack_hold: <class 'int'>,\n          Optional  (str) uptime: <class 'int'>,\n          Optional  (str) sent_idletime: <class 'int'>,\n          Optional  (str) receive_idletime: <class 'int'>,\n          Optional  (str) tcp_connection: <class 'bool'>,\n          Optional  (str) status_flags: <class 'str'>,\n          Optional  (str) option_flags: <class 'str'>,\n          Optional  (str) ip_precedence_value: <class 'int'>,\n          'tcp_path_mtu_discovery': <class 'str'>,\n          Optional  (str) transport: {\n            'local_port': <class 'str'>,\n            'local_host': <class 'str'>,\n            'foreign_port': <class 'str'>,\n            Optional  (str) mss: <class 'int'>,\n            'foreign_host': <class 'str'>,\n            },\n          Optional  (str) datagram: {\n            'datagram_sent': {\n              'second_congestion': <class 'int'>,\n              'with_data': <class 'int'>,\n              'retransmit': <class 'int'>,\n              'partialack': <class 'int'>,\n              'value': <class 'int'>,\n              'fastretransmit': <class 'int'>,\n              'total_data': <class 'int'>,\n              },\n            'datagram_received': {\n              'out_of_order': <class 'int'>,\n              'with_data': <class 'int'>,\n              'total_data': <class 'int'>,\n              'value': <class 'int'>,\n              },\n            },\n          Optional  (str) graceful_restart: <class 'str'>,\n          Optional  (str) packet_fast_path: <class 'int'>,\n          Optional  (str) gr_restart_time: <class 'int'>,\n          Optional  (str) packet_fast_processed: <class 'int'>,\n          Optional  (str) gr_stalepath_time: <class 'int'>,\n          Optional  (str) packet_slow_path: <class 'int'>,\n          Optional  (str) connection_state: <class 'str'>,\n          Optional  (str) fast_lock_acquisition_failures: <class 'int'>,\n          Optional  (str) io_status: <class 'int'>,\n          Optional  (str) lock_slow_path: <class 'int'>,\n          Optional  (str) unread_input_bytes: <class 'int'>,\n          Optional  (str) tcp_semaphore: <class 'str'>,\n          Optional  (str) ecn_connection: <class 'str'>,\n          Optional  (str) tcp_semaphore_status: <class 'str'>,\n          Optional  (str) minimum_incoming_ttl: <class 'int'>,\n          Optional  (str) sso: <class 'bool'>,\n          Optional  (str) outgoing_ttl: <class 'int'>,\n          Optional  (str) rcvnxt: <class 'int'>,\n          Optional  (str) connection_tableid: <class 'int'>,\n          'rib_route_ip': <class 'str'>,\n          Optional  (str) maximum_output_segment_queue_size: <class 'int'>,\n          },\n        'remote_as': <class 'int'>,\n        'bgp_version': <class 'int'>,\n        'session_state': <class 'str'>,\n        'shutdown': <class 'bool'>,\n        Optional  (str) local_as: <class 'int'>,\n        'bgp_negotiated_capabilities': {\n          'four_octets_asn': <class 'str'>,\n          Optional  (str) vpnv4_unicast: <class 'str'>,\n          Optional  (str) graceful_restart: <class 'str'>,\n          'route_refresh': <class 'str'>,\n          Optional  (str) vpnv6_unicast: <class 'str'>,\n          'stateful_switchover': <class 'str'>,\n          Optional  (str) ipv4_unicast: <class 'str'>,\n          Optional  (str) remote_restart_timer: <class 'int'>,\n          Optional  (str) ipv6_unicast: <class 'str'>,\n          Optional  (str) l2vpn_vpls: <class 'str'>,\n          Optional  (str) l2vpn_evpn: <class 'str'>,\n          Optional  (str) vpnv4_multicast: <class 'str'>,\n          Optional  (str) multisession: <class 'str'>,\n          Optional  (str) graceful_restart_af_advertised_by_peer: <class 'list'>,\n          Optional  (str) vpnv6_multicast: <class 'str'>,\n          'enhanced_refresh': <class 'str'>,\n          Optional  (str) mvpnv4_multicast: <class 'str'>,\n          Optional  (str) mvpnv6_multicast: <class 'str'>,\n          },\n        Optional  (str) description: <class 'str'>,\n        },\n      },\n    },\n  },\n}", "doc": " Parser for:\n        * 'show bgp neighbors'\n        * 'show bgp neighbors {neighbor}'\n        * 'show bgp {address_family} neighbors'\n        * 'show bgp {address_family} neighbors {neighbor}'\n        * 'show bgp {address_family} vrf {vrf} neighbors'\n        * 'show bgp {address_family} vrf {vrf} neighbors {neighbor}'\n    ", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_bgp.py#L3739", "class": "ShowBgpNeighbors", "module_name": "show_bgp"}}, "show evpn ethernet-segment": {"iosxr": {"uid": "show_evpn_ethernet-segment", "schema": null, "doc": "Parser class for 'show evpn ethernet-segment' CLI.", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_evpn.py#L304", "class": "ShowEvpnEthernetSegment", "module_name": "show_evpn"}}, "show install commit summary": {"iosxr": {"uid": "show_install_commit_summary", "schema": "{\nOptional  (str) num_committed_packages: <class 'int'>,\nOptional  (str) sdr: <class 'list'>,\n'committed_packages': Any  (str) *,\n}", "doc": "Parser for show install commit summary", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_platform.py#L631", "class": "ShowInstallCommitSummary", "module_name": "show_platform"}}, "show ip ospf database external detail": {"nxos": {"uid": "show_ip_ospf_database_external_detail", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'address_family': {\n      Any  (str) *: {\n        'instance': {\n          Any  (str) *: {\n            Optional  (str) areas: {\n              Any  (str) *: {\n                'database': {\n                  'lsa_types': {\n                    Any  (str) *: {\n                      'lsa_type': <class 'int'>,\n                      'lsas': {\n                        Any  (str) *: {\n                          'ospfv2': {\n                            'header': {\n                              'age': <class 'int'>,\n                              'option_desc': <class 'str'>,\n                              'adv_router': <class 'str'>,\n                              'seq_num': <class 'str'>,\n                              'length': <class 'int'>,\n                              'checksum': <class 'str'>,\n                              'type': <class 'int'>,\n                              'lsa_id': <class 'str'>,\n                              'option': <class 'str'>,\n                              Optional  (str) maxage: <class 'bool'>,\n                              },\n                            'body': {\n                              'external': {\n                                'topologies': {\n                                  Any  (str) *: {\n                                    'forwarding_address': <class 'str'>,\n                                    'metric': <class 'int'>,\n                                    'mt_id': <class 'int'>,\n                                    Optional  (str) flags: <class 'str'>,\n                                    'tos': <class 'int'>,\n                                    'external_route_tag': <class 'int'>,\n                                    },\n                                  },\n                                'network_mask': <class 'str'>,\n                                },\n                              },\n                            },\n                          'lsa_id': <class 'str'>,\n                          'adv_router': <class 'str'>,\n                          },\n                        },\n                      },\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "doc": "Parser for:\n        show ip ospf database external detail\n        show ip ospf database external detail vrf <vrf>", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_ospf.py#L3234", "class": "ShowIpOspfDatabaseExternalDetail", "module_name": "show_ospf"}}, "show ip arp vrf {vrf} {intf_or_ip}": {"ios": {"uid": "show_ip_arp_vrf_vrf_intf_or_ip", "schema": "{\n'interfaces': {\n  Any  (str) *: {\n    'ipv4': {\n      'neighbors': {\n        Any  (str) *: {\n          'ip': <class 'str'>,\n          'age': <class 'str'>,\n          'origin': <class 'str'>,\n          'protocol': <class 'str'>,\n          'type': <class 'str'>,\n          'link_layer_address': <class 'str'>,\n          },\n        },\n      },\n    },\n  },\n}", "doc": " Parser for show arp\n                  show ip arp <WROD>\n                  show ip arp vrf <vrf>\n                  show ip arp vrf <vrf> <WROD> ", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_arp.py#L27", "class": "ShowIpArp", "module_name": "show_arp"}}, "show processes": {"nxos": {"uid": "show_processes", "schema": "{\n'process': {\n  Any  (str) *: {\n    Optional  (str) process: <class 'str'>,\n    Optional  (str) state: <class 'str'>,\n    Optional  (str) start_cnt: <class 'int'>,\n    Optional  (str) pid: {\n      Any  (str) *: {\n        'pid': <class 'int'>,\n        'state': <class 'str'>,\n        'start_cnt': <class 'int'>,\n        'process': <class 'str'>,\n        'type': <class 'str'>,\n        Optional  (str) tty: <class 'int'>,\n        Optional  (str) pc: <class 'str'>,\n        },\n      },\n    Optional  (str) type: <class 'str'>,\n    },\n  },\n}", "doc": "Parser for show processes <process>", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_process.py#L42", "class": "ShowProcesses", "module_name": "show_process"}}, "show ip route {route}": {"ios": {"uid": "show_ip_route_route", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    Optional  (str) address_family: {\n      Any  (str) *: {\n        Optional  (str) routes: {\n          Any  (str) *: {\n            Optional  (str) source_protocol: <class 'str'>,\n            Optional  (str) redist_via: <class 'str'>,\n            Optional  (str) source_protocol_codes: <class 'str'>,\n            Optional  (str) mask: <class 'str'>,\n            Optional  (str) next_hop: {\n              Optional  (str) outgoing_interface: {\n                Any  (str) *: {\n                  Optional  (str) updated: <class 'str'>,\n                  Optional  (str) outgoing_interface: <class 'str'>,\n                  },\n                },\n              Optional  (str) next_hop_list: {\n                Any  (str) *: {\n                  Optional  (str) age: <class 'str'>,\n                  Optional  (str) from: <class 'str'>,\n                  Optional  (str) total_delay: <class 'str'>,\n                  Optional  (str) metric: <class 'str'>,\n                  Optional  (str) share_count: <class 'str'>,\n                  Optional  (str) index: <class 'int'>,\n                  Optional  (str) loading: <class 'str'>,\n                  Optional  (str) hops: <class 'str'>,\n                  Optional  (str) minimum_mtu: <class 'str'>,\n                  Optional  (str) next_hop: <class 'str'>,\n                  Optional  (str) outgoing_interface: <class 'str'>,\n                  Optional  (str) minimum_bandwidth: <class 'str'>,\n                  Optional  (str) reliability: <class 'str'>,\n                  Optional  (str) updated: <class 'str'>,\n                  },\n                },\n              },\n            Optional  (str) known_via: <class 'str'>,\n            Optional  (str) update: {\n              'age': <class 'str'>,\n              'interface': <class 'str'>,\n              'from': <class 'str'>,\n              },\n            Optional  (str) distance: <class 'int'>,\n            Optional  (str) route: <class 'str'>,\n            Optional  (str) type: <class 'str'>,\n            Optional  (str) net: <class 'str'>,\n            Optional  (str) active: <class 'bool'>,\n            Optional  (str) route_preference: <class 'int'>,\n            Optional  (str) redist_via_tag: <class 'str'>,\n            Optional  (str) metric: <class 'int'>,\n            },\n          },\n        },\n      },\n    },\n  },\n}", "doc": "Parser for :\n       show ip route\n       show ip route vrf <vrf>\n       show ip route <route>\n       show ip route vrf <vrf> <route>", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_routing.py#L10", "class": "ShowIpRoute", "module_name": "show_routing"}, "iosxe": {"uid": "show_ip_route_route", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    Optional  (str) address_family: {\n      Any  (str) *: {\n        Optional  (str) routes: {\n          Any  (str) *: {\n            Optional  (str) source_protocol: <class 'str'>,\n            Optional  (str) redist_via: <class 'str'>,\n            Optional  (str) source_protocol_codes: <class 'str'>,\n            Optional  (str) mask: <class 'str'>,\n            Optional  (str) next_hop: {\n              Optional  (str) outgoing_interface: {\n                Any  (str) *: {\n                  Optional  (str) updated: <class 'str'>,\n                  Optional  (str) outgoing_interface: <class 'str'>,\n                  },\n                },\n              Optional  (str) next_hop_list: {\n                Any  (str) *: {\n                  Optional  (str) age: <class 'str'>,\n                  Optional  (str) from: <class 'str'>,\n                  Optional  (str) total_delay: <class 'str'>,\n                  Optional  (str) metric: <class 'str'>,\n                  Optional  (str) share_count: <class 'str'>,\n                  Optional  (str) index: <class 'int'>,\n                  Optional  (str) loading: <class 'str'>,\n                  Optional  (str) hops: <class 'str'>,\n                  Optional  (str) minimum_mtu: <class 'str'>,\n                  Optional  (str) next_hop: <class 'str'>,\n                  Optional  (str) outgoing_interface: <class 'str'>,\n                  Optional  (str) minimum_bandwidth: <class 'str'>,\n                  Optional  (str) reliability: <class 'str'>,\n                  Optional  (str) updated: <class 'str'>,\n                  },\n                },\n              },\n            Optional  (str) known_via: <class 'str'>,\n            Optional  (str) update: {\n              'age': <class 'str'>,\n              'interface': <class 'str'>,\n              'from': <class 'str'>,\n              },\n            Optional  (str) distance: <class 'int'>,\n            Optional  (str) route: <class 'str'>,\n            Optional  (str) type: <class 'str'>,\n            Optional  (str) net: <class 'str'>,\n            Optional  (str) active: <class 'bool'>,\n            Optional  (str) route_preference: <class 'int'>,\n            Optional  (str) redist_via_tag: <class 'str'>,\n            Optional  (str) metric: <class 'int'>,\n            },\n          },\n        },\n      },\n    },\n  },\n}", "doc": "Parser for :\n       show ip route\n       show ip route vrf <vrf>", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_routing.py#L80", "class": "ShowIpRoute", "module_name": "show_routing"}}, "show ethernet service instance detail": {"ios": {"uid": "show_ethernet_service_instance_detail", "schema": "{\n'service_instance': {\n  Any  (str) *: {\n    Optional  (str) encapsulation: <class 'str'>,\n    Optional  (str) rewrite: <class 'str'>,\n    Optional  (str) control_policy: <class 'str'>,\n    Optional  (str) intiators: <class 'str'>,\n    Optional  (str) type: <class 'str'>,\n    'associated_interface': <class 'str'>,\n    Optional  (str) dot1q_tunnel_ethertype: <class 'str'>,\n    'state': <class 'str'>,\n    Optional  (str) description: <class 'str'>,\n    'efp_statistics': {\n      'pkts_out': <class 'int'>,\n      'pkts_in': <class 'int'>,\n      'bytes_out': <class 'int'>,\n      'bytes_in': <class 'int'>,\n      },\n    Optional  (str) associated_evc: <class 'str'>,\n    Optional  (str) l2protocol_drop: <class 'bool'>,\n    Optional  (str) ce_vlans: <class 'str'>,\n    },\n  },\n}", "doc": "Parser for show ethernet service instance detail\n                  show ethernet service instance interface <interface> detail\n    ", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_l2vpn.py#L70", "class": "ShowEthernetServiceInstanceDetail", "module_name": "show_l2vpn"}, "iosxe": {"uid": "show_ethernet_service_instance_detail", "schema": "{\n'service_instance': {\n  Any  (str) *: {\n    Optional  (str) encapsulation: <class 'str'>,\n    Optional  (str) rewrite: <class 'str'>,\n    Optional  (str) control_policy: <class 'str'>,\n    Optional  (str) intiators: <class 'str'>,\n    Optional  (str) type: <class 'str'>,\n    'associated_interface': <class 'str'>,\n    Optional  (str) dot1q_tunnel_ethertype: <class 'str'>,\n    'state': <class 'str'>,\n    Optional  (str) description: <class 'str'>,\n    'efp_statistics': {\n      'pkts_out': <class 'int'>,\n      'pkts_in': <class 'int'>,\n      'bytes_out': <class 'int'>,\n      'bytes_in': <class 'int'>,\n      },\n    Optional  (str) associated_evc: <class 'str'>,\n    Optional  (str) l2protocol_drop: <class 'bool'>,\n    Optional  (str) ce_vlans: <class 'str'>,\n    },\n  },\n}", "doc": "Parser for show ethernet service instance detail\n                  show ethernet service instance interface <interface> detail\n    ", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_l2vpn.py#L259", "class": "ShowEthernetServiceInstanceDetail", "module_name": "show_l2vpn"}}, "show ip ospf max-metric": {"iosxe": {"uid": "show_ip_ospf_max-metric", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'address_family': {\n      Any  (str) *: {\n        'instance': {\n          Any  (str) *: {\n            'base_topology_mtid': {\n              Any  (str) *: {\n                'start_time': <class 'str'>,\n                'time_elapsed': <class 'str'>,\n                'router_lsa_max_metric': {\n                  Any  (str) *: {\n                    Optional  (str) unset_time: <class 'str'>,\n                    Optional  (str) unset_time_elapsed: <class 'str'>,\n                    Optional  (str) state: <class 'str'>,\n                    Optional  (str) advertise_lsa_metric: <class 'int'>,\n                    Optional  (str) unset_reason: <class 'str'>,\n                    Optional  (str) condition: <class 'str'>,\n                    },\n                  },\n                },\n              },\n            'router_id': <class 'str'>,\n            },\n          },\n        },\n      },\n    },\n  },\n}", "doc": " Parser for:\n        * 'show ip ospf max-metric'\n    ", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_ospf.py#L5181", "class": "ShowIpOspfMaxMetric", "module_name": "show_ospf"}}, "show vrf interface": {"nxos": {"uid": "show_vrf_interface", "schema": "{\n'vrf_interface': {\n  Any  (str) *: {\n    'vrf_id': <class 'str'>,\n    'vrf_name': <class 'str'>,\n    'site_of_origin': <class 'str'>,\n    },\n  },\n}", "doc": "Parser for show vrf Interface", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_vrf.py#L86", "class": "ShowVrfInterface", "module_name": "show_vrf"}}, "show standby internal": {"ios": {"uid": "show_standby_internal", "schema": "{\nOptional  (str) msgQ_size: <class 'int'>,\nOptional  (str) mac_address_table: {\n  Any  (str) *: {\n    'mac_address': <class 'str'>,\n    'interface': <class 'str'>,\n    'group': <class 'int'>,\n    },\n  },\nOptional  (str) virtual_ip_hash_table: {\n  Any  (str) *: {\n    Any  (str) *: {\n      'ip': <class 'str'>,\n      'interface': <class 'str'>,\n      'group': <class 'int'>,\n      },\n    },\n  },\n'hsrp_common_process_state': <class 'str'>,\n'hsrp_ipv4_process_state': <class 'str'>,\n'hsrp_timer_wheel_state': <class 'str'>,\nOptional  (str) hsrp_ha_state: <class 'str'>,\nOptional  (str) msgQ_max_size: <class 'int'>,\n'hsrp_ipv6_process_state': <class 'str'>,\nOptional  (str) v3_to_v4_transform: <class 'str'>,\n}", "doc": "Parser for show standby internal", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_standby.py#L15", "class": "ShowStandbyInternal", "module_name": "show_standby"}, "iosxe": {"uid": "show_standby_internal", "schema": "{\nOptional  (str) msgQ_size: <class 'int'>,\nOptional  (str) mac_address_table: {\n  Any  (str) *: {\n    'mac_address': <class 'str'>,\n    'interface': <class 'str'>,\n    'group': <class 'int'>,\n    },\n  },\nOptional  (str) virtual_ip_hash_table: {\n  Any  (str) *: {\n    Any  (str) *: {\n      'ip': <class 'str'>,\n      'interface': <class 'str'>,\n      'group': <class 'int'>,\n      },\n    },\n  },\n'hsrp_common_process_state': <class 'str'>,\n'hsrp_ipv4_process_state': <class 'str'>,\n'hsrp_timer_wheel_state': <class 'str'>,\nOptional  (str) hsrp_ha_state: <class 'str'>,\nOptional  (str) msgQ_max_size: <class 'int'>,\n'hsrp_ipv6_process_state': <class 'str'>,\nOptional  (str) v3_to_v4_transform: <class 'str'>,\n}", "doc": "Parser for show standby internal", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_standby.py#L60", "class": "ShowStandbyInternal", "module_name": "show_standby"}}, "show ipv6 pim df": {"nxos": {"uid": "show_ipv6_pim_df", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'address_family': {\n      Any  (str) *: {\n        Optional  (str) rp: {\n          Optional  (str) bidir: {\n            Optional  (str) interface_df_election: {\n              Optional  (Any) Any  (str) *: {\n                Optional  (str) group_range: <class 'str'>,\n                Optional  (str) winner_metric_pref: <class 'int'>,\n                Optional  (str) interface_name: <class 'str'>,\n                Optional  (str) winner_metric: <class 'int'>,\n                Optional  (str) df_ordinal: <class 'int'>,\n                Optional  (str) df_address: <class 'str'>,\n                Optional  (str) metric_pref: <class 'int'>,\n                Optional  (str) df_uptime: <class 'str'>,\n                Optional  (str) metric: <class 'int'>,\n                Optional  (str) interface_state: <class 'str'>,\n                Optional  (str) address: <class 'str'>,\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "doc": "Parser for:\n        show ipv6 pim df\n        show ipv6 pim df vrf <vrf>", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_pim.py#L1380", "class": "ShowIpv6PimDf", "module_name": "show_pim"}}, "show ip ospf neighbor": {"iosxe": {"uid": "show_ip_ospf_neighbor", "schema": "{\n'interfaces': {\n  Any  (str) *: {\n    'neighbors': {\n      Any  (str) *: {\n        'state': <class 'str'>,\n        'address': <class 'str'>,\n        'dead_time': <class 'str'>,\n        'priority': <class 'int'>,\n        },\n      },\n    },\n  },\n}", "doc": " Parser for:\n        * 'show ip ospf neighbor'\n    ", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_ospf.py#L6032", "class": "ShowIpOspfNeighbor", "module_name": "show_ospf"}}, "show bgp {address_family} policy statistics dampening": {"nxos": {"uid": "show_bgp_address_family_policy_statistics_dampening", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    Optional  (str) rpm_handle_count: <class 'int'>,\n    Optional  (str) route_map: {\n      Any  (str) *: {\n        Any  (str) *: {\n          'action': <class 'str'>,\n          'seq_num': <class 'int'>,\n          'total_accept_count': <class 'int'>,\n          Optional  (str) command: {\n            'command': <class 'str'>,\n            'compare_count': <class 'int'>,\n            'match_count': <class 'int'>,\n            },\n          'total_reject_count': <class 'int'>,\n          },\n        },\n      },\n    },\n  },\n}", "doc": "Parser for:\n        show bgp [vrf <vrf>] <address_family> policy statistics dampening\n        parser class implements detail parsing mechanisms for cli,xml output", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_bgp.py#L8928", "class": "ShowBgpPolicyStatisticsDampening", "module_name": "show_bgp"}}, "show forwarding distribution multicast route": {"nxos": {"uid": "show_forwarding_distribution_multicast_route", "schema": "{\n'distribution': {\n  'multicast': {\n    'route': {\n      'vrf': {\n        Any  (str) *: {\n          'address_family': {\n            Any  (str) *: {\n              'num_groups': <class 'int'>,\n              'gaddr': {\n                Any  (str) *: {\n                  'saddr': {\n                    Any  (str) *: {\n                      'rcv_bytes': <class 'int'>,\n                      'rpf_ifname': <class 'str'>,\n                      'rcv_packets': <class 'int'>,\n                      Optional  (str) oifs: {\n                        'oif_index': <class 'int'>,\n                        Any  (str) *: {\n                          Optional  (str) l2_oiflist_index: <class 'int'>,\n                          Optional  (str) encap: <class 'str'>,\n                          Optional  (str) mem_l2_ports: <class 'str'>,\n                          Optional  (str) oif: <class 'str'>,\n                          },\n                        },\n                      'num_of_oifs': <class 'int'>,\n                      Optional  (str) src_len: <class 'int'>,\n                      Optional  (str) flags: <class 'str'>,\n                      },\n                    },\n                  'grp_len': <class 'int'>,\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "doc": "parser for:\n        show forwarding distribution multicast route\n        show forwarding distribution multicast route vrf <vrf>\n        show forwarding distribution multicast route vrf all", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_mcast.py#L799", "class": "ShowForwardingDistributionMulticastRoute", "module_name": "show_mcast"}}, "show bgp neighbors {neighbor}": {"iosxe": {"uid": "show_bgp_neighbors_neighbor", "schema": "{\nOptional  (str) list_of_neighbors: <class 'list'>,\n'vrf': {\n  Any  (str) *: {\n    'neighbor': {\n      Any  (str) *: {\n        Optional  (str) bgp_event_timer: {\n          'starts': {\n            Any  (str) *: <class 'int'>,\n            },\n          'wakeups': {\n            Any  (str) *: <class 'int'>,\n            },\n          'next': {\n            Any  (str) *: <class 'str'>,\n            },\n          },\n        'address_family': {\n          Any  (str) *: {\n            Optional  (str) refresh_epoch: <class 'int'>,\n            Optional  (str) session_state: <class 'str'>,\n            Optional  (str) max_nlri: <class 'int'>,\n            Optional  (str) up_time: <class 'str'>,\n            Optional  (str) min_nlri: <class 'int'>,\n            Optional  (str) down_time: <class 'str'>,\n            Optional  (str) refresh_activity_counters: {\n              'sent': {\n                Any  (str) *: <class 'int'>,\n                },\n              'received': {\n                Any  (str) *: <class 'int'>,\n                },\n              },\n            Optional  (str) local_policy_denied_prefixes_counters: {\n              'inbound': {\n                Any  (str) *: Any  (str) *,\n                },\n              'outbound': {\n                Any  (str) *: Any  (str) *,\n                },\n              },\n            Optional  (str) last_detected_dynamic_slow_peer: <class 'str'>,\n            Optional  (str) last_read: <class 'str'>,\n            Optional  (str) dynamic_slow_peer_recovered: <class 'str'>,\n            Optional  (str) last_write: <class 'str'>,\n            Optional  (str) last_sent_refresh_start_of_rib: <class 'str'>,\n            Optional  (str) current_time: <class 'str'>,\n            Optional  (str) last_received_refresh_start_of_rib: <class 'str'>,\n            Optional  (str) bgp_table_version: <class 'int'>,\n            Optional  (str) last_sent_refresh_end_of_rib: <class 'str'>,\n            Optional  (str) neighbor_version: <class 'str'>,\n            Optional  (str) last_received_refresh_end_of_rib: <class 'str'>,\n            Optional  (str) output_queue_size: <class 'int'>,\n            Optional  (str) refresh_out: <class 'int'>,\n            Optional  (str) index: <class 'int'>,\n            Optional  (str) refresh_in: <class 'int'>,\n            Optional  (str) advertise_bit: <class 'int'>,\n            Optional  (str) route_reflector_client: <class 'bool'>,\n            Optional  (str) update_group_member: <class 'int'>,\n            Optional  (str) community_attribute_sent: <class 'bool'>,\n            Optional  (str) extended_community_attribute_sent: <class 'bool'>,\n            Optional  (str) prefix_activity_counters: {\n              'sent': {\n                Any  (str) *: Any  (str) *,\n                },\n              'received': {\n                Any  (str) *: Any  (str) *,\n                },\n              },\n            Optional  (str) suppress_ldp_signaling: <class 'bool'>,\n            Optional  (str) slow_peer_detection: <class 'bool'>,\n            Optional  (str) slow_peer_split_update_group_dynamic: <class 'bool'>,\n            },\n          },\n        'bgp_neighbor_counters': {\n          'messages': {\n            'sent': {\n              'notifications': <class 'int'>,\n              'route_refresh': <class 'int'>,\n              'total': <class 'int'>,\n              'opens': <class 'int'>,\n              'keepalives': <class 'int'>,\n              'updates': <class 'int'>,\n              },\n            'in_queue_depth': <class 'int'>,\n            'received': {\n              'notifications': <class 'int'>,\n              'route_refresh': <class 'int'>,\n              'total': <class 'int'>,\n              'opens': <class 'int'>,\n              'keepalives': <class 'int'>,\n              'updates': <class 'int'>,\n              },\n            'out_queue_depth': <class 'int'>,\n            },\n          },\n        'bgp_negotiated_keepalive_timers': {\n          'keepalive_interval': <class 'int'>,\n          'hold_time': <class 'int'>,\n          Optional  (str) min_holdtime: <class 'int'>,\n          },\n        'link': <class 'str'>,\n        'router_id': <class 'str'>,\n        Optional  (str) bgp_session_transport: {\n          Optional  (str) enqueued_packets: {\n            'mis_ordered_packet': <class 'int'>,\n            'input_packet': <class 'int'>,\n            'retransmit_packet': <class 'int'>,\n            },\n          Optional  (str) iss: <class 'int'>,\n          Optional  (str) snduna: <class 'int'>,\n          'connection': {\n            Optional  (str) reset_reason: <class 'str'>,\n            'dropped': <class 'int'>,\n            'established': <class 'int'>,\n            'last_reset': <class 'str'>,\n            },\n          Optional  (str) sndnxt: <class 'int'>,\n          Optional  (str) irs: <class 'int'>,\n          'address_tracking_status': <class 'str'>,\n          Optional  (str) sndwnd: <class 'int'>,\n          Optional  (str) snd_scale: <class 'int'>,\n          Optional  (str) maxrcvwnd: <class 'int'>,\n          Optional  (str) rcvwnd: <class 'int'>,\n          Optional  (str) rcv_scale: <class 'int'>,\n          Optional  (str) delrcvwnd: <class 'int'>,\n          Optional  (str) srtt: <class 'int'>,\n          'min_time_between_advertisement_runs': <class 'int'>,\n          Optional  (str) rtto: <class 'int'>,\n          Optional  (str) rtv: <class 'int'>,\n          Optional  (str) krtt: <class 'int'>,\n          Optional  (str) min_rtt: <class 'int'>,\n          Optional  (str) max_rtt: <class 'int'>,\n          Optional  (str) ack_hold: <class 'int'>,\n          Optional  (str) uptime: <class 'int'>,\n          Optional  (str) sent_idletime: <class 'int'>,\n          Optional  (str) receive_idletime: <class 'int'>,\n          Optional  (str) tcp_connection: <class 'bool'>,\n          Optional  (str) status_flags: <class 'str'>,\n          Optional  (str) option_flags: <class 'str'>,\n          Optional  (str) ip_precedence_value: <class 'int'>,\n          'tcp_path_mtu_discovery': <class 'str'>,\n          Optional  (str) transport: {\n            'local_port': <class 'str'>,\n            'local_host': <class 'str'>,\n            'foreign_port': <class 'str'>,\n            Optional  (str) mss: <class 'int'>,\n            'foreign_host': <class 'str'>,\n            },\n          Optional  (str) datagram: {\n            'datagram_sent': {\n              'second_congestion': <class 'int'>,\n              'with_data': <class 'int'>,\n              'retransmit': <class 'int'>,\n              'partialack': <class 'int'>,\n              'value': <class 'int'>,\n              'fastretransmit': <class 'int'>,\n              'total_data': <class 'int'>,\n              },\n            'datagram_received': {\n              'out_of_order': <class 'int'>,\n              'with_data': <class 'int'>,\n              'total_data': <class 'int'>,\n              'value': <class 'int'>,\n              },\n            },\n          Optional  (str) graceful_restart: <class 'str'>,\n          Optional  (str) packet_fast_path: <class 'int'>,\n          Optional  (str) gr_restart_time: <class 'int'>,\n          Optional  (str) packet_fast_processed: <class 'int'>,\n          Optional  (str) gr_stalepath_time: <class 'int'>,\n          Optional  (str) packet_slow_path: <class 'int'>,\n          Optional  (str) connection_state: <class 'str'>,\n          Optional  (str) fast_lock_acquisition_failures: <class 'int'>,\n          Optional  (str) io_status: <class 'int'>,\n          Optional  (str) lock_slow_path: <class 'int'>,\n          Optional  (str) unread_input_bytes: <class 'int'>,\n          Optional  (str) tcp_semaphore: <class 'str'>,\n          Optional  (str) ecn_connection: <class 'str'>,\n          Optional  (str) tcp_semaphore_status: <class 'str'>,\n          Optional  (str) minimum_incoming_ttl: <class 'int'>,\n          Optional  (str) sso: <class 'bool'>,\n          Optional  (str) outgoing_ttl: <class 'int'>,\n          Optional  (str) rcvnxt: <class 'int'>,\n          Optional  (str) connection_tableid: <class 'int'>,\n          'rib_route_ip': <class 'str'>,\n          Optional  (str) maximum_output_segment_queue_size: <class 'int'>,\n          },\n        'remote_as': <class 'int'>,\n        'bgp_version': <class 'int'>,\n        'session_state': <class 'str'>,\n        'shutdown': <class 'bool'>,\n        Optional  (str) local_as: <class 'int'>,\n        'bgp_negotiated_capabilities': {\n          'four_octets_asn': <class 'str'>,\n          Optional  (str) vpnv4_unicast: <class 'str'>,\n          Optional  (str) graceful_restart: <class 'str'>,\n          'route_refresh': <class 'str'>,\n          Optional  (str) vpnv6_unicast: <class 'str'>,\n          'stateful_switchover': <class 'str'>,\n          Optional  (str) ipv4_unicast: <class 'str'>,\n          Optional  (str) remote_restart_timer: <class 'int'>,\n          Optional  (str) ipv6_unicast: <class 'str'>,\n          Optional  (str) l2vpn_vpls: <class 'str'>,\n          Optional  (str) l2vpn_evpn: <class 'str'>,\n          Optional  (str) vpnv4_multicast: <class 'str'>,\n          Optional  (str) multisession: <class 'str'>,\n          Optional  (str) graceful_restart_af_advertised_by_peer: <class 'list'>,\n          Optional  (str) vpnv6_multicast: <class 'str'>,\n          'enhanced_refresh': <class 'str'>,\n          Optional  (str) mvpnv4_multicast: <class 'str'>,\n          Optional  (str) mvpnv6_multicast: <class 'str'>,\n          },\n        Optional  (str) description: <class 'str'>,\n        },\n      },\n    },\n  },\n}", "doc": " Parser for:\n        * 'show bgp neighbors'\n        * 'show bgp neighbors {neighbor}'\n        * 'show bgp {address_family} neighbors'\n        * 'show bgp {address_family} neighbors {neighbor}'\n        * 'show bgp {address_family} vrf {vrf} neighbors'\n        * 'show bgp {address_family} vrf {vrf} neighbors {neighbor}'\n    ", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_bgp.py#L3739", "class": "ShowBgpNeighbors", "module_name": "show_bgp"}}, "show ip bgp {address_family} all neighbors {neighbor}": {"iosxe": {"uid": "show_ip_bgp_address_family_all_neighbors_neighbor", "schema": "{\nOptional  (str) list_of_neighbors: <class 'list'>,\n'vrf': {\n  Any  (str) *: {\n    'neighbor': {\n      Any  (str) *: {\n        Optional  (str) bgp_event_timer: {\n          'starts': {\n            Any  (str) *: <class 'int'>,\n            },\n          'wakeups': {\n            Any  (str) *: <class 'int'>,\n            },\n          'next': {\n            Any  (str) *: <class 'str'>,\n            },\n          },\n        'address_family': {\n          Any  (str) *: {\n            Optional  (str) refresh_epoch: <class 'int'>,\n            Optional  (str) session_state: <class 'str'>,\n            Optional  (str) max_nlri: <class 'int'>,\n            Optional  (str) up_time: <class 'str'>,\n            Optional  (str) min_nlri: <class 'int'>,\n            Optional  (str) down_time: <class 'str'>,\n            Optional  (str) refresh_activity_counters: {\n              'sent': {\n                Any  (str) *: <class 'int'>,\n                },\n              'received': {\n                Any  (str) *: <class 'int'>,\n                },\n              },\n            Optional  (str) local_policy_denied_prefixes_counters: {\n              'inbound': {\n                Any  (str) *: Any  (str) *,\n                },\n              'outbound': {\n                Any  (str) *: Any  (str) *,\n                },\n              },\n            Optional  (str) last_detected_dynamic_slow_peer: <class 'str'>,\n            Optional  (str) last_read: <class 'str'>,\n            Optional  (str) dynamic_slow_peer_recovered: <class 'str'>,\n            Optional  (str) last_write: <class 'str'>,\n            Optional  (str) last_sent_refresh_start_of_rib: <class 'str'>,\n            Optional  (str) current_time: <class 'str'>,\n            Optional  (str) last_received_refresh_start_of_rib: <class 'str'>,\n            Optional  (str) bgp_table_version: <class 'int'>,\n            Optional  (str) last_sent_refresh_end_of_rib: <class 'str'>,\n            Optional  (str) neighbor_version: <class 'str'>,\n            Optional  (str) last_received_refresh_end_of_rib: <class 'str'>,\n            Optional  (str) output_queue_size: <class 'int'>,\n            Optional  (str) refresh_out: <class 'int'>,\n            Optional  (str) index: <class 'int'>,\n            Optional  (str) refresh_in: <class 'int'>,\n            Optional  (str) advertise_bit: <class 'int'>,\n            Optional  (str) route_reflector_client: <class 'bool'>,\n            Optional  (str) update_group_member: <class 'int'>,\n            Optional  (str) community_attribute_sent: <class 'bool'>,\n            Optional  (str) extended_community_attribute_sent: <class 'bool'>,\n            Optional  (str) prefix_activity_counters: {\n              'sent': {\n                Any  (str) *: Any  (str) *,\n                },\n              'received': {\n                Any  (str) *: Any  (str) *,\n                },\n              },\n            Optional  (str) suppress_ldp_signaling: <class 'bool'>,\n            Optional  (str) slow_peer_detection: <class 'bool'>,\n            Optional  (str) slow_peer_split_update_group_dynamic: <class 'bool'>,\n            },\n          },\n        'bgp_neighbor_counters': {\n          'messages': {\n            'sent': {\n              'notifications': <class 'int'>,\n              'route_refresh': <class 'int'>,\n              'total': <class 'int'>,\n              'opens': <class 'int'>,\n              'keepalives': <class 'int'>,\n              'updates': <class 'int'>,\n              },\n            'in_queue_depth': <class 'int'>,\n            'received': {\n              'notifications': <class 'int'>,\n              'route_refresh': <class 'int'>,\n              'total': <class 'int'>,\n              'opens': <class 'int'>,\n              'keepalives': <class 'int'>,\n              'updates': <class 'int'>,\n              },\n            'out_queue_depth': <class 'int'>,\n            },\n          },\n        'bgp_negotiated_keepalive_timers': {\n          'keepalive_interval': <class 'int'>,\n          'hold_time': <class 'int'>,\n          Optional  (str) min_holdtime: <class 'int'>,\n          },\n        'link': <class 'str'>,\n        'router_id': <class 'str'>,\n        Optional  (str) bgp_session_transport: {\n          Optional  (str) enqueued_packets: {\n            'mis_ordered_packet': <class 'int'>,\n            'input_packet': <class 'int'>,\n            'retransmit_packet': <class 'int'>,\n            },\n          Optional  (str) iss: <class 'int'>,\n          Optional  (str) snduna: <class 'int'>,\n          'connection': {\n            Optional  (str) reset_reason: <class 'str'>,\n            'dropped': <class 'int'>,\n            'established': <class 'int'>,\n            'last_reset': <class 'str'>,\n            },\n          Optional  (str) sndnxt: <class 'int'>,\n          Optional  (str) irs: <class 'int'>,\n          'address_tracking_status': <class 'str'>,\n          Optional  (str) sndwnd: <class 'int'>,\n          Optional  (str) snd_scale: <class 'int'>,\n          Optional  (str) maxrcvwnd: <class 'int'>,\n          Optional  (str) rcvwnd: <class 'int'>,\n          Optional  (str) rcv_scale: <class 'int'>,\n          Optional  (str) delrcvwnd: <class 'int'>,\n          Optional  (str) srtt: <class 'int'>,\n          'min_time_between_advertisement_runs': <class 'int'>,\n          Optional  (str) rtto: <class 'int'>,\n          Optional  (str) rtv: <class 'int'>,\n          Optional  (str) krtt: <class 'int'>,\n          Optional  (str) min_rtt: <class 'int'>,\n          Optional  (str) max_rtt: <class 'int'>,\n          Optional  (str) ack_hold: <class 'int'>,\n          Optional  (str) uptime: <class 'int'>,\n          Optional  (str) sent_idletime: <class 'int'>,\n          Optional  (str) receive_idletime: <class 'int'>,\n          Optional  (str) tcp_connection: <class 'bool'>,\n          Optional  (str) status_flags: <class 'str'>,\n          Optional  (str) option_flags: <class 'str'>,\n          Optional  (str) ip_precedence_value: <class 'int'>,\n          'tcp_path_mtu_discovery': <class 'str'>,\n          Optional  (str) transport: {\n            'local_port': <class 'str'>,\n            'local_host': <class 'str'>,\n            'foreign_port': <class 'str'>,\n            Optional  (str) mss: <class 'int'>,\n            'foreign_host': <class 'str'>,\n            },\n          Optional  (str) datagram: {\n            'datagram_sent': {\n              'second_congestion': <class 'int'>,\n              'with_data': <class 'int'>,\n              'retransmit': <class 'int'>,\n              'partialack': <class 'int'>,\n              'value': <class 'int'>,\n              'fastretransmit': <class 'int'>,\n              'total_data': <class 'int'>,\n              },\n            'datagram_received': {\n              'out_of_order': <class 'int'>,\n              'with_data': <class 'int'>,\n              'total_data': <class 'int'>,\n              'value': <class 'int'>,\n              },\n            },\n          Optional  (str) graceful_restart: <class 'str'>,\n          Optional  (str) packet_fast_path: <class 'int'>,\n          Optional  (str) gr_restart_time: <class 'int'>,\n          Optional  (str) packet_fast_processed: <class 'int'>,\n          Optional  (str) gr_stalepath_time: <class 'int'>,\n          Optional  (str) packet_slow_path: <class 'int'>,\n          Optional  (str) connection_state: <class 'str'>,\n          Optional  (str) fast_lock_acquisition_failures: <class 'int'>,\n          Optional  (str) io_status: <class 'int'>,\n          Optional  (str) lock_slow_path: <class 'int'>,\n          Optional  (str) unread_input_bytes: <class 'int'>,\n          Optional  (str) tcp_semaphore: <class 'str'>,\n          Optional  (str) ecn_connection: <class 'str'>,\n          Optional  (str) tcp_semaphore_status: <class 'str'>,\n          Optional  (str) minimum_incoming_ttl: <class 'int'>,\n          Optional  (str) sso: <class 'bool'>,\n          Optional  (str) outgoing_ttl: <class 'int'>,\n          Optional  (str) rcvnxt: <class 'int'>,\n          Optional  (str) connection_tableid: <class 'int'>,\n          'rib_route_ip': <class 'str'>,\n          Optional  (str) maximum_output_segment_queue_size: <class 'int'>,\n          },\n        'remote_as': <class 'int'>,\n        'bgp_version': <class 'int'>,\n        'session_state': <class 'str'>,\n        'shutdown': <class 'bool'>,\n        Optional  (str) local_as: <class 'int'>,\n        'bgp_negotiated_capabilities': {\n          'four_octets_asn': <class 'str'>,\n          Optional  (str) vpnv4_unicast: <class 'str'>,\n          Optional  (str) graceful_restart: <class 'str'>,\n          'route_refresh': <class 'str'>,\n          Optional  (str) vpnv6_unicast: <class 'str'>,\n          'stateful_switchover': <class 'str'>,\n          Optional  (str) ipv4_unicast: <class 'str'>,\n          Optional  (str) remote_restart_timer: <class 'int'>,\n          Optional  (str) ipv6_unicast: <class 'str'>,\n          Optional  (str) l2vpn_vpls: <class 'str'>,\n          Optional  (str) l2vpn_evpn: <class 'str'>,\n          Optional  (str) vpnv4_multicast: <class 'str'>,\n          Optional  (str) multisession: <class 'str'>,\n          Optional  (str) graceful_restart_af_advertised_by_peer: <class 'list'>,\n          Optional  (str) vpnv6_multicast: <class 'str'>,\n          'enhanced_refresh': <class 'str'>,\n          Optional  (str) mvpnv4_multicast: <class 'str'>,\n          Optional  (str) mvpnv6_multicast: <class 'str'>,\n          },\n        Optional  (str) description: <class 'str'>,\n        },\n      },\n    },\n  },\n}", "doc": " Parser for:\n        * 'show ip bgp all neighbors',\n        * 'show ip bgp all neighbors {neighbor}'\n        * 'show ip bgp {address_family} all neighbors'\n        * 'show ip bgp {address_family} all neighbors {neighbor}'\n    ", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_bgp.py#L3814", "class": "ShowIpBgpAllNeighbors", "module_name": "show_bgp"}}, "show boot": {"ios": {"uid": "show_boot", "schema": "{\nOptional  (str) next_reload_boot_variable: <class 'str'>,\nOptional  (str) config_file: <class 'str'>,\nOptional  (str) standby: {\n  Optional  (str) boot_variable: <class 'str'>,\n  'configuration_register': <class 'str'>,\n  },\nOptional  (str) bootldr: <class 'str'>,\nOptional  (str) current_boot_variable: <class 'str'>,\nOptional  (str) active: {\n  Optional  (str) boot_variable: <class 'str'>,\n  'configuration_register': <class 'str'>,\n  },\n}", "doc": "Parser for show boot", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_platform.py#L214", "class": "ShowBootvar", "module_name": "show_platform"}, "nxos": {"uid": "show_boot", "schema": "{\n'current_boot_variable': {\n  Optional  (str) boot_poap: <class 'str'>,\n  Optional  (str) system_variable: <class 'str'>,\n  Optional  (str) sup_number: {\n    Any  (str) *: {\n      Optional  (str) kickstart_variable: <class 'str'>,\n      Optional  (str) boot_poap: <class 'str'>,\n      Optional  (str) system_variable: <class 'str'>,\n      },\n    },\n  Optional  (str) kickstart_variable: <class 'str'>,\n  },\n'next_reload_boot_variable': {\n  Optional  (str) boot_poap: <class 'str'>,\n  Optional  (str) kickstart_variable: <class 'str'>,\n  Optional  (str) system_variable: <class 'str'>,\n  Optional  (str) sup_number: {\n    Any  (str) *: {\n      Optional  (str) kickstart_variable: <class 'str'>,\n      Optional  (str) system_variable: <class 'str'>,\n      Optional  (str) boot_poap: <class 'str'>,\n      },\n    },\n  },\n}", "doc": "Parser for show boot", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_platform.py#L672", "class": "ShowBoot", "module_name": "show_platform"}, "iosxe": {"uid": "show_boot", "schema": "{\nOptional  (str) current_boot_variable: <class 'str'>,\nOptional  (str) active: {\n  Optional  (str) configuration_register: <class 'str'>,\n  Optional  (str) boot_variable: <class 'str'>,\n  },\nOptional  (str) boot_mode: <class 'str'>,\nOptional  (str) ipxe_timeout: <class 'int'>,\nOptional  (str) next_reload_boot_variable: <class 'str'>,\nOptional  (str) standby: {\n  Optional  (str) configuration_register: <class 'str'>,\n  Optional  (str) boot_variable: <class 'str'>,\n  },\nOptional  (str) manual_boot: <class 'bool'>,\nOptional  (str) enable_break: <class 'bool'>,\n}", "doc": "Parser for show boot", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_platform.py#L1446", "class": "ShowBoot", "module_name": "show_platform"}}, "show ip bgp all neighbors": {"iosxe": {"uid": "show_ip_bgp_all_neighbors", "schema": "{\nOptional  (str) list_of_neighbors: <class 'list'>,\n'vrf': {\n  Any  (str) *: {\n    'neighbor': {\n      Any  (str) *: {\n        Optional  (str) bgp_event_timer: {\n          'starts': {\n            Any  (str) *: <class 'int'>,\n            },\n          'wakeups': {\n            Any  (str) *: <class 'int'>,\n            },\n          'next': {\n            Any  (str) *: <class 'str'>,\n            },\n          },\n        'address_family': {\n          Any  (str) *: {\n            Optional  (str) refresh_epoch: <class 'int'>,\n            Optional  (str) session_state: <class 'str'>,\n            Optional  (str) max_nlri: <class 'int'>,\n            Optional  (str) up_time: <class 'str'>,\n            Optional  (str) min_nlri: <class 'int'>,\n            Optional  (str) down_time: <class 'str'>,\n            Optional  (str) refresh_activity_counters: {\n              'sent': {\n                Any  (str) *: <class 'int'>,\n                },\n              'received': {\n                Any  (str) *: <class 'int'>,\n                },\n              },\n            Optional  (str) local_policy_denied_prefixes_counters: {\n              'inbound': {\n                Any  (str) *: Any  (str) *,\n                },\n              'outbound': {\n                Any  (str) *: Any  (str) *,\n                },\n              },\n            Optional  (str) last_detected_dynamic_slow_peer: <class 'str'>,\n            Optional  (str) last_read: <class 'str'>,\n            Optional  (str) dynamic_slow_peer_recovered: <class 'str'>,\n            Optional  (str) last_write: <class 'str'>,\n            Optional  (str) last_sent_refresh_start_of_rib: <class 'str'>,\n            Optional  (str) current_time: <class 'str'>,\n            Optional  (str) last_received_refresh_start_of_rib: <class 'str'>,\n            Optional  (str) bgp_table_version: <class 'int'>,\n            Optional  (str) last_sent_refresh_end_of_rib: <class 'str'>,\n            Optional  (str) neighbor_version: <class 'str'>,\n            Optional  (str) last_received_refresh_end_of_rib: <class 'str'>,\n            Optional  (str) output_queue_size: <class 'int'>,\n            Optional  (str) refresh_out: <class 'int'>,\n            Optional  (str) index: <class 'int'>,\n            Optional  (str) refresh_in: <class 'int'>,\n            Optional  (str) advertise_bit: <class 'int'>,\n            Optional  (str) route_reflector_client: <class 'bool'>,\n            Optional  (str) update_group_member: <class 'int'>,\n            Optional  (str) community_attribute_sent: <class 'bool'>,\n            Optional  (str) extended_community_attribute_sent: <class 'bool'>,\n            Optional  (str) prefix_activity_counters: {\n              'sent': {\n                Any  (str) *: Any  (str) *,\n                },\n              'received': {\n                Any  (str) *: Any  (str) *,\n                },\n              },\n            Optional  (str) suppress_ldp_signaling: <class 'bool'>,\n            Optional  (str) slow_peer_detection: <class 'bool'>,\n            Optional  (str) slow_peer_split_update_group_dynamic: <class 'bool'>,\n            },\n          },\n        'bgp_neighbor_counters': {\n          'messages': {\n            'sent': {\n              'notifications': <class 'int'>,\n              'route_refresh': <class 'int'>,\n              'total': <class 'int'>,\n              'opens': <class 'int'>,\n              'keepalives': <class 'int'>,\n              'updates': <class 'int'>,\n              },\n            'in_queue_depth': <class 'int'>,\n            'received': {\n              'notifications': <class 'int'>,\n              'route_refresh': <class 'int'>,\n              'total': <class 'int'>,\n              'opens': <class 'int'>,\n              'keepalives': <class 'int'>,\n              'updates': <class 'int'>,\n              },\n            'out_queue_depth': <class 'int'>,\n            },\n          },\n        'bgp_negotiated_keepalive_timers': {\n          'keepalive_interval': <class 'int'>,\n          'hold_time': <class 'int'>,\n          Optional  (str) min_holdtime: <class 'int'>,\n          },\n        'link': <class 'str'>,\n        'router_id': <class 'str'>,\n        Optional  (str) bgp_session_transport: {\n          Optional  (str) enqueued_packets: {\n            'mis_ordered_packet': <class 'int'>,\n            'input_packet': <class 'int'>,\n            'retransmit_packet': <class 'int'>,\n            },\n          Optional  (str) iss: <class 'int'>,\n          Optional  (str) snduna: <class 'int'>,\n          'connection': {\n            Optional  (str) reset_reason: <class 'str'>,\n            'dropped': <class 'int'>,\n            'established': <class 'int'>,\n            'last_reset': <class 'str'>,\n            },\n          Optional  (str) sndnxt: <class 'int'>,\n          Optional  (str) irs: <class 'int'>,\n          'address_tracking_status': <class 'str'>,\n          Optional  (str) sndwnd: <class 'int'>,\n          Optional  (str) snd_scale: <class 'int'>,\n          Optional  (str) maxrcvwnd: <class 'int'>,\n          Optional  (str) rcvwnd: <class 'int'>,\n          Optional  (str) rcv_scale: <class 'int'>,\n          Optional  (str) delrcvwnd: <class 'int'>,\n          Optional  (str) srtt: <class 'int'>,\n          'min_time_between_advertisement_runs': <class 'int'>,\n          Optional  (str) rtto: <class 'int'>,\n          Optional  (str) rtv: <class 'int'>,\n          Optional  (str) krtt: <class 'int'>,\n          Optional  (str) min_rtt: <class 'int'>,\n          Optional  (str) max_rtt: <class 'int'>,\n          Optional  (str) ack_hold: <class 'int'>,\n          Optional  (str) uptime: <class 'int'>,\n          Optional  (str) sent_idletime: <class 'int'>,\n          Optional  (str) receive_idletime: <class 'int'>,\n          Optional  (str) tcp_connection: <class 'bool'>,\n          Optional  (str) status_flags: <class 'str'>,\n          Optional  (str) option_flags: <class 'str'>,\n          Optional  (str) ip_precedence_value: <class 'int'>,\n          'tcp_path_mtu_discovery': <class 'str'>,\n          Optional  (str) transport: {\n            'local_port': <class 'str'>,\n            'local_host': <class 'str'>,\n            'foreign_port': <class 'str'>,\n            Optional  (str) mss: <class 'int'>,\n            'foreign_host': <class 'str'>,\n            },\n          Optional  (str) datagram: {\n            'datagram_sent': {\n              'second_congestion': <class 'int'>,\n              'with_data': <class 'int'>,\n              'retransmit': <class 'int'>,\n              'partialack': <class 'int'>,\n              'value': <class 'int'>,\n              'fastretransmit': <class 'int'>,\n              'total_data': <class 'int'>,\n              },\n            'datagram_received': {\n              'out_of_order': <class 'int'>,\n              'with_data': <class 'int'>,\n              'total_data': <class 'int'>,\n              'value': <class 'int'>,\n              },\n            },\n          Optional  (str) graceful_restart: <class 'str'>,\n          Optional  (str) packet_fast_path: <class 'int'>,\n          Optional  (str) gr_restart_time: <class 'int'>,\n          Optional  (str) packet_fast_processed: <class 'int'>,\n          Optional  (str) gr_stalepath_time: <class 'int'>,\n          Optional  (str) packet_slow_path: <class 'int'>,\n          Optional  (str) connection_state: <class 'str'>,\n          Optional  (str) fast_lock_acquisition_failures: <class 'int'>,\n          Optional  (str) io_status: <class 'int'>,\n          Optional  (str) lock_slow_path: <class 'int'>,\n          Optional  (str) unread_input_bytes: <class 'int'>,\n          Optional  (str) tcp_semaphore: <class 'str'>,\n          Optional  (str) ecn_connection: <class 'str'>,\n          Optional  (str) tcp_semaphore_status: <class 'str'>,\n          Optional  (str) minimum_incoming_ttl: <class 'int'>,\n          Optional  (str) sso: <class 'bool'>,\n          Optional  (str) outgoing_ttl: <class 'int'>,\n          Optional  (str) rcvnxt: <class 'int'>,\n          Optional  (str) connection_tableid: <class 'int'>,\n          'rib_route_ip': <class 'str'>,\n          Optional  (str) maximum_output_segment_queue_size: <class 'int'>,\n          },\n        'remote_as': <class 'int'>,\n        'bgp_version': <class 'int'>,\n        'session_state': <class 'str'>,\n        'shutdown': <class 'bool'>,\n        Optional  (str) local_as: <class 'int'>,\n        'bgp_negotiated_capabilities': {\n          'four_octets_asn': <class 'str'>,\n          Optional  (str) vpnv4_unicast: <class 'str'>,\n          Optional  (str) graceful_restart: <class 'str'>,\n          'route_refresh': <class 'str'>,\n          Optional  (str) vpnv6_unicast: <class 'str'>,\n          'stateful_switchover': <class 'str'>,\n          Optional  (str) ipv4_unicast: <class 'str'>,\n          Optional  (str) remote_restart_timer: <class 'int'>,\n          Optional  (str) ipv6_unicast: <class 'str'>,\n          Optional  (str) l2vpn_vpls: <class 'str'>,\n          Optional  (str) l2vpn_evpn: <class 'str'>,\n          Optional  (str) vpnv4_multicast: <class 'str'>,\n          Optional  (str) multisession: <class 'str'>,\n          Optional  (str) graceful_restart_af_advertised_by_peer: <class 'list'>,\n          Optional  (str) vpnv6_multicast: <class 'str'>,\n          'enhanced_refresh': <class 'str'>,\n          Optional  (str) mvpnv4_multicast: <class 'str'>,\n          Optional  (str) mvpnv6_multicast: <class 'str'>,\n          },\n        Optional  (str) description: <class 'str'>,\n        },\n      },\n    },\n  },\n}", "doc": " Parser for:\n        * 'show ip bgp all neighbors',\n        * 'show ip bgp all neighbors {neighbor}'\n        * 'show ip bgp {address_family} all neighbors'\n        * 'show ip bgp {address_family} all neighbors {neighbor}'\n    ", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_bgp.py#L3814", "class": "ShowIpBgpAllNeighbors", "module_name": "show_bgp"}}, "show vrf {vrf} detail": {"nxos": {"uid": "show_vrf_vrf_detail", "schema": "{\nAny  (str) *: {\n  'vrf_id': <class 'int'>,\n  Optional  (str) route_distinguisher: <class 'str'>,\n  'address_family': {\n    Any  (str) *: {\n      'state': <class 'str'>,\n      'table_id': <class 'str'>,\n      'fwd_id': <class 'str'>,\n      },\n    },\n  Optional  (str) vpn_id: <class 'str'>,\n  'state': <class 'str'>,\n  'max_routes': <class 'int'>,\n  'mid_threshold': <class 'int'>,\n  },\n}", "doc": "Parser for show vrf <vrf> detail", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_vrf.py#L151", "class": "ShowVrfDetail", "module_name": "show_vrf"}}, "show {ip} route {protocol}": {"ios": {"uid": "show_ip_route_protocol", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    Optional  (str) address_family: {\n      Any  (str) *: {\n        'ip': {\n          Any  (str) *: {\n            Optional  (str) nexthop: {\n              Optional  (Any) Any  (str) *: {\n                Optional  (str) protocol: {\n                  Optional  (Any) Any  (str) *: {\n                    Optional  (str) candidate_default: <class 'bool'>,\n                    Optional  (str) metric: <class 'str'>,\n                    Optional  (str) route_table: <class 'str'>,\n                    Optional  (str) preference: <class 'str'>,\n                    Optional  (str) attribute: <class 'str'>,\n                    Optional  (str) uptime: <class 'str'>,\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "doc": "Parser for:\n        show ipv6 route bgp\n        show ipv6 route vrf <vrf> bgp", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_ip_route.py#L20", "class": "ShowIpv6Route", "module_name": "show_ip_route"}, "iosxe": {"uid": "show_ip_route_protocol", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    Optional  (str) address_family: {\n      Any  (str) *: {\n        'ip': {\n          Any  (str) *: {\n            Optional  (str) nexthop: {\n              Optional  (Any) Any  (str) *: {\n                Optional  (str) protocol: {\n                  Optional  (Any) Any  (str) *: {\n                    Optional  (str) candidate_default: <class 'bool'>,\n                    Optional  (str) metric: <class 'str'>,\n                    Optional  (str) route_table: <class 'str'>,\n                    Optional  (str) preference: <class 'str'>,\n                    Optional  (str) attribute: <class 'str'>,\n                    Optional  (str) uptime: <class 'str'>,\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "doc": "Parser for:\n        show ipv6 route bgp\n        show ipv6 route vrf <vrf> bgp", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_ip_route.py#L244", "class": "ShowIpv6Route", "module_name": "show_ip_route"}}, "show mac address-table vni {vni} | grep {intf}": {"nxos": {"uid": "show_mac_address-table_vni_vni___grep_intf", "schema": "{\n'mac_address': {\n  Any  (str) *: {\n    'secure': <class 'str'>,\n    'ports': <class 'str'>,\n    'ntfy': <class 'str'>,\n    'mac_type': <class 'str'>,\n    'next_hop': <class 'str'>,\n    'mac_aging_time': <class 'str'>,\n    'evi': <class 'str'>,\n    'entry': <class 'str'>,\n    },\n  },\n}", "doc": "Parser for show mac address-table vni <WORD> | grep <WORD>", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_fdb.py#L38", "class": "ShowMacAddressTableVni", "module_name": "show_fdb"}}, "show ip pim policy statistics register-policy": {"nxos": {"uid": "show_ip_pim_policy_statistics_register-policy", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'address_family': {\n      Any  (str) *: {\n        Optional  (str) sm: {\n          Optional  (str) asm: {\n            Optional  (str) register_policy: {\n              Any  (str) *: {\n                Any  (str) *: {\n                  Optional  (str) compare_count: <class 'int'>,\n                  Optional  (str) match_count: <class 'int'>,\n                  },\n                Optional  (str) total_accept_count: <class 'int'>,\n                Optional  (str) total_reject_count: <class 'int'>,\n                },\n              },\n            Optional  (str) accept_register: <class 'str'>,\n            },\n          },\n        },\n      },\n    },\n  },\n}", "doc": "Parser for:\n        show ip pim policy statictics register_policy\n        show ip pim policy statictics register_policy vrf <vrf>", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_pim.py#L3187", "class": "ShowIpPimPolicyStaticticsRegisterPolicy", "module_name": "show_pim"}}, "show mac address-table": {"iosxe": {"uid": "show_mac_address-table", "schema": "{\n'mac_table': {\n  'vlans': {\n    Any  (str) *: {\n      'vlan': Or (<class 'int'>, <class 'str'>),\n      'mac_addresses': {\n        Any  (str) *: {\n          'mac_address': <class 'str'>,\n          Optional  (str) interfaces: {\n            Any  (str) *: {\n              'interface': <class 'str'>,\n              'entry_type': <class 'str'>,\n              },\n            },\n          Optional  (str) drop: {\n            'entry_type': <class 'str'>,\n            'drop': <class 'bool'>,\n            },\n          },\n        },\n      },\n    },\n  },\n'total_mac_addresses': <class 'int'>,\n}", "doc": "Parser for show mac address-table", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_fdb.py#L52", "class": "ShowMacAddressTable", "module_name": "show_fdb"}}, "show service-group state": {"ios": {"uid": "show_service-group_state", "schema": "{\n'group': {\n  Any  (str) *: {\n    'state': <class 'str'>,\n    },\n  },\n}", "doc": "Parser for show service-group state", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_service.py#L14", "class": "ShowServiceGroupState", "module_name": "show_service"}, "iosxe": {"uid": "show_service-group_state", "schema": "{\n'group': {\n  Any  (str) *: {\n    'state': <class 'str'>,\n    },\n  },\n}", "doc": "\n\tParser for 'show service-group state'\n\t", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_service.py#L34", "class": "ShowServiceGroupState", "module_name": "show_service"}}, "show ospf vrf all-inclusive neighbor detail": {"iosxr": {"uid": "show_ospf_vrf_all-inclusive_neighbor_detail", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'address_family': {\n      Any  (str) *: {\n        'instance': {\n          Any  (str) *: {\n            'total_neighbor_count': <class 'int'>,\n            'areas': {\n              Any  (str) *: {\n                Optional  (str) virtual_links: {\n                  Any  (str) *: {\n                    'neighbors': {\n                      Any  (str) *: {\n                        Optional  (str) dead_timer: <class 'str'>,\n                        'dr_ip_addr': <class 'str'>,\n                        Optional  (str) neighbor_uptime: <class 'str'>,\n                        'priority': <class 'int'>,\n                        Optional  (str) index: <class 'str'>,\n                        'address': <class 'str'>,\n                        Optional  (str) first: <class 'str'>,\n                        'bdr_ip_addr': <class 'str'>,\n                        'state': <class 'str'>,\n                        Optional  (str) ls_ack_list: <class 'str'>,\n                        'neighbor_router_id': <class 'str'>,\n                        Optional  (str) high_water_mark: <class 'int'>,\n                        Optional  (str) statistics: {\n                          Optional  (str) nbr_event_count: <class 'int'>,\n                          Optional  (str) last_retrans_scan_time_msec: <class 'int'>,\n                          Optional  (str) nbr_retrans_qlen: <class 'int'>,\n                          Optional  (str) last_retrans_max_scan_time_msec: <class 'int'>,\n                          Optional  (str) total_retransmission: <class 'int'>,\n                          Optional  (str) last_retrans_scan_length: <class 'int'>,\n                          Optional  (str) total_dbd_retrans: <class 'int'>,\n                          Optional  (str) last_retrans_max_scan_length: <class 'int'>,\n                          },\n                        Optional  (str) options: <class 'str'>,\n                        Optional  (str) next: <class 'str'>,\n                        Optional  (str) lls_options: <class 'str'>,\n                        Optional  (str) ls_ack_list_pending: <class 'int'>,\n                        },\n                      },\n                    },\n                  },\n                Optional  (str) interfaces: {\n                  Any  (str) *: {\n                    'neighbors': {\n                      Any  (str) *: {\n                        'dr_ip_addr': <class 'str'>,\n                        Optional  (str) ls_ack_list_pending: <class 'int'>,\n                        Optional  (str) options: <class 'str'>,\n                        'priority': <class 'int'>,\n                        Optional  (str) ls_ack_list: <class 'str'>,\n                        'address': <class 'str'>,\n                        Optional  (str) statistics: {\n                          Optional  (str) nbr_retrans_qlen: <class 'int'>,\n                          Optional  (str) last_retrans_scan_time_msec: <class 'int'>,\n                          Optional  (str) total_retransmission: <class 'int'>,\n                          Optional  (str) last_retrans_max_scan_time_msec: <class 'int'>,\n                          Optional  (str) last_retrans_scan_length: <class 'int'>,\n                          Optional  (str) total_dbd_retrans: <class 'int'>,\n                          Optional  (str) last_retrans_max_scan_length: <class 'int'>,\n                          Optional  (str) nbr_event_count: <class 'int'>,\n                          },\n                        Optional  (str) lls_options: <class 'str'>,\n                        'bdr_ip_addr': <class 'str'>,\n                        Optional  (str) dead_timer: <class 'str'>,\n                        'state': <class 'str'>,\n                        Optional  (str) high_water_mark: <class 'int'>,\n                        Optional  (str) neighbor_uptime: <class 'str'>,\n                        'neighbor_router_id': <class 'str'>,\n                        Optional  (str) index: <class 'str'>,\n                        Optional  (str) first: <class 'str'>,\n                        Optional  (str) next: <class 'str'>,\n                        },\n                      },\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "doc": "Parser for show ospf vrf all-inclusive neighbor detail", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_ospf.py#L781", "class": "ShowOspfVrfAllInclusiveNeighborDetail", "module_name": "show_ospf"}}, "show ip interface brief vrf all | include {ip}": {"nxos": {"uid": "show_ip_interface_brief_vrf_all___include_ip", "schema": "{\n'interface': {\n  Any  (str) *: {\n    Optional  (str) interface_status: <class 'str'>,\n    Optional  (str) ip_address: <class 'str'>,\n    },\n  },\n}", "doc": "Parser for show ip interface brief vrf all", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_interface.py#L2880", "class": "ShowIpInterfaceBriefVrfAll", "module_name": "show_interface"}}, "show ipv6 static-route multicast vrf all": {"nxos": {"uid": "show_ipv6_static-route_multicast_vrf_all", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'address_family': {\n      Any  (str) *: {\n        Optional  (str) mroute: {\n          Any  (str) *: {\n            Optional  (str) path: {\n              Any  (str) *: {\n                Optional  (str) reslv_tid: <class 'str'>,\n                Optional  (str) preference: <class 'str'>,\n                Optional  (str) interface_name: <class 'str'>,\n                Optional  (str) mroute_int: <class 'str'>,\n                Optional  (str) neighbor_address: <class 'str'>,\n                Optional  (str) rnh_status: <class 'str'>,\n                Optional  (str) bfd_enable: <class 'bool'>,\n                Optional  (str) nh_vrf: <class 'str'>,\n                Optional  (str) vrf_id: <class 'str'>,\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "doc": "Parser for show ipv6 static-route multicast vrf all", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_mcast.py#L604", "class": "ShowIpv6StaticRouteMulticast", "module_name": "show_mcast"}}, "show pim vrf {vrf} {af} interface detail": {"iosxr": {"uid": "show_pim_vrf_vrf_af_interface_detail", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'interfaces': {\n      Any  (str) *: {\n        'address_family': {\n          Any  (str) *: {\n            'override_interval': <class 'int'>,\n            'dr': <class 'str'>,\n            'address': <class 'list'>,\n            'bfd': {\n              'detection_multiplier': <class 'int'>,\n              'interval': <class 'float'>,\n              'enable': <class 'bool'>,\n              },\n            'flags': <class 'str'>,\n            'oper_status': <class 'str'>,\n            'primary_address': <class 'str'>,\n            'nbr_count': <class 'int'>,\n            'dr_priority': <class 'int'>,\n            'hello_interval': <class 'int'>,\n            'neighbor_filter': <class 'str'>,\n            'hello_expiration': <class 'str'>,\n            'propagation_delay': <class 'int'>,\n            },\n          },\n        },\n      },\n    },\n  },\n}", "doc": "\n    Parser for show pim vrf <vrf> <address_family> interface detail\n    For checking any output with the parser ,below mandatory key(s) have to be in cli command.\n\n    - vrf\n    - af\n    ", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_pim.py#L159", "class": "ShowPimVrfInterfaceDetail", "module_name": "show_pim"}}, "show mpls ldp igp sync {all}": {"iosxe": {"uid": "show_mpls_ldp_igp_sync_all", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'interface': {\n      Any  (str) *: {\n        'ldp': {\n          'configured': <class 'bool'>,\n          'igp_synchronization_enabled': <class 'bool'>,\n          },\n        Optional  (str) peer_ldp_ident: <class 'str'>,\n        Optional  (str) sync: {\n          Optional  (str) delay_time: <class 'int'>,\n          'status': {\n            'peer_reachable': <class 'bool'>,\n            Optional  (str) enabled: <class 'bool'>,\n            'sync_achieved': <class 'bool'>,\n            },\n          Optional  (str) left_time: <class 'int'>,\n          },\n        Optional  (str) igp: {\n          'holddown_time': <class 'str'>,\n          'enabled': <class 'str'>,\n          },\n        },\n      },\n    },\n  },\n}", "doc": "\n        Parser for show mpls ldp igp sync\n                   show mpls ldp igp sync all\n                   show mpls ldp igp sync interface <interface>\n                   show mpls ldp igp sync vrf <vrf>\n       ", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_mpls.py#L1611", "class": "ShowMplsLdpIgpSync", "module_name": "show_mpls"}}, "show ipv6 pim group-range vrf {vrf}": {"nxos": {"uid": "show_ipv6_pim_group-range_vrf_vrf", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'address_family': {\n      Any  (str) *: {\n        'sm': {\n          Any  (str) *: {\n            Any  (str) *: {\n              Optional  (str) range: <class 'str'>,\n              Optional  (str) rp_address: <class 'str'>,\n              Optional  (str) mode: <class 'str'>,\n              Optional  (str) shared_tree_only: <class 'str'>,\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "doc": "Parser for:\n        show ipv6 pim group-range\n        show ipv6 pim group-range vrf <vrf>", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_pim.py#L2463", "class": "ShowIpv6PimGroupRange", "module_name": "show_pim"}}, "show ip pim interface detail": {"ios": {"uid": "show_ip_pim_interface_detail", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'interfaces': {\n      Any  (str) *: {\n        'address_family': {\n          Any  (str) *: {\n            Optional  (str) sm: {\n              Optional  (str) passive: <class 'bool'>,\n              },\n            Optional  (str) neighbor_filter: <class 'str'>,\n            Optional  (str) dm: {\n              },\n            Optional  (str) dr_address: <class 'str'>,\n            Optional  (str) hello_interval: <class 'int'>,\n            Optional  (str) neighbor_count: <class 'int'>,\n            Optional  (str) hello_packets_in: <class 'int'>,\n            Optional  (str) jp_interval: <class 'int'>,\n            Optional  (str) hello_packets_out: <class 'int'>,\n            Optional  (str) state_refresh_processing: <class 'str'>,\n            Optional  (str) oper_status: <class 'str'>,\n            Optional  (str) state_refresh_origination: <class 'str'>,\n            Optional  (str) enable: <class 'bool'>,\n            Optional  (str) nbma_mode: <class 'str'>,\n            Optional  (str) address: <class 'list'>,\n            Optional  (str) atm_multipoint_signalling: <class 'str'>,\n            Optional  (str) bsr_border: <class 'bool'>,\n            Optional  (str) neighbors_rpf_proxy_capable: <class 'bool'>,\n            Optional  (str) none_dr_join: <class 'bool'>,\n            'bfd': {\n              Optional  (str) enable: <class 'bool'>,\n              },\n            Optional  (str) multicast: {\n              Optional  (str) ttl_threshold: <class 'int'>,\n              Optional  (str) packets_in: <class 'int'>,\n              Optional  (str) tag_switching: <class 'bool'>,\n              Optional  (str) packets_out: <class 'int'>,\n              Optional  (str) switching: <class 'str'>,\n              },\n            Optional  (str) pim_status: <class 'str'>,\n            Optional  (str) version: <class 'int'>,\n            Optional  (str) mode: <class 'str'>,\n            },\n          },\n        },\n      },\n    },\n  },\n}", "doc": " Parser for:\n        show ip pim Interface detail\n        show ip pim vrf <vrf_name> interface detail", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_pim.py#L70", "class": "ShowIpPimInterfaceDetail", "module_name": "show_pim"}, "iosxe": {"uid": "show_ip_pim_interface_detail", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'interfaces': {\n      Any  (str) *: {\n        'address_family': {\n          Any  (str) *: {\n            Optional  (str) sm: {\n              Optional  (str) passive: <class 'bool'>,\n              },\n            Optional  (str) neighbor_filter: <class 'str'>,\n            Optional  (str) dm: {\n              },\n            Optional  (str) dr_address: <class 'str'>,\n            Optional  (str) hello_interval: <class 'int'>,\n            Optional  (str) neighbor_count: <class 'int'>,\n            Optional  (str) hello_packets_in: <class 'int'>,\n            Optional  (str) jp_interval: <class 'int'>,\n            Optional  (str) hello_packets_out: <class 'int'>,\n            Optional  (str) state_refresh_processing: <class 'str'>,\n            Optional  (str) oper_status: <class 'str'>,\n            Optional  (str) state_refresh_origination: <class 'str'>,\n            Optional  (str) enable: <class 'bool'>,\n            Optional  (str) nbma_mode: <class 'str'>,\n            Optional  (str) address: <class 'list'>,\n            Optional  (str) atm_multipoint_signalling: <class 'str'>,\n            Optional  (str) bsr_border: <class 'bool'>,\n            Optional  (str) neighbors_rpf_proxy_capable: <class 'bool'>,\n            Optional  (str) none_dr_join: <class 'bool'>,\n            'bfd': {\n              Optional  (str) enable: <class 'bool'>,\n              },\n            Optional  (str) multicast: {\n              Optional  (str) ttl_threshold: <class 'int'>,\n              Optional  (str) packets_in: <class 'int'>,\n              Optional  (str) tag_switching: <class 'bool'>,\n              Optional  (str) packets_out: <class 'int'>,\n              Optional  (str) switching: <class 'str'>,\n              },\n            Optional  (str) pim_status: <class 'str'>,\n            Optional  (str) version: <class 'int'>,\n            Optional  (str) mode: <class 'str'>,\n            },\n          },\n        },\n      },\n    },\n  },\n}", "doc": null, "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_pim.py#L1326", "class": "ShowIpPimInterfaceDetail", "module_name": "show_pim"}}, "show issu rollback-timer": {"iosxe": {"uid": "show_issu_rollback-timer", "schema": "{\n'rollback_timer_reason': <class 'str'>,\n'rollback_timer_state': <class 'str'>,\n}", "doc": "Parser for show issu rollback-timer", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_issu.py#L227", "class": "ShowIssuRollbackTimer", "module_name": "show_issu"}}, "show ip interface brief | include Vlan": {"ios": {"uid": "show_ip_interface_brief___include_Vlan", "schema": "{\n'interface': {\n  Any  (str) *: {\n    Optional  (str) vlan_id: {\n      Optional  (Any) Any  (str) *: {\n        'ip_address': <class 'str'>,\n        Optional  (str) protocol: <class 'str'>,\n        Optional  (str) method: <class 'str'>,\n        Optional  (str) status: <class 'str'>,\n        Optional  (str) interface_is_ok: <class 'str'>,\n        },\n      },\n    Optional  (str) protocol: <class 'str'>,\n    Optional  (str) interface_is_ok: <class 'str'>,\n    Optional  (str) ip_address: <class 'str'>,\n    Optional  (str) method: <class 'str'>,\n    Optional  (str) status: <class 'str'>,\n    },\n  },\n}", "doc": "Parser for: show ip interface brief | include Vlan", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_interface.py#L48", "class": "ShowIpInterfaceBriefPipeVlan", "module_name": "show_interface"}, "nxos": {"uid": "show_ip_interface_brief___include_Vlan", "schema": "{\n'interface': {\n  Any  (str) *: {\n    Optional  (str) ipaddress_extension: <class 'str'>,\n    Optional  (str) ip_address: <class 'str'>,\n    Optional  (str) interface_status: <class 'str'>,\n    Optional  (str) vlan_id: {\n      Optional  (Any) Any  (str) *: {\n        'ip_address': <class 'str'>,\n        'interface_status': <class 'str'>,\n        Optional  (str) ipaddress_extension: <class 'str'>,\n        },\n      },\n    },\n  },\n}", "doc": "Parser for show ip interface brief | include Vlan", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_interface.py#L2386", "class": "ShowIpInterfaceBriefPipeVlan", "module_name": "show_interface"}, "iosxe": {"uid": "show_ip_interface_brief___include_Vlan", "schema": "{\n'interface': {\n  Any  (str) *: {\n    Optional  (str) vlan_id: {\n      Optional  (Any) Any  (str) *: {\n        'ip_address': <class 'str'>,\n        Optional  (str) protocol: <class 'str'>,\n        Optional  (str) method: <class 'str'>,\n        Optional  (str) status: <class 'str'>,\n        Optional  (str) interface_is_ok: <class 'str'>,\n        },\n      },\n    Optional  (str) protocol: <class 'str'>,\n    Optional  (str) interface_is_ok: <class 'str'>,\n    Optional  (str) ip_address: <class 'str'>,\n    Optional  (str) method: <class 'str'>,\n    Optional  (str) status: <class 'str'>,\n    },\n  },\n}", "doc": "Parser for:\n     show ip interface brief | include Vlan\n     parser class implements detail parsing mechanisms for cli and yang output.\n    ", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_interface.py#L936", "class": "ShowIpInterfaceBriefPipeVlan", "module_name": "show_interface"}}, "show isis adjacency": {"iosxr": {"uid": "show_isis_adjacency", "schema": "{\n'isis': {\n  Any  (str) *: {\n    'level': {\n      Any  (str) *: {\n        'system_id': {\n          Any  (str) *: {\n            'state': <class 'str'>,\n            'hold': <class 'str'>,\n            Optional  (str) ipv4_bfd: <class 'str'>,\n            Optional  (str) nsf: <class 'str'>,\n            Optional  (str) ipv6_bfd: <class 'str'>,\n            'interface': <class 'str'>,\n            'snpa': <class 'str'>,\n            'changed': <class 'str'>,\n            },\n          },\n        'total_adjacency_count': <class 'int'>,\n        },\n      },\n    },\n  },\n}", "doc": "Parser for show isis adjacency", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_isis.py#L50", "class": "ShowIsisAdjacency", "module_name": "show_isis"}}, "show running-config {feature} | sec '^i'": {"nxos": {"uid": "show_running-config_feature___sec_'^i'", "schema": "{\nOptional  (str) vrf: {\n  Any  (str) *: {\n    Optional  (str) address_family: {\n      Any  (str) *: {\n        Optional  (str) rp: {\n          Optional  (str) bsr: {\n            Any  (str) *: {\n              Optional  (str) priority: <class 'int'>,\n              Optional  (str) interval: <class 'int'>,\n              Optional  (str) interface: <class 'str'>,\n              Optional  (str) route_map: <class 'str'>,\n              Optional  (str) policy: <class 'str'>,\n              Optional  (str) prefix_list: <class 'str'>,\n              Optional  (str) mode: <class 'str'>,\n              },\n            },\n          Optional  (str) autorp: {\n            Optional  (str) send_rp_discovery: {\n              Optional  (str) scope: <class 'int'>,\n              'interface': <class 'str'>,\n              },\n            Optional  (str) send_rp_announce: {\n              Optional  (str) scope: <class 'int'>,\n              Optional  (str) bidir: <class 'bool'>,\n              Optional  (str) group_list: <class 'str'>,\n              Optional  (str) route_map: <class 'str'>,\n              Optional  (str) interface: <class 'str'>,\n              Optional  (str) prefix_list: <class 'str'>,\n              Optional  (str) group: <class 'str'>,\n              Optional  (str) interval: <class 'int'>,\n              },\n            Optional  (str) listener: <class 'bool'>,\n            },\n          Optional  (str) static_rp: {\n            Any  (str) *: {\n              Optional  (str) bidir: <class 'bool'>,\n              Optional  (str) policy_name: <class 'str'>,\n              Optional  (str) route_map: <class 'str'>,\n              Optional  (str) override: <class 'bool'>,\n              Optional  (str) prefix_list: <class 'str'>,\n              Optional  (str) policy: <class 'int'>,\n              },\n            },\n          },\n        },\n      },\n    },\n  },\nOptional  (str) feature_pim6: <class 'bool'>,\nOptional  (str) feature_pim: <class 'bool'>,\n}", "doc": "Parser for show running-config pim", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_pim.py#L4188", "class": "ShowRunningConfigPim", "module_name": "show_pim"}}, "show clock": {"iosxe": {"uid": "show_clock", "schema": "{\n'year': <class 'str'>,\n'day_of_week': <class 'str'>,\n'timezone': <class 'str'>,\n'month': <class 'str'>,\n'time': <class 'str'>,\n'day': <class 'str'>,\n}", "doc": "Parser for show clock", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_system.py#L28", "class": "ShowClock", "module_name": "show_system"}}, "show ntp associations": {"ios": {"uid": "show_ntp_associations", "schema": "{\n'peer': {\n  Any  (str) *: {\n    'local_mode': {\n      Any  (str) *: {\n        'remote': <class 'str'>,\n        Optional  (str) delay: <class 'float'>,\n        Optional  (str) refid: <class 'str'>,\n        Optional  (str) local_mode: <class 'str'>,\n        Optional  (str) offset: <class 'float'>,\n        Optional  (str) jitter: <class 'float'>,\n        Optional  (str) stratum: <class 'int'>,\n        Optional  (str) poll: <class 'int'>,\n        'configured': <class 'bool'>,\n        'mode': <class 'str'>,\n        Optional  (str) receive_time: Or (<class 'str'>, <class 'int'>),\n        Optional  (str) reach: <class 'int'>,\n        },\n      },\n    },\n  },\n'clock_state': {\n  'system_status': {\n    Optional  (str) root_delay: <class 'float'>,\n    Optional  (str) associations_local_mode: <class 'str'>,\n    Optional  (str) clock_offset: <class 'float'>,\n    Optional  (str) clock_refid: <class 'str'>,\n    Optional  (str) clock_stratum: <class 'int'>,\n    'clock_state': <class 'str'>,\n    Optional  (str) associations_address: <class 'str'>,\n    },\n  },\n}", "doc": "Parser for show ntp associations", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_ntp.py#L65", "class": "ShowNtpAssociations", "module_name": "show_ntp"}, "junos": {"uid": "show_ntp_associations", "schema": "{\n'peer': {\n  Any  (str) *: {\n    'local_mode': {\n      Any  (str) *: {\n        'mode': <class 'str'>,\n        Optional  (str) reach: <class 'int'>,\n        Optional  (str) type: <class 'str'>,\n        'remote': <class 'str'>,\n        Optional  (str) stratum: <class 'int'>,\n        Optional  (str) offset: <class 'float'>,\n        Optional  (str) receive_time: <class 'int'>,\n        Optional  (str) jitter: <class 'float'>,\n        Optional  (str) refid: <class 'str'>,\n        Optional  (str) poll: <class 'int'>,\n        Optional  (str) delay: <class 'float'>,\n        },\n      },\n    },\n  },\n'clock_state': {\n  'system_status': {\n    Optional  (str) clock_offset: <class 'float'>,\n    Optional  (str) clock_refid: <class 'str'>,\n    Optional  (str) clock_stratum: <class 'int'>,\n    Optional  (str) associations_local_mode: <class 'str'>,\n    Optional  (str) associations_address: <class 'str'>,\n    'clock_state': <class 'str'>,\n    Optional  (str) root_delay: <class 'float'>,\n    },\n  },\n}", "doc": "Parser for show ntp associations", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/junos/show_ntp.py#L61", "class": "ShowNtpAssociations", "module_name": "show_ntp"}, "iosxr": {"uid": "show_ntp_associations", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'address': {\n      Any  (str) *: {\n        'isconfigured': {\n          Any  (str) *: {\n            'address': <class 'str'>,\n            'isconfigured': <class 'bool'>,\n            },\n          },\n        'type': {\n          Any  (str) *: {\n            'address': <class 'str'>,\n            'vrf': <class 'str'>,\n            'type': <class 'str'>,\n            },\n          },\n        },\n      },\n    },\n  },\n'peer': {\n  Any  (str) *: {\n    'local_mode': {\n      Any  (str) *: {\n        Optional  (str) stratum: <class 'int'>,\n        'remote': <class 'str'>,\n        Optional  (str) refid: <class 'str'>,\n        Optional  (str) receive_time: Or (<class 'str'>, <class 'int'>),\n        Optional  (str) poll: <class 'int'>,\n        Optional  (str) reach: <class 'int'>,\n        Optional  (str) delay: <class 'float'>,\n        Optional  (str) offset: <class 'float'>,\n        'mode': <class 'str'>,\n        Optional  (str) jitter: <class 'float'>,\n        'configured': <class 'bool'>,\n        Optional  (str) local_mode: <class 'str'>,\n        },\n      },\n    },\n  },\n'clock_state': {\n  'system_status': {\n    Optional  (str) clock_offset: <class 'float'>,\n    Optional  (str) clock_refid: <class 'str'>,\n    Optional  (str) clock_stratum: <class 'int'>,\n    Optional  (str) associations_local_mode: <class 'str'>,\n    Optional  (str) associations_address: <class 'str'>,\n    'clock_state': <class 'str'>,\n    Optional  (str) root_delay: <class 'float'>,\n    },\n  },\n}", "doc": "Parser for show ntp associations", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_ntp.py#L84", "class": "ShowNtpAssociations", "module_name": "show_ntp"}, "iosxe": {"uid": "show_ntp_associations", "schema": "{\n'peer': {\n  Any  (str) *: {\n    'local_mode': {\n      Any  (str) *: {\n        Optional  (str) refid: <class 'str'>,\n        Optional  (str) local_mode: <class 'str'>,\n        'remote': <class 'str'>,\n        Optional  (str) stratum: <class 'int'>,\n        Optional  (str) receive_time: Or (<class 'str'>, <class 'int'>),\n        Optional  (str) poll: <class 'int'>,\n        Optional  (str) reach: <class 'int'>,\n        Optional  (str) delay: <class 'float'>,\n        'configured': <class 'bool'>,\n        'mode': <class 'str'>,\n        Optional  (str) offset: <class 'float'>,\n        Optional  (str) jitter: <class 'float'>,\n        },\n      },\n    },\n  },\n'clock_state': {\n  'system_status': {\n    Optional  (str) associations_local_mode: <class 'str'>,\n    Optional  (str) associations_address: <class 'str'>,\n    Optional  (str) root_delay: <class 'float'>,\n    Optional  (str) clock_offset: <class 'float'>,\n    'clock_state': <class 'str'>,\n    Optional  (str) clock_refid: <class 'str'>,\n    Optional  (str) clock_stratum: <class 'int'>,\n    },\n  },\n}", "doc": "Parser for show ntp associations", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_ntp.py#L62", "class": "ShowNtpAssociations", "module_name": "show_ntp"}}, "show lisp all instance-id {instance_id} service {service} rloc members": {"iosxe": {"uid": "show_lisp_all_instance-id_instance_id_service_service_rloc_members", "schema": "{\n'lisp_router_instances': {\n  Any  (str) *: {\n    Optional  (str) service: {\n      Optional  (Any) Any  (str) *: {\n        'instance_id': {\n          Any  (str) *: {\n            Optional  (str) rloc: {\n              'distribution': <class 'bool'>,\n              'total_entries': <class 'int'>,\n              'members': {\n                Any  (str) *: {\n                  'origin': <class 'str'>,\n                  'valid': <class 'str'>,\n                  },\n                },\n              'valid_entries': <class 'int'>,\n              },\n            },\n          },\n        },\n      },\n    'lisp_router_instance_id': <class 'int'>,\n    },\n  },\n}", "doc": "Parser for \"show lisp all instance-id <instance_id> <service> rloc members\"", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_lisp.py#L1732", "class": "ShowLispServiceRlocMembers", "module_name": "show_lisp"}}, "show l2vpn xconnect mp2mp detail": {"iosxr": {"uid": "show_l2vpn_xconnect_mp2mp_detail", "schema": null, "doc": "Parser for show l2vpn xconnect mp2mp detail", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_xconnect.py#L204", "class": "ShowL2VpnXconnectMp2mpDetail", "module_name": "show_xconnect"}}, "show ip arp detail": {"nxos": {"uid": "show_ip_arp_detail", "schema": "{\n'interfaces': {\n  Any  (str) *: {\n    'ipv4': {\n      'neighbors': {\n        Any  (str) *: {\n          'ip': <class 'str'>,\n          'age': <class 'str'>,\n          'origin': <class 'str'>,\n          Optional  (str) flag: <class 'str'>,\n          'physical_interface': <class 'str'>,\n          'link_layer_address': <class 'str'>,\n          },\n        },\n      },\n    },\n  },\n}", "doc": "Parser for:\n\t\tshow ip arp detail vrf all\n\t\tparser class - implements detail parsing mechanisms for cli,xml and yang output.\n\t", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_arp.py#L86", "class": "ShowIpArpDetailVrfAll", "module_name": "show_arp"}}, "show spanning-tree mst detail": {"ios": {"uid": "show_spanning-tree_mst_detail", "schema": "{\n'mst_instances': {\n  Any  (str) *: {\n    'bridge_priority': <class 'int'>,\n    Optional  (str) configured: {\n      'max_age': <class 'int'>,\n      'max_hops': <class 'int'>,\n      'hello_time': <class 'int'>,\n      'forward_delay': <class 'int'>,\n      },\n    'sysid': <class 'int'>,\n    'interfaces': {\n      Any  (str) *: {\n        Optional  (str) designated_regional_root_address: <class 'str'>,\n        'cost': <class 'int'>,\n        'forward_delay': <class 'int'>,\n        'designated_root_priority': <class 'int'>,\n        'port_id': <class 'str'>,\n        'name': <class 'str'>,\n        'designated_bridge_address': <class 'str'>,\n        'message_expires': <class 'int'>,\n        'designated_root_cost': <class 'int'>,\n        'counters': {\n          'bpdu_received': <class 'int'>,\n          'bpdu_sent': <class 'int'>,\n          },\n        'status': <class 'str'>,\n        'designated_bridge_port_id': <class 'str'>,\n        'forward_transitions': <class 'int'>,\n        Optional  (str) broken_reason: <class 'str'>,\n        Optional  (str) designated_regional_root_cost: <class 'int'>,\n        'port_priority': <class 'int'>,\n        'designated_root_address': <class 'str'>,\n        Optional  (str) designated_regional_root_priority: <class 'int'>,\n        'designated_bridge_priority': <class 'int'>,\n        },\n      },\n    'mst_id': <class 'int'>,\n    'bridge_address': <class 'str'>,\n    'root': <class 'str'>,\n    Optional  (str) vlan: <class 'str'>,\n    Optional  (str) operational: {\n      'max_age': <class 'int'>,\n      'hello_time': <class 'int'>,\n      'forward_delay': <class 'int'>,\n      'tx_hold_count': <class 'int'>,\n      },\n    },\n  },\n}", "doc": null, "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_spanning_tree.py#L38", "class": "ShowSpanningTreeMstDetail", "module_name": "show_spanning_tree"}, "iosxe": {"uid": "show_spanning-tree_mst_detail", "schema": "{\n'mst_instances': {\n  Any  (str) *: {\n    'bridge_priority': <class 'int'>,\n    Optional  (str) configured: {\n      'max_age': <class 'int'>,\n      'max_hops': <class 'int'>,\n      'hello_time': <class 'int'>,\n      'forward_delay': <class 'int'>,\n      },\n    'sysid': <class 'int'>,\n    'interfaces': {\n      Any  (str) *: {\n        Optional  (str) designated_regional_root_address: <class 'str'>,\n        'cost': <class 'int'>,\n        'forward_delay': <class 'int'>,\n        'designated_root_priority': <class 'int'>,\n        'port_id': <class 'str'>,\n        'name': <class 'str'>,\n        'designated_bridge_address': <class 'str'>,\n        'message_expires': <class 'int'>,\n        'designated_root_cost': <class 'int'>,\n        'counters': {\n          'bpdu_received': <class 'int'>,\n          'bpdu_sent': <class 'int'>,\n          },\n        'status': <class 'str'>,\n        'designated_bridge_port_id': <class 'str'>,\n        'forward_transitions': <class 'int'>,\n        Optional  (str) broken_reason: <class 'str'>,\n        Optional  (str) designated_regional_root_cost: <class 'int'>,\n        'port_priority': <class 'int'>,\n        'designated_root_address': <class 'str'>,\n        Optional  (str) designated_regional_root_priority: <class 'int'>,\n        'designated_bridge_priority': <class 'int'>,\n        },\n      },\n    'mst_id': <class 'int'>,\n    'bridge_address': <class 'str'>,\n    'root': <class 'str'>,\n    Optional  (str) vlan: <class 'str'>,\n    Optional  (str) operational: {\n      'max_age': <class 'int'>,\n      'hello_time': <class 'int'>,\n      'forward_delay': <class 'int'>,\n      'tx_hold_count': <class 'int'>,\n      },\n    },\n  },\n}", "doc": "Parser for show spanning-tree mst detail", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_spanning_tree.py#L565", "class": "ShowSpanningTreeMstDetail", "module_name": "show_spanning_tree"}}, "show bgp {address_family} all": {"ios": {"uid": "show_bgp_address_family_all", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'address_family': {\n      Any  (str) *: {\n        Optional  (str) pfx_limit: <class 'int'>,\n        Optional  (str) route_distinguisher: <class 'str'>,\n        Optional  (str) default_vrf: <class 'str'>,\n        Optional  (str) bgp_table_version: <class 'int'>,\n        Optional  (str) af_private_import_to_address_family: <class 'str'>,\n        Optional  (str) route_identifier: <class 'str'>,\n        Optional  (str) pfx_count: <class 'int'>,\n        Optional  (str) routes: {\n          Optional  (Any) Any  (str) *: {\n            Optional  (str) index: {\n              Optional  (Any) Any  (str) *: {\n                Optional  (str) weight: <class 'int'>,\n                Optional  (str) next_hop: <class 'str'>,\n                Optional  (str) path: <class 'str'>,\n                Optional  (str) status_codes: <class 'str'>,\n                Optional  (str) origin_codes: <class 'str'>,\n                Optional  (str) metric: <class 'int'>,\n                Optional  (str) localpref: <class 'int'>,\n                },\n              },\n            },\n          },\n        Optional  (str) vrf_route_identifier: <class 'str'>,\n        },\n      },\n    },\n  },\n}", "doc": "Parser for show bgp all", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_bgp.py#L112", "class": "ShowBgpAll", "module_name": "show_bgp"}, "iosxe": {"uid": "show_bgp_address_family_all", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'address_family': {\n      Any  (str) *: {\n        Optional  (str) pfx_limit: <class 'int'>,\n        Optional  (str) route_distinguisher: <class 'str'>,\n        Optional  (str) default_vrf: <class 'str'>,\n        Optional  (str) bgp_table_version: <class 'int'>,\n        Optional  (str) af_private_import_to_address_family: <class 'str'>,\n        Optional  (str) route_identifier: <class 'str'>,\n        Optional  (str) pfx_count: <class 'int'>,\n        Optional  (str) routes: {\n          Optional  (Any) Any  (str) *: {\n            Optional  (str) index: {\n              Optional  (Any) Any  (str) *: {\n                Optional  (str) weight: <class 'int'>,\n                Optional  (str) next_hop: <class 'str'>,\n                Optional  (str) path: <class 'str'>,\n                Optional  (str) status_codes: <class 'str'>,\n                Optional  (str) origin_codes: <class 'str'>,\n                Optional  (str) metric: <class 'int'>,\n                Optional  (str) localpref: <class 'int'>,\n                },\n              },\n            },\n          },\n        Optional  (str) vrf_route_identifier: <class 'str'>,\n        },\n      },\n    },\n  },\n}", "doc": " Parser for:\n        * 'show bgp all'\n        * 'show bgp {address_family} all'\n    ", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_bgp.py#L565", "class": "ShowBgpAll", "module_name": "show_bgp"}}, "show mrib vrf {vrf} route summary": {"iosxr": {"uid": "show_mrib_vrf_vrf_route_summary", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'address_family': {\n      Any  (str) *: {\n        'no_g_routes': <class 'int'>,\n        'no_route_x_interfaces': <class 'int'>,\n        'no_s_g_routes': <class 'int'>,\n        'total_no_interfaces': <class 'int'>,\n        'no_group_ranges': <class 'int'>,\n        },\n      },\n    },\n  },\n}", "doc": "\n    Parser for show mrib vrf <vrf> <address-family> route summary\n    For checking any output with the parser, below mandatory keys have to be in cli command.\n    - vrf\n    - af (optional)\n    ", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_mrib.py#L267", "class": "ShowMribVrfRouteSummary", "module_name": "show_mrib"}}, "show ipv6 pim vrf {vrf} bsr election": {"ios": {"uid": "show_ipv6_pim_vrf_vrf_bsr_election", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'address_family': {\n      Any  (str) *: {\n        'rp': {\n          'bsr': {\n            Optional  (str) bsr_candidate: {\n              Optional  (str) hash_mask_length: <class 'int'>,\n              Optional  (str) address: <class 'str'>,\n              Optional  (str) priority: <class 'int'>,\n              },\n            Optional  (str) bsr: {\n              Optional  (str) up_time: <class 'str'>,\n              Optional  (str) address: <class 'str'>,\n              Optional  (str) expires: <class 'str'>,\n              Optional  (str) hash_mask_length: <class 'int'>,\n              Optional  (str) rpf_interface: <class 'str'>,\n              Optional  (str) scope_range_list: <class 'str'>,\n              Optional  (str) rpf_address: <class 'str'>,\n              Optional  (str) priority: <class 'int'>,\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "doc": "Parser for:\n        show ipv6 pim bsr election\n        show ipv6 pim vrf <vrf> bsr election", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_pim.py#L37", "class": "ShowIpv6PimBsrElection", "module_name": "show_pim"}, "iosxe": {"uid": "show_ipv6_pim_vrf_vrf_bsr_election", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'address_family': {\n      Any  (str) *: {\n        'rp': {\n          'bsr': {\n            Optional  (str) bsr_candidate: {\n              Optional  (str) hash_mask_length: <class 'int'>,\n              Optional  (str) address: <class 'str'>,\n              Optional  (str) priority: <class 'int'>,\n              },\n            Optional  (str) bsr: {\n              Optional  (str) up_time: <class 'str'>,\n              Optional  (str) address: <class 'str'>,\n              Optional  (str) expires: <class 'str'>,\n              Optional  (str) hash_mask_length: <class 'int'>,\n              Optional  (str) rpf_interface: <class 'str'>,\n              Optional  (str) scope_range_list: <class 'str'>,\n              Optional  (str) rpf_address: <class 'str'>,\n              Optional  (str) priority: <class 'int'>,\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "doc": "Parser for:\n        show ipv6 pim bsr election\n        show ipv6 pim vrf <vrf> bsr election", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_pim.py#L167", "class": "ShowIpv6PimBsrElection", "module_name": "show_pim"}}, "show bgp {address_family} rd {rd} summary": {"iosxe": {"uid": "show_bgp_address_family_rd_rd_summary", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    Optional  (str) neighbor: {\n      Any  (str) *: {\n        'address_family': {\n          Any  (str) *: {\n            Optional  (str) prefixes: {\n              'total_entries': <class 'int'>,\n              'memory_usage': <class 'int'>,\n              },\n            'msg_rcvd': <class 'int'>,\n            Optional  (str) path: {\n              'total_entries': <class 'int'>,\n              'memory_usage': <class 'int'>,\n              },\n            Optional  (str) cache_entries: {\n              Any  (str) *: {\n                'total_entries': <class 'int'>,\n                'memory_usage': <class 'int'>,\n                },\n              },\n            'input_queue': <class 'int'>,\n            'state_pfxrcd': <class 'str'>,\n            Optional  (str) entries: {\n              Any  (str) *: {\n                'total_entries': <class 'int'>,\n                'memory_usage': <class 'int'>,\n                },\n              },\n            Optional  (str) community_entries: {\n              'total_entries': <class 'int'>,\n              'memory_usage': <class 'int'>,\n              },\n            Optional  (str) attribute_entries: <class 'str'>,\n            'as': <class 'int'>,\n            Optional  (str) total_memory: <class 'int'>,\n            Optional  (str) activity_prefixes: <class 'str'>,\n            'tbl_ver': <class 'int'>,\n            Optional  (str) activity_paths: <class 'str'>,\n            Optional  (str) scan_interval: <class 'int'>,\n            'output_queue': <class 'int'>,\n            'msg_sent': <class 'int'>,\n            Optional  (str) route_identifier: <class 'str'>,\n            Optional  (str) local_as: <class 'int'>,\n            'up_down': <class 'str'>,\n            Optional  (str) bgp_table_version: <class 'int'>,\n            'version': <class 'int'>,\n            Optional  (str) routing_table_version: <class 'int'>,\n            },\n          },\n        },\n      },\n    },\n  },\n'bgp_id': <class 'int'>,\n}", "doc": " Parser for:\n        * 'show bgp summary'\n        * 'show bgp {address_family} summary'\n        * 'show bgp {address_family} vrf {vrf} summary'\n        * 'show bgp {address_family} rd {rd} summary'\n    ", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_bgp.py#L2054", "class": "ShowBgpSummary", "module_name": "show_bgp"}}, "show vlan interface": {"iosxr": {"uid": "show_vlan_interface", "schema": "{\nAny  (str) *: {\n  Optional  (str) linep_state: <class 'str'>,\n  Optional  (str) outer_vlan: <class 'int'>,\n  Optional  (str) second_vlan: <class 'str'>,\n  Optional  (str) service: <class 'str'>,\n  Optional  (str) encapsulation: <class 'str'>,\n  Optional  (str) mtu: <class 'int'>,\n  },\n}", "doc": "Parser for show vlan interface", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_interface.py#L1184", "class": "ShowVlanInterface", "module_name": "show_interface"}}, "show lacp {channel_group} internal": {"iosxe": {"uid": "show_lacp_channel_group_internal", "schema": "{\n'interfaces': {\n  Any  (str) *: {\n    'protocol': <class 'str'>,\n    'name': <class 'str'>,\n    'members': {\n      Any  (str) *: {\n        'state': <class 'str'>,\n        'bundled': <class 'bool'>,\n        'port_num': <class 'int'>,\n        Optional  (str) activity: <class 'str'>,\n        'oper_key': <class 'int'>,\n        'lacp_port_priority': <class 'int'>,\n        'admin_key': <class 'int'>,\n        'interface': <class 'str'>,\n        'port_state': <class 'int'>,\n        'flags': <class 'str'>,\n        },\n      },\n    },\n  },\n}", "doc": "Parser for :\n      show lacp internal", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_lag.py#L209", "class": "ShowLacpInternal", "module_name": "show_lag"}}, "show users": {"iosxe": {"uid": "show_users", "schema": "{\n'line': {\n  Any  (str) *: {\n    'location': <class 'str'>,\n    'user': <class 'str'>,\n    'host': <class 'str'>,\n    'active': <class 'bool'>,\n    'idle': <class 'str'>,\n    },\n  },\n}", "doc": "Parser for show users", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_session.py#L110", "class": "ShowUsers", "module_name": "show_session"}}, "show ip pim neighbor vrf {vrf}": {"nxos": {"uid": "show_ip_pim_neighbor_vrf_vrf", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'interfaces': {\n      Any  (str) *: {\n        'address_family': {\n          Any  (str) *: {\n            'neighbors': {\n              Any  (str) *: {\n                'interface': <class 'str'>,\n                'dr_priority': <class 'int'>,\n                'up_time': <class 'str'>,\n                'expiration': <class 'str'>,\n                'bidir_capable': <class 'bool'>,\n                'bfd_status': <class 'bool'>,\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "doc": "Parser for:\n        show ip pim neighbor\n        show ip pim neighbor vrf <vrf>", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_pim.py#L2587", "class": "ShowIpPimNeighbor", "module_name": "show_pim"}}, "show ip protocols vrf {vrf}": {"ios": {"uid": "show_ip_protocols_vrf_vrf", "schema": "{\n'protocols': {\n  Optional  (str) ospf: {\n    'vrf': {\n      Any  (str) *: {\n        'address_family': {\n          Any  (str) *: {\n            'instance': {\n              Any  (str) *: {\n                'preference': {\n                  'single_value': {\n                    'all': <class 'int'>,\n                    },\n                  Optional  (str) multi_values: {\n                    'granularity': {\n                      'detail': {\n                        'inter_area': <class 'int'>,\n                        'intra_area': <class 'int'>,\n                        },\n                      Optional  (str) coarse: {\n                        'internal': <class 'int'>,\n                        },\n                      },\n                    'external': <class 'int'>,\n                    },\n                  },\n                Optional  (str) passive_interfaces: <class 'list'>,\n                'total_stub_area': <class 'int'>,\n                'incoming_filter_list': <class 'str'>,\n                'total_normal_area': <class 'int'>,\n                Optional  (str) routing_information_sources: {\n                  'gateway': {\n                    Any  (str) *: {\n                      'distance': <class 'int'>,\n                      'last_update': <class 'str'>,\n                      },\n                    },\n                  },\n                'total_nssa_area': <class 'int'>,\n                'total_areas': <class 'int'>,\n                Optional  (str) areas: {\n                  Any  (str) *: {\n                    Optional  (str) configured_interfaces: <class 'list'>,\n                    },\n                  },\n                'router_id': <class 'str'>,\n                'spf_control': {\n                  'paths': <class 'int'>,\n                  },\n                'outgoing_filter_list': <class 'str'>,\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  Optional  (str) bgp: {\n    'instance': {\n      'default': {\n        'vrf': {\n          'default': {\n            'address_family': {\n              'ipv4': {\n                'automatic_route_summarization': <class 'bool'>,\n                Optional  (str) neighbor: {\n                  Any  (str) *: {\n                    'neighbor_id': <class 'str'>,\n                    'distance': <class 'int'>,\n                    'last_update': <class 'str'>,\n                    },\n                  },\n                Optional  (str) preference: {\n                  'multi_values': {\n                    'internal': <class 'int'>,\n                    'external': <class 'int'>,\n                    'local': <class 'int'>,\n                    },\n                  },\n                'outgoing_filter_list': <class 'str'>,\n                'incoming_filter_list': <class 'str'>,\n                'maximum_path': <class 'int'>,\n                'igp_sync': <class 'bool'>,\n                },\n              },\n            },\n          },\n        'bgp_id': <class 'int'>,\n        },\n      },\n    },\n  Optional  (str) eigrp: {\n    'protocol_under_dev': <class 'bool'>,\n    },\n  Optional  (str) application: {\n    'preference': {\n      'single_value': {\n        'all': <class 'int'>,\n        },\n      },\n    'flushed': <class 'int'>,\n    'invalid': <class 'int'>,\n    'update_frequency': <class 'int'>,\n    'outgoing_filter_list': <class 'str'>,\n    'incoming_filter_list': <class 'str'>,\n    'maximum_path': <class 'int'>,\n    'holddown': <class 'int'>,\n    },\n  Optional  (str) isis: {\n    'vrf': {\n      Any  (str) *: {\n        'address_family': {\n          Any  (str) *: {\n            'instance': {\n              Any  (str) *: {\n                'redistributing': <class 'str'>,\n                'preference': {\n                  'single_value': {\n                    'all': <class 'int'>,\n                    },\n                  },\n                Optional  (str) passive_interfaces: <class 'list'>,\n                Optional  (str) configured_interfaces: <class 'list'>,\n                'outgoing_filter_list': <class 'str'>,\n                'incoming_filter_list': <class 'str'>,\n                Optional  (str) address_summarization: <class 'list'>,\n                Optional  (str) routing_information_sources: {\n                  'gateway': {\n                    Any  (str) *: {\n                      'distance': <class 'int'>,\n                      'last_update': <class 'str'>,\n                      },\n                    },\n                  },\n                Optional  (str) maximum_path: <class 'int'>,\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  Optional  (str) rip: {\n    'vrf': {\n      Any  (str) *: {\n        'address_family': {\n          Any  (str) *: {\n            Optional  (str) instance: {\n              Any  (str) *: {\n                'redistribute': {\n                  Any  (str) *: {\n                    Optional  (str) route_policy: <class 'int'>,\n                    Optional  (str) metric: <class 'int'>,\n                    Optional  (Any) Any  (str) *: {\n                      Optional  (str) route_policy: <class 'int'>,\n                      Optional  (str) metric: <class 'int'>,\n                      Optional  (str) route_type: <class 'str'>,\n                      },\n                    },\n                  },\n                Optional  (str) output_delay: <class 'int'>,\n                'send_version': Or (<class 'int'>, <class 'str'>),\n                Optional  (str) timers: {\n                  'next_update': <class 'int'>,\n                  'invalid_interval': <class 'int'>,\n                  'update_interval': <class 'int'>,\n                  'flush_interval': <class 'int'>,\n                  'holddown_interval': <class 'int'>,\n                  },\n                Optional  (str) neighbors: {\n                  Any  (str) *: {\n                    'distance': <class 'int'>,\n                    'last_update': <class 'str'>,\n                    },\n                  },\n                'outgoing_update_filterlist': {\n                  'outgoing_update_filterlist': <class 'str'>,\n                  Optional  (str) interfaces: {\n                    Any  (str) *: {\n                      'filter': <class 'str'>,\n                      'per_user': <class 'bool'>,\n                      'default': <class 'str'>,\n                      },\n                    },\n                  },\n                Optional  (str) default_redistribution_metric: <class 'int'>,\n                Optional  (str) incoming_route_metric: {\n                  'added': <class 'str'>,\n                  'list': <class 'str'>,\n                  },\n                Optional  (str) automatic_network_summarization_in_effect: <class 'bool'>,\n                'maximum_paths': <class 'int'>,\n                'incoming_update_filterlist': {\n                  'incoming_update_filterlist': <class 'str'>,\n                  Optional  (str) interfaces: {\n                    Any  (str) *: {\n                      'filter': <class 'str'>,\n                      'per_user': <class 'bool'>,\n                      'default': <class 'str'>,\n                      },\n                    },\n                  },\n                'receive_version': Or (<class 'int'>, <class 'str'>),\n                'network': <class 'list'>,\n                'distance': <class 'int'>,\n                'interfaces': {\n                  Any  (str) *: {\n                    Optional  (str) summary_address: {\n                      Any  (str) *: {\n                        Optional  (str) metric: <class 'str'>,\n                        },\n                      },\n                    Optional  (str) filtered_per_user: <class 'int'>,\n                    Optional  (str) neighbors: {\n                      Any  (str) *: {\n                        Optional  (str) address: <class 'str'>,\n                        },\n                      },\n                    Optional  (str) default_set: <class 'bool'>,\n                    'triggered_rip': <class 'str'>,\n                    'key_chain': <class 'str'>,\n                    'receive_version': <class 'str'>,\n                    'send_version': <class 'str'>,\n                    Optional  (str) passive: <class 'bool'>,\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "doc": " Parser for \"show ip protocols\" ", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_protocols.py#L10", "class": "ShowIpProtocols", "module_name": "show_protocols"}, "iosxe": {"uid": "show_ip_protocols_vrf_vrf", "schema": "{\n'protocols': {\n  Optional  (str) ospf: {\n    'vrf': {\n      Any  (str) *: {\n        'address_family': {\n          Any  (str) *: {\n            'instance': {\n              Any  (str) *: {\n                'preference': {\n                  'single_value': {\n                    'all': <class 'int'>,\n                    },\n                  Optional  (str) multi_values: {\n                    'granularity': {\n                      'detail': {\n                        'inter_area': <class 'int'>,\n                        'intra_area': <class 'int'>,\n                        },\n                      Optional  (str) coarse: {\n                        'internal': <class 'int'>,\n                        },\n                      },\n                    'external': <class 'int'>,\n                    },\n                  },\n                Optional  (str) passive_interfaces: <class 'list'>,\n                'total_stub_area': <class 'int'>,\n                'incoming_filter_list': <class 'str'>,\n                'total_normal_area': <class 'int'>,\n                Optional  (str) routing_information_sources: {\n                  'gateway': {\n                    Any  (str) *: {\n                      'distance': <class 'int'>,\n                      'last_update': <class 'str'>,\n                      },\n                    },\n                  },\n                'total_nssa_area': <class 'int'>,\n                'total_areas': <class 'int'>,\n                Optional  (str) areas: {\n                  Any  (str) *: {\n                    Optional  (str) configured_interfaces: <class 'list'>,\n                    },\n                  },\n                'router_id': <class 'str'>,\n                'spf_control': {\n                  'paths': <class 'int'>,\n                  },\n                'outgoing_filter_list': <class 'str'>,\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  Optional  (str) bgp: {\n    'instance': {\n      'default': {\n        'vrf': {\n          'default': {\n            'address_family': {\n              'ipv4': {\n                'automatic_route_summarization': <class 'bool'>,\n                Optional  (str) neighbor: {\n                  Any  (str) *: {\n                    'neighbor_id': <class 'str'>,\n                    'distance': <class 'int'>,\n                    'last_update': <class 'str'>,\n                    },\n                  },\n                Optional  (str) preference: {\n                  'multi_values': {\n                    'internal': <class 'int'>,\n                    'external': <class 'int'>,\n                    'local': <class 'int'>,\n                    },\n                  },\n                'outgoing_filter_list': <class 'str'>,\n                'incoming_filter_list': <class 'str'>,\n                'maximum_path': <class 'int'>,\n                'igp_sync': <class 'bool'>,\n                },\n              },\n            },\n          },\n        'bgp_id': <class 'int'>,\n        },\n      },\n    },\n  Optional  (str) eigrp: {\n    'protocol_under_dev': <class 'bool'>,\n    },\n  Optional  (str) application: {\n    'preference': {\n      'single_value': {\n        'all': <class 'int'>,\n        },\n      },\n    'flushed': <class 'int'>,\n    'invalid': <class 'int'>,\n    'update_frequency': <class 'int'>,\n    'outgoing_filter_list': <class 'str'>,\n    'incoming_filter_list': <class 'str'>,\n    'maximum_path': <class 'int'>,\n    'holddown': <class 'int'>,\n    },\n  Optional  (str) isis: {\n    'vrf': {\n      Any  (str) *: {\n        'address_family': {\n          Any  (str) *: {\n            'instance': {\n              Any  (str) *: {\n                'redistributing': <class 'str'>,\n                'preference': {\n                  'single_value': {\n                    'all': <class 'int'>,\n                    },\n                  },\n                Optional  (str) passive_interfaces: <class 'list'>,\n                Optional  (str) configured_interfaces: <class 'list'>,\n                'outgoing_filter_list': <class 'str'>,\n                'incoming_filter_list': <class 'str'>,\n                Optional  (str) address_summarization: <class 'list'>,\n                Optional  (str) routing_information_sources: {\n                  'gateway': {\n                    Any  (str) *: {\n                      'distance': <class 'int'>,\n                      'last_update': <class 'str'>,\n                      },\n                    },\n                  },\n                Optional  (str) maximum_path: <class 'int'>,\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  Optional  (str) rip: {\n    'vrf': {\n      Any  (str) *: {\n        'address_family': {\n          Any  (str) *: {\n            Optional  (str) instance: {\n              Any  (str) *: {\n                'redistribute': {\n                  Any  (str) *: {\n                    Optional  (str) route_policy: <class 'int'>,\n                    Optional  (str) metric: <class 'int'>,\n                    Optional  (Any) Any  (str) *: {\n                      Optional  (str) route_policy: <class 'int'>,\n                      Optional  (str) metric: <class 'int'>,\n                      Optional  (str) route_type: <class 'str'>,\n                      },\n                    },\n                  },\n                Optional  (str) output_delay: <class 'int'>,\n                'send_version': Or (<class 'int'>, <class 'str'>),\n                Optional  (str) timers: {\n                  'next_update': <class 'int'>,\n                  'invalid_interval': <class 'int'>,\n                  'update_interval': <class 'int'>,\n                  'flush_interval': <class 'int'>,\n                  'holddown_interval': <class 'int'>,\n                  },\n                Optional  (str) neighbors: {\n                  Any  (str) *: {\n                    'distance': <class 'int'>,\n                    'last_update': <class 'str'>,\n                    },\n                  },\n                'outgoing_update_filterlist': {\n                  'outgoing_update_filterlist': <class 'str'>,\n                  Optional  (str) interfaces: {\n                    Any  (str) *: {\n                      'filter': <class 'str'>,\n                      'per_user': <class 'bool'>,\n                      'default': <class 'str'>,\n                      },\n                    },\n                  },\n                Optional  (str) default_redistribution_metric: <class 'int'>,\n                Optional  (str) incoming_route_metric: {\n                  'added': <class 'str'>,\n                  'list': <class 'str'>,\n                  },\n                Optional  (str) automatic_network_summarization_in_effect: <class 'bool'>,\n                'maximum_paths': <class 'int'>,\n                'incoming_update_filterlist': {\n                  'incoming_update_filterlist': <class 'str'>,\n                  Optional  (str) interfaces: {\n                    Any  (str) *: {\n                      'filter': <class 'str'>,\n                      'per_user': <class 'bool'>,\n                      'default': <class 'str'>,\n                      },\n                    },\n                  },\n                'receive_version': Or (<class 'int'>, <class 'str'>),\n                'network': <class 'list'>,\n                'distance': <class 'int'>,\n                'interfaces': {\n                  Any  (str) *: {\n                    Optional  (str) summary_address: {\n                      Any  (str) *: {\n                        Optional  (str) metric: <class 'str'>,\n                        },\n                      },\n                    Optional  (str) filtered_per_user: <class 'int'>,\n                    Optional  (str) neighbors: {\n                      Any  (str) *: {\n                        Optional  (str) address: <class 'str'>,\n                        },\n                      },\n                    Optional  (str) default_set: <class 'bool'>,\n                    'triggered_rip': <class 'str'>,\n                    'key_chain': <class 'str'>,\n                    'receive_version': <class 'str'>,\n                    'send_version': <class 'str'>,\n                    Optional  (str) passive: <class 'bool'>,\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "doc": " Parser for \"show ip protocols\" ", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_protocols.py#L254", "class": "ShowIpProtocols", "module_name": "show_protocols"}}, "show bgp {address_family} all neighbors {neighbor}": {"ios": {"uid": "show_bgp_address_family_all_neighbors_neighbor", "schema": "{\nOptional  (str) list_of_neighbors: <class 'list'>,\n'vrf': {\n  Any  (str) *: {\n    'neighbor': {\n      Any  (str) *: {\n        Optional  (str) bgp_event_timer: {\n          'starts': {\n            Any  (str) *: <class 'int'>,\n            },\n          'wakeups': {\n            Any  (str) *: <class 'int'>,\n            },\n          'next': {\n            Any  (str) *: <class 'str'>,\n            },\n          },\n        'address_family': {\n          Any  (str) *: {\n            Optional  (str) refresh_epoch: <class 'int'>,\n            Optional  (str) session_state: <class 'str'>,\n            Optional  (str) max_nlri: <class 'int'>,\n            Optional  (str) up_time: <class 'str'>,\n            Optional  (str) min_nlri: <class 'int'>,\n            Optional  (str) down_time: <class 'str'>,\n            Optional  (str) refresh_activity_counters: {\n              'sent': {\n                Any  (str) *: <class 'int'>,\n                },\n              'received': {\n                Any  (str) *: <class 'int'>,\n                },\n              },\n            Optional  (str) local_policy_denied_prefixes_counters: {\n              'inbound': {\n                Any  (str) *: Any  (str) *,\n                },\n              'outbound': {\n                Any  (str) *: Any  (str) *,\n                },\n              },\n            Optional  (str) last_detected_dynamic_slow_peer: <class 'str'>,\n            Optional  (str) last_read: <class 'str'>,\n            Optional  (str) dynamic_slow_peer_recovered: <class 'str'>,\n            Optional  (str) last_write: <class 'str'>,\n            Optional  (str) last_sent_refresh_start_of_rib: <class 'str'>,\n            Optional  (str) current_time: <class 'str'>,\n            Optional  (str) last_received_refresh_start_of_rib: <class 'str'>,\n            Optional  (str) bgp_table_version: <class 'int'>,\n            Optional  (str) last_sent_refresh_end_of_rib: <class 'str'>,\n            Optional  (str) neighbor_version: <class 'str'>,\n            Optional  (str) last_received_refresh_end_of_rib: <class 'str'>,\n            Optional  (str) output_queue_size: <class 'int'>,\n            Optional  (str) refresh_out: <class 'int'>,\n            Optional  (str) index: <class 'int'>,\n            Optional  (str) refresh_in: <class 'int'>,\n            Optional  (str) advertise_bit: <class 'int'>,\n            Optional  (str) route_reflector_client: <class 'bool'>,\n            Optional  (str) update_group_member: <class 'int'>,\n            Optional  (str) community_attribute_sent: <class 'bool'>,\n            Optional  (str) extended_community_attribute_sent: <class 'bool'>,\n            Optional  (str) prefix_activity_counters: {\n              'sent': {\n                Any  (str) *: Any  (str) *,\n                },\n              'received': {\n                Any  (str) *: Any  (str) *,\n                },\n              },\n            Optional  (str) suppress_ldp_signaling: <class 'bool'>,\n            Optional  (str) slow_peer_detection: <class 'bool'>,\n            Optional  (str) slow_peer_split_update_group_dynamic: <class 'bool'>,\n            },\n          },\n        'bgp_neighbor_counters': {\n          'messages': {\n            'sent': {\n              'notifications': <class 'int'>,\n              'route_refresh': <class 'int'>,\n              'total': <class 'int'>,\n              'opens': <class 'int'>,\n              'keepalives': <class 'int'>,\n              'updates': <class 'int'>,\n              },\n            'in_queue_depth': <class 'int'>,\n            'received': {\n              'notifications': <class 'int'>,\n              'route_refresh': <class 'int'>,\n              'total': <class 'int'>,\n              'opens': <class 'int'>,\n              'keepalives': <class 'int'>,\n              'updates': <class 'int'>,\n              },\n            'out_queue_depth': <class 'int'>,\n            },\n          },\n        'bgp_negotiated_keepalive_timers': {\n          'keepalive_interval': <class 'int'>,\n          'hold_time': <class 'int'>,\n          Optional  (str) min_holdtime: <class 'int'>,\n          },\n        'link': <class 'str'>,\n        'router_id': <class 'str'>,\n        Optional  (str) bgp_session_transport: {\n          Optional  (str) enqueued_packets: {\n            'mis_ordered_packet': <class 'int'>,\n            'input_packet': <class 'int'>,\n            'retransmit_packet': <class 'int'>,\n            },\n          Optional  (str) iss: <class 'int'>,\n          Optional  (str) snduna: <class 'int'>,\n          'connection': {\n            Optional  (str) reset_reason: <class 'str'>,\n            'dropped': <class 'int'>,\n            'established': <class 'int'>,\n            'last_reset': <class 'str'>,\n            },\n          Optional  (str) sndnxt: <class 'int'>,\n          Optional  (str) irs: <class 'int'>,\n          'address_tracking_status': <class 'str'>,\n          Optional  (str) sndwnd: <class 'int'>,\n          Optional  (str) snd_scale: <class 'int'>,\n          Optional  (str) maxrcvwnd: <class 'int'>,\n          Optional  (str) rcvwnd: <class 'int'>,\n          Optional  (str) rcv_scale: <class 'int'>,\n          Optional  (str) delrcvwnd: <class 'int'>,\n          Optional  (str) srtt: <class 'int'>,\n          'min_time_between_advertisement_runs': <class 'int'>,\n          Optional  (str) rtto: <class 'int'>,\n          Optional  (str) rtv: <class 'int'>,\n          Optional  (str) krtt: <class 'int'>,\n          Optional  (str) min_rtt: <class 'int'>,\n          Optional  (str) max_rtt: <class 'int'>,\n          Optional  (str) ack_hold: <class 'int'>,\n          Optional  (str) uptime: <class 'int'>,\n          Optional  (str) sent_idletime: <class 'int'>,\n          Optional  (str) receive_idletime: <class 'int'>,\n          Optional  (str) tcp_connection: <class 'bool'>,\n          Optional  (str) status_flags: <class 'str'>,\n          Optional  (str) option_flags: <class 'str'>,\n          Optional  (str) ip_precedence_value: <class 'int'>,\n          'tcp_path_mtu_discovery': <class 'str'>,\n          Optional  (str) transport: {\n            'local_port': <class 'str'>,\n            'local_host': <class 'str'>,\n            'foreign_port': <class 'str'>,\n            Optional  (str) mss: <class 'int'>,\n            'foreign_host': <class 'str'>,\n            },\n          Optional  (str) datagram: {\n            'datagram_sent': {\n              'second_congestion': <class 'int'>,\n              'with_data': <class 'int'>,\n              'retransmit': <class 'int'>,\n              'partialack': <class 'int'>,\n              'value': <class 'int'>,\n              'fastretransmit': <class 'int'>,\n              'total_data': <class 'int'>,\n              },\n            'datagram_received': {\n              'out_of_order': <class 'int'>,\n              'with_data': <class 'int'>,\n              'total_data': <class 'int'>,\n              'value': <class 'int'>,\n              },\n            },\n          Optional  (str) graceful_restart: <class 'str'>,\n          Optional  (str) packet_fast_path: <class 'int'>,\n          Optional  (str) gr_restart_time: <class 'int'>,\n          Optional  (str) packet_fast_processed: <class 'int'>,\n          Optional  (str) gr_stalepath_time: <class 'int'>,\n          Optional  (str) packet_slow_path: <class 'int'>,\n          Optional  (str) connection_state: <class 'str'>,\n          Optional  (str) fast_lock_acquisition_failures: <class 'int'>,\n          Optional  (str) io_status: <class 'int'>,\n          Optional  (str) lock_slow_path: <class 'int'>,\n          Optional  (str) unread_input_bytes: <class 'int'>,\n          Optional  (str) tcp_semaphore: <class 'str'>,\n          Optional  (str) ecn_connection: <class 'str'>,\n          Optional  (str) tcp_semaphore_status: <class 'str'>,\n          Optional  (str) minimum_incoming_ttl: <class 'int'>,\n          Optional  (str) sso: <class 'bool'>,\n          Optional  (str) outgoing_ttl: <class 'int'>,\n          Optional  (str) rcvnxt: <class 'int'>,\n          Optional  (str) connection_tableid: <class 'int'>,\n          'rib_route_ip': <class 'str'>,\n          Optional  (str) maximum_output_segment_queue_size: <class 'int'>,\n          },\n        'remote_as': <class 'int'>,\n        'bgp_version': <class 'int'>,\n        'session_state': <class 'str'>,\n        'shutdown': <class 'bool'>,\n        Optional  (str) local_as: <class 'int'>,\n        'bgp_negotiated_capabilities': {\n          'four_octets_asn': <class 'str'>,\n          Optional  (str) vpnv4_unicast: <class 'str'>,\n          Optional  (str) graceful_restart: <class 'str'>,\n          'route_refresh': <class 'str'>,\n          Optional  (str) vpnv6_unicast: <class 'str'>,\n          'stateful_switchover': <class 'str'>,\n          Optional  (str) ipv4_unicast: <class 'str'>,\n          Optional  (str) remote_restart_timer: <class 'int'>,\n          Optional  (str) ipv6_unicast: <class 'str'>,\n          Optional  (str) l2vpn_vpls: <class 'str'>,\n          Optional  (str) l2vpn_evpn: <class 'str'>,\n          Optional  (str) vpnv4_multicast: <class 'str'>,\n          Optional  (str) multisession: <class 'str'>,\n          Optional  (str) graceful_restart_af_advertised_by_peer: <class 'list'>,\n          Optional  (str) vpnv6_multicast: <class 'str'>,\n          'enhanced_refresh': <class 'str'>,\n          Optional  (str) mvpnv4_multicast: <class 'str'>,\n          Optional  (str) mvpnv6_multicast: <class 'str'>,\n          },\n        Optional  (str) description: <class 'str'>,\n        },\n      },\n    },\n  },\n}", "doc": "\n    Parser for show bgp all neighbors\n    ", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_bgp.py#L75", "class": "ShowBgpAllNeighbors", "module_name": "show_bgp"}, "iosxe": {"uid": "show_bgp_address_family_all_neighbors_neighbor", "schema": "{\nOptional  (str) list_of_neighbors: <class 'list'>,\n'vrf': {\n  Any  (str) *: {\n    'neighbor': {\n      Any  (str) *: {\n        Optional  (str) bgp_event_timer: {\n          'starts': {\n            Any  (str) *: <class 'int'>,\n            },\n          'wakeups': {\n            Any  (str) *: <class 'int'>,\n            },\n          'next': {\n            Any  (str) *: <class 'str'>,\n            },\n          },\n        'address_family': {\n          Any  (str) *: {\n            Optional  (str) refresh_epoch: <class 'int'>,\n            Optional  (str) session_state: <class 'str'>,\n            Optional  (str) max_nlri: <class 'int'>,\n            Optional  (str) up_time: <class 'str'>,\n            Optional  (str) min_nlri: <class 'int'>,\n            Optional  (str) down_time: <class 'str'>,\n            Optional  (str) refresh_activity_counters: {\n              'sent': {\n                Any  (str) *: <class 'int'>,\n                },\n              'received': {\n                Any  (str) *: <class 'int'>,\n                },\n              },\n            Optional  (str) local_policy_denied_prefixes_counters: {\n              'inbound': {\n                Any  (str) *: Any  (str) *,\n                },\n              'outbound': {\n                Any  (str) *: Any  (str) *,\n                },\n              },\n            Optional  (str) last_detected_dynamic_slow_peer: <class 'str'>,\n            Optional  (str) last_read: <class 'str'>,\n            Optional  (str) dynamic_slow_peer_recovered: <class 'str'>,\n            Optional  (str) last_write: <class 'str'>,\n            Optional  (str) last_sent_refresh_start_of_rib: <class 'str'>,\n            Optional  (str) current_time: <class 'str'>,\n            Optional  (str) last_received_refresh_start_of_rib: <class 'str'>,\n            Optional  (str) bgp_table_version: <class 'int'>,\n            Optional  (str) last_sent_refresh_end_of_rib: <class 'str'>,\n            Optional  (str) neighbor_version: <class 'str'>,\n            Optional  (str) last_received_refresh_end_of_rib: <class 'str'>,\n            Optional  (str) output_queue_size: <class 'int'>,\n            Optional  (str) refresh_out: <class 'int'>,\n            Optional  (str) index: <class 'int'>,\n            Optional  (str) refresh_in: <class 'int'>,\n            Optional  (str) advertise_bit: <class 'int'>,\n            Optional  (str) route_reflector_client: <class 'bool'>,\n            Optional  (str) update_group_member: <class 'int'>,\n            Optional  (str) community_attribute_sent: <class 'bool'>,\n            Optional  (str) extended_community_attribute_sent: <class 'bool'>,\n            Optional  (str) prefix_activity_counters: {\n              'sent': {\n                Any  (str) *: Any  (str) *,\n                },\n              'received': {\n                Any  (str) *: Any  (str) *,\n                },\n              },\n            Optional  (str) suppress_ldp_signaling: <class 'bool'>,\n            Optional  (str) slow_peer_detection: <class 'bool'>,\n            Optional  (str) slow_peer_split_update_group_dynamic: <class 'bool'>,\n            },\n          },\n        'bgp_neighbor_counters': {\n          'messages': {\n            'sent': {\n              'notifications': <class 'int'>,\n              'route_refresh': <class 'int'>,\n              'total': <class 'int'>,\n              'opens': <class 'int'>,\n              'keepalives': <class 'int'>,\n              'updates': <class 'int'>,\n              },\n            'in_queue_depth': <class 'int'>,\n            'received': {\n              'notifications': <class 'int'>,\n              'route_refresh': <class 'int'>,\n              'total': <class 'int'>,\n              'opens': <class 'int'>,\n              'keepalives': <class 'int'>,\n              'updates': <class 'int'>,\n              },\n            'out_queue_depth': <class 'int'>,\n            },\n          },\n        'bgp_negotiated_keepalive_timers': {\n          'keepalive_interval': <class 'int'>,\n          'hold_time': <class 'int'>,\n          Optional  (str) min_holdtime: <class 'int'>,\n          },\n        'link': <class 'str'>,\n        'router_id': <class 'str'>,\n        Optional  (str) bgp_session_transport: {\n          Optional  (str) enqueued_packets: {\n            'mis_ordered_packet': <class 'int'>,\n            'input_packet': <class 'int'>,\n            'retransmit_packet': <class 'int'>,\n            },\n          Optional  (str) iss: <class 'int'>,\n          Optional  (str) snduna: <class 'int'>,\n          'connection': {\n            Optional  (str) reset_reason: <class 'str'>,\n            'dropped': <class 'int'>,\n            'established': <class 'int'>,\n            'last_reset': <class 'str'>,\n            },\n          Optional  (str) sndnxt: <class 'int'>,\n          Optional  (str) irs: <class 'int'>,\n          'address_tracking_status': <class 'str'>,\n          Optional  (str) sndwnd: <class 'int'>,\n          Optional  (str) snd_scale: <class 'int'>,\n          Optional  (str) maxrcvwnd: <class 'int'>,\n          Optional  (str) rcvwnd: <class 'int'>,\n          Optional  (str) rcv_scale: <class 'int'>,\n          Optional  (str) delrcvwnd: <class 'int'>,\n          Optional  (str) srtt: <class 'int'>,\n          'min_time_between_advertisement_runs': <class 'int'>,\n          Optional  (str) rtto: <class 'int'>,\n          Optional  (str) rtv: <class 'int'>,\n          Optional  (str) krtt: <class 'int'>,\n          Optional  (str) min_rtt: <class 'int'>,\n          Optional  (str) max_rtt: <class 'int'>,\n          Optional  (str) ack_hold: <class 'int'>,\n          Optional  (str) uptime: <class 'int'>,\n          Optional  (str) sent_idletime: <class 'int'>,\n          Optional  (str) receive_idletime: <class 'int'>,\n          Optional  (str) tcp_connection: <class 'bool'>,\n          Optional  (str) status_flags: <class 'str'>,\n          Optional  (str) option_flags: <class 'str'>,\n          Optional  (str) ip_precedence_value: <class 'int'>,\n          'tcp_path_mtu_discovery': <class 'str'>,\n          Optional  (str) transport: {\n            'local_port': <class 'str'>,\n            'local_host': <class 'str'>,\n            'foreign_port': <class 'str'>,\n            Optional  (str) mss: <class 'int'>,\n            'foreign_host': <class 'str'>,\n            },\n          Optional  (str) datagram: {\n            'datagram_sent': {\n              'second_congestion': <class 'int'>,\n              'with_data': <class 'int'>,\n              'retransmit': <class 'int'>,\n              'partialack': <class 'int'>,\n              'value': <class 'int'>,\n              'fastretransmit': <class 'int'>,\n              'total_data': <class 'int'>,\n              },\n            'datagram_received': {\n              'out_of_order': <class 'int'>,\n              'with_data': <class 'int'>,\n              'total_data': <class 'int'>,\n              'value': <class 'int'>,\n              },\n            },\n          Optional  (str) graceful_restart: <class 'str'>,\n          Optional  (str) packet_fast_path: <class 'int'>,\n          Optional  (str) gr_restart_time: <class 'int'>,\n          Optional  (str) packet_fast_processed: <class 'int'>,\n          Optional  (str) gr_stalepath_time: <class 'int'>,\n          Optional  (str) packet_slow_path: <class 'int'>,\n          Optional  (str) connection_state: <class 'str'>,\n          Optional  (str) fast_lock_acquisition_failures: <class 'int'>,\n          Optional  (str) io_status: <class 'int'>,\n          Optional  (str) lock_slow_path: <class 'int'>,\n          Optional  (str) unread_input_bytes: <class 'int'>,\n          Optional  (str) tcp_semaphore: <class 'str'>,\n          Optional  (str) ecn_connection: <class 'str'>,\n          Optional  (str) tcp_semaphore_status: <class 'str'>,\n          Optional  (str) minimum_incoming_ttl: <class 'int'>,\n          Optional  (str) sso: <class 'bool'>,\n          Optional  (str) outgoing_ttl: <class 'int'>,\n          Optional  (str) rcvnxt: <class 'int'>,\n          Optional  (str) connection_tableid: <class 'int'>,\n          'rib_route_ip': <class 'str'>,\n          Optional  (str) maximum_output_segment_queue_size: <class 'int'>,\n          },\n        'remote_as': <class 'int'>,\n        'bgp_version': <class 'int'>,\n        'session_state': <class 'str'>,\n        'shutdown': <class 'bool'>,\n        Optional  (str) local_as: <class 'int'>,\n        'bgp_negotiated_capabilities': {\n          'four_octets_asn': <class 'str'>,\n          Optional  (str) vpnv4_unicast: <class 'str'>,\n          Optional  (str) graceful_restart: <class 'str'>,\n          'route_refresh': <class 'str'>,\n          Optional  (str) vpnv6_unicast: <class 'str'>,\n          'stateful_switchover': <class 'str'>,\n          Optional  (str) ipv4_unicast: <class 'str'>,\n          Optional  (str) remote_restart_timer: <class 'int'>,\n          Optional  (str) ipv6_unicast: <class 'str'>,\n          Optional  (str) l2vpn_vpls: <class 'str'>,\n          Optional  (str) l2vpn_evpn: <class 'str'>,\n          Optional  (str) vpnv4_multicast: <class 'str'>,\n          Optional  (str) multisession: <class 'str'>,\n          Optional  (str) graceful_restart_af_advertised_by_peer: <class 'list'>,\n          Optional  (str) vpnv6_multicast: <class 'str'>,\n          'enhanced_refresh': <class 'str'>,\n          Optional  (str) mvpnv4_multicast: <class 'str'>,\n          Optional  (str) mvpnv6_multicast: <class 'str'>,\n          },\n        Optional  (str) description: <class 'str'>,\n        },\n      },\n    },\n  },\n}", "doc": " Parser for:\n        * 'show bgp all neighbors'\n        * 'show bgp all neighbors {neighbor}'\n        * 'show bgp {address_family} all neighbors'\n        * 'show bgp {address_family} all neighbors {neighbor}'\n    ", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_bgp.py#L3680", "class": "ShowBgpAllNeighbors", "module_name": "show_bgp"}}, "show monitor capture": {"iosxe": {"uid": "show_monitor_capture", "schema": "{\n'status_information': {\n  Any  (str) *: {\n    'filter_details': {\n      'filter_details_type': <class 'str'>,\n      Optional  (str) protocol: <class 'str'>,\n      Optional  (str) destination_ip: <class 'str'>,\n      Optional  (str) source_ip: <class 'str'>,\n      },\n    Optional  (str) file_details: {\n      Optional  (str) file_number: <class 'int'>,\n      Optional  (str) file_name: <class 'str'>,\n      Optional  (str) size_of_buffer: <class 'int'>,\n      Optional  (str) file_size: <class 'int'>,\n      },\n    'limit_details': {\n      Optional  (str) maximum_packets_number: <class 'int'>,\n      'packet_sampling_rate': <class 'int'>,\n      Optional  (str) packets_per_second: <class 'int'>,\n      'packets_capture_duaration': <class 'int'>,\n      'packets_number': <class 'int'>,\n      'packets_size': <class 'int'>,\n      },\n    'buffer_details': {\n      'buffer_type': <class 'str'>,\n      Optional  (str) buffer_size: <class 'int'>,\n      },\n    'target_type': {\n      'interface': <class 'str'>,\n      'direction': <class 'str'>,\n      'status': <class 'str'>,\n      },\n    },\n  },\n}", "doc": " Parser for\n      \"show monitor capture\"\n    ", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_monitor.py#L324", "class": "ShowMonitorCapture", "module_name": "show_monitor"}}, "show lacp {channel_group} neighbor": {"iosxe": {"uid": "show_lacp_channel_group_neighbor", "schema": "{\n'interfaces': {\n  Any  (str) *: {\n    'protocol': <class 'str'>,\n    'name': <class 'str'>,\n    'members': {\n      Any  (str) *: {\n        'age': <class 'int'>,\n        'partner_id': <class 'str'>,\n        'port_num': <class 'int'>,\n        'oper_key': <class 'int'>,\n        'lacp_port_priority': <class 'int'>,\n        'admin_key': <class 'int'>,\n        'interface': <class 'str'>,\n        'port_state': <class 'int'>,\n        'activity': <class 'str'>,\n        'flags': <class 'str'>,\n        },\n      },\n    },\n  },\n}", "doc": "Parser for :\n      show lacp neighbor", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_lag.py#L312", "class": "ShowLacpNeighbor", "module_name": "show_lag"}}, "show ntp status": {"ios": {"uid": "show_ntp_status", "schema": "{\n'clock_state': {\n  'system_status': {\n    Optional  (str) uptime: <class 'str'>,\n    Optional  (str) resolution: <class 'int'>,\n    Optional  (str) status: <class 'str'>,\n    Optional  (str) stratum: <class 'int'>,\n    Optional  (str) drift: <class 'str'>,\n    Optional  (str) offset: <class 'float'>,\n    Optional  (str) refid: <class 'str'>,\n    Optional  (str) rootdelay: <class 'float'>,\n    Optional  (str) assoc_id: <class 'int'>,\n    Optional  (str) rootdispersion: <class 'float'>,\n    Optional  (str) nom_freq: <class 'float'>,\n    Optional  (str) last_update: <class 'str'>,\n    Optional  (str) act_freq: <class 'float'>,\n    Optional  (str) leap_status: <class 'str'>,\n    Optional  (str) reftime: <class 'str'>,\n    Optional  (str) poll: <class 'int'>,\n    Optional  (str) precision: Or (<class 'int'>, <class 'str'>),\n    Optional  (str) peerdispersion: <class 'float'>,\n    },\n  },\n}", "doc": "Parser for: show ntp status", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_ntp.py#L159", "class": "ShowNtpStatus", "module_name": "show_ntp"}, "junos": {"uid": "show_ntp_status", "schema": "{\n'clock_state': {\n  'system_status': {\n    Optional  (str) poll: <class 'int'>,\n    Optional  (str) precision: <class 'float'>,\n    Optional  (str) processor: <class 'str'>,\n    Optional  (str) recent_event: <class 'str'>,\n    'status': <class 'str'>,\n    Optional  (str) refid: <class 'str'>,\n    Optional  (str) reftime: <class 'str'>,\n    Optional  (str) rootdelay: <class 'float'>,\n    Optional  (str) rootdispersion: <class 'float'>,\n    Optional  (str) stability: <class 'float'>,\n    Optional  (str) state: <class 'int'>,\n    Optional  (str) ass_id: <class 'int'>,\n    Optional  (str) stratum: <class 'int'>,\n    Optional  (str) synch_source: <class 'str'>,\n    Optional  (str) clock: <class 'str'>,\n    Optional  (str) system: <class 'str'>,\n    Optional  (str) frequency: <class 'float'>,\n    Optional  (str) version: <class 'str'>,\n    Optional  (str) jitter: <class 'float'>,\n    Optional  (str) leap: <class 'str'>,\n    Optional  (str) leap_status: <class 'str'>,\n    Optional  (str) number_of_events: <class 'int'>,\n    Optional  (str) offset: <class 'float'>,\n    Optional  (str) peer: <class 'int'>,\n    },\n  },\n}", "doc": "Parser for: show ntp status", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/junos/show_ntp.py#L187", "class": "ShowNtpStatus", "module_name": "show_ntp"}, "iosxr": {"uid": "show_ntp_status", "schema": "{\n'clock_state': {\n  'system_status': {\n    Optional  (str) leap_status: <class 'str'>,\n    Optional  (str) peerdispersion: <class 'float'>,\n    Optional  (str) precision: Or (<class 'int'>, <class 'str'>),\n    Optional  (str) uptime: <class 'str'>,\n    Optional  (str) last_update: <class 'str'>,\n    Optional  (str) resolution: <class 'int'>,\n    'status': <class 'str'>,\n    Optional  (str) reftime: <class 'str'>,\n    Optional  (str) stratum: <class 'int'>,\n    Optional  (str) poll: <class 'int'>,\n    Optional  (str) offset: <class 'float'>,\n    Optional  (str) rootdelay: <class 'float'>,\n    Optional  (str) refid: <class 'str'>,\n    Optional  (str) drift: <class 'str'>,\n    Optional  (str) nom_freq: <class 'float'>,\n    Optional  (str) rootdispersion: <class 'float'>,\n    Optional  (str) act_freq: <class 'float'>,\n    },\n  },\n}", "doc": "Parser for: show ntp status", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_ntp.py#L332", "class": "ShowNtpStatus", "module_name": "show_ntp"}, "iosxe": {"uid": "show_ntp_status", "schema": "{\n'clock_state': {\n  'system_status': {\n    Optional  (str) uptime: <class 'str'>,\n    Optional  (str) resolution: <class 'int'>,\n    Optional  (str) status: <class 'str'>,\n    Optional  (str) stratum: <class 'int'>,\n    Optional  (str) drift: <class 'str'>,\n    Optional  (str) offset: <class 'float'>,\n    Optional  (str) refid: <class 'str'>,\n    Optional  (str) rootdelay: <class 'float'>,\n    Optional  (str) assoc_id: <class 'int'>,\n    Optional  (str) rootdispersion: <class 'float'>,\n    Optional  (str) nom_freq: <class 'float'>,\n    Optional  (str) last_update: <class 'str'>,\n    Optional  (str) act_freq: <class 'float'>,\n    Optional  (str) leap_status: <class 'str'>,\n    Optional  (str) reftime: <class 'str'>,\n    Optional  (str) poll: <class 'int'>,\n    Optional  (str) precision: Or (<class 'int'>, <class 'str'>),\n    Optional  (str) peerdispersion: <class 'float'>,\n    },\n  },\n}", "doc": "Parser for: show ntp status", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_ntp.py#L187", "class": "ShowNtpStatus", "module_name": "show_ntp"}}, "show ip bgp neighbors {neighbor} routes": {"iosxe": {"uid": "show_ip_bgp_neighbors_neighbor_routes", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'neighbor': {\n      Any  (str) *: {\n        'address_family': {\n          Any  (str) *: {\n            Optional  (str) local_router_id: <class 'str'>,\n            Optional  (str) routes: {\n              Optional  (Any) Any  (str) *: {\n                Optional  (str) index: {\n                  Optional  (Any) Any  (str) *: {\n                    Optional  (str) path_type: <class 'str'>,\n                    Optional  (str) origin_codes: <class 'str'>,\n                    Optional  (str) metric: <class 'int'>,\n                    Optional  (str) localprf: <class 'int'>,\n                    Optional  (str) next_hop: <class 'str'>,\n                    Optional  (str) weight: <class 'int'>,\n                    Optional  (str) status_codes: <class 'str'>,\n                    Optional  (str) path: <class 'str'>,\n                    },\n                  },\n                },\n              },\n            Optional  (str) route_distinguisher: <class 'str'>,\n            Optional  (str) bgp_table_version: <class 'int'>,\n            Optional  (str) default_vrf: <class 'str'>,\n            },\n          },\n        },\n      },\n    },\n  },\n}", "doc": " Parser for:\n        * 'show ip bgp neighbors {neighbor} routes'\n        * 'show ip bgp {address_family} neighbors {neighbor} routes'\n    ", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_bgp.py#L5799", "class": "ShowIpBgpNeighborsRoutes", "module_name": "show_bgp"}}, "show routing {ip} vrf all": {"nxos": {"uid": "show_routing_ip_vrf_all", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    Optional  (str) address_family: {\n      Any  (str) *: {\n        'ip': {\n          Any  (str) *: {\n            'mbest_num': <class 'str'>,\n            'ubest_num': <class 'str'>,\n            Optional  (str) attach: <class 'str'>,\n            Optional  (str) best_route: {\n              Optional  (Any) Any  (str) *: {\n                Optional  (str) nexthop: {\n                  Optional  (Any) Any  (str) *: {\n                    Optional  (str) protocol: {\n                      Optional  (Any) Any  (str) *: {\n                        Optional  (str) attribute: <class 'str'>,\n                        Optional  (str) tag: <class 'str'>,\n                        Optional  (str) tunnelid: <class 'str'>,\n                        Optional  (str) encap: <class 'str'>,\n                        Optional  (str) route_table: <class 'str'>,\n                        Optional  (str) interface: <class 'str'>,\n                        Optional  (str) mpls: <class 'bool'>,\n                        Optional  (str) evpn: <class 'bool'>,\n                        Optional  (str) metric: <class 'str'>,\n                        Optional  (str) uptime: <class 'str'>,\n                        Optional  (str) segid: <class 'int'>,\n                        Optional  (str) mpls_vpn: <class 'bool'>,\n                        Optional  (str) protocol_id: <class 'str'>,\n                        Optional  (str) preference: <class 'str'>,\n                        },\n                      },\n                    },\n                  },\n                },\n              },\n            },\n          },\n        Optional  (str) bgp_distance_extern_as: <class 'int'>,\n        Optional  (str) bgp_distance_internal_as: <class 'int'>,\n        Optional  (str) bgp_distance_local: <class 'int'>,\n        },\n      },\n    },\n  },\n}", "doc": "Parser for show ip routing vrf all", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_routing.py#L74", "class": "ShowRoutingVrfAll", "module_name": "show_routing"}}, "show ip bgp {address_family} neighbors {neighbor} advertised-routes": {"iosxe": {"uid": "show_ip_bgp_address_family_neighbors_neighbor_advertised-routes", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'neighbor': {\n      Any  (str) *: {\n        'address_family': {\n          Any  (str) *: {\n            Optional  (str) route_distinguisher: <class 'str'>,\n            Optional  (str) bgp_table_version: <class 'int'>,\n            Optional  (str) default_vrf: <class 'str'>,\n            Optional  (str) local_router_id: <class 'str'>,\n            Optional  (str) advertised: {\n              Optional  (Any) Any  (str) *: {\n                Optional  (str) index: {\n                  Optional  (Any) Any  (str) *: {\n                    Optional  (str) origin_codes: <class 'str'>,\n                    Optional  (str) metric: <class 'int'>,\n                    Optional  (str) localprf: <class 'int'>,\n                    Optional  (str) next_hop: <class 'str'>,\n                    Optional  (str) weight: <class 'int'>,\n                    Optional  (str) status_codes: <class 'str'>,\n                    Optional  (str) path: <class 'str'>,\n                    Optional  (str) path_type: <class 'str'>,\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "doc": " Parser for:\n        * 'show ip bgp neighbors {neighbor} advertised-routes'\n        * 'show ip bgp {address_family} neighbors {neighbor} advertised-routes'\n    ", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_bgp.py#L4555", "class": "ShowIpBgpNeighborsAdvertisedRoutes", "module_name": "show_bgp"}}, "show ip bgp all summary": {"iosxe": {"uid": "show_ip_bgp_all_summary", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    Optional  (str) neighbor: {\n      Any  (str) *: {\n        'address_family': {\n          Any  (str) *: {\n            Optional  (str) prefixes: {\n              'total_entries': <class 'int'>,\n              'memory_usage': <class 'int'>,\n              },\n            'msg_rcvd': <class 'int'>,\n            Optional  (str) path: {\n              'total_entries': <class 'int'>,\n              'memory_usage': <class 'int'>,\n              },\n            Optional  (str) cache_entries: {\n              Any  (str) *: {\n                'total_entries': <class 'int'>,\n                'memory_usage': <class 'int'>,\n                },\n              },\n            'input_queue': <class 'int'>,\n            'state_pfxrcd': <class 'str'>,\n            Optional  (str) entries: {\n              Any  (str) *: {\n                'total_entries': <class 'int'>,\n                'memory_usage': <class 'int'>,\n                },\n              },\n            Optional  (str) community_entries: {\n              'total_entries': <class 'int'>,\n              'memory_usage': <class 'int'>,\n              },\n            Optional  (str) attribute_entries: <class 'str'>,\n            'as': <class 'int'>,\n            Optional  (str) total_memory: <class 'int'>,\n            Optional  (str) activity_prefixes: <class 'str'>,\n            'tbl_ver': <class 'int'>,\n            Optional  (str) activity_paths: <class 'str'>,\n            Optional  (str) scan_interval: <class 'int'>,\n            'output_queue': <class 'int'>,\n            'msg_sent': <class 'int'>,\n            Optional  (str) route_identifier: <class 'str'>,\n            Optional  (str) local_as: <class 'int'>,\n            'up_down': <class 'str'>,\n            Optional  (str) bgp_table_version: <class 'int'>,\n            'version': <class 'int'>,\n            Optional  (str) routing_table_version: <class 'int'>,\n            },\n          },\n        },\n      },\n    },\n  },\n'bgp_id': <class 'int'>,\n}", "doc": " Parser for:\n        * 'show ip bgp all summary'\n        * 'show ip bgp {address_family} all summary'\n    ", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_bgp.py#L2176", "class": "ShowIpBgpAllSummary", "module_name": "show_bgp"}}, "show ip pim group-range vrf {vrf}": {"nxos": {"uid": "show_ip_pim_group-range_vrf_vrf", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'address_family': {\n      Any  (str) *: {\n        'sm': {\n          Any  (str) *: {\n            Any  (str) *: {\n              Optional  (str) rp_address: <class 'str'>,\n              Optional  (str) shared_tree_only: <class 'str'>,\n              Optional  (str) mode: <class 'str'>,\n              Optional  (str) action: <class 'str'>,\n              Optional  (str) range: <class 'str'>,\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "doc": "parser for:\n        show ip pim group-range\n        show ip pim group-range vrf <vrf>", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_pim.py#L3060", "class": "ShowIpPimGroupRange", "module_name": "show_pim"}}, "show bgp vrf all all nexthop-database": {"nxos": {"uid": "show_bgp_vrf_all_all_nexthop-database", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'address_family': {\n      Any  (str) *: {\n        'af_nexthop_trigger_enable': <class 'bool'>,\n        'nexthop_trigger_delay_non_critical': <class 'int'>,\n        'nexthop_trigger_delay_critical': <class 'int'>,\n        Optional  (str) next_hop: {\n          Any  (str) *: {\n            Optional  (str) refcount: <class 'int'>,\n            Optional  (str) reachable: <class 'bool'>,\n            Optional  (str) labeled: <class 'bool'>,\n            Optional  (str) flags: <class 'str'>,\n            Optional  (str) filtered: <class 'bool'>,\n            Optional  (str) multipath: <class 'str'>,\n            Optional  (str) igp_cost: <class 'int'>,\n            Optional  (str) rib_route: <class 'str'>,\n            Optional  (str) igp_route_type: <class 'int'>,\n            Optional  (str) igp_preference: <class 'int'>,\n            Optional  (str) rnh_epoch: <class 'int'>,\n            Optional  (str) attached: <class 'bool'>,\n            Optional  (str) attached_nexthop: {\n              Any  (str) *: {\n                'attached_nexthop_interface': <class 'str'>,\n                },\n              },\n            Optional  (str) local: <class 'bool'>,\n            Optional  (str) pending_update: <class 'bool'>,\n            Optional  (str) resolve_time: <class 'str'>,\n            Optional  (str) metric_next_advertise: <class 'str'>,\n            },\n          },\n        },\n      },\n    },\n  },\n}", "doc": "Parser for show bgp vrf all all nexthop-database", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_bgp.py#L3181", "class": "ShowBgpVrfAllAllNextHopDatabase", "module_name": "show_bgp"}}, "show ip interface {interface}": {"ios": {"uid": "show_ip_interface_interface", "schema": "{\nAny  (str) *: {\n  Optional  (str) out_access_list: <class 'str'>,\n  Optional  (str) split_horizon: <class 'bool'>,\n  Optional  (str) policy_routing: <class 'bool'>,\n  Optional  (str) ip_fast_switching: <class 'bool'>,\n  Optional  (str) network_address_translation: <class 'bool'>,\n  Optional  (str) ip_cef_switching: <class 'bool'>,\n  Optional  (str) router_discovery: <class 'bool'>,\n  Optional  (str) ip_flow_switching: <class 'bool'>,\n  Optional  (str) input_features: <class 'list'>,\n  Optional  (str) mtu: <class 'int'>,\n  'oper_status': <class 'str'>,\n  Optional  (str) ip_cef_switching_turbo_vector: <class 'bool'>,\n  Optional  (str) icmp: {\n    Optional  (str) unreachables: <class 'str'>,\n    Optional  (str) mask_replies: <class 'str'>,\n    Optional  (str) redirects: <class 'str'>,\n    },\n  Optional  (str) rtp_ip_header_compression: <class 'bool'>,\n  Optional  (str) ip_access_violation_accounting: <class 'bool'>,\n  Optional  (str) address_determined_by: <class 'str'>,\n  Optional  (str) probe_proxy_name_replies: <class 'bool'>,\n  Optional  (str) ip_null_turbo_vector: <class 'bool'>,\n  Optional  (str) ipv4: {\n    Any  (str) *: {\n      'ip': <class 'str'>,\n      Optional  (str) prefix_length: <class 'str'>,\n      Optional  (str) broadcase_address: <class 'str'>,\n      Optional  (str) secondary: <class 'bool'>,\n      },\n    },\n  Optional  (str) multicast_groups: <class 'list'>,\n  Optional  (str) vrf: <class 'str'>,\n  'enabled': <class 'bool'>,\n  Optional  (str) inbound_common_access_list: <class 'str'>,\n  Optional  (str) tcp_ip_header_compression: <class 'bool'>,\n  Optional  (str) helper_address: <class 'str'>,\n  Optional  (str) directed_broadcast_forwarding: <class 'bool'>,\n  Optional  (str) sevurity_level: <class 'str'>,\n  Optional  (str) ip_multicast_distributed_fast_switching: <class 'bool'>,\n  Optional  (str) bgp_policy_mapping: <class 'bool'>,\n  Optional  (str) local_proxy_arp: <class 'bool'>,\n  Optional  (str) unicast_routing_topologies: {\n    'topology': {\n      Any  (str) *: {\n        'status': <class 'str'>,\n        },\n      },\n    },\n  Optional  (str) ip_multicast_fast_switching: <class 'bool'>,\n  Optional  (str) out_common_access_list: <class 'str'>,\n  Optional  (str) ip_output_packet_accounting: <class 'bool'>,\n  Optional  (str) wccp: {\n    Optional  (str) redirect_outbound: <class 'bool'>,\n    Optional  (str) redirect_exclude: <class 'bool'>,\n    Optional  (str) redirect_inbound: <class 'bool'>,\n    },\n  Optional  (str) inbound_access_list: <class 'str'>,\n  Optional  (str) ip_route_cache_flags: <class 'list'>,\n  Optional  (str) proxy_arp: <class 'bool'>,\n  },\n}", "doc": "Parser for show ip interface", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_interface.py#L58", "class": "ShowIpInterface", "module_name": "show_interface"}, "iosxe": {"uid": "show_ip_interface_interface", "schema": "{\nAny  (str) *: {\n  Optional  (str) out_access_list: <class 'str'>,\n  Optional  (str) split_horizon: <class 'bool'>,\n  Optional  (str) policy_routing: <class 'bool'>,\n  Optional  (str) ip_fast_switching: <class 'bool'>,\n  Optional  (str) network_address_translation: <class 'bool'>,\n  Optional  (str) ip_cef_switching: <class 'bool'>,\n  Optional  (str) router_discovery: <class 'bool'>,\n  Optional  (str) ip_flow_switching: <class 'bool'>,\n  Optional  (str) input_features: <class 'list'>,\n  Optional  (str) mtu: <class 'int'>,\n  'oper_status': <class 'str'>,\n  Optional  (str) ip_cef_switching_turbo_vector: <class 'bool'>,\n  Optional  (str) icmp: {\n    Optional  (str) unreachables: <class 'str'>,\n    Optional  (str) mask_replies: <class 'str'>,\n    Optional  (str) redirects: <class 'str'>,\n    },\n  Optional  (str) rtp_ip_header_compression: <class 'bool'>,\n  Optional  (str) ip_access_violation_accounting: <class 'bool'>,\n  Optional  (str) address_determined_by: <class 'str'>,\n  Optional  (str) probe_proxy_name_replies: <class 'bool'>,\n  Optional  (str) ip_null_turbo_vector: <class 'bool'>,\n  Optional  (str) ipv4: {\n    Any  (str) *: {\n      'ip': <class 'str'>,\n      Optional  (str) prefix_length: <class 'str'>,\n      Optional  (str) broadcase_address: <class 'str'>,\n      Optional  (str) secondary: <class 'bool'>,\n      },\n    },\n  Optional  (str) multicast_groups: <class 'list'>,\n  Optional  (str) vrf: <class 'str'>,\n  'enabled': <class 'bool'>,\n  Optional  (str) inbound_common_access_list: <class 'str'>,\n  Optional  (str) tcp_ip_header_compression: <class 'bool'>,\n  Optional  (str) helper_address: <class 'str'>,\n  Optional  (str) directed_broadcast_forwarding: <class 'bool'>,\n  Optional  (str) sevurity_level: <class 'str'>,\n  Optional  (str) ip_multicast_distributed_fast_switching: <class 'bool'>,\n  Optional  (str) bgp_policy_mapping: <class 'bool'>,\n  Optional  (str) local_proxy_arp: <class 'bool'>,\n  Optional  (str) unicast_routing_topologies: {\n    'topology': {\n      Any  (str) *: {\n        'status': <class 'str'>,\n        },\n      },\n    },\n  Optional  (str) ip_multicast_fast_switching: <class 'bool'>,\n  Optional  (str) out_common_access_list: <class 'str'>,\n  Optional  (str) ip_output_packet_accounting: <class 'bool'>,\n  Optional  (str) wccp: {\n    Optional  (str) redirect_outbound: <class 'bool'>,\n    Optional  (str) redirect_exclude: <class 'bool'>,\n    Optional  (str) redirect_inbound: <class 'bool'>,\n    },\n  Optional  (str) inbound_access_list: <class 'str'>,\n  Optional  (str) ip_route_cache_flags: <class 'list'>,\n  Optional  (str) proxy_arp: <class 'bool'>,\n  },\n}", "doc": "Parser for show ip interface\n                  show ip interface <interface>", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_interface.py#L1558", "class": "ShowIpInterface", "module_name": "show_interface"}}, "show service-group traffic-stats": {"iosxe": {"uid": "show_service-group_traffic-stats", "schema": "{\n'group': {\n  Any  (str) *: {\n    'pkts_out': <class 'int'>,\n    'pkts_in': <class 'int'>,\n    'bytes_out': <class 'int'>,\n    'bytes_in': <class 'int'>,\n    },\n  },\n}", "doc": "Parser for :\n        show service-group traffic-stats\n        show service-group traffic-stats <group> ", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_service.py#L246", "class": "ShowServiceGroupTrafficStats", "module_name": "show_service"}}, "show l2vpn xconnect detail": {"iosxr": {"uid": "show_l2vpn_xconnect_detail", "schema": null, "doc": "Parser for show l2vpn xconnect detail", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_xconnect.py#L143", "class": "ShowL2VpnXconnectDetail", "module_name": "show_xconnect"}}, "show mpls forwarding-table": {"iosxe": {"uid": "show_mpls_forwarding-table", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'local_label': {\n      Any  (str) *: {\n        'outgoing_label_or_vc': {\n          Any  (str) *: {\n            'prefix_or_tunnel_id': {\n              Any  (str) *: {\n                Optional  (str) outgoing_interface: {\n                  Any  (str) *: {\n                    Optional  (str) lstack: <class 'str'>,\n                    Optional  (str) via: <class 'str'>,\n                    Optional  (str) broadcast: <class 'bool'>,\n                    'bytes_label_switched': <class 'int'>,\n                    Optional  (str) mru: <class 'int'>,\n                    Optional  (str) label_stack: <class 'str'>,\n                    Optional  (str) next_hop: <class 'str'>,\n                    Optional  (str) encaps: <class 'int'>,\n                    Optional  (str) vpn_route: <class 'str'>,\n                    Optional  (str) output_feature_configured: <class 'bool'>,\n                    Optional  (str) tsp_tunnel: <class 'bool'>,\n                    Optional  (str) mac: <class 'int'>,\n                    Optional  (str) load_sharing: {\n                      Optional  (str) slots: <class 'list'>,\n                      'method': <class 'str'>,\n                      },\n                    Optional  (str) macstr: <class 'str'>,\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "doc": "Parser for\n        show mpls forwarding-table\n        show mpls forwarding-table detail\n        show mpls forwarding-table vrf <vrf>\n        show mpls forwarding-table vrf <vrf> detail", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_mpls.py#L1794", "class": "ShowMplsForwardingTable", "module_name": "show_mpls"}}, "show environment": {"iosxe": {"uid": "show_environment", "schema": "{\n'minor_alarms': <class 'int'>,\n'major_alarms': <class 'int'>,\n'critical_larams': <class 'int'>,\n'slot': {\n  Any  (str) *: {\n    'sensor': {\n      Any  (str) *: {\n        'state': <class 'str'>,\n        'reading': <class 'str'>,\n        },\n      },\n    },\n  },\n}", "doc": "Parser for show environment", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_platform.py#L2294", "class": "ShowEnvironment", "module_name": "show_platform"}}, "show pim vrf {vrf} {af} rpf summary": {"iosxr": {"uid": "show_pim_vrf_vrf_af_rpf_summary", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'address_family': {\n      Any  (str) *: {\n        Optional  (str) isis_mcast_topology: <class 'bool'>,\n        Optional  (str) default_rpf_table: <class 'str'>,\n        Optional  (str) table: {\n          Any  (str) *: {\n            'rib_table_converged': <class 'bool'>,\n            'pim_rpf_registrations': <class 'int'>,\n            },\n          },\n        Optional  (str) mo_frr_flow_based: <class 'bool'>,\n        Optional  (str) rib_convergence_timeout: <class 'str'>,\n        Optional  (str) mo_frr_rib: <class 'bool'>,\n        Optional  (str) rib_convergence_time_left: <class 'str'>,\n        Optional  (str) rump_mu_rib: <class 'bool'>,\n        Optional  (str) multipath: <class 'bool'>,\n        Optional  (str) pim_rpfs_registered: <class 'str'>,\n        },\n      },\n    },\n  },\n}", "doc": "\n    Parser for show pim vrf <vrf> <address_family> rpf summary\n    For checking any output with the parser ,below mandatory keys have to be in cli command.\n\n    - vrf\n    - af\n    ", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_pim.py#L366", "class": "ShowPimVrfRpfSummary", "module_name": "show_pim"}}, "show ip pim neighbor": {"nxos": {"uid": "show_ip_pim_neighbor", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'interfaces': {\n      Any  (str) *: {\n        'address_family': {\n          Any  (str) *: {\n            'neighbors': {\n              Any  (str) *: {\n                'interface': <class 'str'>,\n                'dr_priority': <class 'int'>,\n                'up_time': <class 'str'>,\n                'expiration': <class 'str'>,\n                'bidir_capable': <class 'bool'>,\n                'bfd_status': <class 'bool'>,\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "doc": "Parser for:\n        show ip pim neighbor\n        show ip pim neighbor vrf <vrf>", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_pim.py#L2587", "class": "ShowIpPimNeighbor", "module_name": "show_pim"}}, "show bgp {address_family} neighbors {neighbor}": {"iosxe": {"uid": "show_bgp_address_family_neighbors_neighbor", "schema": "{\nOptional  (str) list_of_neighbors: <class 'list'>,\n'vrf': {\n  Any  (str) *: {\n    'neighbor': {\n      Any  (str) *: {\n        Optional  (str) bgp_event_timer: {\n          'starts': {\n            Any  (str) *: <class 'int'>,\n            },\n          'wakeups': {\n            Any  (str) *: <class 'int'>,\n            },\n          'next': {\n            Any  (str) *: <class 'str'>,\n            },\n          },\n        'address_family': {\n          Any  (str) *: {\n            Optional  (str) refresh_epoch: <class 'int'>,\n            Optional  (str) session_state: <class 'str'>,\n            Optional  (str) max_nlri: <class 'int'>,\n            Optional  (str) up_time: <class 'str'>,\n            Optional  (str) min_nlri: <class 'int'>,\n            Optional  (str) down_time: <class 'str'>,\n            Optional  (str) refresh_activity_counters: {\n              'sent': {\n                Any  (str) *: <class 'int'>,\n                },\n              'received': {\n                Any  (str) *: <class 'int'>,\n                },\n              },\n            Optional  (str) local_policy_denied_prefixes_counters: {\n              'inbound': {\n                Any  (str) *: Any  (str) *,\n                },\n              'outbound': {\n                Any  (str) *: Any  (str) *,\n                },\n              },\n            Optional  (str) last_detected_dynamic_slow_peer: <class 'str'>,\n            Optional  (str) last_read: <class 'str'>,\n            Optional  (str) dynamic_slow_peer_recovered: <class 'str'>,\n            Optional  (str) last_write: <class 'str'>,\n            Optional  (str) last_sent_refresh_start_of_rib: <class 'str'>,\n            Optional  (str) current_time: <class 'str'>,\n            Optional  (str) last_received_refresh_start_of_rib: <class 'str'>,\n            Optional  (str) bgp_table_version: <class 'int'>,\n            Optional  (str) last_sent_refresh_end_of_rib: <class 'str'>,\n            Optional  (str) neighbor_version: <class 'str'>,\n            Optional  (str) last_received_refresh_end_of_rib: <class 'str'>,\n            Optional  (str) output_queue_size: <class 'int'>,\n            Optional  (str) refresh_out: <class 'int'>,\n            Optional  (str) index: <class 'int'>,\n            Optional  (str) refresh_in: <class 'int'>,\n            Optional  (str) advertise_bit: <class 'int'>,\n            Optional  (str) route_reflector_client: <class 'bool'>,\n            Optional  (str) update_group_member: <class 'int'>,\n            Optional  (str) community_attribute_sent: <class 'bool'>,\n            Optional  (str) extended_community_attribute_sent: <class 'bool'>,\n            Optional  (str) prefix_activity_counters: {\n              'sent': {\n                Any  (str) *: Any  (str) *,\n                },\n              'received': {\n                Any  (str) *: Any  (str) *,\n                },\n              },\n            Optional  (str) suppress_ldp_signaling: <class 'bool'>,\n            Optional  (str) slow_peer_detection: <class 'bool'>,\n            Optional  (str) slow_peer_split_update_group_dynamic: <class 'bool'>,\n            },\n          },\n        'bgp_neighbor_counters': {\n          'messages': {\n            'sent': {\n              'notifications': <class 'int'>,\n              'route_refresh': <class 'int'>,\n              'total': <class 'int'>,\n              'opens': <class 'int'>,\n              'keepalives': <class 'int'>,\n              'updates': <class 'int'>,\n              },\n            'in_queue_depth': <class 'int'>,\n            'received': {\n              'notifications': <class 'int'>,\n              'route_refresh': <class 'int'>,\n              'total': <class 'int'>,\n              'opens': <class 'int'>,\n              'keepalives': <class 'int'>,\n              'updates': <class 'int'>,\n              },\n            'out_queue_depth': <class 'int'>,\n            },\n          },\n        'bgp_negotiated_keepalive_timers': {\n          'keepalive_interval': <class 'int'>,\n          'hold_time': <class 'int'>,\n          Optional  (str) min_holdtime: <class 'int'>,\n          },\n        'link': <class 'str'>,\n        'router_id': <class 'str'>,\n        Optional  (str) bgp_session_transport: {\n          Optional  (str) enqueued_packets: {\n            'mis_ordered_packet': <class 'int'>,\n            'input_packet': <class 'int'>,\n            'retransmit_packet': <class 'int'>,\n            },\n          Optional  (str) iss: <class 'int'>,\n          Optional  (str) snduna: <class 'int'>,\n          'connection': {\n            Optional  (str) reset_reason: <class 'str'>,\n            'dropped': <class 'int'>,\n            'established': <class 'int'>,\n            'last_reset': <class 'str'>,\n            },\n          Optional  (str) sndnxt: <class 'int'>,\n          Optional  (str) irs: <class 'int'>,\n          'address_tracking_status': <class 'str'>,\n          Optional  (str) sndwnd: <class 'int'>,\n          Optional  (str) snd_scale: <class 'int'>,\n          Optional  (str) maxrcvwnd: <class 'int'>,\n          Optional  (str) rcvwnd: <class 'int'>,\n          Optional  (str) rcv_scale: <class 'int'>,\n          Optional  (str) delrcvwnd: <class 'int'>,\n          Optional  (str) srtt: <class 'int'>,\n          'min_time_between_advertisement_runs': <class 'int'>,\n          Optional  (str) rtto: <class 'int'>,\n          Optional  (str) rtv: <class 'int'>,\n          Optional  (str) krtt: <class 'int'>,\n          Optional  (str) min_rtt: <class 'int'>,\n          Optional  (str) max_rtt: <class 'int'>,\n          Optional  (str) ack_hold: <class 'int'>,\n          Optional  (str) uptime: <class 'int'>,\n          Optional  (str) sent_idletime: <class 'int'>,\n          Optional  (str) receive_idletime: <class 'int'>,\n          Optional  (str) tcp_connection: <class 'bool'>,\n          Optional  (str) status_flags: <class 'str'>,\n          Optional  (str) option_flags: <class 'str'>,\n          Optional  (str) ip_precedence_value: <class 'int'>,\n          'tcp_path_mtu_discovery': <class 'str'>,\n          Optional  (str) transport: {\n            'local_port': <class 'str'>,\n            'local_host': <class 'str'>,\n            'foreign_port': <class 'str'>,\n            Optional  (str) mss: <class 'int'>,\n            'foreign_host': <class 'str'>,\n            },\n          Optional  (str) datagram: {\n            'datagram_sent': {\n              'second_congestion': <class 'int'>,\n              'with_data': <class 'int'>,\n              'retransmit': <class 'int'>,\n              'partialack': <class 'int'>,\n              'value': <class 'int'>,\n              'fastretransmit': <class 'int'>,\n              'total_data': <class 'int'>,\n              },\n            'datagram_received': {\n              'out_of_order': <class 'int'>,\n              'with_data': <class 'int'>,\n              'total_data': <class 'int'>,\n              'value': <class 'int'>,\n              },\n            },\n          Optional  (str) graceful_restart: <class 'str'>,\n          Optional  (str) packet_fast_path: <class 'int'>,\n          Optional  (str) gr_restart_time: <class 'int'>,\n          Optional  (str) packet_fast_processed: <class 'int'>,\n          Optional  (str) gr_stalepath_time: <class 'int'>,\n          Optional  (str) packet_slow_path: <class 'int'>,\n          Optional  (str) connection_state: <class 'str'>,\n          Optional  (str) fast_lock_acquisition_failures: <class 'int'>,\n          Optional  (str) io_status: <class 'int'>,\n          Optional  (str) lock_slow_path: <class 'int'>,\n          Optional  (str) unread_input_bytes: <class 'int'>,\n          Optional  (str) tcp_semaphore: <class 'str'>,\n          Optional  (str) ecn_connection: <class 'str'>,\n          Optional  (str) tcp_semaphore_status: <class 'str'>,\n          Optional  (str) minimum_incoming_ttl: <class 'int'>,\n          Optional  (str) sso: <class 'bool'>,\n          Optional  (str) outgoing_ttl: <class 'int'>,\n          Optional  (str) rcvnxt: <class 'int'>,\n          Optional  (str) connection_tableid: <class 'int'>,\n          'rib_route_ip': <class 'str'>,\n          Optional  (str) maximum_output_segment_queue_size: <class 'int'>,\n          },\n        'remote_as': <class 'int'>,\n        'bgp_version': <class 'int'>,\n        'session_state': <class 'str'>,\n        'shutdown': <class 'bool'>,\n        Optional  (str) local_as: <class 'int'>,\n        'bgp_negotiated_capabilities': {\n          'four_octets_asn': <class 'str'>,\n          Optional  (str) vpnv4_unicast: <class 'str'>,\n          Optional  (str) graceful_restart: <class 'str'>,\n          'route_refresh': <class 'str'>,\n          Optional  (str) vpnv6_unicast: <class 'str'>,\n          'stateful_switchover': <class 'str'>,\n          Optional  (str) ipv4_unicast: <class 'str'>,\n          Optional  (str) remote_restart_timer: <class 'int'>,\n          Optional  (str) ipv6_unicast: <class 'str'>,\n          Optional  (str) l2vpn_vpls: <class 'str'>,\n          Optional  (str) l2vpn_evpn: <class 'str'>,\n          Optional  (str) vpnv4_multicast: <class 'str'>,\n          Optional  (str) multisession: <class 'str'>,\n          Optional  (str) graceful_restart_af_advertised_by_peer: <class 'list'>,\n          Optional  (str) vpnv6_multicast: <class 'str'>,\n          'enhanced_refresh': <class 'str'>,\n          Optional  (str) mvpnv4_multicast: <class 'str'>,\n          Optional  (str) mvpnv6_multicast: <class 'str'>,\n          },\n        Optional  (str) description: <class 'str'>,\n        },\n      },\n    },\n  },\n}", "doc": " Parser for:\n        * 'show bgp neighbors'\n        * 'show bgp neighbors {neighbor}'\n        * 'show bgp {address_family} neighbors'\n        * 'show bgp {address_family} neighbors {neighbor}'\n        * 'show bgp {address_family} vrf {vrf} neighbors'\n        * 'show bgp {address_family} vrf {vrf} neighbors {neighbor}'\n    ", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_bgp.py#L3739", "class": "ShowBgpNeighbors", "module_name": "show_bgp"}}, "show ip ospf virtual-links": {"ios": {"uid": "show_ip_ospf_virtual-links", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'address_family': {\n      Any  (str) *: {\n        'instance': {\n          Any  (str) *: {\n            'areas': {\n              Any  (str) *: {\n                'virtual_links': {\n                  Any  (str) *: {\n                    Optional  (str) hello_timer: <class 'str'>,\n                    Optional  (str) interface: <class 'str'>,\n                    'transit_area_id': <class 'str'>,\n                    Optional  (str) dcbitless_lsa_count: <class 'int'>,\n                    Optional  (str) donotage_lsa: <class 'str'>,\n                    Optional  (str) adjacency_state: <class 'str'>,\n                    'state': <class 'str'>,\n                    'router_id': <class 'str'>,\n                    'demand_circuit': <class 'bool'>,\n                    Optional  (str) index: <class 'str'>,\n                    Optional  (str) first: <class 'str'>,\n                    Optional  (str) next: <class 'str'>,\n                    Optional  (str) last_retransmission_max_length: <class 'int'>,\n                    'name': <class 'str'>,\n                    Optional  (str) last_retransmission_max_scan: <class 'int'>,\n                    'transmit_delay': <class 'int'>,\n                    Optional  (str) last_retransmission_scan_length: <class 'int'>,\n                    Optional  (str) hello_interval: <class 'int'>,\n                    Optional  (str) last_retransmission_scan_time: <class 'int'>,\n                    Optional  (str) total_retransmission: <class 'int'>,\n                    Optional  (str) dead_interval: <class 'int'>,\n                    Optional  (str) retrans_qlen: <class 'int'>,\n                    Optional  (str) wait_interval: <class 'int'>,\n                    Optional  (str) retransmit_interval: <class 'int'>,\n                    'link_state': <class 'str'>,\n                    Optional  (str) topology: {\n                      Any  (str) *: {\n                        'cost': <class 'int'>,\n                        'shutdown': <class 'bool'>,\n                        'name': <class 'str'>,\n                        'disabled': <class 'bool'>,\n                        },\n                      },\n                    Optional  (str) cost: <class 'int'>,\n                    Optional  (str) ttl_security: {\n                      Optional  (str) hops: <class 'int'>,\n                      'enable': <class 'bool'>,\n                      },\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "doc": null, "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_ospf.py#L62", "class": "ShowIpOspfVirtualLinks", "module_name": "show_ospf"}, "nxos": {"uid": "show_ip_ospf_virtual-links", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'address_family': {\n      Any  (str) *: {\n        'instance': {\n          Any  (str) *: {\n            'areas': {\n              Any  (str) *: {\n                'virtual_links': {\n                  Any  (str) *: {\n                    'cost': <class 'int'>,\n                    'retransmit_interval': <class 'int'>,\n                    'transit_area_id': <class 'str'>,\n                    'remote_addr': <class 'str'>,\n                    Optional  (str) wait_timer: <class 'int'>,\n                    'interface': <class 'str'>,\n                    'router_id': <class 'str'>,\n                    'statistics': {\n                      'link_scope_lsa_count': <class 'int'>,\n                      'link_scope_lsa_cksum_sum': <class 'int'>,\n                      },\n                    'state': <class 'str'>,\n                    Optional  (str) neighbors: {\n                      Any  (str) *: {\n                        'state': <class 'str'>,\n                        'hello_option': <class 'str'>,\n                        'dead_timer': <class 'str'>,\n                        'neighbor_router_id': <class 'str'>,\n                        'last_change': <class 'str'>,\n                        'address': <class 'str'>,\n                        'last_non_hello_received': <class 'str'>,\n                        'dbd_option': <class 'str'>,\n                        'statistics': {\n                          Optional  (str) nbr_retrans_qlen: <class 'str'>,\n                          'nbr_event_count': <class 'int'>,\n                          },\n                        },\n                      },\n                    'hello_interval': <class 'int'>,\n                    Optional  (str) hello_timer: <class 'str'>,\n                    Optional  (str) unnumbered_interface: <class 'str'>,\n                    'link_state': <class 'str'>,\n                    Optional  (str) unnumbered_ip_address: <class 'str'>,\n                    Optional  (str) nbr_total: <class 'int'>,\n                    'name': <class 'str'>,\n                    Optional  (str) nbr_flood: <class 'int'>,\n                    'transmit_delay': <class 'int'>,\n                    Optional  (str) nbr_adjs: <class 'int'>,\n                    'backbone_area_id': <class 'str'>,\n                    'interface_type': <class 'str'>,\n                    'dead_interval': <class 'int'>,\n                    'wait_interval': <class 'int'>,\n                    Optional  (str) authentication: {\n                      Optional  (str) key_id: <class 'str'>,\n                      Optional  (str) auth_trailer_key_chain: {\n                        'key_chain': <class 'str'>,\n                        Optional  (str) status: <class 'str'>,\n                        },\n                      Optional  (str) auth_trailer_key: {\n                        'crypto_algorithm': <class 'str'>,\n                        },\n                      },\n                    'index': <class 'int'>,\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "doc": "Parser for:\n        show ip ospf virtual-links\n        show ip ospf virtual-links vrf <vrf>", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_ospf.py#L1505", "class": "ShowIpOspfVirtualLinks", "module_name": "show_ospf"}, "iosxe": {"uid": "show_ip_ospf_virtual-links", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'address_family': {\n      Any  (str) *: {\n        'instance': {\n          Any  (str) *: {\n            'areas': {\n              Any  (str) *: {\n                'virtual_links': {\n                  Any  (str) *: {\n                    Optional  (str) hello_timer: <class 'str'>,\n                    Optional  (str) interface: <class 'str'>,\n                    'transit_area_id': <class 'str'>,\n                    Optional  (str) dcbitless_lsa_count: <class 'int'>,\n                    Optional  (str) donotage_lsa: <class 'str'>,\n                    Optional  (str) adjacency_state: <class 'str'>,\n                    'state': <class 'str'>,\n                    'router_id': <class 'str'>,\n                    'demand_circuit': <class 'bool'>,\n                    Optional  (str) index: <class 'str'>,\n                    Optional  (str) first: <class 'str'>,\n                    Optional  (str) next: <class 'str'>,\n                    Optional  (str) last_retransmission_max_length: <class 'int'>,\n                    'name': <class 'str'>,\n                    Optional  (str) last_retransmission_max_scan: <class 'int'>,\n                    'transmit_delay': <class 'int'>,\n                    Optional  (str) last_retransmission_scan_length: <class 'int'>,\n                    Optional  (str) hello_interval: <class 'int'>,\n                    Optional  (str) last_retransmission_scan_time: <class 'int'>,\n                    Optional  (str) total_retransmission: <class 'int'>,\n                    Optional  (str) dead_interval: <class 'int'>,\n                    Optional  (str) retrans_qlen: <class 'int'>,\n                    Optional  (str) wait_interval: <class 'int'>,\n                    Optional  (str) retransmit_interval: <class 'int'>,\n                    'link_state': <class 'str'>,\n                    Optional  (str) topology: {\n                      Any  (str) *: {\n                        'cost': <class 'int'>,\n                        'shutdown': <class 'bool'>,\n                        'name': <class 'str'>,\n                        'disabled': <class 'bool'>,\n                        },\n                      },\n                    Optional  (str) cost: <class 'int'>,\n                    Optional  (str) ttl_security: {\n                      Optional  (str) hops: <class 'int'>,\n                      'enable': <class 'bool'>,\n                      },\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "doc": " Parser for:\n        * 'show ip ospf virtual-links'\n    ", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_ospf.py#L2629", "class": "ShowIpOspfVirtualLinks", "module_name": "show_ospf"}}, "show mpls ldp bindings vrf {vrf}": {"iosxe": {"uid": "show_mpls_ldp_bindings_vrf_vrf", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'lib_entry': {\n      Any  (str) *: {\n        Optional  (str) remote_binding: {\n          'label': {\n            Any  (str) *: {\n              'lsr_id': {\n                Any  (str) *: {\n                  'label_space_id': {\n                    Any  (str) *: {\n                      Optional  (str) checkpointed: <class 'bool'>,\n                      },\n                    },\n                  },\n                },\n              },\n            },\n          },\n        Optional  (str) checkpoint: <class 'str'>,\n        Optional  (str) label_binding: {\n          'label': {\n            Any  (str) *: {\n              Optional  (str) owner: <class 'str'>,\n              Optional  (str) advertised_to: <class 'list'>,\n              },\n            },\n          },\n        'rev': <class 'str'>,\n        },\n      },\n    },\n  },\n}", "doc": "\n       Parser for show mpls ldp bindings\n                  show mpls ldp bindings vrf <vrf>\n                  show mpls ldp bindings all\n                  show mpls ldp bindings all detail\n       ", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_mpls.py#L1073", "class": "ShowMplsLdpBindings", "module_name": "show_mpls"}}, "show ip ospf database external": {"ios": {"uid": "show_ip_ospf_database_external", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'address_family': {\n      Any  (str) *: {\n        'instance': {\n          Any  (str) *: {\n            Optional  (str) areas: {\n              Any  (str) *: {\n                'database': {\n                  'lsa_types': {\n                    Any  (str) *: {\n                      'lsa_type': <class 'int'>,\n                      'lsas': {\n                        Any  (str) *: {\n                          'ospfv2': {\n                            'header': {\n                              'age': <class 'int'>,\n                              'option_desc': <class 'str'>,\n                              'adv_router': <class 'str'>,\n                              'seq_num': <class 'str'>,\n                              'length': <class 'int'>,\n                              'checksum': <class 'str'>,\n                              'type': <class 'int'>,\n                              'lsa_id': <class 'str'>,\n                              'option': <class 'str'>,\n                              Optional  (str) routing_bit_enable: <class 'bool'>,\n                              },\n                            'body': {\n                              'external': {\n                                'topologies': {\n                                  Any  (str) *: {\n                                    Optional  (str) flags: <class 'str'>,\n                                    'forwarding_address': <class 'str'>,\n                                    'external_route_tag': <class 'int'>,\n                                    'metric': <class 'int'>,\n                                    'mt_id': <class 'int'>,\n                                    },\n                                  },\n                                'network_mask': <class 'str'>,\n                                },\n                              },\n                            },\n                          'lsa_id': <class 'str'>,\n                          'adv_router': <class 'str'>,\n                          },\n                        },\n                      },\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "doc": " Parser for \"show ip ospf database external\" ", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_ospf.py#L77", "class": "ShowIpOspfDatabaseExternal", "module_name": "show_ospf"}, "iosxe": {"uid": "show_ip_ospf_database_external", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'address_family': {\n      Any  (str) *: {\n        'instance': {\n          Any  (str) *: {\n            Optional  (str) areas: {\n              Any  (str) *: {\n                'database': {\n                  'lsa_types': {\n                    Any  (str) *: {\n                      'lsa_type': <class 'int'>,\n                      'lsas': {\n                        Any  (str) *: {\n                          'ospfv2': {\n                            'header': {\n                              'age': <class 'int'>,\n                              'option_desc': <class 'str'>,\n                              'adv_router': <class 'str'>,\n                              'seq_num': <class 'str'>,\n                              'length': <class 'int'>,\n                              'checksum': <class 'str'>,\n                              'type': <class 'int'>,\n                              'lsa_id': <class 'str'>,\n                              'option': <class 'str'>,\n                              Optional  (str) routing_bit_enable: <class 'bool'>,\n                              },\n                            'body': {\n                              'external': {\n                                'topologies': {\n                                  Any  (str) *: {\n                                    Optional  (str) flags: <class 'str'>,\n                                    'forwarding_address': <class 'str'>,\n                                    'external_route_tag': <class 'int'>,\n                                    'metric': <class 'int'>,\n                                    'mt_id': <class 'int'>,\n                                    },\n                                  },\n                                'network_mask': <class 'str'>,\n                                },\n                              },\n                            },\n                          'lsa_id': <class 'str'>,\n                          'adv_router': <class 'str'>,\n                          },\n                        },\n                      },\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "doc": " Parser for:\n        * 'show ip ospf database external'\n    ", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_ospf.py#L4262", "class": "ShowIpOspfDatabaseExternal", "module_name": "show_ospf"}}, "show route-map all": {"ios": {"uid": "show_route-map_all", "schema": "{\nAny  (str) *: {\n  'statements': {\n    Any  (str) *: {\n      'actions': {\n        Optional  (str) set_next_hop_self: <class 'bool'>,\n        Optional  (str) match_tag_list: <class 'str'>,\n        Optional  (str) set_next_hop: <class 'list'>,\n        Optional  (str) set_local_pref: <class 'int'>,\n        Optional  (str) set_community_delete: <class 'str'>,\n        Optional  (str) set_community_additive: <class 'bool'>,\n        Optional  (str) set_community_no_advertise: <class 'bool'>,\n        Optional  (str) set_next_hop_v6: <class 'list'>,\n        Optional  (str) set_community_no_export: <class 'bool'>,\n        Optional  (str) set_as_path_group: <class 'list'>,\n        'route_disposition': <class 'str'>,\n        Optional  (str) set_ext_community_rt: <class 'list'>,\n        Optional  (str) set_tag: <class 'str'>,\n        Optional  (str) set_ext_community_soo: <class 'str'>,\n        Optional  (str) set_ext_community_vpn: <class 'str'>,\n        Optional  (str) set_metric_type: <class 'str'>,\n        Optional  (str) set_ext_community_rt_additive: <class 'bool'>,\n        Optional  (str) set_ext_community_delete: <class 'str'>,\n        Optional  (str) set_level: <class 'str'>,\n        Optional  (str) set_metric: <class 'int'>,\n        Optional  (str) set_weight: <class 'int'>,\n        Optional  (str) set_as_path_prepend: <class 'str'>,\n        Optional  (str) set_community: <class 'str'>,\n        Optional  (str) set_distance: <class 'int'>,\n        Optional  (str) set_ospf_metric_type: <class 'str'>,\n        Optional  (str) set_route_origin: <class 'str'>,\n        Optional  (str) set_as_path_prepend_repeat_n: <class 'int'>,\n        },\n      'conditions': {\n        Optional  (str) match_med_eq: <class 'int'>,\n        Optional  (str) match_prefix_list_v6: <class 'str'>,\n        Optional  (str) match_as_path_list: <class 'str'>,\n        Optional  (str) match_interface: <class 'str'>,\n        Optional  (str) match_nexthop_in: <class 'list'>,\n        Optional  (str) match_prefix_list: <class 'str'>,\n        Optional  (str) match_local_pref_eq: <class 'int'>,\n        Optional  (str) match_as_number_list: <class 'str'>,\n        Optional  (str) match_community_list: <class 'str'>,\n        Optional  (str) match_level_eq: <class 'str'>,\n        Optional  (str) match_route_type: <class 'str'>,\n        Optional  (str) match_nexthop_in_v6: <class 'list'>,\n        Optional  (str) match_ext_community_list: <class 'str'>,\n        },\n      },\n    },\n  Optional  (str) description: <class 'str'>,\n  },\n}", "doc": "Parser for show route-map all", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_route_map.py#L10", "class": "ShowRouteMapAll", "module_name": "show_route_map"}, "iosxe": {"uid": "show_route-map_all", "schema": "{\nAny  (str) *: {\n  'statements': {\n    Any  (str) *: {\n      'actions': {\n        Optional  (str) set_next_hop_self: <class 'bool'>,\n        Optional  (str) match_tag_list: <class 'str'>,\n        Optional  (str) set_next_hop: <class 'list'>,\n        Optional  (str) set_local_pref: <class 'int'>,\n        Optional  (str) set_community_delete: <class 'str'>,\n        Optional  (str) set_community_additive: <class 'bool'>,\n        Optional  (str) set_community_no_advertise: <class 'bool'>,\n        Optional  (str) set_next_hop_v6: <class 'list'>,\n        Optional  (str) set_community_no_export: <class 'bool'>,\n        Optional  (str) set_as_path_group: <class 'list'>,\n        'route_disposition': <class 'str'>,\n        Optional  (str) set_ext_community_rt: <class 'list'>,\n        Optional  (str) set_tag: <class 'str'>,\n        Optional  (str) set_ext_community_soo: <class 'str'>,\n        Optional  (str) set_ext_community_vpn: <class 'str'>,\n        Optional  (str) set_metric_type: <class 'str'>,\n        Optional  (str) set_ext_community_rt_additive: <class 'bool'>,\n        Optional  (str) set_ext_community_delete: <class 'str'>,\n        Optional  (str) set_level: <class 'str'>,\n        Optional  (str) set_metric: <class 'int'>,\n        Optional  (str) set_weight: <class 'int'>,\n        Optional  (str) set_as_path_prepend: <class 'str'>,\n        Optional  (str) set_community: <class 'str'>,\n        Optional  (str) set_distance: <class 'int'>,\n        Optional  (str) set_ospf_metric_type: <class 'str'>,\n        Optional  (str) set_route_origin: <class 'str'>,\n        Optional  (str) set_as_path_prepend_repeat_n: <class 'int'>,\n        },\n      'conditions': {\n        Optional  (str) match_med_eq: <class 'int'>,\n        Optional  (str) match_prefix_list_v6: <class 'str'>,\n        Optional  (str) match_as_path_list: <class 'str'>,\n        Optional  (str) match_interface: <class 'str'>,\n        Optional  (str) match_nexthop_in: <class 'list'>,\n        Optional  (str) match_prefix_list: <class 'str'>,\n        Optional  (str) match_local_pref_eq: <class 'int'>,\n        Optional  (str) match_as_number_list: <class 'str'>,\n        Optional  (str) match_community_list: <class 'str'>,\n        Optional  (str) match_level_eq: <class 'str'>,\n        Optional  (str) match_route_type: <class 'str'>,\n        Optional  (str) match_nexthop_in_v6: <class 'list'>,\n        Optional  (str) match_ext_community_list: <class 'str'>,\n        },\n      },\n    },\n  Optional  (str) description: <class 'str'>,\n  },\n}", "doc": "Parser for show route-map all", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_route_map.py#L62", "class": "ShowRouteMapAll", "module_name": "show_route_map"}}, "show ipv6 pim interface {interface}": {"nxos": {"uid": "show_ipv6_pim_interface_interface", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'interfaces': {\n      Any  (str) *: {\n        'address_family': {\n          Any  (str) *: {\n            Optional  (str) dr_address: <class 'str'>,\n            Optional  (str) sm: {\n              Optional  (str) passive: <class 'bool'>,\n              },\n            Optional  (str) dr_priority: <class 'int'>,\n            Optional  (str) vpc_svi: <class 'bool'>,\n            Optional  (str) configured_dr_priority: <class 'int'>,\n            Optional  (str) auto_enabled: <class 'bool'>,\n            Optional  (str) neighbor_count: <class 'int'>,\n            Optional  (str) hello_interval: <class 'int'>,\n            Optional  (str) hello_expiration: <class 'str'>,\n            Optional  (str) neighbor_holdtime: <class 'int'>,\n            Optional  (str) dr_delay: <class 'int'>,\n            Optional  (str) bsr_border: <class 'bool'>,\n            Optional  (str) genid: <class 'str'>,\n            Optional  (str) hello_md5_ah_authentication: <class 'str'>,\n            Optional  (str) neighbor_filter: <class 'str'>,\n            Optional  (str) jp_inbound_policy: <class 'str'>,\n            Optional  (str) jp_outbound_policy: <class 'str'>,\n            Optional  (str) jp_interval: <class 'int'>,\n            Optional  (str) oper_status: <class 'str'>,\n            Optional  (str) statistics: {\n              Optional  (str) general: {\n                Optional  (str) graft_acks: <class 'str'>,\n                Optional  (str) hellos: <class 'str'>,\n                Optional  (str) df_offers: <class 'str'>,\n                Optional  (str) jps: <class 'str'>,\n                Optional  (str) df_winners: <class 'str'>,\n                Optional  (str) asserts: <class 'str'>,\n                Optional  (str) df_backoffs: <class 'str'>,\n                Optional  (str) grafts: <class 'str'>,\n                Optional  (str) df_passes: <class 'str'>,\n                },\n              Optional  (str) errors: {\n                Optional  (str) joins_received_with_wrong_rp: <class 'int'>,\n                Optional  (str) jps_filtered_by_inbound_policy: <class 'int'>,\n                Optional  (str) authentication_failed: <class 'int'>,\n                Optional  (str) packets_received_on_passiveinterface: <class 'int'>,\n                Optional  (str) joins_received_with_bidir_groups: <class 'int'>,\n                Optional  (str) packet_length_errors: <class 'int'>,\n                Optional  (str) bad_version_packets: <class 'int'>,\n                Optional  (str) joins_received_with_no_rp: <class 'int'>,\n                Optional  (str) jps_filtered_by_outbound_policy: <class 'int'>,\n                Optional  (str) packets_from_self: <class 'int'>,\n                Optional  (str) packets_from_non_neighbors: <class 'int'>,\n                Optional  (str) checksum: <class 'int'>,\n                Optional  (str) jps_received_on_rpf_interface: <class 'int'>,\n                Optional  (str) invalid_packet_types: <class 'int'>,\n                Optional  (str) invalid_df_subtypes: <class 'int'>,\n                Optional  (str) joins_received_with_ssm_groups: <class 'int'>,\n                },\n              Optional  (str) last_reset: <class 'str'>,\n              },\n            Optional  (str) jp_next_sending: <class 'int'>,\n            Optional  (str) link_status: <class 'str'>,\n            Optional  (str) admin_status: <class 'str'>,\n            Optional  (str) bfd: {\n              Optional  (str) enable: <class 'bool'>,\n              },\n            Optional  (str) address: <class 'list'>,\n            },\n          },\n        },\n      },\n    },\n  },\n}", "doc": "Parser for:\n        show ipv6 pim interface vrf <vrf>\n        show ipv6 pim interface\n        show ipv6 pim interface <interface>\n        show ipv6 pim interface <interface> vrf <vrf>", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_pim.py#L95", "class": "ShowIpv6PimInterface", "module_name": "show_pim"}}, "show vxlan": {"nxos": {"uid": "show_vxlan", "schema": "{\n'vlan': {\n  Any  (str) *: {\n    'vni': <class 'str'>,\n    },\n  },\n}", "doc": "Parser for show vxlan", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_vlan.py#L658", "class": "ShowVxlan", "module_name": "show_vlan"}}, "show running-config {feature} | inc {pip_str}": {"nxos": {"uid": "show_running-config_feature___inc_pip_str", "schema": "{\nOptional  (str) vrf: {\n  Any  (str) *: {\n    Optional  (str) address_family: {\n      Any  (str) *: {\n        Optional  (str) rp: {\n          Optional  (str) bsr: {\n            Any  (str) *: {\n              Optional  (str) priority: <class 'int'>,\n              Optional  (str) interval: <class 'int'>,\n              Optional  (str) interface: <class 'str'>,\n              Optional  (str) route_map: <class 'str'>,\n              Optional  (str) policy: <class 'str'>,\n              Optional  (str) prefix_list: <class 'str'>,\n              Optional  (str) mode: <class 'str'>,\n              },\n            },\n          Optional  (str) autorp: {\n            Optional  (str) send_rp_discovery: {\n              Optional  (str) scope: <class 'int'>,\n              'interface': <class 'str'>,\n              },\n            Optional  (str) send_rp_announce: {\n              Optional  (str) scope: <class 'int'>,\n              Optional  (str) bidir: <class 'bool'>,\n              Optional  (str) group_list: <class 'str'>,\n              Optional  (str) route_map: <class 'str'>,\n              Optional  (str) interface: <class 'str'>,\n              Optional  (str) prefix_list: <class 'str'>,\n              Optional  (str) group: <class 'str'>,\n              Optional  (str) interval: <class 'int'>,\n              },\n            Optional  (str) listener: <class 'bool'>,\n            },\n          Optional  (str) static_rp: {\n            Any  (str) *: {\n              Optional  (str) bidir: <class 'bool'>,\n              Optional  (str) policy_name: <class 'str'>,\n              Optional  (str) route_map: <class 'str'>,\n              Optional  (str) override: <class 'bool'>,\n              Optional  (str) prefix_list: <class 'str'>,\n              Optional  (str) policy: <class 'int'>,\n              },\n            },\n          },\n        },\n      },\n    },\n  },\nOptional  (str) feature_pim6: <class 'bool'>,\nOptional  (str) feature_pim: <class 'bool'>,\n}", "doc": "Parser for show running-config pim", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_pim.py#L4188", "class": "ShowRunningConfigPim", "module_name": "show_pim"}}, "show vdc current-vdc": {"nxos": {"uid": "show_vdc_current-vdc", "schema": "{\n'current_vdc': {\n  'id': <class 'str'>,\n  'name': <class 'str'>,\n  },\n}", "doc": "Parser for show vdc current-vdc", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_platform.py#L1260", "class": "ShowVdcCurrent", "module_name": "show_platform"}}, "show bgp {address_family} summary": {"iosxe": {"uid": "show_bgp_address_family_summary", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    Optional  (str) neighbor: {\n      Any  (str) *: {\n        'address_family': {\n          Any  (str) *: {\n            Optional  (str) prefixes: {\n              'total_entries': <class 'int'>,\n              'memory_usage': <class 'int'>,\n              },\n            'msg_rcvd': <class 'int'>,\n            Optional  (str) path: {\n              'total_entries': <class 'int'>,\n              'memory_usage': <class 'int'>,\n              },\n            Optional  (str) cache_entries: {\n              Any  (str) *: {\n                'total_entries': <class 'int'>,\n                'memory_usage': <class 'int'>,\n                },\n              },\n            'input_queue': <class 'int'>,\n            'state_pfxrcd': <class 'str'>,\n            Optional  (str) entries: {\n              Any  (str) *: {\n                'total_entries': <class 'int'>,\n                'memory_usage': <class 'int'>,\n                },\n              },\n            Optional  (str) community_entries: {\n              'total_entries': <class 'int'>,\n              'memory_usage': <class 'int'>,\n              },\n            Optional  (str) attribute_entries: <class 'str'>,\n            'as': <class 'int'>,\n            Optional  (str) total_memory: <class 'int'>,\n            Optional  (str) activity_prefixes: <class 'str'>,\n            'tbl_ver': <class 'int'>,\n            Optional  (str) activity_paths: <class 'str'>,\n            Optional  (str) scan_interval: <class 'int'>,\n            'output_queue': <class 'int'>,\n            'msg_sent': <class 'int'>,\n            Optional  (str) route_identifier: <class 'str'>,\n            Optional  (str) local_as: <class 'int'>,\n            'up_down': <class 'str'>,\n            Optional  (str) bgp_table_version: <class 'int'>,\n            'version': <class 'int'>,\n            Optional  (str) routing_table_version: <class 'int'>,\n            },\n          },\n        },\n      },\n    },\n  },\n'bgp_id': <class 'int'>,\n}", "doc": " Parser for:\n        * 'show bgp summary'\n        * 'show bgp {address_family} summary'\n        * 'show bgp {address_family} vrf {vrf} summary'\n        * 'show bgp {address_family} rd {rd} summary'\n    ", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_bgp.py#L2054", "class": "ShowBgpSummary", "module_name": "show_bgp"}}, "show ipv6 neighbor detail": {"nxos": {"uid": "show_ipv6_neighbor_detail", "schema": "{\n'interfaces': {\n  Any  (str) *: {\n    'neighbors': {\n      Any  (str) *: {\n        'ip': <class 'str'>,\n        'age': <class 'str'>,\n        'origin': <class 'str'>,\n        Optional  (str) byte_count: <class 'int'>,\n        Optional  (str) preference: <class 'int'>,\n        Optional  (str) best: <class 'str'>,\n        Optional  (str) packet_count: <class 'int'>,\n        Optional  (str) throttled: <class 'str'>,\n        'link_layer_address': <class 'str'>,\n        Optional  (str) physical_interface: <class 'str'>,\n        },\n      },\n    'interface': <class 'str'>,\n    },\n  },\n}", "doc": "Parser for :\n        show ipv6 neighbor detail\n        show ipv6 neighbor detail vrf all\n        show ipv6 neighbor detail vrf <vrf>", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_nd.py#L60", "class": "ShowIpv6NeighborDetail", "module_name": "show_nd"}}, "show system internal l2fwder Mac": {"nxos": {"uid": "show_system_internal_l2fwder_Mac", "schema": "{\n'vlans': {\n  Any  (str) *: {\n    'mac_addresses': {\n      Any  (str) *: {\n        'secure': <class 'str'>,\n        'ports': <class 'str'>,\n        'ntfy': <class 'str'>,\n        'mac_type': <class 'str'>,\n        'mac_aging_time': <class 'str'>,\n        'entry': <class 'str'>,\n        },\n      },\n    },\n  },\n}", "doc": "Parser for show system internal l2fwder Mac", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_system.py#L247", "class": "ShowSystemInternalL2fwderMac", "module_name": "show_system"}}, "show static {af} topology detail": {"iosxr": {"uid": "show_static_af_topology_detail", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    Optional  (str) address_family: {\n      Any  (str) *: {\n        Optional  (str) routes: {\n          Any  (str) *: {\n            Optional  (str) route: <class 'str'>,\n            Optional  (str) next_hop: {\n              Optional  (str) outgoing_interface: {\n                Any  (str) *: {\n                  Optional  (str) explicit_path: <class 'str'>,\n                  Optional  (str) tag: <class 'int'>,\n                  Optional  (str) preference: <class 'int'>,\n                  Optional  (str) outgoing_interface: <class 'str'>,\n                  Optional  (str) path_version: <class 'int'>,\n                  Optional  (str) active: <class 'bool'>,\n                  Optional  (str) path_status: <class 'str'>,\n                  Optional  (str) install_date: <class 'str'>,\n                  Optional  (str) metrics: <class 'int'>,\n                  Optional  (str) track: <class 'int'>,\n                  Optional  (str) configure_date: <class 'str'>,\n                  },\n                },\n              Optional  (str) next_hop_list: {\n                Any  (str) *: {\n                  Optional  (str) outgoing_interface: <class 'str'>,\n                  Optional  (str) preference: <class 'int'>,\n                  Optional  (str) install_date: <class 'str'>,\n                  Optional  (str) configure_date: <class 'str'>,\n                  Optional  (str) tag: <class 'int'>,\n                  Optional  (str) path_version: <class 'int'>,\n                  Optional  (str) path_status: <class 'str'>,\n                  Optional  (str) metrics: <class 'int'>,\n                  Optional  (str) index: <class 'int'>,\n                  Optional  (str) track: <class 'int'>,\n                  Optional  (str) active: <class 'bool'>,\n                  Optional  (str) explicit_path: <class 'str'>,\n                  Optional  (str) next_hop: <class 'str'>,\n                  },\n                },\n              },\n            },\n          },\n        Optional  (str) safi: <class 'str'>,\n        Optional  (str) table_id: <class 'str'>,\n        },\n      },\n    },\n  },\n}", "doc": "Parser for:\n       show static topology detail\n       show static vrf all topology detail\n       show static vrf <vrf> topology detail\n       show static vrf <vrf> ipv4 topology detail\n       show static ipv4 topology detail\n       show static ipv6 topology detail\n    ", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_static_routing.py#L77", "class": "ShowStaticTopologyDetail", "module_name": "show_static_routing"}}, "show ip pim policy statistics register-policy vrf {vrf}": {"nxos": {"uid": "show_ip_pim_policy_statistics_register-policy_vrf_vrf", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'address_family': {\n      Any  (str) *: {\n        Optional  (str) sm: {\n          Optional  (str) asm: {\n            Optional  (str) register_policy: {\n              Any  (str) *: {\n                Any  (str) *: {\n                  Optional  (str) compare_count: <class 'int'>,\n                  Optional  (str) match_count: <class 'int'>,\n                  },\n                Optional  (str) total_accept_count: <class 'int'>,\n                Optional  (str) total_reject_count: <class 'int'>,\n                },\n              },\n            Optional  (str) accept_register: <class 'str'>,\n            },\n          },\n        },\n      },\n    },\n  },\n}", "doc": "Parser for:\n        show ip pim policy statictics register_policy\n        show ip pim policy statictics register_policy vrf <vrf>", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_pim.py#L3187", "class": "ShowIpPimPolicyStaticticsRegisterPolicy", "module_name": "show_pim"}}, "show lacp {channel_group} counters": {"iosxe": {"uid": "show_lacp_channel_group_counters", "schema": "{\n'interfaces': {\n  Any  (str) *: {\n    'protocol': <class 'str'>,\n    'name': <class 'str'>,\n    'members': {\n      Any  (str) *: {\n        'interface': <class 'str'>,\n        'counters': {\n          'marker_in_pkts': <class 'int'>,\n          'marker_out_pkts': <class 'int'>,\n          'lacp_errors': <class 'int'>,\n          'lacp_out_pkts': <class 'int'>,\n          'lacp_in_pkts': <class 'int'>,\n          'marker_response_out_pkts': <class 'int'>,\n          'marker_response_in_pkts': <class 'int'>,\n          },\n        },\n      },\n    },\n  },\n}", "doc": "Parser for :\n      show lacp counters", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_lag.py#L115", "class": "ShowLacpCounters", "module_name": "show_lag"}}, "show l2route fl all": {"nxos": {"uid": "show_l2route_fl_all", "schema": "{\n'topology': {\n  'topo_id': {\n    Any  (str) *: {\n      Optional  (str) num_of_peer_id: <class 'int'>,\n      'peer_id': {\n        Any  (str) *: {\n          'flood_list': <class 'str'>,\n          'topo_id': <class 'int'>,\n          'is_service_node': <class 'str'>,\n          'peer_id': <class 'int'>,\n          },\n        },\n      },\n    },\n  },\n}", "doc": "parser for:\n        show l2route fl all", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_vxlan.py#L1528", "class": "ShowL2routeFlAll", "module_name": "show_vxlan"}}, "show ipv6 mld groups detail": {"ios": {"uid": "show_ipv6_mld_groups_detail", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'interface': {\n      Any  (str) *: {\n        Optional  (str) static_group: {\n          Any  (str) *: {\n            'source': <class 'str'>,\n            'group': <class 'str'>,\n            },\n          },\n        Optional  (str) join_group: {\n          Any  (str) *: {\n            'source': <class 'str'>,\n            'group': <class 'str'>,\n            },\n          },\n        'group': {\n          Any  (str) *: {\n            'up_time': <class 'str'>,\n            'filter_mode': <class 'str'>,\n            Optional  (str) source: {\n              Any  (str) *: {\n                'forward': <class 'bool'>,\n                Optional  (str) flags: <class 'str'>,\n                'up_time': <class 'str'>,\n                Optional  (str) expire: <class 'str'>,\n                },\n              },\n            'host_mode': <class 'str'>,\n            Optional  (str) expire: <class 'str'>,\n            'last_reporter': <class 'str'>,\n            },\n          },\n        },\n      },\n    },\n  },\n}", "doc": "Parser for:\n        show ipv6 mld groups detail\n        show ipv6 mld vrf <vrf> groups detail", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_mld.py#L24", "class": "ShowIpv6MldGroupsDetail", "module_name": "show_mld"}, "iosxe": {"uid": "show_ipv6_mld_groups_detail", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'interface': {\n      Any  (str) *: {\n        Optional  (str) static_group: {\n          Any  (str) *: {\n            'source': <class 'str'>,\n            'group': <class 'str'>,\n            },\n          },\n        Optional  (str) join_group: {\n          Any  (str) *: {\n            'source': <class 'str'>,\n            'group': <class 'str'>,\n            },\n          },\n        'group': {\n          Any  (str) *: {\n            'up_time': <class 'str'>,\n            'filter_mode': <class 'str'>,\n            Optional  (str) source: {\n              Any  (str) *: {\n                'forward': <class 'bool'>,\n                Optional  (str) flags: <class 'str'>,\n                'up_time': <class 'str'>,\n                Optional  (str) expire: <class 'str'>,\n                },\n              },\n            'host_mode': <class 'str'>,\n            Optional  (str) expire: <class 'str'>,\n            'last_reporter': <class 'str'>,\n            },\n          },\n        },\n      },\n    },\n  },\n}", "doc": "Parser for:\n        show ipv6 mld groups detail\n        show ipv6 mld vrf <vrf> groups detail", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_mld.py#L273", "class": "ShowIpv6MldGroupsDetail", "module_name": "show_mld"}}, "show ip pim bsr-router": {"ios": {"uid": "show_ip_pim_bsr-router", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'address_family': {\n      Any  (str) *: {\n        'rp': {\n          'bsr': {\n            Any  (str) *: {\n              Optional  (str) priority: <class 'int'>,\n              Optional  (str) interface: <class 'str'>,\n              Optional  (str) interval: <class 'int'>,\n              Optional  (str) address: <class 'str'>,\n              Optional  (str) holdtime: <class 'int'>,\n              Optional  (str) next_advertisment: <class 'str'>,\n              },\n            Optional  (str) bsr_next_bootstrap: <class 'str'>,\n            Optional  (str) bsr: {\n              Optional  (str) address_host: <class 'str'>,\n              Optional  (str) priority: <class 'int'>,\n              Optional  (str) up_time: <class 'str'>,\n              Optional  (str) address: <class 'str'>,\n              Optional  (str) expires: <class 'str'>,\n              Optional  (str) hash_mask_length: <class 'int'>,\n              },\n            Optional  (str) bsr_candidate: {\n              Optional  (str) hash_mask_length: <class 'int'>,\n              Optional  (str) address: <class 'str'>,\n              Optional  (str) priority: <class 'int'>,\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "doc": "Parser for:\n        show ip pim bsr-router\n        show ip pim vrf <vrf> bsr-router", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_pim.py#L56", "class": "ShowIpPimBsrRouter", "module_name": "show_pim"}, "iosxe": {"uid": "show_ip_pim_bsr-router", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'address_family': {\n      Any  (str) *: {\n        'rp': {\n          'bsr': {\n            Any  (str) *: {\n              Optional  (str) priority: <class 'int'>,\n              Optional  (str) interface: <class 'str'>,\n              Optional  (str) interval: <class 'int'>,\n              Optional  (str) address: <class 'str'>,\n              Optional  (str) holdtime: <class 'int'>,\n              Optional  (str) next_advertisment: <class 'str'>,\n              },\n            Optional  (str) bsr_next_bootstrap: <class 'str'>,\n            Optional  (str) bsr: {\n              Optional  (str) address_host: <class 'str'>,\n              Optional  (str) priority: <class 'int'>,\n              Optional  (str) up_time: <class 'str'>,\n              Optional  (str) address: <class 'str'>,\n              Optional  (str) expires: <class 'str'>,\n              Optional  (str) hash_mask_length: <class 'int'>,\n              },\n            Optional  (str) bsr_candidate: {\n              Optional  (str) hash_mask_length: <class 'int'>,\n              Optional  (str) address: <class 'str'>,\n              Optional  (str) priority: <class 'int'>,\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "doc": "Parser for:\n        show ip pim bsr-router\n        show ip pim vrf <vrf> bsr-router", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_pim.py#L619", "class": "ShowIpPimBsrRouter", "module_name": "show_pim"}}, "show spanning-tree": {"ios": {"uid": "show_spanning-tree", "schema": "{\nAny  (str) *: {\n  Any  (str) *: {\n    Any  (str) *: {\n      'interfaces': {\n        Any  (str) *: {\n          'cost': <class 'int'>,\n          Optional  (str) peer: <class 'str'>,\n          'port_num': <class 'int'>,\n          Optional  (str) bound: <class 'str'>,\n          'port_priority': <class 'int'>,\n          'type': <class 'str'>,\n          'role': <class 'str'>,\n          'port_state': <class 'str'>,\n          },\n        },\n      Any  (str) *: {\n        'max_age': <class 'int'>,\n        Optional  (str) interface: <class 'str'>,\n        'forward_delay': <class 'int'>,\n        Optional  (str) configured_bridge_priority: <class 'int'>,\n        Optional  (str) cost: <class 'int'>,\n        'priority': <class 'int'>,\n        'address': <class 'str'>,\n        Optional  (str) sys_id_ext: <class 'int'>,\n        'hello_time': <class 'int'>,\n        Optional  (str) aging_time: <class 'int'>,\n        Optional  (str) port: <class 'int'>,\n        },\n      },\n    },\n  },\n}", "doc": "Parser for show spanning-tree [mst|vlan <WORD>]", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_spanning_tree.py#L33", "class": "ShowSpanningTree", "module_name": "show_spanning_tree"}, "iosxe": {"uid": "show_spanning-tree", "schema": "{\nAny  (str) *: {\n  Any  (str) *: {\n    Any  (str) *: {\n      'interfaces': {\n        Any  (str) *: {\n          'cost': <class 'int'>,\n          Optional  (str) peer: <class 'str'>,\n          'port_num': <class 'int'>,\n          Optional  (str) bound: <class 'str'>,\n          'port_priority': <class 'int'>,\n          'type': <class 'str'>,\n          'role': <class 'str'>,\n          'port_state': <class 'str'>,\n          },\n        },\n      Any  (str) *: {\n        'max_age': <class 'int'>,\n        Optional  (str) interface: <class 'str'>,\n        'forward_delay': <class 'int'>,\n        Optional  (str) configured_bridge_priority: <class 'int'>,\n        Optional  (str) cost: <class 'int'>,\n        'priority': <class 'int'>,\n        'address': <class 'str'>,\n        Optional  (str) sys_id_ext: <class 'int'>,\n        'hello_time': <class 'int'>,\n        Optional  (str) aging_time: <class 'int'>,\n        Optional  (str) port: <class 'int'>,\n        },\n      },\n    },\n  },\n}", "doc": "Parser for show spanning-tree [mst|vlan <WORD>]", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_spanning_tree.py#L843", "class": "ShowSpanningTree", "module_name": "show_spanning_tree"}}, "show bgp all neighbors {neighbor} advertised-routes": {"ios": {"uid": "show_bgp_all_neighbors_neighbor_advertised-routes", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'neighbor': {\n      Any  (str) *: {\n        'address_family': {\n          Any  (str) *: {\n            Optional  (str) route_distinguisher: <class 'str'>,\n            Optional  (str) bgp_table_version: <class 'int'>,\n            Optional  (str) default_vrf: <class 'str'>,\n            Optional  (str) local_router_id: <class 'str'>,\n            Optional  (str) advertised: {\n              Optional  (Any) Any  (str) *: {\n                Optional  (str) index: {\n                  Optional  (Any) Any  (str) *: {\n                    Optional  (str) origin_codes: <class 'str'>,\n                    Optional  (str) metric: <class 'int'>,\n                    Optional  (str) localprf: <class 'int'>,\n                    Optional  (str) next_hop: <class 'str'>,\n                    Optional  (str) weight: <class 'int'>,\n                    Optional  (str) status_codes: <class 'str'>,\n                    Optional  (str) path: <class 'str'>,\n                    Optional  (str) path_type: <class 'str'>,\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "doc": "Parser for show bgp all neighbors <WORD> advertised-routes", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_bgp.py#L56", "class": "ShowBgpAllNeighborsAdvertisedRoutes", "module_name": "show_bgp"}, "iosxe": {"uid": "show_bgp_all_neighbors_neighbor_advertised-routes", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'neighbor': {\n      Any  (str) *: {\n        'address_family': {\n          Any  (str) *: {\n            Optional  (str) route_distinguisher: <class 'str'>,\n            Optional  (str) bgp_table_version: <class 'int'>,\n            Optional  (str) default_vrf: <class 'str'>,\n            Optional  (str) local_router_id: <class 'str'>,\n            Optional  (str) advertised: {\n              Optional  (Any) Any  (str) *: {\n                Optional  (str) index: {\n                  Optional  (Any) Any  (str) *: {\n                    Optional  (str) origin_codes: <class 'str'>,\n                    Optional  (str) metric: <class 'int'>,\n                    Optional  (str) localprf: <class 'int'>,\n                    Optional  (str) next_hop: <class 'str'>,\n                    Optional  (str) weight: <class 'int'>,\n                    Optional  (str) status_codes: <class 'str'>,\n                    Optional  (str) path: <class 'str'>,\n                    Optional  (str) path_type: <class 'str'>,\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "doc": " Parser for:\n        * 'show bgp all neighbors {neighbor} advertised-routes'\n        * 'show bgp {address_family} all neighbors {neighbor} advertised-routes'\n    ", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_bgp.py#L4450", "class": "ShowBgpAllNeighborsAdvertisedRoutes", "module_name": "show_bgp"}}, "show policy-map control-plane": {"iosxe": {"uid": "show_policy-map_control-plane", "schema": "{\nAny  (str) *: {\n  'service_policy': {\n    Any  (str) *: {\n      'policy_name': {\n        Any  (str) *: {\n          'class_map': {\n            Any  (str) *: {\n              'rate': {\n                'drop_rate_bps': <class 'int'>,\n                'offered_rate_bps': <class 'int'>,\n                'interval': <class 'int'>,\n                },\n              'match_all': <class 'bool'>,\n              Optional  (str) bytes: <class 'int'>,\n              Optional  (str) qos_set: {\n                'marker_statistics': <class 'str'>,\n                'ip_precedence': <class 'int'>,\n                },\n              'match': <class 'str'>,\n              Optional  (str) police: {\n                Optional  (str) conformed: {\n                  'bps': <class 'int'>,\n                  'bytes': <class 'int'>,\n                  'actions': <class 'str'>,\n                  'packets': <class 'int'>,\n                  },\n                Optional  (str) bc_bytes: <class 'int'>,\n                Optional  (str) exceeded: {\n                  'bps': <class 'int'>,\n                  'bytes': <class 'int'>,\n                  'actions': <class 'str'>,\n                  'packets': <class 'int'>,\n                  },\n                Optional  (str) police_bps: <class 'int'>,\n                Optional  (str) violated: {\n                  'bps': <class 'int'>,\n                  'bytes': <class 'int'>,\n                  'actions': <class 'str'>,\n                  'packets': <class 'int'>,\n                  },\n                Optional  (str) police_limit: <class 'int'>,\n                Optional  (str) cir_bps: <class 'int'>,\n                Optional  (str) extended_limit: <class 'int'>,\n                },\n              Optional  (str) packets: <class 'int'>,\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "doc": " Parser for\n        * \"show policy map control plane\"\n    ", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_policy_map.py#L89", "class": "ShowPolicyMapControlPlane", "module_name": "show_policy_map"}}, "show vlan access-map": {"ios": {"uid": "show_vlan_access-map", "schema": "{\n'access_map_id': {\n  Any  (str) *: {\n    'access_map_sequence': {\n      Any  (str) *: {\n        Optional  (str) access_map_match_protocol_value: <class 'str'>,\n        Optional  (str) access_map_match_protocol: <class 'str'>,\n        Optional  (str) access_map_action_value: <class 'str'>,\n        },\n      },\n    },\n  },\n}", "doc": null, "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_vlan.py#L19", "class": "ShowVlanAccessMap", "module_name": "show_vlan"}, "nxos": {"uid": "show_vlan_access-map", "schema": "{\n'access_map_id': {\n  Any  (str) *: {\n    'access_map_sequence': {\n      Any  (str) *: {\n        Optional  (str) access_map_match_protocol: <class 'str'>,\n        Optional  (str) access_map_match_protocol_value: <class 'str'>,\n        Optional  (str) access_map_action_value: <class 'str'>,\n        },\n      },\n    },\n  },\n}", "doc": "Parser for show vlan access-map", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_vlan.py#L582", "class": "ShowVlanAccessMap", "module_name": "show_vlan"}, "iosxe": {"uid": "show_vlan_access-map", "schema": "{\n'access_map_id': {\n  Any  (str) *: {\n    'access_map_sequence': {\n      Any  (str) *: {\n        Optional  (str) access_map_match_protocol_value: <class 'str'>,\n        Optional  (str) access_map_match_protocol: <class 'str'>,\n        Optional  (str) access_map_action_value: <class 'str'>,\n        },\n      },\n    },\n  },\n}", "doc": "Parser for show vlan access-map", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_vlan.py#L334", "class": "ShowVlanAccessMap", "module_name": "show_vlan"}}, "show etherchannel load-balancing": {"iosxe": {"uid": "show_etherchannel_load-balancing", "schema": "{\n'global_lb_method': <class 'str'>,\n'port_channel': {\n  Any  (str) *: {\n    'lb_method': <class 'str'>,\n    },\n  },\nOptional  (str) lb_algo_type: <class 'str'>,\n}", "doc": "Parser for :\n      show etherchannel load-balancing", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_lag.py#L826", "class": "ShowEtherChannelLoadBalancing", "module_name": "show_lag"}}, "show ip mroute": {"ios": {"uid": "show_ip_mroute", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'address_family': {\n      Any  (str) *: {\n        Optional  (str) multicast_group: {\n          Any  (str) *: {\n            Optional  (str) source_address: {\n              Any  (str) *: {\n                Optional  (str) rpf_nbr: <class 'str'>,\n                Optional  (str) rpf_info: <class 'str'>,\n                Optional  (str) msdp_learned: <class 'bool'>,\n                Optional  (str) expire: <class 'str'>,\n                Optional  (str) incoming_interface_list: {\n                  Any  (str) *: {\n                    'rpf_nbr': <class 'str'>,\n                    Optional  (str) rpf_info: <class 'str'>,\n                    },\n                  },\n                Optional  (str) rp: <class 'str'>,\n                Optional  (str) flags: <class 'str'>,\n                Optional  (str) rp_bit: <class 'bool'>,\n                Optional  (str) outgoing_interface_list: {\n                  Any  (str) *: {\n                    Optional  (str) vcd: <class 'str'>,\n                    'uptime': <class 'str'>,\n                    'state_mode': <class 'str'>,\n                    'expire': <class 'str'>,\n                    Optional  (str) flags: <class 'str'>,\n                    },\n                  },\n                Optional  (str) uptime: <class 'str'>,\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "doc": "Parser for:\n        show ip mroute\n        show ip mroute vrf <vrf>", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_mcast.py#L22", "class": "ShowIpMroute", "module_name": "show_mcast"}, "iosxe": {"uid": "show_ip_mroute", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'address_family': {\n      Any  (str) *: {\n        Optional  (str) multicast_group: {\n          Any  (str) *: {\n            Optional  (str) source_address: {\n              Any  (str) *: {\n                Optional  (str) rpf_nbr: <class 'str'>,\n                Optional  (str) rpf_info: <class 'str'>,\n                Optional  (str) msdp_learned: <class 'bool'>,\n                Optional  (str) expire: <class 'str'>,\n                Optional  (str) incoming_interface_list: {\n                  Any  (str) *: {\n                    'rpf_nbr': <class 'str'>,\n                    Optional  (str) rpf_info: <class 'str'>,\n                    },\n                  },\n                Optional  (str) rp: <class 'str'>,\n                Optional  (str) flags: <class 'str'>,\n                Optional  (str) rp_bit: <class 'bool'>,\n                Optional  (str) outgoing_interface_list: {\n                  Any  (str) *: {\n                    Optional  (str) vcd: <class 'str'>,\n                    'uptime': <class 'str'>,\n                    'state_mode': <class 'str'>,\n                    'expire': <class 'str'>,\n                    Optional  (str) flags: <class 'str'>,\n                    },\n                  },\n                Optional  (str) uptime: <class 'str'>,\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "doc": "Parser for:\n        show ip mroute\n        show ip mroute vrf <vrf>", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_mcast.py#L79", "class": "ShowIpMroute", "module_name": "show_mcast"}}, "show lacp sys-id": {"iosxe": {"uid": "show_lacp_sys-id", "schema": "{\n'system_priority': <class 'int'>,\n'system_id_mac': <class 'str'>,\n}", "doc": "Parser for :\n       show lacp sys-id", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_lag.py#L50", "class": "ShowLacpSysId", "module_name": "show_lag"}}, "show ip pim interface {interface}": {"nxos": {"uid": "show_ip_pim_interface_interface", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'interfaces': {\n      Any  (str) *: {\n        'address_family': {\n          Any  (str) *: {\n            Optional  (str) dr_delay: <class 'int'>,\n            Optional  (str) bsr_border: <class 'bool'>,\n            Optional  (str) genid: <class 'str'>,\n            Optional  (str) hello_md5_ah_authentication: <class 'str'>,\n            Optional  (str) neighbor_filter: <class 'str'>,\n            Optional  (str) jp_inbound_policy: <class 'str'>,\n            Optional  (str) oper_status: <class 'str'>,\n            Optional  (str) jp_outbound_policy: <class 'str'>,\n            Optional  (str) statistics: {\n              Optional  (str) general: {\n                Optional  (str) df_backoffs: <class 'str'>,\n                Optional  (str) grafts: <class 'str'>,\n                Optional  (str) df_passes: <class 'str'>,\n                Optional  (str) hellos: <class 'str'>,\n                Optional  (str) graft_acks: <class 'str'>,\n                Optional  (str) jps: <class 'str'>,\n                Optional  (str) df_offers: <class 'str'>,\n                Optional  (str) asserts: <class 'str'>,\n                Optional  (str) df_winners: <class 'str'>,\n                },\n              Optional  (str) errors: {\n                Optional  (str) invalid_packet_types: <class 'int'>,\n                Optional  (str) joins_received_with_no_rp: <class 'int'>,\n                Optional  (str) joins_received_with_ssm_groups: <class 'int'>,\n                Optional  (str) joins_received_with_wrong_rp: <class 'int'>,\n                Optional  (str) invalid_df_subtypes: <class 'int'>,\n                Optional  (str) authentication_failed: <class 'int'>,\n                Optional  (str) joins_received_with_bidir_groups: <class 'int'>,\n                Optional  (str) packet_length_errors: <class 'int'>,\n                Optional  (str) bad_version_packets: <class 'int'>,\n                Optional  (str) jps_filtered_by_outbound_policy: <class 'int'>,\n                Optional  (str) packets_from_self: <class 'int'>,\n                Optional  (str) jps_filtered_by_inbound_policy: <class 'int'>,\n                Optional  (str) packets_from_non_neighbors: <class 'int'>,\n                Optional  (str) packets_received_on_passiveinterface: <class 'int'>,\n                Optional  (str) jps_received_on_rpf_interface: <class 'int'>,\n                Optional  (str) checksum: <class 'int'>,\n                },\n              },\n            Optional  (str) jp_interval: <class 'int'>,\n            Optional  (str) link_status: <class 'str'>,\n            Optional  (str) jp_next_sending: <class 'int'>,\n            Optional  (str) admin_status: <class 'str'>,\n            Optional  (str) address: <class 'list'>,\n            Optional  (str) bfd: {\n              Optional  (str) enable: <class 'bool'>,\n              },\n            Optional  (str) ip_subnet: <class 'str'>,\n            Optional  (str) dr_address: <class 'str'>,\n            Optional  (str) sm: {\n              Optional  (str) passive: <class 'bool'>,\n              },\n            Optional  (str) dr_priority: <class 'int'>,\n            Optional  (str) vpc_svi: <class 'bool'>,\n            Optional  (str) configured_dr_priority: <class 'int'>,\n            Optional  (str) auto_enabled: <class 'bool'>,\n            Optional  (str) neighbor_count: <class 'int'>,\n            Optional  (str) hello_interval: <class 'int'>,\n            Optional  (str) hello_expiration: <class 'str'>,\n            Optional  (str) neighbor_holdtime: <class 'int'>,\n            },\n          },\n        },\n      },\n    },\n  },\n}", "doc": "Parser for:\n        show ip pim interface\n        show ip pim interface vrf <vrf>\n        show ip pim interface <interface>\n        show ip pim interface <interface> vrf <vrf>", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_pim.py#L3439", "class": "ShowIpPimInterface", "module_name": "show_pim"}}, "show platform software process slot switch active R0 monitor | inc Mem :|Swap:": {"ios": {"uid": "show_platform_software_process_slot_switch_active_R0_monitor___inc_Mem_:_Swap:", "schema": "{\n'swap': {\n  'available_memory': <class 'int'>,\n  'used': <class 'int'>,\n  'total': <class 'int'>,\n  'free': <class 'int'>,\n  },\n'memory': {\n  'buff_cache': <class 'int'>,\n  'used': <class 'int'>,\n  'total': <class 'int'>,\n  'free': <class 'int'>,\n  },\n}", "doc": "Parser for show platform software process slot switch active R0 monitor | inc Mem :|Swap:", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_platform.py#L341", "class": "ShowPlatformSoftwareSlotActiveMonitorMem", "module_name": "show_platform"}, "iosxe": {"uid": "show_platform_software_process_slot_switch_active_R0_monitor___inc_Mem_:_Swap:", "schema": "{\n'swap': {\n  'available_memory': <class 'int'>,\n  'used': <class 'int'>,\n  'total': <class 'int'>,\n  'free': <class 'int'>,\n  },\n'memory': {\n  'buff_cache': <class 'int'>,\n  'used': <class 'int'>,\n  'total': <class 'int'>,\n  'free': <class 'int'>,\n  },\n}", "doc": "Parser for show platform software process slot switch active R0 monitor | inc Mem :|Swap:", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_platform.py#L1917", "class": "ShowPlatformSoftwareSlotActiveMonitorMem", "module_name": "show_platform"}}, "show bridge-domain | count {word}": {"ios": {"uid": "show_bridge-domain___count_word", "schema": "{\nOptional  (str) lines_match_regexp: <class 'int'>,\nOptional  (str) bridge_domain: {\n  Any  (str) *: {\n    'state': <class 'str'>,\n    'mac_table': {\n      Any  (str) *: {\n        'mac_address': {\n          Any  (str) *: {\n            'mac_address': <class 'str'>,\n            'aed': <class 'int'>,\n            'policy': <class 'str'>,\n            'tag': <class 'str'>,\n            'age': <class 'int'>,\n            },\n          },\n        'pseudoport': <class 'str'>,\n        },\n      },\n    'bd_domain_id': <class 'int'>,\n    Any  (str) *: {\n      Any  (str) *: {\n        'num_of_ports': <class 'str'>,\n        'interfaces': <class 'list'>,\n        },\n      },\n    'mac_learning_state': <class 'str'>,\n    'aging_timer': <class 'int'>,\n    'number_of_ports_in_all': <class 'int'>,\n    'member_ports': <class 'list'>,\n    },\n  },\n}", "doc": "Parser for show bridge-domain\n                  show bridge-domain <WORD>\n                  show bridge-domain | count <WORD>\n    ", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_l2vpn.py#L80", "class": "ShowBridgeDomain", "module_name": "show_l2vpn"}, "iosxe": {"uid": "show_bridge-domain___count_word", "schema": "{\nOptional  (str) lines_match_regexp: <class 'int'>,\nOptional  (str) bridge_domain: {\n  Any  (str) *: {\n    'state': <class 'str'>,\n    'mac_table': {\n      Any  (str) *: {\n        'mac_address': {\n          Any  (str) *: {\n            'mac_address': <class 'str'>,\n            'aed': <class 'int'>,\n            'policy': <class 'str'>,\n            'tag': <class 'str'>,\n            'age': <class 'int'>,\n            },\n          },\n        'pseudoport': <class 'str'>,\n        },\n      },\n    'bd_domain_id': <class 'int'>,\n    Any  (str) *: {\n      Any  (str) *: {\n        'num_of_ports': <class 'str'>,\n        'interfaces': <class 'list'>,\n        },\n      },\n    'mac_learning_state': <class 'str'>,\n    'aging_timer': <class 'int'>,\n    'number_of_ports_in_all': <class 'int'>,\n    'member_ports': <class 'list'>,\n    },\n  },\n}", "doc": "Parser for show bridge-domain\n                  show bridge-domain <WORD>\n                  show bridge-domain | count <WORD>", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_l2vpn.py#L73", "class": "ShowBridgeDomain", "module_name": "show_l2vpn"}}, "show bgp {address_family} rd {rd} detail": {"iosxe": {"uid": "show_bgp_address_family_rd_rd_detail", "schema": "{\n'instance': {\n  'default': {\n    'vrf': {\n      Any  (str) *: {\n        'address_family': {\n          Any  (str) *: {\n            Optional  (str) route_distinguisher: <class 'str'>,\n            Optional  (str) prefixes: {\n              Any  (str) *: {\n                Optional  (str) table_version: <class 'str'>,\n                Optional  (str) available_path: <class 'str'>,\n                Optional  (str) index: {\n                  Any  (str) *: {\n                    Optional  (str) recipient_pathid: <class 'str'>,\n                    Optional  (str) transfer_pathid: <class 'str'>,\n                    Optional  (str) community: <class 'str'>,\n                    Optional  (str) agi_version: <class 'int'>,\n                    Optional  (str) next_hop: <class 'str'>,\n                    Optional  (str) ve_block_size: <class 'int'>,\n                    Optional  (str) next_hop_igp_metric: <class 'str'>,\n                    Optional  (str) local_vxlan_vtep: {\n                      Optional  (str) vtep_ip: <class 'str'>,\n                      Optional  (str) vrf: <class 'str'>,\n                      Optional  (str) encap: <class 'str'>,\n                      Optional  (str) vni: <class 'str'>,\n                      Optional  (str) local_router_mac: <class 'str'>,\n                      Optional  (str) bdi: <class 'str'>,\n                      },\n                    Optional  (str) label_base: <class 'int'>,\n                    Optional  (str) gateway: <class 'str'>,\n                    Optional  (str) cluster_list: <class 'str'>,\n                    Optional  (str) route_info: <class 'str'>,\n                    Optional  (str) next_hop_via: <class 'str'>,\n                    Optional  (str) update_group: Any  (str) *,\n                    Optional  (str) status_codes: <class 'str'>,\n                    Optional  (str) origin_codes: <class 'str'>,\n                    Optional  (str) metric: <class 'int'>,\n                    Optional  (str) inaccessible: <class 'bool'>,\n                    Optional  (str) localpref: <class 'int'>,\n                    Optional  (str) evpn: {\n                      Optional  (str) evpn_esi: <class 'str'>,\n                      Optional  (str) recursive_via_connected: <class 'bool'>,\n                      Optional  (str) local_vtep: <class 'str'>,\n                      Optional  (str) gateway_address: <class 'str'>,\n                      Optional  (str) ext_community: <class 'str'>,\n                      Optional  (str) label: <class 'int'>,\n                      Optional  (str) encap: <class 'str'>,\n                      Optional  (str) router_mac: <class 'str'>,\n                      },\n                    Optional  (str) weight: <class 'str'>,\n                    Optional  (str) originator: <class 'str'>,\n                    Optional  (str) refresh_epoch: <class 'int'>,\n                    },\n                  },\n                Optional  (str) best_path: <class 'str'>,\n                Optional  (str) paths: <class 'str'>,\n                },\n              },\n            Optional  (str) default_vrf: <class 'str'>,\n            },\n          },\n        },\n      },\n    },\n  },\n}", "doc": " Parser for:\n        * 'show bgp {address_family} vrf {vrf} detail'\n        * 'show bgp {address_family} rd {rd} detail'\n    ", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_bgp.py#L1488", "class": "ShowBgpDetail", "module_name": "show_bgp"}}, "show vdc detail": {"nxos": {"uid": "show_vdc_detail", "schema": "{\n'vdc': {\n  Any  (str) *: {\n    'dual_sup_ha_policy': <class 'str'>,\n    'boot_order': <class 'str'>,\n    Optional  (str) cpu_share: <class 'str'>,\n    'name': <class 'str'>,\n    Optional  (str) cpu_share_percentage: <class 'str'>,\n    Optional  (str) restart_time: <class 'str'>,\n    'create_time': <class 'str'>,\n    'reload_count': <class 'str'>,\n    'restart_count': <class 'str'>,\n    'state': <class 'str'>,\n    Optional  (str) uptime: <class 'str'>,\n    'supported_linecards': <class 'str'>,\n    'ha_policy': <class 'str'>,\n    'mac_address': <class 'str'>,\n    'type': <class 'str'>,\n    },\n  },\n}", "doc": "Parser for show vdc detail", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_platform.py#L1123", "class": "ShowVdcDetail", "module_name": "show_platform"}}, "show ip bgp {address_family} neighbors {neighbor}": {"iosxe": {"uid": "show_ip_bgp_address_family_neighbors_neighbor", "schema": "{\nOptional  (str) list_of_neighbors: <class 'list'>,\n'vrf': {\n  Any  (str) *: {\n    'neighbor': {\n      Any  (str) *: {\n        Optional  (str) bgp_event_timer: {\n          'starts': {\n            Any  (str) *: <class 'int'>,\n            },\n          'wakeups': {\n            Any  (str) *: <class 'int'>,\n            },\n          'next': {\n            Any  (str) *: <class 'str'>,\n            },\n          },\n        'address_family': {\n          Any  (str) *: {\n            Optional  (str) refresh_epoch: <class 'int'>,\n            Optional  (str) session_state: <class 'str'>,\n            Optional  (str) max_nlri: <class 'int'>,\n            Optional  (str) up_time: <class 'str'>,\n            Optional  (str) min_nlri: <class 'int'>,\n            Optional  (str) down_time: <class 'str'>,\n            Optional  (str) refresh_activity_counters: {\n              'sent': {\n                Any  (str) *: <class 'int'>,\n                },\n              'received': {\n                Any  (str) *: <class 'int'>,\n                },\n              },\n            Optional  (str) local_policy_denied_prefixes_counters: {\n              'inbound': {\n                Any  (str) *: Any  (str) *,\n                },\n              'outbound': {\n                Any  (str) *: Any  (str) *,\n                },\n              },\n            Optional  (str) last_detected_dynamic_slow_peer: <class 'str'>,\n            Optional  (str) last_read: <class 'str'>,\n            Optional  (str) dynamic_slow_peer_recovered: <class 'str'>,\n            Optional  (str) last_write: <class 'str'>,\n            Optional  (str) last_sent_refresh_start_of_rib: <class 'str'>,\n            Optional  (str) current_time: <class 'str'>,\n            Optional  (str) last_received_refresh_start_of_rib: <class 'str'>,\n            Optional  (str) bgp_table_version: <class 'int'>,\n            Optional  (str) last_sent_refresh_end_of_rib: <class 'str'>,\n            Optional  (str) neighbor_version: <class 'str'>,\n            Optional  (str) last_received_refresh_end_of_rib: <class 'str'>,\n            Optional  (str) output_queue_size: <class 'int'>,\n            Optional  (str) refresh_out: <class 'int'>,\n            Optional  (str) index: <class 'int'>,\n            Optional  (str) refresh_in: <class 'int'>,\n            Optional  (str) advertise_bit: <class 'int'>,\n            Optional  (str) route_reflector_client: <class 'bool'>,\n            Optional  (str) update_group_member: <class 'int'>,\n            Optional  (str) community_attribute_sent: <class 'bool'>,\n            Optional  (str) extended_community_attribute_sent: <class 'bool'>,\n            Optional  (str) prefix_activity_counters: {\n              'sent': {\n                Any  (str) *: Any  (str) *,\n                },\n              'received': {\n                Any  (str) *: Any  (str) *,\n                },\n              },\n            Optional  (str) suppress_ldp_signaling: <class 'bool'>,\n            Optional  (str) slow_peer_detection: <class 'bool'>,\n            Optional  (str) slow_peer_split_update_group_dynamic: <class 'bool'>,\n            },\n          },\n        'bgp_neighbor_counters': {\n          'messages': {\n            'sent': {\n              'notifications': <class 'int'>,\n              'route_refresh': <class 'int'>,\n              'total': <class 'int'>,\n              'opens': <class 'int'>,\n              'keepalives': <class 'int'>,\n              'updates': <class 'int'>,\n              },\n            'in_queue_depth': <class 'int'>,\n            'received': {\n              'notifications': <class 'int'>,\n              'route_refresh': <class 'int'>,\n              'total': <class 'int'>,\n              'opens': <class 'int'>,\n              'keepalives': <class 'int'>,\n              'updates': <class 'int'>,\n              },\n            'out_queue_depth': <class 'int'>,\n            },\n          },\n        'bgp_negotiated_keepalive_timers': {\n          'keepalive_interval': <class 'int'>,\n          'hold_time': <class 'int'>,\n          Optional  (str) min_holdtime: <class 'int'>,\n          },\n        'link': <class 'str'>,\n        'router_id': <class 'str'>,\n        Optional  (str) bgp_session_transport: {\n          Optional  (str) enqueued_packets: {\n            'mis_ordered_packet': <class 'int'>,\n            'input_packet': <class 'int'>,\n            'retransmit_packet': <class 'int'>,\n            },\n          Optional  (str) iss: <class 'int'>,\n          Optional  (str) snduna: <class 'int'>,\n          'connection': {\n            Optional  (str) reset_reason: <class 'str'>,\n            'dropped': <class 'int'>,\n            'established': <class 'int'>,\n            'last_reset': <class 'str'>,\n            },\n          Optional  (str) sndnxt: <class 'int'>,\n          Optional  (str) irs: <class 'int'>,\n          'address_tracking_status': <class 'str'>,\n          Optional  (str) sndwnd: <class 'int'>,\n          Optional  (str) snd_scale: <class 'int'>,\n          Optional  (str) maxrcvwnd: <class 'int'>,\n          Optional  (str) rcvwnd: <class 'int'>,\n          Optional  (str) rcv_scale: <class 'int'>,\n          Optional  (str) delrcvwnd: <class 'int'>,\n          Optional  (str) srtt: <class 'int'>,\n          'min_time_between_advertisement_runs': <class 'int'>,\n          Optional  (str) rtto: <class 'int'>,\n          Optional  (str) rtv: <class 'int'>,\n          Optional  (str) krtt: <class 'int'>,\n          Optional  (str) min_rtt: <class 'int'>,\n          Optional  (str) max_rtt: <class 'int'>,\n          Optional  (str) ack_hold: <class 'int'>,\n          Optional  (str) uptime: <class 'int'>,\n          Optional  (str) sent_idletime: <class 'int'>,\n          Optional  (str) receive_idletime: <class 'int'>,\n          Optional  (str) tcp_connection: <class 'bool'>,\n          Optional  (str) status_flags: <class 'str'>,\n          Optional  (str) option_flags: <class 'str'>,\n          Optional  (str) ip_precedence_value: <class 'int'>,\n          'tcp_path_mtu_discovery': <class 'str'>,\n          Optional  (str) transport: {\n            'local_port': <class 'str'>,\n            'local_host': <class 'str'>,\n            'foreign_port': <class 'str'>,\n            Optional  (str) mss: <class 'int'>,\n            'foreign_host': <class 'str'>,\n            },\n          Optional  (str) datagram: {\n            'datagram_sent': {\n              'second_congestion': <class 'int'>,\n              'with_data': <class 'int'>,\n              'retransmit': <class 'int'>,\n              'partialack': <class 'int'>,\n              'value': <class 'int'>,\n              'fastretransmit': <class 'int'>,\n              'total_data': <class 'int'>,\n              },\n            'datagram_received': {\n              'out_of_order': <class 'int'>,\n              'with_data': <class 'int'>,\n              'total_data': <class 'int'>,\n              'value': <class 'int'>,\n              },\n            },\n          Optional  (str) graceful_restart: <class 'str'>,\n          Optional  (str) packet_fast_path: <class 'int'>,\n          Optional  (str) gr_restart_time: <class 'int'>,\n          Optional  (str) packet_fast_processed: <class 'int'>,\n          Optional  (str) gr_stalepath_time: <class 'int'>,\n          Optional  (str) packet_slow_path: <class 'int'>,\n          Optional  (str) connection_state: <class 'str'>,\n          Optional  (str) fast_lock_acquisition_failures: <class 'int'>,\n          Optional  (str) io_status: <class 'int'>,\n          Optional  (str) lock_slow_path: <class 'int'>,\n          Optional  (str) unread_input_bytes: <class 'int'>,\n          Optional  (str) tcp_semaphore: <class 'str'>,\n          Optional  (str) ecn_connection: <class 'str'>,\n          Optional  (str) tcp_semaphore_status: <class 'str'>,\n          Optional  (str) minimum_incoming_ttl: <class 'int'>,\n          Optional  (str) sso: <class 'bool'>,\n          Optional  (str) outgoing_ttl: <class 'int'>,\n          Optional  (str) rcvnxt: <class 'int'>,\n          Optional  (str) connection_tableid: <class 'int'>,\n          'rib_route_ip': <class 'str'>,\n          Optional  (str) maximum_output_segment_queue_size: <class 'int'>,\n          },\n        'remote_as': <class 'int'>,\n        'bgp_version': <class 'int'>,\n        'session_state': <class 'str'>,\n        'shutdown': <class 'bool'>,\n        Optional  (str) local_as: <class 'int'>,\n        'bgp_negotiated_capabilities': {\n          'four_octets_asn': <class 'str'>,\n          Optional  (str) vpnv4_unicast: <class 'str'>,\n          Optional  (str) graceful_restart: <class 'str'>,\n          'route_refresh': <class 'str'>,\n          Optional  (str) vpnv6_unicast: <class 'str'>,\n          'stateful_switchover': <class 'str'>,\n          Optional  (str) ipv4_unicast: <class 'str'>,\n          Optional  (str) remote_restart_timer: <class 'int'>,\n          Optional  (str) ipv6_unicast: <class 'str'>,\n          Optional  (str) l2vpn_vpls: <class 'str'>,\n          Optional  (str) l2vpn_evpn: <class 'str'>,\n          Optional  (str) vpnv4_multicast: <class 'str'>,\n          Optional  (str) multisession: <class 'str'>,\n          Optional  (str) graceful_restart_af_advertised_by_peer: <class 'list'>,\n          Optional  (str) vpnv6_multicast: <class 'str'>,\n          'enhanced_refresh': <class 'str'>,\n          Optional  (str) mvpnv4_multicast: <class 'str'>,\n          Optional  (str) mvpnv6_multicast: <class 'str'>,\n          },\n        Optional  (str) description: <class 'str'>,\n        },\n      },\n    },\n  },\n}", "doc": " Parser for:\n        * 'show ip bgp neighbors'\n        * 'show ip bgp neighbors {neighbor}'\n        * 'show ip bgp {address_family} neighbors'\n        * 'show ip bgp {address_family} neighbors {neighbor}'\n        * 'show ip bgp {address_family} vrf {vrf} neighbors'\n        * 'show ip bgp {address_family} vrf {vrf} neighbors {neighbor}'\n    ", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_bgp.py#L3872", "class": "ShowIpBgpNeighbors", "module_name": "show_bgp"}}, "show ipv6 interface vrf all": {"nxos": {"uid": "show_ipv6_interface_vrf_all", "schema": "{\nAny  (str) *: {\n  'enabled': <class 'bool'>,\n  'vrf': <class 'str'>,\n  'iod': <class 'int'>,\n  Optional  (str) ipv6: {\n    Optional  (str) ipv6_virtual_groups: <class 'list'>,\n    'ipv6_link_local_state': <class 'str'>,\n    Optional  (str) virtual_add: <class 'bool'>,\n    'ipv6_load_sharing': <class 'str'>,\n    'ipv6_link_local': <class 'str'>,\n    Optional  (str) multicast_groups: <class 'bool'>,\n    Optional  (str) ipv6_multicast_groups: <class 'list'>,\n    'counters': {\n      'multicast_packets_originated': <class 'int'>,\n      'multicast_packets_forwarded': <class 'int'>,\n      'multicast_bytes_forwarded': <class 'int'>,\n      'multicast_bytes_originated': <class 'int'>,\n      'multicast_packets_consumed': <class 'int'>,\n      'unicast_bytes_consumed': <class 'int'>,\n      'unicast_bytes_forwarded': <class 'int'>,\n      'unicast_packets_consumed': <class 'int'>,\n      'multicast_bytes_consumed': <class 'int'>,\n      'unicast_packets_originated': <class 'int'>,\n      'unicast_packets_forwarded': <class 'int'>,\n      'unicast_bytes_originated': <class 'int'>,\n      },\n    'ipv6_forwarding_feature': <class 'str'>,\n    Optional  (str) ipv6_multicast_entries: <class 'str'>,\n    'ipv6_ll_state': <class 'str'>,\n    Any  (str) *: {\n      Optional  (str) anycast: <class 'bool'>,\n      Optional  (str) status: <class 'str'>,\n      Optional  (str) prefix_length: <class 'str'>,\n      Optional  (str) ip: <class 'str'>,\n      },\n    'ipv6_last_reset': <class 'str'>,\n    'ipv6_mtu': <class 'int'>,\n    Optional  (str) ipv6_subnet: <class 'str'>,\n    'ipv6_report_link_local': <class 'str'>,\n    'ipv6_unicast_rev_path_forwarding': <class 'str'>,\n    Optional  (str) ipv6_virtual_add: <class 'str'>,\n    'ipv6_multicast_routing': <class 'str'>,\n    },\n  'interface_status': <class 'str'>,\n  },\n}", "doc": "Parser for ipv6 interface vrf all", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_interface.py#L1929", "class": "ShowIpv6InterfaceVrfAll", "module_name": "show_interface"}}, "show bgp summary": {"ios": {"uid": "show_bgp_summary", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    Optional  (str) neighbor: {\n      Any  (str) *: {\n        'address_family': {\n          Any  (str) *: {\n            Optional  (str) prefixes: {\n              'total_entries': <class 'int'>,\n              'memory_usage': <class 'int'>,\n              },\n            'msg_rcvd': <class 'int'>,\n            Optional  (str) path: {\n              'total_entries': <class 'int'>,\n              'memory_usage': <class 'int'>,\n              },\n            Optional  (str) cache_entries: {\n              Any  (str) *: {\n                'total_entries': <class 'int'>,\n                'memory_usage': <class 'int'>,\n                },\n              },\n            'input_queue': <class 'int'>,\n            'state_pfxrcd': <class 'str'>,\n            Optional  (str) entries: {\n              Any  (str) *: {\n                'total_entries': <class 'int'>,\n                'memory_usage': <class 'int'>,\n                },\n              },\n            Optional  (str) community_entries: {\n              'total_entries': <class 'int'>,\n              'memory_usage': <class 'int'>,\n              },\n            Optional  (str) attribute_entries: <class 'str'>,\n            'as': <class 'int'>,\n            Optional  (str) total_memory: <class 'int'>,\n            Optional  (str) activity_prefixes: <class 'str'>,\n            'tbl_ver': <class 'int'>,\n            Optional  (str) activity_paths: <class 'str'>,\n            Optional  (str) scan_interval: <class 'int'>,\n            'output_queue': <class 'int'>,\n            'msg_sent': <class 'int'>,\n            Optional  (str) route_identifier: <class 'str'>,\n            Optional  (str) local_as: <class 'int'>,\n            'up_down': <class 'str'>,\n            Optional  (str) bgp_table_version: <class 'int'>,\n            'version': <class 'int'>,\n            Optional  (str) routing_table_version: <class 'int'>,\n            },\n          },\n        },\n      },\n    },\n  },\n'bgp_id': <class 'int'>,\n}", "doc": "\n    Parser for show bgp All Summary\n    ", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_bgp.py#L60", "class": "ShowBgpAllSummary", "module_name": "show_bgp"}, "iosxe": {"uid": "show_bgp_summary", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    Optional  (str) neighbor: {\n      Any  (str) *: {\n        'address_family': {\n          Any  (str) *: {\n            Optional  (str) prefixes: {\n              'total_entries': <class 'int'>,\n              'memory_usage': <class 'int'>,\n              },\n            'msg_rcvd': <class 'int'>,\n            Optional  (str) path: {\n              'total_entries': <class 'int'>,\n              'memory_usage': <class 'int'>,\n              },\n            Optional  (str) cache_entries: {\n              Any  (str) *: {\n                'total_entries': <class 'int'>,\n                'memory_usage': <class 'int'>,\n                },\n              },\n            'input_queue': <class 'int'>,\n            'state_pfxrcd': <class 'str'>,\n            Optional  (str) entries: {\n              Any  (str) *: {\n                'total_entries': <class 'int'>,\n                'memory_usage': <class 'int'>,\n                },\n              },\n            Optional  (str) community_entries: {\n              'total_entries': <class 'int'>,\n              'memory_usage': <class 'int'>,\n              },\n            Optional  (str) attribute_entries: <class 'str'>,\n            'as': <class 'int'>,\n            Optional  (str) total_memory: <class 'int'>,\n            Optional  (str) activity_prefixes: <class 'str'>,\n            'tbl_ver': <class 'int'>,\n            Optional  (str) activity_paths: <class 'str'>,\n            Optional  (str) scan_interval: <class 'int'>,\n            'output_queue': <class 'int'>,\n            'msg_sent': <class 'int'>,\n            Optional  (str) route_identifier: <class 'str'>,\n            Optional  (str) local_as: <class 'int'>,\n            'up_down': <class 'str'>,\n            Optional  (str) bgp_table_version: <class 'int'>,\n            'version': <class 'int'>,\n            Optional  (str) routing_table_version: <class 'int'>,\n            },\n          },\n        },\n      },\n    },\n  },\n'bgp_id': <class 'int'>,\n}", "doc": " Parser for:\n        * 'show bgp summary'\n        * 'show bgp {address_family} summary'\n        * 'show bgp {address_family} vrf {vrf} summary'\n        * 'show bgp {address_family} rd {rd} summary'\n    ", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_bgp.py#L2054", "class": "ShowBgpSummary", "module_name": "show_bgp"}}, "show route-map": {"nxos": {"uid": "show_route-map", "schema": "{\nAny  (str) *: {\n  Optional  (str) description: <class 'str'>,\n  'statements': {\n    Any  (str) *: {\n      'actions': {\n        'route_disposition': <class 'str'>,\n        Optional  (str) set_community_no_export: <class 'bool'>,\n        Optional  (str) set_route_origin: <class 'str'>,\n        Optional  (str) set_distance: <class 'int'>,\n        Optional  (str) set_tag: <class 'int'>,\n        Optional  (str) set_ext_community_rt_additive: <class 'bool'>,\n        Optional  (str) set_community_no_advertise: <class 'bool'>,\n        Optional  (str) set_as_path_prepend: <class 'str'>,\n        Optional  (str) set_next_hop_v6: <class 'list'>,\n        Optional  (str) set_community_additive: <class 'bool'>,\n        Optional  (str) set_med: <class 'int'>,\n        Optional  (str) set_local_pref: <class 'int'>,\n        Optional  (str) set_community_delete: <class 'str'>,\n        Optional  (str) set_metric: <class 'int'>,\n        Optional  (str) set_level: <class 'str'>,\n        'clause': <class 'bool'>,\n        Optional  (str) set_as_path_group: <class 'list'>,\n        Optional  (str) set_ext_community_soo: <class 'str'>,\n        Optional  (str) set_ext_community_delete: <class 'str'>,\n        Optional  (str) set_ext_community_vpn: <class 'str'>,\n        Optional  (str) set_weight: <class 'int'>,\n        Optional  (str) set_ext_community_rt: <class 'str'>,\n        Optional  (str) set_as_path_prepend_repeat_n: <class 'int'>,\n        Optional  (str) set_community: <class 'str'>,\n        Optional  (str) set_level: <class 'str'>,\n        Optional  (str) set_next_hop: <class 'list'>,\n        Optional  (str) set_metric_type: <class 'str'>,\n        },\n      'conditions': {\n        Optional  (str) match_access_list: <class 'str'>,\n        Optional  (str) match_interface: <class 'str'>,\n        Optional  (str) match_route_type: <class 'str'>,\n        Optional  (str) match_nexthop_in_v6: <class 'str'>,\n        Optional  (str) match_access_list_v6: <class 'str'>,\n        Optional  (str) match_nexthop_in: <class 'str'>,\n        Optional  (str) match_ext_community_list: <class 'str'>,\n        Optional  (str) match_prefix_list_v6: <class 'str'>,\n        Optional  (str) match_med_eq: <class 'int'>,\n        Optional  (str) match_prefix_list: <class 'str'>,\n        Optional  (str) match_as_path_list: <class 'str'>,\n        Optional  (str) match_as_number_list: <class 'str'>,\n        Optional  (str) match_community_list: <class 'str'>,\n        Optional  (str) match_tag_list: <class 'str'>,\n        },\n      },\n    },\n  },\n}", "doc": "Parser for show route-map", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_route_map.py#L63", "class": "ShowRouteMap", "module_name": "show_route_map"}}, "show ip ospf database network": {"ios": {"uid": "show_ip_ospf_database_network", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'address_family': {\n      Any  (str) *: {\n        'instance': {\n          Any  (str) *: {\n            Optional  (str) areas: {\n              Any  (str) *: {\n                'database': {\n                  'lsa_types': {\n                    Any  (str) *: {\n                      'lsa_type': <class 'int'>,\n                      'lsas': {\n                        Any  (str) *: {\n                          'ospfv2': {\n                            'header': {\n                              'age': <class 'int'>,\n                              'option_desc': <class 'str'>,\n                              'adv_router': <class 'str'>,\n                              'seq_num': <class 'str'>,\n                              'length': <class 'int'>,\n                              'checksum': <class 'str'>,\n                              'type': <class 'int'>,\n                              Optional  (str) routing_bit_enable: <class 'bool'>,\n                              'lsa_id': <class 'str'>,\n                              'option': <class 'str'>,\n                              },\n                            'body': {\n                              'network': {\n                                'attached_routers': {\n                                  Any  (str) *: {\n                                    },\n                                  },\n                                'network_mask': <class 'str'>,\n                                },\n                              },\n                            },\n                          'lsa_id': <class 'str'>,\n                          'adv_router': <class 'str'>,\n                          },\n                        },\n                      },\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "doc": " Parser for \"show ip ospf database network\" ", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_ospf.py#L82", "class": "ShowIpOspfDatabaseNetwork", "module_name": "show_ospf"}, "iosxe": {"uid": "show_ip_ospf_database_network", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'address_family': {\n      Any  (str) *: {\n        'instance': {\n          Any  (str) *: {\n            Optional  (str) areas: {\n              Any  (str) *: {\n                'database': {\n                  'lsa_types': {\n                    Any  (str) *: {\n                      'lsa_type': <class 'int'>,\n                      'lsas': {\n                        Any  (str) *: {\n                          'ospfv2': {\n                            'header': {\n                              'age': <class 'int'>,\n                              'option_desc': <class 'str'>,\n                              'adv_router': <class 'str'>,\n                              'seq_num': <class 'str'>,\n                              'length': <class 'int'>,\n                              'checksum': <class 'str'>,\n                              'type': <class 'int'>,\n                              Optional  (str) routing_bit_enable: <class 'bool'>,\n                              'lsa_id': <class 'str'>,\n                              'option': <class 'str'>,\n                              },\n                            'body': {\n                              'network': {\n                                'attached_routers': {\n                                  Any  (str) *: {\n                                    },\n                                  },\n                                'network_mask': <class 'str'>,\n                                },\n                              },\n                            },\n                          'lsa_id': <class 'str'>,\n                          'adv_router': <class 'str'>,\n                          },\n                        },\n                      },\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "doc": " Parser for:\n        * 'show ip ospf database network'\n    ", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_ospf.py#L4344", "class": "ShowIpOspfDatabaseNetwork", "module_name": "show_ospf"}}, "show ip pim df": {"nxos": {"uid": "show_ip_pim_df", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'address_family': {\n      Any  (str) *: {\n        Optional  (str) rp: {\n          Optional  (str) bidir: {\n            Optional  (str) interface_df_election: {\n              Optional  (Any) Any  (str) *: {\n                Optional  (str) is_rpf: <class 'bool'>,\n                Optional  (str) metric_pref: <class 'int'>,\n                Optional  (str) metric: <class 'int'>,\n                Optional  (str) group_range: <class 'str'>,\n                Optional  (str) interface_name: <class 'str'>,\n                Optional  (str) df_address: <class 'str'>,\n                Optional  (str) winner_metric: <class 'int'>,\n                Optional  (str) df_uptime: <class 'str'>,\n                Optional  (str) address: <class 'str'>,\n                Optional  (str) interface_state: <class 'str'>,\n                Optional  (str) winner_metric_pref: <class 'int'>,\n                Optional  (str) df_ordinal: <class 'int'>,\n                Optional  (str) df_bits: <class 'str'>,\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "doc": "Parser for:\n        show ip pim df\n        show ip pim df vrf <vrf>", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_pim.py#L1572", "class": "ShowIpPimDf", "module_name": "show_pim"}}, "show l2route evpn mac all": {"nxos": {"uid": "show_l2route_evpn_mac_all", "schema": "{\n'topology': {\n  Any  (str) *: {\n    'mac_address': {\n      Any  (str) *: {\n        'next_hops': <class 'str'>,\n        'prod': <class 'str'>,\n        'seq_no': <class 'str'>,\n        'flags': <class 'str'>,\n        },\n      },\n    },\n  },\n}", "doc": "Parser for show l2route evpn mac all", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_l2route.py#L44", "class": "ShowL2routeEvpnMac", "module_name": "show_l2route"}, "iosxr": {"uid": "show_l2route_evpn_mac_all", "schema": null, "doc": "Parser for show l2route evpn mac all", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_l2route.py#L60", "class": "ShowL2routeEvpnMac", "module_name": "show_l2route"}}, "show ip igmp snooping": {"nxos": {"uid": "show_ip_igmp_snooping", "schema": "{\n'vlans': {\n  Any  (str) *: {\n    Optional  (str) switch_querier: <class 'str'>,\n    Optional  (str) group_address_for_proxy_leaves: <class 'str'>,\n    Optional  (str) v3_report_suppression: <class 'str'>,\n    Optional  (str) v2_fast_leave: <class 'str'>,\n    Optional  (str) link_local_groups_suppression: <class 'str'>,\n    Optional  (str) router_ports_count: <class 'int'>,\n    Optional  (str) report_flooding: <class 'str'>,\n    Optional  (str) groups_count: <class 'int'>,\n    Optional  (str) igmp_querier: {\n      Optional  (str) robustness: <class 'int'>,\n      Optional  (str) interval: <class 'int'>,\n      Optional  (str) address: <class 'str'>,\n      Optional  (str) last_member_query_interval: <class 'int'>,\n      Optional  (str) version: <class 'int'>,\n      },\n    Optional  (str) vlan_vpc_function: <class 'str'>,\n    Optional  (str) active_ports: <class 'list'>,\n    Optional  (str) ip_igmp_snooping: <class 'str'>,\n    Optional  (str) igmp_explicit_tracking: <class 'str'>,\n    Optional  (str) lookup_mode: <class 'str'>,\n    Optional  (str) report_flooding_interfaces: <class 'str'>,\n    Optional  (str) v1v2_report_suppression: <class 'str'>,\n    },\n  },\nOptional  (str) global_configuration: {\n  Optional  (str) v3_report_suppression: <class 'str'>,\n  Optional  (str) link_local_groups_suppression: <class 'str'>,\n  Optional  (str) v1v2_report_suppression: <class 'str'>,\n  Optional  (str) enabled: <class 'str'>,\n  Optional  (str) vpc_multicast_optimization: <class 'str'>,\n  },\n}", "doc": "Parser for show ip igmp snooping", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_igmp.py#L75", "class": "ShowIpIgmpSnooping", "module_name": "show_igmp"}}, "show policy-map {name}": {"iosxe": {"uid": "show_policy-map_name", "schema": "{\n'policy_map': {\n  Any  (str) *: {\n    'class': {\n      Any  (str) *: {\n        Optional  (str) pir: <class 'int'>,\n        Optional  (str) peak_burst: <class 'int'>,\n        Optional  (str) conform_burst: <class 'int'>,\n        Optional  (str) police_cir: <class 'int'>,\n        },\n      },\n    },\n  },\n}", "doc": " Parser for\n        * \"show policy-map\"\n        * \"show policy-map {name}\"\n    ", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_policy_map.py#L396", "class": "ShowPolicyMap", "module_name": "show_policy_map"}}, "show ip protocols | sec rip": {"iosxe": {"uid": "show_ip_protocols___sec_rip", "schema": "{\n'protocols': {\n  Optional  (str) ospf: {\n    'vrf': {\n      Any  (str) *: {\n        'address_family': {\n          Any  (str) *: {\n            'instance': {\n              Any  (str) *: {\n                'preference': {\n                  'single_value': {\n                    'all': <class 'int'>,\n                    },\n                  Optional  (str) multi_values: {\n                    'granularity': {\n                      'detail': {\n                        'inter_area': <class 'int'>,\n                        'intra_area': <class 'int'>,\n                        },\n                      Optional  (str) coarse: {\n                        'internal': <class 'int'>,\n                        },\n                      },\n                    'external': <class 'int'>,\n                    },\n                  },\n                Optional  (str) passive_interfaces: <class 'list'>,\n                'total_stub_area': <class 'int'>,\n                'incoming_filter_list': <class 'str'>,\n                'total_normal_area': <class 'int'>,\n                Optional  (str) routing_information_sources: {\n                  'gateway': {\n                    Any  (str) *: {\n                      'distance': <class 'int'>,\n                      'last_update': <class 'str'>,\n                      },\n                    },\n                  },\n                'total_nssa_area': <class 'int'>,\n                'total_areas': <class 'int'>,\n                Optional  (str) areas: {\n                  Any  (str) *: {\n                    Optional  (str) configured_interfaces: <class 'list'>,\n                    },\n                  },\n                'router_id': <class 'str'>,\n                'spf_control': {\n                  'paths': <class 'int'>,\n                  },\n                'outgoing_filter_list': <class 'str'>,\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  Optional  (str) bgp: {\n    'instance': {\n      'default': {\n        'vrf': {\n          'default': {\n            'address_family': {\n              'ipv4': {\n                'automatic_route_summarization': <class 'bool'>,\n                Optional  (str) neighbor: {\n                  Any  (str) *: {\n                    'neighbor_id': <class 'str'>,\n                    'distance': <class 'int'>,\n                    'last_update': <class 'str'>,\n                    },\n                  },\n                Optional  (str) preference: {\n                  'multi_values': {\n                    'internal': <class 'int'>,\n                    'external': <class 'int'>,\n                    'local': <class 'int'>,\n                    },\n                  },\n                'outgoing_filter_list': <class 'str'>,\n                'incoming_filter_list': <class 'str'>,\n                'maximum_path': <class 'int'>,\n                'igp_sync': <class 'bool'>,\n                },\n              },\n            },\n          },\n        'bgp_id': <class 'int'>,\n        },\n      },\n    },\n  Optional  (str) eigrp: {\n    'protocol_under_dev': <class 'bool'>,\n    },\n  Optional  (str) application: {\n    'preference': {\n      'single_value': {\n        'all': <class 'int'>,\n        },\n      },\n    'flushed': <class 'int'>,\n    'invalid': <class 'int'>,\n    'update_frequency': <class 'int'>,\n    'outgoing_filter_list': <class 'str'>,\n    'incoming_filter_list': <class 'str'>,\n    'maximum_path': <class 'int'>,\n    'holddown': <class 'int'>,\n    },\n  Optional  (str) isis: {\n    'vrf': {\n      Any  (str) *: {\n        'address_family': {\n          Any  (str) *: {\n            'instance': {\n              Any  (str) *: {\n                'redistributing': <class 'str'>,\n                'preference': {\n                  'single_value': {\n                    'all': <class 'int'>,\n                    },\n                  },\n                Optional  (str) passive_interfaces: <class 'list'>,\n                Optional  (str) configured_interfaces: <class 'list'>,\n                'outgoing_filter_list': <class 'str'>,\n                'incoming_filter_list': <class 'str'>,\n                Optional  (str) address_summarization: <class 'list'>,\n                Optional  (str) routing_information_sources: {\n                  'gateway': {\n                    Any  (str) *: {\n                      'distance': <class 'int'>,\n                      'last_update': <class 'str'>,\n                      },\n                    },\n                  },\n                Optional  (str) maximum_path: <class 'int'>,\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  Optional  (str) rip: {\n    'vrf': {\n      Any  (str) *: {\n        'address_family': {\n          Any  (str) *: {\n            Optional  (str) instance: {\n              Any  (str) *: {\n                'redistribute': {\n                  Any  (str) *: {\n                    Optional  (str) route_policy: <class 'int'>,\n                    Optional  (str) metric: <class 'int'>,\n                    Optional  (Any) Any  (str) *: {\n                      Optional  (str) route_policy: <class 'int'>,\n                      Optional  (str) metric: <class 'int'>,\n                      Optional  (str) route_type: <class 'str'>,\n                      },\n                    },\n                  },\n                Optional  (str) output_delay: <class 'int'>,\n                'send_version': Or (<class 'int'>, <class 'str'>),\n                Optional  (str) timers: {\n                  'next_update': <class 'int'>,\n                  'invalid_interval': <class 'int'>,\n                  'update_interval': <class 'int'>,\n                  'flush_interval': <class 'int'>,\n                  'holddown_interval': <class 'int'>,\n                  },\n                Optional  (str) neighbors: {\n                  Any  (str) *: {\n                    'distance': <class 'int'>,\n                    'last_update': <class 'str'>,\n                    },\n                  },\n                'outgoing_update_filterlist': {\n                  'outgoing_update_filterlist': <class 'str'>,\n                  Optional  (str) interfaces: {\n                    Any  (str) *: {\n                      'filter': <class 'str'>,\n                      'per_user': <class 'bool'>,\n                      'default': <class 'str'>,\n                      },\n                    },\n                  },\n                Optional  (str) default_redistribution_metric: <class 'int'>,\n                Optional  (str) incoming_route_metric: {\n                  'added': <class 'str'>,\n                  'list': <class 'str'>,\n                  },\n                Optional  (str) automatic_network_summarization_in_effect: <class 'bool'>,\n                'maximum_paths': <class 'int'>,\n                'incoming_update_filterlist': {\n                  'incoming_update_filterlist': <class 'str'>,\n                  Optional  (str) interfaces: {\n                    Any  (str) *: {\n                      'filter': <class 'str'>,\n                      'per_user': <class 'bool'>,\n                      'default': <class 'str'>,\n                      },\n                    },\n                  },\n                'receive_version': Or (<class 'int'>, <class 'str'>),\n                'network': <class 'list'>,\n                'distance': <class 'int'>,\n                'interfaces': {\n                  Any  (str) *: {\n                    Optional  (str) summary_address: {\n                      Any  (str) *: {\n                        Optional  (str) metric: <class 'str'>,\n                        },\n                      },\n                    Optional  (str) filtered_per_user: <class 'int'>,\n                    Optional  (str) neighbors: {\n                      Any  (str) *: {\n                        Optional  (str) address: <class 'str'>,\n                        },\n                      },\n                    Optional  (str) default_set: <class 'bool'>,\n                    'triggered_rip': <class 'str'>,\n                    'key_chain': <class 'str'>,\n                    'receive_version': <class 'str'>,\n                    'send_version': <class 'str'>,\n                    Optional  (str) passive: <class 'bool'>,\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "doc": "Parser for :\n       show ip protocols | sec rip\n       show ip protocols vrf {vrf} | sec rip\n       ", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_protocols.py#L1077", "class": "ShowIpProtocolsSectionRip", "module_name": "show_protocols"}}, "show vlan id 1-3967 vn-segment": {"nxos": {"uid": "show_vlan_id_1-3967_vn-segment", "schema": "{\n'vlans': {\n  Any  (str) *: {\n    Optional  (str) vn_segment_id: <class 'int'>,\n    Optional  (str) vlan_id: <class 'str'>,\n    },\n  },\n}", "doc": "Parser for show vlan id 1-3967 vn_segment", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_vlan.py#L230", "class": "ShowVlanIdVnSegment", "module_name": "show_vlan"}}, "show lldp traffic": {"ios": {"uid": "show_lldp_traffic", "schema": "{\n'frame_discard': <class 'int'>,\n'tlv_unknown': <class 'int'>,\n'frame_error_in': <class 'int'>,\n'frame_in': <class 'int'>,\n'tlv_discard': <class 'int'>,\n'frame_out': <class 'int'>,\n'entries_aged_out': <class 'int'>,\n}", "doc": "Parser for show lldp traffic", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_lldp.py#L29", "class": "ShowLldpTraffic", "module_name": "show_lldp"}, "iosxe": {"uid": "show_lldp_traffic", "schema": "{\n'frame_discard': <class 'int'>,\n'tlv_unknown': <class 'int'>,\n'frame_error_in': <class 'int'>,\n'frame_in': <class 'int'>,\n'tlv_discard': <class 'int'>,\n'frame_out': <class 'int'>,\n'entries_aged_out': <class 'int'>,\n}", "doc": "Parser for show lldp traffic", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_lldp.py#L353", "class": "ShowLldpTraffic", "module_name": "show_lldp"}}, "show bgp vrf {vrf} all dampening parameters": {"nxos": {"uid": "show_bgp_vrf_vrf_all_dampening_parameters", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'address_family': {\n      Any  (str) *: {\n        Optional  (str) dampening_route_map: <class 'str'>,\n        Optional  (str) dampening_max_suppress_penalty: <class 'str'>,\n        Optional  (str) dampening_half_life_time: <class 'str'>,\n        Optional  (str) dampening_reuse_time: <class 'str'>,\n        Optional  (str) dampening: <class 'str'>,\n        Optional  (str) dampening_suppress_time: <class 'str'>,\n        Optional  (str) route_distinguisher: {\n          Optional  (Any) Any  (str) *: {\n            Optional  (str) dampening_max_suppress_penalty: <class 'str'>,\n            Optional  (str) dampening_half_life_time: <class 'str'>,\n            Optional  (str) rd_vrf: <class 'str'>,\n            Optional  (str) dampening_reuse_time: <class 'str'>,\n            Optional  (str) rd_vni_id: <class 'str'>,\n            Optional  (str) dampening_suppress_time: <class 'str'>,\n            Optional  (str) dampening_route_map: <class 'str'>,\n            Optional  (str) dampening_max_suppress_time: <class 'str'>,\n            },\n          },\n        Optional  (str) dampening_max_suppress_time: <class 'str'>,\n        },\n      },\n    },\n  },\n}", "doc": "Parser for 'show bgp vrf <WROD> all dampening parameters", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_bgp.py#L4056", "class": "ShowBgpVrfAllAllDampeningParameters", "module_name": "show_bgp"}}, "show redundancy summary": {"iosxr": {"uid": "show_redundancy_summary", "schema": "{\n'node': {\n  Any  (str) *: {\n    Optional  (str) backup_node: <class 'str'>,\n    'type': <class 'str'>,\n    Optional  (str) standby_node: <class 'str'>,\n    Optional  (str) node_detail: <class 'str'>,\n    },\n  },\nOptional  (str) redundancy_communication: <class 'bool'>,\n}", "doc": "Parser for show redundancy summary", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_platform.py#L887", "class": "ShowRedundancySummary", "module_name": "show_platform"}}, "show power inline {interface}": {"iosxe": {"uid": "show_power_inline_interface", "schema": "{\n'interface': {\n  Any  (str) *: {\n    Optional  (str) class: <class 'str'>,\n    Optional  (str) device: <class 'str'>,\n    'max': <class 'float'>,\n    'admin_state': <class 'str'>,\n    'oper_state': <class 'str'>,\n    'power': <class 'float'>,\n    },\n  },\n}", "doc": "Parser for show power inline <interface>", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_power.py#L99", "class": "ShowPowerInlineInterface", "module_name": "show_power"}}, "show ospf vrf all-inclusive database external": {"iosxr": {"uid": "show_ospf_vrf_all-inclusive_database_external", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'address_family': {\n      Any  (str) *: {\n        'instance': {\n          Any  (str) *: {\n            Optional  (str) areas: {\n              Any  (str) *: {\n                'database': {\n                  'lsa_types': {\n                    Any  (str) *: {\n                      'lsa_type': <class 'int'>,\n                      'lsas': {\n                        Any  (str) *: {\n                          'ospfv2': {\n                            'header': {\n                              'age': <class 'int'>,\n                              'option_desc': <class 'str'>,\n                              'adv_router': <class 'str'>,\n                              Optional  (str) routing_bit_enable: <class 'bool'>,\n                              'seq_num': <class 'str'>,\n                              'length': <class 'int'>,\n                              'checksum': <class 'str'>,\n                              'type': <class 'int'>,\n                              'lsa_id': <class 'str'>,\n                              'option': <class 'str'>,\n                              },\n                            'body': {\n                              'external': {\n                                'topologies': {\n                                  Any  (str) *: {\n                                    Optional  (str) flags: <class 'str'>,\n                                    'forwarding_address': <class 'str'>,\n                                    'metric': <class 'int'>,\n                                    'mt_id': <class 'int'>,\n                                    'tos': <class 'int'>,\n                                    'external_route_tag': <class 'int'>,\n                                    },\n                                  },\n                                'network_mask': <class 'str'>,\n                                },\n                              },\n                            },\n                          'lsa_id': <class 'str'>,\n                          'adv_router': <class 'str'>,\n                          },\n                        },\n                      },\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "doc": "\n    Parser for show ospf vrf all-inclusive database external\n    For checking any output with the parser ,below mandatory key(s) are needed and have to be in cli command.\n\n    - db_type\n    ", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_ospf.py#L3696", "class": "ShowOspfVrfAllInclusiveDatabaseExternal", "module_name": "show_ospf"}}, "show {af} prefix-list detail": {"ios": {"uid": "show_af_prefix-list_detail", "schema": "{\n'prefix_set_name': {\n  Any  (str) *: {\n    Optional  (str) sequences: <class 'str'>,\n    Optional  (str) protocol: <class 'str'>,\n    'prefix_set_name': <class 'str'>,\n    Optional  (str) prefixes: {\n      Any  (str) *: {\n        Optional  (str) hit_count: <class 'int'>,\n        Optional  (str) refcount: <class 'int'>,\n        Optional  (str) prefix: <class 'str'>,\n        Optional  (str) action: <class 'str'>,\n        Optional  (str) masklength_range: <class 'str'>,\n        Optional  (str) sequence: <class 'int'>,\n        },\n      },\n    Optional  (str) count: <class 'int'>,\n    Optional  (str) range_entries: <class 'int'>,\n    Optional  (str) refcount: <class 'int'>,\n    },\n  },\n}", "doc": "Parser for show ipv6 prefix-list detail", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_prefix_list.py#L19", "class": "ShowIpv6PrefixListDetail", "module_name": "show_prefix_list"}, "iosxe": {"uid": "show_af_prefix-list_detail", "schema": "{\n'prefix_set_name': {\n  Any  (str) *: {\n    Optional  (str) sequences: <class 'str'>,\n    Optional  (str) protocol: <class 'str'>,\n    'prefix_set_name': <class 'str'>,\n    Optional  (str) prefixes: {\n      Any  (str) *: {\n        Optional  (str) hit_count: <class 'int'>,\n        Optional  (str) refcount: <class 'int'>,\n        Optional  (str) prefix: <class 'str'>,\n        Optional  (str) action: <class 'str'>,\n        Optional  (str) masklength_range: <class 'str'>,\n        Optional  (str) sequence: <class 'int'>,\n        },\n      },\n    Optional  (str) count: <class 'int'>,\n    Optional  (str) range_entries: <class 'int'>,\n    Optional  (str) refcount: <class 'int'>,\n    },\n  },\n}", "doc": "Parser for show ipv6 prefix-list detail", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_prefix_list.py#L168", "class": "ShowIpv6PrefixListDetail", "module_name": "show_prefix_list"}}, "show interface": {"nxos": {"uid": "show_interface", "schema": "{\nAny  (str) *: {\n  Optional  (str) medium: <class 'str'>,\n  Optional  (str) mac_address: <class 'str'>,\n  Optional  (str) switchport_monitor: <class 'str'>,\n  Optional  (str) encapsulations: {\n    Optional  (str) native_vlan: <class 'int'>,\n    Optional  (str) encapsulation: <class 'str'>,\n    Optional  (str) first_dot1q: <class 'str'>,\n    },\n  Optional  (str) auto_negotiate: <class 'bool'>,\n  Optional  (str) ipv4: {\n    Any  (str) *: {\n      Optional  (str) route_tag: <class 'str'>,\n      Optional  (str) prefix_length: <class 'str'>,\n      Optional  (str) secondary: <class 'bool'>,\n      Optional  (str) ip: <class 'str'>,\n      },\n    },\n  Optional  (str) duplex_mode: <class 'str'>,\n  Optional  (str) last_link_flapped: <class 'str'>,\n  Optional  (str) port_mode: <class 'str'>,\n  Optional  (str) port_channel: {\n    Optional  (str) port_channel_int: <class 'str'>,\n    Optional  (str) port_channel_member_intfs: <class 'list'>,\n    Optional  (str) port_channel_member: <class 'bool'>,\n    },\n  'oper_status': <class 'str'>,\n  Optional  (str) flow_control: {\n    Optional  (str) send: <class 'bool'>,\n    Optional  (str) receive: <class 'bool'>,\n    },\n  Optional  (str) bandwidth: <class 'int'>,\n  Optional  (str) description: <class 'str'>,\n  Optional  (str) delay: <class 'int'>,\n  Optional  (str) txload: <class 'str'>,\n  Optional  (str) efficient_ethernet: <class 'str'>,\n  Optional  (str) types: <class 'str'>,\n  Optional  (str) ethertype: <class 'str'>,\n  Optional  (str) interface_reset: <class 'int'>,\n  Optional  (str) parent_interface: <class 'str'>,\n  Optional  (str) counters: {\n    Optional  (str) in_broadcast_pkts: <class 'int'>,\n    Optional  (str) out_babble: <class 'int'>,\n    Optional  (str) in_discards: <class 'int'>,\n    Optional  (str) last_clear: <class 'str'>,\n    Optional  (str) in_crc_errors: <class 'int'>,\n    Optional  (str) tx: <class 'bool'>,\n    Optional  (str) in_oversize_frames: <class 'int'>,\n    Optional  (str) rx: <class 'bool'>,\n    Optional  (str) in_pkts: <class 'int'>,\n    Optional  (str) out_mac_pause_frames: <class 'int'>,\n    Optional  (str) in_mac_pause_frames: <class 'int'>,\n    Optional  (str) in_jumbo_packets: <class 'int'>,\n    Optional  (str) in_storm_suppression_packets: <class 'int'>,\n    Optional  (str) in_runts: <class 'int'>,\n    Optional  (str) in_oversize_frame: <class 'int'>,\n    Optional  (str) in_overrun: <class 'int'>,\n    Optional  (str) in_underrun: <class 'int'>,\n    Optional  (str) in_ignored: <class 'int'>,\n    Optional  (str) in_watchdog: <class 'int'>,\n    Optional  (str) in_bad_etype_drop: <class 'int'>,\n    Optional  (str) in_unknown_protos: <class 'int'>,\n    Optional  (str) in_if_down_drop: <class 'int'>,\n    Optional  (str) in_with_dribble: <class 'int'>,\n    Optional  (str) in_discard: <class 'int'>,\n    Optional  (str) in_octets: <class 'int'>,\n    Optional  (str) in_errors: <class 'int'>,\n    Optional  (str) in_short_frame: <class 'int'>,\n    Optional  (str) in_no_buffer: <class 'int'>,\n    Optional  (str) out_pkts: <class 'int'>,\n    Optional  (str) out_unicast_pkts: <class 'int'>,\n    Optional  (str) out_multicast_pkts: <class 'int'>,\n    Optional  (str) out_broadcast_pkts: <class 'int'>,\n    Optional  (str) out_discard: <class 'int'>,\n    Optional  (str) out_octets: <class 'int'>,\n    Optional  (str) out_jumbo_packets: <class 'int'>,\n    Optional  (str) out_errors: <class 'int'>,\n    Optional  (str) out_collision: <class 'int'>,\n    Optional  (str) out_deferred: <class 'int'>,\n    Optional  (str) out_late_collision: <class 'int'>,\n    Optional  (str) rate: {\n      Optional  (str) out_rate_bps: <class 'int'>,\n      Optional  (str) out_rate: <class 'int'>,\n      Optional  (str) out_rate_pps: <class 'int'>,\n      Optional  (str) out_rate_pkts: <class 'int'>,\n      Optional  (str) load_interval: <class 'int'>,\n      Optional  (str) in_rate_bps: <class 'int'>,\n      Optional  (str) in_rate: <class 'int'>,\n      Optional  (str) in_rate_pps: <class 'int'>,\n      Optional  (str) in_rate_pkts: <class 'int'>,\n      },\n    Optional  (str) out_lost_carrier: <class 'int'>,\n    Optional  (str) in_unicast_pkts: <class 'int'>,\n    Optional  (str) out_no_carrier: <class 'int'>,\n    Optional  (str) in_multicast_pkts: <class 'int'>,\n    },\n  Optional  (str) admin_state: <class 'str'>,\n  Optional  (str) beacon: <class 'str'>,\n  Optional  (str) dedicated_intface: <class 'bool'>,\n  Optional  (str) line_protocol: <class 'str'>,\n  Optional  (str) auto_mdix: <class 'str'>,\n  Optional  (str) reliability: <class 'str'>,\n  Optional  (str) autostate: <class 'bool'>,\n  'enabled': <class 'bool'>,\n  Optional  (str) link_state: <class 'str'>,\n  Optional  (str) rxload: <class 'str'>,\n  Optional  (str) phys_address: <class 'str'>,\n  Optional  (str) port_speed: <class 'str'>,\n  Optional  (str) mtu: <class 'int'>,\n  },\n}", "doc": "Parser for show interface", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_interface.py#L145", "class": "ShowInterface", "module_name": "show_interface"}}, "show bgp neighbors {neighbor} received-routes": {"iosxe": {"uid": "show_bgp_neighbors_neighbor_received-routes", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'neighbor': {\n      Any  (str) *: {\n        'address_family': {\n          Any  (str) *: {\n            Optional  (str) received_routes: {\n              Optional  (Any) Any  (str) *: {\n                Optional  (str) index: {\n                  Optional  (Any) Any  (str) *: {\n                    Optional  (str) next_hop: <class 'str'>,\n                    Optional  (str) weight: <class 'int'>,\n                    Optional  (str) status_codes: <class 'str'>,\n                    Optional  (str) path: <class 'str'>,\n                    Optional  (str) path_type: <class 'str'>,\n                    Optional  (str) origin_codes: <class 'str'>,\n                    Optional  (str) metric: <class 'int'>,\n                    Optional  (str) localprf: <class 'int'>,\n                    },\n                  },\n                },\n              },\n            Optional  (str) route_distinguisher: <class 'str'>,\n            Optional  (str) bgp_table_version: <class 'int'>,\n            Optional  (str) default_vrf: <class 'str'>,\n            Optional  (str) local_router_id: <class 'str'>,\n            },\n          },\n        },\n      },\n    },\n  },\n}", "doc": " Parser for:\n        * 'show bgp {address_family} neighbors {neighbor} received-routes'\n        * 'show bgp neighbors {neighbor} received-routes'\n    ", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_bgp.py#L5090", "class": "ShowBgpNeighborsReceivedRoutes", "module_name": "show_bgp"}}, "show pagp neighbor": {"iosxe": {"uid": "show_pagp_neighbor", "schema": "{\n'interfaces': {\n  Any  (str) *: {\n    'protocol': <class 'str'>,\n    'name': <class 'str'>,\n    'members': {\n      Any  (str) *: {\n        'partner_port': <class 'str'>,\n        'age': <class 'int'>,\n        'partner_name': <class 'str'>,\n        'partner_id': <class 'str'>,\n        Optional  (str) activity: <class 'str'>,\n        'interface': <class 'str'>,\n        'group_cap': <class 'str'>,\n        'flags': <class 'str'>,\n        },\n      },\n    },\n  },\n}", "doc": "Parser for :\n      show pagp neighbor", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_lag.py#L495", "class": "ShowPagpNeighbor", "module_name": "show_lag"}}, "show bgp {address_family} labels vrf {vrf}": {"nxos": {"uid": "show_bgp_address_family_labels_vrf_vrf", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'address_family': {\n      Any  (str) *: {\n        Optional  (str) route_distinguisher: {\n          Any  (str) *: {\n            'prefix': {\n              Any  (str) *: {\n                'index': {\n                  Any  (str) *: {\n                    'best_path': <class 'bool'>,\n                    'nexthop': <class 'str'>,\n                    Optional  (str) best_code: <class 'str'>,\n                    Optional  (str) type_code: <class 'str'>,\n                    'out_label': <class 'str'>,\n                    Optional  (str) vpn: <class 'str'>,\n                    Optional  (str) type: <class 'str'>,\n                    Optional  (str) hold_down: <class 'str'>,\n                    'status': <class 'str'>,\n                    Optional  (str) status_code: <class 'str'>,\n                    'in_label': <class 'str'>,\n                    },\n                  },\n                },\n              },\n            Optional  (str) rd_vrf: <class 'str'>,\n            },\n          },\n        Optional  (str) prefix: {\n          Any  (str) *: {\n            'index': {\n              Any  (str) *: {\n                'best_path': <class 'bool'>,\n                'nexthop': <class 'str'>,\n                Optional  (str) type_code: <class 'str'>,\n                Optional  (str) type: <class 'str'>,\n                'in_label': <class 'str'>,\n                Optional  (str) vpn: <class 'str'>,\n                'out_label': <class 'str'>,\n                Optional  (str) hold_down: <class 'str'>,\n                Optional  (str) status_code: <class 'str'>,\n                'status': <class 'str'>,\n                Optional  (str) best_code: <class 'str'>,\n                },\n              },\n            },\n          },\n        'table_version': <class 'int'>,\n        'router_id': <class 'str'>,\n        },\n      },\n    },\n  },\n}", "doc": "Parser for:\n        show bgp <address_family> labels [vrf <WROD>]", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_bgp.py#L9387", "class": "ShowBgpLabels", "module_name": "show_bgp"}}, "show ip rip database vrf {vrf}": {"iosxe": {"uid": "show_ip_rip_database_vrf_vrf", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'address_family': {\n      Any  (str) *: {\n        'instance': {\n          Any  (str) *: {\n            'routes': {\n              Any  (str) *: {\n                'index': {\n                  Any  (str) *: {\n                    Optional  (str) next_hop: <class 'str'>,\n                    Optional  (str) interface: <class 'str'>,\n                    Optional  (str) summary_type: <class 'str'>,\n                    Optional  (str) from: <class 'str'>,\n                    Optional  (str) expire_time: <class 'str'>,\n                    Optional  (str) route_type: <class 'str'>,\n                    Optional  (str) metric: <class 'int'>,\n                    Optional  (str) redistributed: <class 'bool'>,\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "doc": "Parser for :\n           show ip rip database\n           show ip rip database vrf {vrf}\n           ", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_rip.py#L53", "class": "ShowIpRipDatabase", "module_name": "show_rip"}}, "show arp vrf {vrf} detail": {"iosxr": {"uid": "show_arp_vrf_vrf_detail", "schema": "{\n'interfaces': {\n  Any  (str) *: {\n    'ipv4': {\n      'neighbors': {\n        Any  (str) *: {\n          'ip': <class 'str'>,\n          'age': <class 'str'>,\n          'origin': <class 'str'>,\n          'type': <class 'str'>,\n          'link_layer_address': <class 'str'>,\n          },\n        },\n      },\n    },\n  },\n}", "doc": "Parser for:\n        show arp detail\n        show arp vrf <WORD> detail\n        parser class - implements detail parsing mechanisms for cli,xml and yang output.\n    ", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_arp.py#L51", "class": "ShowArpDetail", "module_name": "show_arp"}}, "show ip pim vrf {vrf} rp mapping": {"ios": {"uid": "show_ip_pim_vrf_vrf_rp_mapping", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'address_family': {\n      Any  (str) *: {\n        'rp': {\n          'rp_list': {\n            Any  (str) *: {\n              Optional  (str) bsr_version: <class 'str'>,\n              Optional  (str) up_time: <class 'str'>,\n              Optional  (str) mode: <class 'str'>,\n              Optional  (str) address: <class 'str'>,\n              Optional  (str) expiration: <class 'str'>,\n              Optional  (str) info_source_address: <class 'str'>,\n              Optional  (str) info_source_type: <class 'str'>,\n              },\n            },\n          'rp_mappings': {\n            Any  (str) *: {\n              Optional  (str) protocol: <class 'str'>,\n              Optional  (str) hold_time: <class 'int'>,\n              Optional  (str) rp_address_host: <class 'str'>,\n              Optional  (str) group: <class 'str'>,\n              Optional  (str) up_time: <class 'str'>,\n              Optional  (str) expiration: <class 'str'>,\n              Optional  (str) rp_address: <class 'str'>,\n              Optional  (str) priority: <class 'int'>,\n              },\n            },\n          Optional  (str) bsr: {\n            'rp': {\n              Optional  (str) up_time: <class 'str'>,\n              Optional  (str) rp_address: <class 'str'>,\n              Optional  (str) group_policy: <class 'str'>,\n              },\n            },\n          Optional  (str) static_rp: {\n            Any  (str) *: {\n              Optional  (str) sm: {\n                Optional  (str) override: <class 'bool'>,\n                Optional  (str) policy_name: <class 'str'>,\n                },\n              Optional  (str) bidir: {\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "doc": " Parser for:\n         show ip pim rp mapping\n         show ip pim vrf <vrf_name> rp mapping", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_pim.py#L63", "class": "ShowIpPimRpMapping", "module_name": "show_pim"}, "iosxe": {"uid": "show_ip_pim_vrf_vrf_rp_mapping", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'address_family': {\n      Any  (str) *: {\n        'rp': {\n          'rp_list': {\n            Any  (str) *: {\n              Optional  (str) bsr_version: <class 'str'>,\n              Optional  (str) up_time: <class 'str'>,\n              Optional  (str) mode: <class 'str'>,\n              Optional  (str) address: <class 'str'>,\n              Optional  (str) expiration: <class 'str'>,\n              Optional  (str) info_source_address: <class 'str'>,\n              Optional  (str) info_source_type: <class 'str'>,\n              },\n            },\n          'rp_mappings': {\n            Any  (str) *: {\n              Optional  (str) protocol: <class 'str'>,\n              Optional  (str) hold_time: <class 'int'>,\n              Optional  (str) rp_address_host: <class 'str'>,\n              Optional  (str) group: <class 'str'>,\n              Optional  (str) up_time: <class 'str'>,\n              Optional  (str) expiration: <class 'str'>,\n              Optional  (str) rp_address: <class 'str'>,\n              Optional  (str) priority: <class 'int'>,\n              },\n            },\n          Optional  (str) bsr: {\n            'rp': {\n              Optional  (str) up_time: <class 'str'>,\n              Optional  (str) rp_address: <class 'str'>,\n              Optional  (str) group_policy: <class 'str'>,\n              },\n            },\n          Optional  (str) static_rp: {\n            Any  (str) *: {\n              Optional  (str) sm: {\n                Optional  (str) override: <class 'bool'>,\n                Optional  (str) policy_name: <class 'str'>,\n                },\n              Optional  (str) bidir: {\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "doc": null, "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_pim.py#L914", "class": "ShowIpPimRpMapping", "module_name": "show_pim"}}, "show l2vpn service all": {"ios": {"uid": "show_l2vpn_service_all", "schema": "{\n'vpls_name': {\n  Any  (str) *: {\n    'state': <class 'str'>,\n    'interface': {\n      Any  (str) *: {\n        'state': <class 'str'>,\n        'state_in_l2vpn_service': <class 'str'>,\n        Optional  (str) group: <class 'str'>,\n        'encapsulation': <class 'str'>,\n        'priority': <class 'int'>,\n        },\n      },\n    },\n  },\n}", "doc": "Parser for show l2vpn service all\n    ", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_l2vpn.py#L42", "class": "ShowL2vpnServiceAll", "module_name": "show_l2vpn"}, "iosxe": {"uid": "show_l2vpn_service_all", "schema": "{\n'vpls_name': {\n  Any  (str) *: {\n    'state': <class 'str'>,\n    'interface': {\n      Any  (str) *: {\n        'state': <class 'str'>,\n        'state_in_l2vpn_service': <class 'str'>,\n        Optional  (str) group: <class 'str'>,\n        'encapsulation': <class 'str'>,\n        'priority': <class 'int'>,\n        },\n      },\n    },\n  },\n}", "doc": "Parser for show l2vpn service all\n    ", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_l2vpn.py#L857", "class": "ShowL2vpnServiceAll", "module_name": "show_l2vpn"}}, "show monitor session {session}": {"iosxe": {"uid": "show_monitor_session_session", "schema": "{\n'session': {\n  Any  (str) *: {\n    Optional  (str) destination_erspan_id: <class 'str'>,\n    Optional  (str) origin_ip_address: <class 'str'>,\n    Optional  (str) source_ports: {\n      Any  (str) *: <class 'str'>,\n      },\n    Optional  (str) source_erspan_id: <class 'str'>,\n    'type': <class 'str'>,\n    Optional  (str) source_subinterfaces: {\n      Any  (str) *: <class 'str'>,\n      },\n    'status': <class 'str'>,\n    Optional  (str) source_rspan_vlan: <class 'int'>,\n    Optional  (str) dest_rspan_vlan: <class 'int'>,\n    Optional  (str) source_vlans: {\n      Any  (str) *: <class 'str'>,\n      },\n    Optional  (str) filter_access_group: <class 'int'>,\n    Optional  (str) destination_ports: <class 'str'>,\n    Optional  (str) destination_ip_address: <class 'str'>,\n    Optional  (str) source_ip_address: <class 'str'>,\n    Optional  (str) mtu: <class 'int'>,\n    },\n  },\n}", "doc": " Parser for\n      \"show monitor\"\n      \"show monitor session {session}\"\n      \"show monitor session all\"\n    ", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_monitor.py#L64", "class": "ShowMonitor", "module_name": "show_monitor"}}, "show crypto pki certificates": {"iosxe": {"uid": "show_crypto_pki_certificates", "schema": "{\n'trustpoints': {\n  Any  (str) *: {\n    'associated_trustpoints': {\n      Any  (str) *: {\n        Optional  (str) crl_distribution_points: <class 'str'>,\n        'subject': {\n          Optional  (str) pid: <class 'str'>,\n          Optional  (str) name: <class 'str'>,\n          'cn': <class 'str'>,\n          Optional  (str) o: <class 'str'>,\n          Optional  (str) serial_number: <class 'str'>,\n          },\n        'issuer': {\n          'cn': <class 'str'>,\n          Optional  (str) o: <class 'str'>,\n          },\n        'usage': <class 'str'>,\n        Optional  (str) storage: <class 'str'>,\n        'validity_date': {\n          'start_date': <class 'str'>,\n          'end_date': <class 'str'>,\n          },\n        'serial_number_in_hex': <class 'str'>,\n        'status': <class 'str'>,\n        },\n      },\n    },\n  },\n}", "doc": "Parser for show crypto pki certificates <WORD>", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_crypto.py#L57", "class": "ShowCryptoPkiCertificates", "module_name": "show_crypto"}}, "show bgp all nexthop-database": {"nxos": {"uid": "show_bgp_all_nexthop-database", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'address_family': {\n      Any  (str) *: {\n        'af_nexthop_trigger_enable': <class 'bool'>,\n        'nexthop_trigger_delay_non_critical': <class 'int'>,\n        'nexthop_trigger_delay_critical': <class 'int'>,\n        Optional  (str) next_hop: {\n          Any  (str) *: {\n            Optional  (str) refcount: <class 'int'>,\n            Optional  (str) reachable: <class 'bool'>,\n            Optional  (str) labeled: <class 'bool'>,\n            Optional  (str) flags: <class 'str'>,\n            Optional  (str) filtered: <class 'bool'>,\n            Optional  (str) multipath: <class 'str'>,\n            Optional  (str) igp_cost: <class 'int'>,\n            Optional  (str) rib_route: <class 'str'>,\n            Optional  (str) igp_route_type: <class 'int'>,\n            Optional  (str) igp_preference: <class 'int'>,\n            Optional  (str) rnh_epoch: <class 'int'>,\n            Optional  (str) attached: <class 'bool'>,\n            Optional  (str) attached_nexthop: {\n              Any  (str) *: {\n                'attached_nexthop_interface': <class 'str'>,\n                },\n              },\n            Optional  (str) local: <class 'bool'>,\n            Optional  (str) pending_update: <class 'bool'>,\n            Optional  (str) resolve_time: <class 'str'>,\n            Optional  (str) metric_next_advertise: <class 'str'>,\n            },\n          },\n        },\n      },\n    },\n  },\n}", "doc": "Parser for:\n        show bgp all nexthop-database\n        parser class implements detail parsing mechanisms for cli,xml output.", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_bgp.py#L7566", "class": "ShowBgpAllNexthopDatabase", "module_name": "show_bgp"}}, "show lldp entry {entry}": {"ios": {"uid": "show_lldp_entry_entry", "schema": "{\n'total_entries': <class 'int'>,\nOptional  (str) interfaces: {\n  Any  (str) *: {\n    'neighbors': {\n      Any  (str) *: {\n        'neighbor_id': <class 'str'>,\n        'chassis_id': <class 'str'>,\n        'time_remaining': <class 'int'>,\n        Optional  (str) system_name: <class 'str'>,\n        Optional  (str) unit_type: <class 'int'>,\n        Optional  (str) capabilities: {\n          Any  (str) *: {\n            Optional  (str) enabled: <class 'bool'>,\n            Optional  (str) system: <class 'bool'>,\n            'name': <class 'str'>,\n            },\n          },\n        Optional  (str) vlan_id: <class 'int'>,\n        Optional  (str) port_description: <class 'str'>,\n        Optional  (str) management_address: <class 'str'>,\n        Optional  (str) auto_negotiation: <class 'str'>,\n        'port_id': <class 'str'>,\n        Optional  (str) physical_media_capabilities: <class 'list'>,\n        Optional  (str) system_description: <class 'str'>,\n        },\n      },\n    'if_name': <class 'str'>,\n    },\n  },\n}", "doc": "Parser for show lldp neighbors detail", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_lldp.py#L25", "class": "ShowLldpNeighborsDetail", "module_name": "show_lldp"}, "iosxe": {"uid": "show_lldp_entry_entry", "schema": "{\n'total_entries': <class 'int'>,\nOptional  (str) interfaces: {\n  Any  (str) *: {\n    'neighbors': {\n      Any  (str) *: {\n        'neighbor_id': <class 'str'>,\n        'chassis_id': <class 'str'>,\n        'time_remaining': <class 'int'>,\n        Optional  (str) system_name: <class 'str'>,\n        Optional  (str) unit_type: <class 'int'>,\n        Optional  (str) capabilities: {\n          Any  (str) *: {\n            Optional  (str) enabled: <class 'bool'>,\n            Optional  (str) system: <class 'bool'>,\n            'name': <class 'str'>,\n            },\n          },\n        Optional  (str) vlan_id: <class 'int'>,\n        Optional  (str) port_description: <class 'str'>,\n        Optional  (str) management_address: <class 'str'>,\n        Optional  (str) auto_negotiation: <class 'str'>,\n        'port_id': <class 'str'>,\n        Optional  (str) physical_media_capabilities: <class 'list'>,\n        Optional  (str) system_description: <class 'str'>,\n        },\n      },\n    'if_name': <class 'str'>,\n    },\n  },\n}", "doc": "Parser for show lldp neighbors detail", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_lldp.py#L335", "class": "ShowLldpNeighborsDetail", "module_name": "show_lldp"}}, "show {af} pim neighbor": {"ios": {"uid": "show_af_pim_neighbor", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'interfaces': {\n      Any  (str) *: {\n        'address_family': {\n          Any  (str) *: {\n            'neighbors': {\n              Optional  (str) secondary_address: <class 'list'>,\n              Any  (str) *: {\n                Optional  (str) state_refresh_capable: <class 'bool'>,\n                Optional  (str) version: <class 'str'>,\n                Optional  (str) genid_capable: <class 'bool'>,\n                Optional  (str) dr_load_balancing_capable: <class 'bool'>,\n                Optional  (str) dr_priority: <class 'int'>,\n                Optional  (str) up_time: <class 'str'>,\n                Optional  (str) expiration: <class 'str'>,\n                Optional  (str) bidir_capable: <class 'bool'>,\n                Optional  (str) designated_router: <class 'bool'>,\n                Optional  (str) default_dr_prioirty: <class 'bool'>,\n                Optional  (str) interface: <class 'str'>,\n                Optional  (str) proxy_capable: <class 'bool'>,\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "doc": "Parser for:\n            show ip/ipv6 pim [vrf <WORD>] neighbor\n            show ipv6 pim [vrf <word>] neighbor detail", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_pim.py#L76", "class": "ShowPimNeighbor", "module_name": "show_pim"}, "iosxe": {"uid": "show_af_pim_neighbor", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'interfaces': {\n      Any  (str) *: {\n        'address_family': {\n          Any  (str) *: {\n            'neighbors': {\n              Optional  (str) secondary_address: <class 'list'>,\n              Any  (str) *: {\n                Optional  (str) state_refresh_capable: <class 'bool'>,\n                Optional  (str) version: <class 'str'>,\n                Optional  (str) genid_capable: <class 'bool'>,\n                Optional  (str) dr_load_balancing_capable: <class 'bool'>,\n                Optional  (str) dr_priority: <class 'int'>,\n                Optional  (str) up_time: <class 'str'>,\n                Optional  (str) expiration: <class 'str'>,\n                Optional  (str) bidir_capable: <class 'bool'>,\n                Optional  (str) designated_router: <class 'bool'>,\n                Optional  (str) default_dr_prioirty: <class 'bool'>,\n                Optional  (str) interface: <class 'str'>,\n                Optional  (str) proxy_capable: <class 'bool'>,\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "doc": "Parser for show ip/ipv6 pim [vrf <WORD>] neighbor\n                  show ipv6 pim [vrf <word>] neighbor detail", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_pim.py#L1686", "class": "ShowPimNeighbor", "module_name": "show_pim"}}, "show rpl route-policy": {"iosxr": {"uid": "show_rpl_route-policy", "schema": "{\nAny  (str) *: {\n  Optional  (str) description: <class 'str'>,\n  'statements': {\n    Any  (str) *: {\n      'actions': {\n        Optional  (str) set_community_additive: <class 'bool'>,\n        Optional  (str) set_community_delete: <class 'str'>,\n        Optional  (str) set_ext_community_rt: <class 'list'>,\n        Optional  (str) set_ext_community_rt_additive: <class 'bool'>,\n        Optional  (str) set_ext_community_soo: <class 'str'>,\n        Optional  (str) set_ext_community_soo_additive: <class 'bool'>,\n        Optional  (str) set_ext_community_vpn: <class 'str'>,\n        Optional  (str) set_route_origin: <class 'str'>,\n        Optional  (str) set_ext_community_delete: <class 'str'>,\n        Optional  (str) set_local_pref: <class 'int'>,\n        Optional  (str) set_ext_community_delete_type: <class 'str'>,\n        Optional  (str) set_next_hop: <class 'str'>,\n        Optional  (str) set_level: <class 'str'>,\n        Optional  (str) set_next_hop_v6: <class 'str'>,\n        Optional  (str) set_metric_type: <class 'str'>,\n        Optional  (str) set_next_hop_self: <class 'bool'>,\n        Optional  (str) set_metric: <class 'str'>,\n        Optional  (str) set_med: <class 'int'>,\n        Optional  (str) set_ospf_metric_type: <class 'str'>,\n        Optional  (str) set_as_path_prepend: <class 'int'>,\n        Optional  (str) set_ospf_metric: <class 'str'>,\n        Optional  (str) set_as_path_prepend_repeat_n: <class 'int'>,\n        Optional  (str) set_tag: <class 'str'>,\n        Optional  (str) set_community: <class 'list'>,\n        Optional  (str) set_weight: <class 'str'>,\n        Optional  (str) set_community_list: <class 'str'>,\n        Optional  (str) actions: <class 'str'>,\n        Optional  (str) set_community_no_export: <class 'bool'>,\n        Optional  (str) set_community_no_advertise: <class 'bool'>,\n        },\n      'conditions': {\n        Optional  (str) match_med_eq: <class 'int'>,\n        Optional  (str) match_as_path_length: <class 'int'>,\n        Optional  (str) match_level_eq: <class 'str'>,\n        Optional  (str) match_as_path_length_oper: <class 'str'>,\n        Optional  (str) match_origin_eq: <class 'str'>,\n        Optional  (str) match_nexthop_in: <class 'str'>,\n        Optional  (str) match_area_eq: <class 'str'>,\n        Optional  (str) match_nexthop_in_v6: <class 'str'>,\n        Optional  (str) match_local_pref_eq: <class 'str'>,\n        Optional  (str) match_prefix_list_v6: <class 'str'>,\n        Optional  (str) match_community_list: <class 'str'>,\n        Optional  (str) match_prefix_list: <class 'str'>,\n        Optional  (str) match_ext_community_list: <class 'str'>,\n        Optional  (str) match_ext_community_list_type: <class 'str'>,\n        Optional  (str) match_as_path_list: <class 'str'>,\n        Optional  (str) match_tag_list: <class 'str'>,\n        },\n      },\n    },\n  },\n}", "doc": "Parser for show rpl route-policy", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_rpl.py#L72", "class": "ShowRplRoutePolicy", "module_name": "show_rpl"}}, "show mpls ldp igp sync interface {interface}": {"iosxe": {"uid": "show_mpls_ldp_igp_sync_interface_interface", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'interface': {\n      Any  (str) *: {\n        'ldp': {\n          'configured': <class 'bool'>,\n          'igp_synchronization_enabled': <class 'bool'>,\n          },\n        Optional  (str) peer_ldp_ident: <class 'str'>,\n        Optional  (str) sync: {\n          Optional  (str) delay_time: <class 'int'>,\n          'status': {\n            'peer_reachable': <class 'bool'>,\n            Optional  (str) enabled: <class 'bool'>,\n            'sync_achieved': <class 'bool'>,\n            },\n          Optional  (str) left_time: <class 'int'>,\n          },\n        Optional  (str) igp: {\n          'holddown_time': <class 'str'>,\n          'enabled': <class 'str'>,\n          },\n        },\n      },\n    },\n  },\n}", "doc": "\n        Parser for show mpls ldp igp sync\n                   show mpls ldp igp sync all\n                   show mpls ldp igp sync interface <interface>\n                   show mpls ldp igp sync vrf <vrf>\n       ", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_mpls.py#L1611", "class": "ShowMplsLdpIgpSync", "module_name": "show_mpls"}}, "show lisp all instance-id {instance_id} {service} database": {"iosxe": {"uid": "show_lisp_all_instance-id_instance_id_service_database", "schema": "{\n'lisp_router_instances': {\n  Any  (str) *: {\n    Optional  (str) service: {\n      Optional  (Any) Any  (str) *: {\n        'etr': {\n          'local_eids': {\n            Any  (str) *: {\n              'inactive_eid_entries': <class 'int'>,\n              'vni': <class 'str'>,\n              Optional  (str) dynamic_eids: {\n                Any  (str) *: {\n                  'state': <class 'str'>,\n                  'source': <class 'str'>,\n                  'eid_address': {\n                    'vrf': <class 'str'>,\n                    'address_type': <class 'str'>,\n                    },\n                  'priority': <class 'int'>,\n                  'loopback_address': <class 'str'>,\n                  'id': <class 'str'>,\n                  'rlocs': <class 'str'>,\n                  Optional  (str) dynamic_eid: <class 'str'>,\n                  'weight': <class 'int'>,\n                  },\n                },\n              'no_route_eid_entries': <class 'int'>,\n              Optional  (str) eids: {\n                Any  (str) *: {\n                  'state': <class 'str'>,\n                  'source': <class 'str'>,\n                  'eid_address': {\n                    'vrf': <class 'str'>,\n                    'address_type': <class 'str'>,\n                    },\n                  'priority': <class 'int'>,\n                  'loopback_address': <class 'str'>,\n                  'id': <class 'str'>,\n                  'rlocs': <class 'str'>,\n                  'weight': <class 'int'>,\n                  },\n                },\n              'total_eid_entries': <class 'int'>,\n              },\n            },\n          },\n        },\n      },\n    'locator_sets': {\n      Any  (str) *: {\n        'locator_set_name': <class 'str'>,\n        },\n      },\n    'lisp_router_instance_id': <class 'int'>,\n    },\n  },\n}", "doc": "Parser for \"show lisp all instance-id <instance_id> <service> dabatase\"", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_lisp.py#L2239", "class": "ShowLispServiceDatabase", "module_name": "show_lisp"}}, "show ip rip database": {"iosxe": {"uid": "show_ip_rip_database", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'address_family': {\n      Any  (str) *: {\n        'instance': {\n          Any  (str) *: {\n            'routes': {\n              Any  (str) *: {\n                'index': {\n                  Any  (str) *: {\n                    Optional  (str) next_hop: <class 'str'>,\n                    Optional  (str) interface: <class 'str'>,\n                    Optional  (str) summary_type: <class 'str'>,\n                    Optional  (str) from: <class 'str'>,\n                    Optional  (str) expire_time: <class 'str'>,\n                    Optional  (str) route_type: <class 'str'>,\n                    Optional  (str) metric: <class 'int'>,\n                    Optional  (str) redistributed: <class 'bool'>,\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "doc": "Parser for :\n           show ip rip database\n           show ip rip database vrf {vrf}\n           ", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_rip.py#L53", "class": "ShowIpRipDatabase", "module_name": "show_rip"}}, "show service-group traffic-stats {group}": {"iosxe": {"uid": "show_service-group_traffic-stats_group", "schema": "{\n'group': {\n  Any  (str) *: {\n    'pkts_out': <class 'int'>,\n    'pkts_in': <class 'int'>,\n    'bytes_out': <class 'int'>,\n    'bytes_in': <class 'int'>,\n    },\n  },\n}", "doc": "Parser for :\n        show service-group traffic-stats\n        show service-group traffic-stats <group> ", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_service.py#L246", "class": "ShowServiceGroupTrafficStats", "module_name": "show_service"}}, "show ip arp summary": {"ios": {"uid": "show_ip_arp_summary", "schema": "{\n'incomp_entries': <class 'int'>,\n'total_entries': <class 'int'>,\n}", "doc": "Parser for show ip arp summary", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_arp.py#L50", "class": "ShowIpArpSummary", "module_name": "show_arp"}, "nxos": {"uid": "show_ip_arp_summary", "schema": "{\n'resolved': <class 'int'>,\n'incomplete': <class 'int'>,\n'total': <class 'int'>,\n'unknown': <class 'int'>,\n'throttled': <class 'int'>,\n}", "doc": "Parser for:\n\t\tshow ip arp summary vrf all\n\t\tparser class - implements detail parsing mechanisms for cli,xml and yang output.\n\t", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_arp.py#L171", "class": "ShowIpArpSummaryVrfAll", "module_name": "show_arp"}, "iosxe": {"uid": "show_ip_arp_summary", "schema": "{\n'incomp_entries': <class 'int'>,\n'total_entries': <class 'int'>,\n}", "doc": "Parser for:\n        show ip arp summary\n        parser class - implements detail parsing mechanisms for cli,xml and yang output.\n    ", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_arp.py#L127", "class": "ShowIpArpSummary", "module_name": "show_arp"}}, "show running-config {feature} | sec '^i' | inc {pip_str}": {"nxos": {"uid": "show_running-config_feature___sec_'^i'___inc_pip_str", "schema": "{\nOptional  (str) vrf: {\n  Any  (str) *: {\n    Optional  (str) address_family: {\n      Any  (str) *: {\n        Optional  (str) rp: {\n          Optional  (str) bsr: {\n            Any  (str) *: {\n              Optional  (str) priority: <class 'int'>,\n              Optional  (str) interval: <class 'int'>,\n              Optional  (str) interface: <class 'str'>,\n              Optional  (str) route_map: <class 'str'>,\n              Optional  (str) policy: <class 'str'>,\n              Optional  (str) prefix_list: <class 'str'>,\n              Optional  (str) mode: <class 'str'>,\n              },\n            },\n          Optional  (str) autorp: {\n            Optional  (str) send_rp_discovery: {\n              Optional  (str) scope: <class 'int'>,\n              'interface': <class 'str'>,\n              },\n            Optional  (str) send_rp_announce: {\n              Optional  (str) scope: <class 'int'>,\n              Optional  (str) bidir: <class 'bool'>,\n              Optional  (str) group_list: <class 'str'>,\n              Optional  (str) route_map: <class 'str'>,\n              Optional  (str) interface: <class 'str'>,\n              Optional  (str) prefix_list: <class 'str'>,\n              Optional  (str) group: <class 'str'>,\n              Optional  (str) interval: <class 'int'>,\n              },\n            Optional  (str) listener: <class 'bool'>,\n            },\n          Optional  (str) static_rp: {\n            Any  (str) *: {\n              Optional  (str) bidir: <class 'bool'>,\n              Optional  (str) policy_name: <class 'str'>,\n              Optional  (str) route_map: <class 'str'>,\n              Optional  (str) override: <class 'bool'>,\n              Optional  (str) prefix_list: <class 'str'>,\n              Optional  (str) policy: <class 'int'>,\n              },\n            },\n          },\n        },\n      },\n    },\n  },\nOptional  (str) feature_pim6: <class 'bool'>,\nOptional  (str) feature_pim: <class 'bool'>,\n}", "doc": "Parser for show running-config pim", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_pim.py#L4188", "class": "ShowRunningConfigPim", "module_name": "show_pim"}}, "show l2route topology": {"iosxr": {"uid": "show_l2route_topology", "schema": null, "doc": "Parser class for show l2route topology ", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_l2route.py#L17", "class": "ShowL2routeTopology", "module_name": "show_l2route"}}, "show bfd neighbors details": {"iosxe": {"uid": "show_bfd_neighbors_details", "schema": "{\n'our_address': {\n  Any  (str) *: {\n    'neighbor_address': {\n      Any  (str) *: {\n        Optional  (str) received_multiplier: <class 'int'>,\n        Optional  (str) up_time: <class 'str'>,\n        Optional  (str) elapsed_time_watermarks_last: <class 'int'>,\n        Optional  (str) holddown: <class 'int'>,\n        Optional  (str) cleanup_timer_hits: <class 'int'>,\n        Optional  (str) holddown_hits: <class 'int'>,\n        Optional  (str) sso_cleanup_timer_called: <class 'int'>,\n        'interface': <class 'str'>,\n        Optional  (str) hello: <class 'int'>,\n        'rh_rs': <class 'str'>,\n        Optional  (str) sso_cleanup_action_taken: <class 'int'>,\n        Optional  (str) hello_hits: <class 'int'>,\n        Optional  (str) holdown_timer: <class 'int'>,\n        Optional  (str) last_packet: {\n          Optional  (str) poll_bit: <class 'int'>,\n          Optional  (str) min_echo_int: <class 'int'>,\n          Optional  (str) final_bit: <class 'int'>,\n          Optional  (str) c_bit: <class 'int'>,\n          Optional  (str) multiplier: <class 'int'>,\n          Optional  (str) my_discr: <class 'int'>,\n          Optional  (str) length: <class 'int'>,\n          Optional  (str) version: <class 'int'>,\n          Optional  (str) diagnostic: <class 'int'>,\n          Optional  (str) your_discr: <class 'int'>,\n          Optional  (str) state_bit: <class 'str'>,\n          Optional  (str) min_tx_int: <class 'int'>,\n          Optional  (str) i_hear_you_bit: <class 'str'>,\n          Optional  (str) min_rx_int: <class 'int'>,\n          Optional  (str) demand_bit: <class 'int'>,\n          },\n        Optional  (str) holdown_timer_multiplier: <class 'int'>,\n        Optional  (str) session: {\n          'state': <class 'str'>,\n          'echo_function': <class 'bool'>,\n          Optional  (str) echo_interval_ms: <class 'int'>,\n          },\n        'state': <class 'str'>,\n        Optional  (str) session_host: <class 'str'>,\n        Optional  (str) pseudo_preemtive_process: {\n          Optional  (str) max: <class 'int'>,\n          Optional  (str) count: <class 'int'>,\n          Optional  (str) avg: <class 'int'>,\n          Optional  (str) min: <class 'int'>,\n          Optional  (str) last_ms_ago: <class 'int'>,\n          },\n        Optional  (str) rx: {\n          Optional  (str) last_ms_ago: <class 'int'>,\n          Optional  (str) max_int_ms: <class 'int'>,\n          Optional  (str) count: <class 'int'>,\n          Optional  (str) avg_int_ms: <class 'int'>,\n          Optional  (str) min_int_ms: <class 'int'>,\n          },\n        Optional  (str) handle: <class 'int'>,\n        Optional  (str) ipc_tx_failure_count: <class 'int'>,\n        Optional  (str) holddown_negotiated: <class 'int'>,\n        Optional  (str) local_diag: <class 'int'>,\n        Optional  (str) ipc_rx_failure_count: <class 'int'>,\n        Optional  (str) demand_mode: <class 'int'>,\n        Optional  (str) total_adjs_found: <class 'int'>,\n        Optional  (str) poll_bit: <class 'int'>,\n        Optional  (str) registered_protocols: <class 'list'>,\n        Optional  (str) min_tx_int: <class 'int'>,\n        Optional  (str) holddown_adjusted: <class 'int'>,\n        Optional  (str) min_rx_int: <class 'int'>,\n        Optional  (str) tx: {\n          Optional  (str) count: <class 'int'>,\n          Optional  (str) avg_int_ms: <class 'int'>,\n          Optional  (str) min_int_ms: <class 'int'>,\n          Optional  (str) last_ms_ago: <class 'int'>,\n          Optional  (str) max_int_ms: <class 'int'>,\n          },\n        Optional  (str) multiplier: <class 'int'>,\n        'ld_rd': <class 'str'>,\n        Optional  (str) elapsed_time_watermarks: <class 'str'>,\n        Optional  (str) received_min_rx_int: <class 'int'>,\n        },\n      },\n    },\n  },\n}", "doc": " Parser for the following commands:\n\t\t\t* 'show bfd neighbors details'\n\t\t\t* 'show bfd neighbors client {client} details'\n\t", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_bfd.py#L119", "class": "ShowBfdNeighborsDetails", "module_name": "show_bfd"}}, "show running-config | inc peer-policy": {"nxos": {"uid": "show_running-config___inc_peer-policy", "schema": "{\n'peer_policy': {\n  Any  (str) *: {\n    Optional  (str) as_override: <class 'bool'>,\n    Optional  (str) default_originate_route_map: <class 'str'>,\n    Optional  (str) soft_reconfiguration: <class 'bool'>,\n    Optional  (str) send_community: <class 'bool'>,\n    Optional  (str) site_of_origin: <class 'bool'>,\n    Optional  (str) next_hop_self: <class 'bool'>,\n    Optional  (str) allowas_in: <class 'bool'>,\n    Optional  (str) send_ext_community: <class 'bool'>,\n    Optional  (str) route_reflector_client: <class 'bool'>,\n    Optional  (str) inherited_vrf_default: <class 'str'>,\n    Optional  (str) route_map_name_in: <class 'str'>,\n    Optional  (str) route_map_name_out: <class 'str'>,\n    Optional  (str) maximum_prefix_max_prefix_no: <class 'int'>,\n    Optional  (str) default_originate: <class 'bool'>,\n    },\n  },\n}", "doc": "Parser for:\n        show bgp peer-policy <peer_policy>\n        Executing 'show running-config bgp | inc peer-policy' to collect\n        configured peer-policy names.\n    ", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_bgp.py#L1292", "class": "ShowBgpPeerPolicy", "module_name": "show_bgp"}}, "show mpls ldp bindings {all}": {"iosxe": {"uid": "show_mpls_ldp_bindings_all", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'lib_entry': {\n      Any  (str) *: {\n        Optional  (str) remote_binding: {\n          'label': {\n            Any  (str) *: {\n              'lsr_id': {\n                Any  (str) *: {\n                  'label_space_id': {\n                    Any  (str) *: {\n                      Optional  (str) checkpointed: <class 'bool'>,\n                      },\n                    },\n                  },\n                },\n              },\n            },\n          },\n        Optional  (str) checkpoint: <class 'str'>,\n        Optional  (str) label_binding: {\n          'label': {\n            Any  (str) *: {\n              Optional  (str) owner: <class 'str'>,\n              Optional  (str) advertised_to: <class 'list'>,\n              },\n            },\n          },\n        'rev': <class 'str'>,\n        },\n      },\n    },\n  },\n}", "doc": "\n       Parser for show mpls ldp bindings\n                  show mpls ldp bindings vrf <vrf>\n                  show mpls ldp bindings all\n                  show mpls ldp bindings all detail\n       ", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_mpls.py#L1073", "class": "ShowMplsLdpBindings", "module_name": "show_mpls"}}, "show spanning-tree detail": {"ios": {"uid": "show_spanning-tree_detail", "schema": "{\nAny  (str) *: {\n  'max_age': <class 'int'>,\n  'forwarding_delay': <class 'int'>,\n  Optional  (str) hold_count: <class 'int'>,\n  Optional  (str) name: <class 'str'>,\n  Optional  (str) revision: <class 'int'>,\n  Optional  (str) domain: <class 'str'>,\n  Any  (str) *: {\n    Any  (str) *: {\n      'max_age': <class 'int'>,\n      'bridge_priority': <class 'int'>,\n      'topology_detected_flag': <class 'bool'>,\n      Optional  (str) aging_timer: <class 'int'>,\n      Optional  (str) hold_count: <class 'int'>,\n      'notification_timer': <class 'int'>,\n      'bridge_address': <class 'str'>,\n      'time_since_topology_change': <class 'str'>,\n      'hello_timer': <class 'int'>,\n      'hold_time': <class 'int'>,\n      'topology_change_timer': <class 'int'>,\n      'bridge_sysid': <class 'int'>,\n      'notification_times': <class 'int'>,\n      'topology_changes': <class 'int'>,\n      'interfaces': {\n        Any  (str) *: {\n          Optional  (str) peer: <class 'str'>,\n          'cost': <class 'int'>,\n          'forward_delay': <class 'int'>,\n          'designated_root_priority': <class 'int'>,\n          'port_num': <class 'int'>,\n          'name': <class 'str'>,\n          'port_identifier': <class 'str'>,\n          'designated_bridge_address': <class 'str'>,\n          'designated_path_cost': <class 'int'>,\n          'message_age': <class 'int'>,\n          'counters': {\n            'bpdu_received': <class 'int'>,\n            'bpdu_sent': <class 'int'>,\n            },\n          'status': <class 'str'>,\n          Optional  (str) loop_guard: <class 'bool'>,\n          Optional  (str) boundary: <class 'str'>,\n          'number_of_forward_transitions': <class 'int'>,\n          'designated_port_id': <class 'str'>,\n          'port_priority': <class 'int'>,\n          'designated_root_address': <class 'str'>,\n          'hold': <class 'int'>,\n          'link_type': <class 'str'>,\n          'designated_bridge_priority': <class 'int'>,\n          },\n        },\n      Optional  (str) mst_id: <class 'int'>,\n      Optional  (str) vlan: <class 'str'>,\n      Optional  (str) vlan_id: <class 'int'>,\n      Optional  (str) hello_time: <class 'int'>,\n      'topology_change_flag': <class 'bool'>,\n      Optional  (str) max_age: <class 'int'>,\n      Optional  (str) forwarding_delay: <class 'int'>,\n      'topology_change_times': <class 'int'>,\n      'forwarding_delay': <class 'int'>,\n      Optional  (str) root_of_spanning_tree: <class 'bool'>,\n      'hello_time': <class 'int'>,\n      Optional  (str) topology_from_port: <class 'str'>,\n      },\n    },\n  Optional  (str) max_hop: <class 'int'>,\n  'hello_time': <class 'int'>,\n  Optional  (str) pvst_id: <class 'str'>,\n  },\n}", "doc": "Parser for show spanning-tree detail", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_spanning_tree.py#L29", "class": "ShowSpanningTreeDetail", "module_name": "show_spanning_tree"}, "iosxe": {"uid": "show_spanning-tree_detail", "schema": "{\nAny  (str) *: {\n  'max_age': <class 'int'>,\n  'forwarding_delay': <class 'int'>,\n  Optional  (str) hold_count: <class 'int'>,\n  Optional  (str) name: <class 'str'>,\n  Optional  (str) revision: <class 'int'>,\n  Optional  (str) domain: <class 'str'>,\n  Any  (str) *: {\n    Any  (str) *: {\n      'max_age': <class 'int'>,\n      'bridge_priority': <class 'int'>,\n      'topology_detected_flag': <class 'bool'>,\n      Optional  (str) aging_timer: <class 'int'>,\n      Optional  (str) hold_count: <class 'int'>,\n      'notification_timer': <class 'int'>,\n      'bridge_address': <class 'str'>,\n      'time_since_topology_change': <class 'str'>,\n      'hello_timer': <class 'int'>,\n      'hold_time': <class 'int'>,\n      'topology_change_timer': <class 'int'>,\n      'bridge_sysid': <class 'int'>,\n      'notification_times': <class 'int'>,\n      'topology_changes': <class 'int'>,\n      'interfaces': {\n        Any  (str) *: {\n          Optional  (str) peer: <class 'str'>,\n          'cost': <class 'int'>,\n          'forward_delay': <class 'int'>,\n          'designated_root_priority': <class 'int'>,\n          'port_num': <class 'int'>,\n          'name': <class 'str'>,\n          'port_identifier': <class 'str'>,\n          'designated_bridge_address': <class 'str'>,\n          'designated_path_cost': <class 'int'>,\n          'message_age': <class 'int'>,\n          'counters': {\n            'bpdu_received': <class 'int'>,\n            'bpdu_sent': <class 'int'>,\n            },\n          'status': <class 'str'>,\n          Optional  (str) loop_guard: <class 'bool'>,\n          Optional  (str) boundary: <class 'str'>,\n          'number_of_forward_transitions': <class 'int'>,\n          'designated_port_id': <class 'str'>,\n          'port_priority': <class 'int'>,\n          'designated_root_address': <class 'str'>,\n          'hold': <class 'int'>,\n          'link_type': <class 'str'>,\n          'designated_bridge_priority': <class 'int'>,\n          },\n        },\n      Optional  (str) mst_id: <class 'int'>,\n      Optional  (str) vlan: <class 'str'>,\n      Optional  (str) vlan_id: <class 'int'>,\n      Optional  (str) hello_time: <class 'int'>,\n      'topology_change_flag': <class 'bool'>,\n      Optional  (str) max_age: <class 'int'>,\n      Optional  (str) forwarding_delay: <class 'int'>,\n      'topology_change_times': <class 'int'>,\n      'forwarding_delay': <class 'int'>,\n      Optional  (str) root_of_spanning_tree: <class 'bool'>,\n      'hello_time': <class 'int'>,\n      Optional  (str) topology_from_port: <class 'str'>,\n      },\n    },\n  Optional  (str) max_hop: <class 'int'>,\n  'hello_time': <class 'int'>,\n  Optional  (str) pvst_id: <class 'str'>,\n  },\n}", "doc": "Parser for show spanning-tree detail", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_spanning_tree.py#L260", "class": "ShowSpanningTreeDetail", "module_name": "show_spanning_tree"}}, "show ip protocols vrf {vrf} | sec rip": {"iosxe": {"uid": "show_ip_protocols_vrf_vrf___sec_rip", "schema": "{\n'protocols': {\n  Optional  (str) ospf: {\n    'vrf': {\n      Any  (str) *: {\n        'address_family': {\n          Any  (str) *: {\n            'instance': {\n              Any  (str) *: {\n                'preference': {\n                  'single_value': {\n                    'all': <class 'int'>,\n                    },\n                  Optional  (str) multi_values: {\n                    'granularity': {\n                      'detail': {\n                        'inter_area': <class 'int'>,\n                        'intra_area': <class 'int'>,\n                        },\n                      Optional  (str) coarse: {\n                        'internal': <class 'int'>,\n                        },\n                      },\n                    'external': <class 'int'>,\n                    },\n                  },\n                Optional  (str) passive_interfaces: <class 'list'>,\n                'total_stub_area': <class 'int'>,\n                'incoming_filter_list': <class 'str'>,\n                'total_normal_area': <class 'int'>,\n                Optional  (str) routing_information_sources: {\n                  'gateway': {\n                    Any  (str) *: {\n                      'distance': <class 'int'>,\n                      'last_update': <class 'str'>,\n                      },\n                    },\n                  },\n                'total_nssa_area': <class 'int'>,\n                'total_areas': <class 'int'>,\n                Optional  (str) areas: {\n                  Any  (str) *: {\n                    Optional  (str) configured_interfaces: <class 'list'>,\n                    },\n                  },\n                'router_id': <class 'str'>,\n                'spf_control': {\n                  'paths': <class 'int'>,\n                  },\n                'outgoing_filter_list': <class 'str'>,\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  Optional  (str) bgp: {\n    'instance': {\n      'default': {\n        'vrf': {\n          'default': {\n            'address_family': {\n              'ipv4': {\n                'automatic_route_summarization': <class 'bool'>,\n                Optional  (str) neighbor: {\n                  Any  (str) *: {\n                    'neighbor_id': <class 'str'>,\n                    'distance': <class 'int'>,\n                    'last_update': <class 'str'>,\n                    },\n                  },\n                Optional  (str) preference: {\n                  'multi_values': {\n                    'internal': <class 'int'>,\n                    'external': <class 'int'>,\n                    'local': <class 'int'>,\n                    },\n                  },\n                'outgoing_filter_list': <class 'str'>,\n                'incoming_filter_list': <class 'str'>,\n                'maximum_path': <class 'int'>,\n                'igp_sync': <class 'bool'>,\n                },\n              },\n            },\n          },\n        'bgp_id': <class 'int'>,\n        },\n      },\n    },\n  Optional  (str) eigrp: {\n    'protocol_under_dev': <class 'bool'>,\n    },\n  Optional  (str) application: {\n    'preference': {\n      'single_value': {\n        'all': <class 'int'>,\n        },\n      },\n    'flushed': <class 'int'>,\n    'invalid': <class 'int'>,\n    'update_frequency': <class 'int'>,\n    'outgoing_filter_list': <class 'str'>,\n    'incoming_filter_list': <class 'str'>,\n    'maximum_path': <class 'int'>,\n    'holddown': <class 'int'>,\n    },\n  Optional  (str) isis: {\n    'vrf': {\n      Any  (str) *: {\n        'address_family': {\n          Any  (str) *: {\n            'instance': {\n              Any  (str) *: {\n                'redistributing': <class 'str'>,\n                'preference': {\n                  'single_value': {\n                    'all': <class 'int'>,\n                    },\n                  },\n                Optional  (str) passive_interfaces: <class 'list'>,\n                Optional  (str) configured_interfaces: <class 'list'>,\n                'outgoing_filter_list': <class 'str'>,\n                'incoming_filter_list': <class 'str'>,\n                Optional  (str) address_summarization: <class 'list'>,\n                Optional  (str) routing_information_sources: {\n                  'gateway': {\n                    Any  (str) *: {\n                      'distance': <class 'int'>,\n                      'last_update': <class 'str'>,\n                      },\n                    },\n                  },\n                Optional  (str) maximum_path: <class 'int'>,\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  Optional  (str) rip: {\n    'vrf': {\n      Any  (str) *: {\n        'address_family': {\n          Any  (str) *: {\n            Optional  (str) instance: {\n              Any  (str) *: {\n                'redistribute': {\n                  Any  (str) *: {\n                    Optional  (str) route_policy: <class 'int'>,\n                    Optional  (str) metric: <class 'int'>,\n                    Optional  (Any) Any  (str) *: {\n                      Optional  (str) route_policy: <class 'int'>,\n                      Optional  (str) metric: <class 'int'>,\n                      Optional  (str) route_type: <class 'str'>,\n                      },\n                    },\n                  },\n                Optional  (str) output_delay: <class 'int'>,\n                'send_version': Or (<class 'int'>, <class 'str'>),\n                Optional  (str) timers: {\n                  'next_update': <class 'int'>,\n                  'invalid_interval': <class 'int'>,\n                  'update_interval': <class 'int'>,\n                  'flush_interval': <class 'int'>,\n                  'holddown_interval': <class 'int'>,\n                  },\n                Optional  (str) neighbors: {\n                  Any  (str) *: {\n                    'distance': <class 'int'>,\n                    'last_update': <class 'str'>,\n                    },\n                  },\n                'outgoing_update_filterlist': {\n                  'outgoing_update_filterlist': <class 'str'>,\n                  Optional  (str) interfaces: {\n                    Any  (str) *: {\n                      'filter': <class 'str'>,\n                      'per_user': <class 'bool'>,\n                      'default': <class 'str'>,\n                      },\n                    },\n                  },\n                Optional  (str) default_redistribution_metric: <class 'int'>,\n                Optional  (str) incoming_route_metric: {\n                  'added': <class 'str'>,\n                  'list': <class 'str'>,\n                  },\n                Optional  (str) automatic_network_summarization_in_effect: <class 'bool'>,\n                'maximum_paths': <class 'int'>,\n                'incoming_update_filterlist': {\n                  'incoming_update_filterlist': <class 'str'>,\n                  Optional  (str) interfaces: {\n                    Any  (str) *: {\n                      'filter': <class 'str'>,\n                      'per_user': <class 'bool'>,\n                      'default': <class 'str'>,\n                      },\n                    },\n                  },\n                'receive_version': Or (<class 'int'>, <class 'str'>),\n                'network': <class 'list'>,\n                'distance': <class 'int'>,\n                'interfaces': {\n                  Any  (str) *: {\n                    Optional  (str) summary_address: {\n                      Any  (str) *: {\n                        Optional  (str) metric: <class 'str'>,\n                        },\n                      },\n                    Optional  (str) filtered_per_user: <class 'int'>,\n                    Optional  (str) neighbors: {\n                      Any  (str) *: {\n                        Optional  (str) address: <class 'str'>,\n                        },\n                      },\n                    Optional  (str) default_set: <class 'bool'>,\n                    'triggered_rip': <class 'str'>,\n                    'key_chain': <class 'str'>,\n                    'receive_version': <class 'str'>,\n                    'send_version': <class 'str'>,\n                    Optional  (str) passive: <class 'bool'>,\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "doc": "Parser for :\n       show ip protocols | sec rip\n       show ip protocols vrf {vrf} | sec rip\n       ", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_protocols.py#L1077", "class": "ShowIpProtocolsSectionRip", "module_name": "show_protocols"}}, "show interface | i nve": {"nxos": {"uid": "show_interface___i_nve", "schema": "{\n'nves': {\n  Any  (str) *: {\n    'nve_name': <class 'str'>,\n    'nve_state': <class 'str'>,\n    },\n  },\n}", "doc": "Parser for show interface | i nve", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_vxlan.py#L252", "class": "ShowNveInterface", "module_name": "show_vxlan"}}, "show ip arp statistics vrf {vrf}": {"nxos": {"uid": "show_ip_arp_statistics_vrf_vrf", "schema": "{\n'statistics': {\n  'sent': {\n    'tunneled': <class 'int'>,\n    'drops_details': {\n      'invalid_src_ip': <class 'int'>,\n      'adjacency_couldnt_be_added': <class 'int'>,\n      Optional  (str) arp_refresh_skipped_over_core_and_flooded: <class 'int'>,\n      'null_source_ip': <class 'int'>,\n      'client_enqueue_failed': <class 'int'>,\n      'context_not_created': <class 'int'>,\n      'mbuf_operation_failed': <class 'int'>,\n      'dest_not_reachable_for_proxy_arp': <class 'int'>,\n      'invalid_context': <class 'int'>,\n      'vip_is_not_active': <class 'int'>,\n      'null_source_mac': <class 'int'>,\n      Optional  (str) destnination_on_l2_port_tracked: <class 'int'>,\n      'invalid_proxy_arp': <class 'int'>,\n      'invalid_local_proxy_arp': <class 'int'>,\n      'invalid_ifindex': <class 'int'>,\n      'unattached_ip': <class 'int'>,\n      'destnination_is_our_own_ip': <class 'int'>,\n      Optional  (str) dest_unreachable_for_enhanced_proxy: <class 'int'>,\n      'invalid_dest_ip': <class 'int'>,\n      },\n    'l2_requests': <class 'int'>,\n    'total': <class 'int'>,\n    'requests': <class 'int'>,\n    'replies': <class 'int'>,\n    'gratuitous': <class 'int'>,\n    'dropped': <class 'int'>,\n    'l2_replies': <class 'int'>,\n    },\n  'adjacency': {\n    'adjacency_deletes': <class 'int'>,\n    Optional  (str) failed_due_to_limits: <class 'int'>,\n    'adjacency_timeouts': <class 'int'>,\n    'adjacency_adds': <class 'int'>,\n    },\n  'received': {\n    'fastpath': <class 'int'>,\n    'l2_requests': <class 'int'>,\n    'total': <class 'int'>,\n    'local_proxy_arp': <class 'int'>,\n    Optional  (str) enhanced_proxy_arp: <class 'int'>,\n    'drops_details': {\n      'received_before_arp_initialization': <class 'int'>,\n      'context_not_created': <class 'int'>,\n      'grat_arp_received_on_proxy': <class 'int'>,\n      'directed_broadcast_source': <class 'int'>,\n      'invalid_layer2_address_length': <class 'int'>,\n      'invalid_context': <class 'int'>,\n      'incorrect_length': <class 'int'>,\n      'requests_came_for_exising_entries': <class 'int'>,\n      'requests_came_on_a_l2_interface': <class 'int'>,\n      Optional  (str) number_of_signals_received_from_l2rib: <class 'int'>,\n      'non_active_fhrp_dest_ip': <class 'int'>,\n      'no_mem_to_create_per_intf_structure': <class 'int'>,\n      'invalid_destination_ip_address': <class 'int'>,\n      'packet_with_vip_on_standby_fhrp': <class 'int'>,\n      'non_local_destination_ip_address': <class 'int'>,\n      'source_address_mismatch_with_subnet': <class 'int'>,\n      'l2_packet_on_untrusted_l2_port': <class 'int'>,\n      'invalid_protocol_packet': <class 'int'>,\n      'appeared_on_a_wrong_interface': <class 'int'>,\n      'dropping_due_to_tunneling_failures': <class 'int'>,\n      'invalid_layer3_address_length': <class 'int'>,\n      'invalid_hardwaretype': <class 'int'>,\n      'l2fm_query_failed_for_a_l2address': <class 'int'>,\n      Optional  (str) glean_requests_recv_count: <class 'int'>,\n      'invalid_source_ip_address': <class 'int'>,\n      Optional  (str) arp_refresh_requests_received_from_clients: <class 'int'>,\n      'source_mac_address_is_our_own': <class 'int'>,\n      'invalid_source_mac_address': <class 'int'>,\n      },\n    Optional  (str) anycast_proxy_arp: <class 'int'>,\n    'l2_replies': <class 'int'>,\n    'tunneled': <class 'int'>,\n    Optional  (str) l2_port_track_proxy_arp: <class 'int'>,\n    Optional  (str) dropped_server_port: <class 'int'>,\n    'snooped': <class 'int'>,\n    'requests': <class 'int'>,\n    'replies': <class 'int'>,\n    'dropped': <class 'int'>,\n    'proxy_arp': <class 'int'>,\n    },\n  },\n}", "doc": "Parser for:\n\t\tshow ip arp statistics vrf all\n\t\tparser class - implements detail parsing mechanisms for cli,xml and yang output.\n\t", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_arp.py#L330", "class": "ShowIpArpstatisticsVrfAll", "module_name": "show_arp"}}, "show {af} rpf {mroute}": {"iosxe": {"uid": "show_af_rpf_mroute", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'source_address': <class 'str'>,\n    Optional  (str) source_host: <class 'str'>,\n    'path': {\n      Any  (str) *: {\n        Optional  (str) distance_preferred_lookup: <class 'bool'>,\n        Optional  (str) lookup_vrf: <class 'str'>,\n        'table_type': <class 'str'>,\n        Optional  (str) neighbor_host: <class 'str'>,\n        Optional  (str) originated_topology: <class 'str'>,\n        Optional  (str) admin_distance: <class 'str'>,\n        Optional  (str) route_mask: <class 'str'>,\n        Optional  (str) table_feature: <class 'str'>,\n        'neighbor_address': <class 'str'>,\n        Optional  (str) table_feature_instance: <class 'str'>,\n        'interface_name': <class 'str'>,\n        Optional  (str) recursion_count: <class 'int'>,\n        Optional  (str) lookup_topology: <class 'str'>,\n        Optional  (str) metric: <class 'int'>,\n        },\n      },\n    },\n  },\n}", "doc": "Parser for:\n        show ipv6 rpf <mroute address>\n        show ipv6 rpf vrf <vrf> <mroute address>", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_rpf.py#L271", "class": "ShowIpv6Rpf", "module_name": "show_rpf"}}, "show ntp peer-status": {"nxos": {"uid": "show_ntp_peer-status", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'peer': {\n      Any  (str) *: {\n        Optional  (str) stratum: <class 'int'>,\n        Optional  (str) clock_state: <class 'str'>,\n        Optional  (str) poll: <class 'int'>,\n        'remote': <class 'str'>,\n        Optional  (str) reach: <class 'int'>,\n        Optional  (str) mode: <class 'str'>,\n        Optional  (str) delay: <class 'float'>,\n        Optional  (str) local: <class 'str'>,\n        Optional  (str) vrf: <class 'str'>,\n        },\n      },\n    },\n  },\n'clock_state': {\n  'system_status': {\n    Optional  (str) root_delay: <class 'float'>,\n    Optional  (str) clock_stratum: <class 'int'>,\n    'clock_state': <class 'str'>,\n    Optional  (str) associations_address: <class 'str'>,\n    },\n  },\n'total_peers': <class 'int'>,\n}", "doc": "Parser for show ntp peer-status", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_ntp.py#L59", "class": "ShowNtpPeerStatus", "module_name": "show_ntp"}}, "show ethernet service instance stats": {"ios": {"uid": "show_ethernet_service_instance_stats", "schema": "{\nOptional  (str) max_num_of_service_instances: <class 'int'>,\nOptional  (str) service_instance: {\n  Any  (str) *: {\n    'pkts_out': <class 'int'>,\n    'interface': <class 'str'>,\n    'pkts_in': <class 'int'>,\n    'bytes_out': <class 'int'>,\n    'bytes_in': <class 'int'>,\n    },\n  },\n}", "doc": "Parser for show ethernet service instance stats\n                  show ethernet service instance interface <interface> stats\n    ", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_l2vpn.py#L51", "class": "ShowEthernetServiceInstanceStats", "module_name": "show_l2vpn"}, "iosxe": {"uid": "show_ethernet_service_instance_stats", "schema": "{\nOptional  (str) max_num_of_service_instances: <class 'int'>,\nOptional  (str) service_instance: {\n  Any  (str) *: {\n    'pkts_out': <class 'int'>,\n    'interface': <class 'str'>,\n    'pkts_in': <class 'int'>,\n    'bytes_out': <class 'int'>,\n    'bytes_in': <class 'int'>,\n    },\n  },\n}", "doc": "Parser for show ethernet service instance stats\n                  show ethernet service instance interface <interface> stats\n    ", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_l2vpn.py#L449", "class": "ShowEthernetServiceInstanceStats", "module_name": "show_l2vpn"}}, "show lldp interface": {"ios": {"uid": "show_lldp_interface", "schema": "{\n'interfaces': {\n  Any  (str) *: {\n    'rx': <class 'str'>,\n    'rx_state': <class 'str'>,\n    'tx': <class 'str'>,\n    'tx_state': <class 'str'>,\n    },\n  },\n}", "doc": "Parser for show lldp interface [<WORD>]", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_lldp.py#L33", "class": "ShowLldpInterface", "module_name": "show_lldp"}, "iosxe": {"uid": "show_lldp_interface", "schema": "{\n'interfaces': {\n  Any  (str) *: {\n    'rx': <class 'str'>,\n    'rx_state': <class 'str'>,\n    'tx': <class 'str'>,\n    'tx_state': <class 'str'>,\n    },\n  },\n}", "doc": "Parser for show lldp interface [<WORD>]", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_lldp.py#L418", "class": "ShowLldpInterface", "module_name": "show_lldp"}}, "show arp": {"iosxe": {"uid": "show_arp", "schema": "{\n'interfaces': {\n  Any  (str) *: {\n    'ipv4': {\n      'neighbors': {\n        Any  (str) *: {\n          'ip': <class 'str'>,\n          'age': <class 'str'>,\n          'origin': <class 'str'>,\n          'protocol': <class 'str'>,\n          'type': <class 'str'>,\n          'link_layer_address': <class 'str'>,\n          },\n        },\n      },\n    },\n  },\n}", "doc": " Parser for show arp\n                  show arp <WROD>\n                  show arp vrf <vrf>\n                  show arp vrf <vrf> <WROD> ", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_arp.py#L57", "class": "ShowArp", "module_name": "show_arp"}}, "show ip bgp {address_family}": {"iosxe": {"uid": "show_ip_bgp_address_family", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'address_family': {\n      Any  (str) *: {\n        Optional  (str) pfx_limit: <class 'int'>,\n        Optional  (str) route_distinguisher: <class 'str'>,\n        Optional  (str) default_vrf: <class 'str'>,\n        Optional  (str) bgp_table_version: <class 'int'>,\n        Optional  (str) af_private_import_to_address_family: <class 'str'>,\n        Optional  (str) route_identifier: <class 'str'>,\n        Optional  (str) pfx_count: <class 'int'>,\n        Optional  (str) routes: {\n          Optional  (Any) Any  (str) *: {\n            Optional  (str) index: {\n              Optional  (Any) Any  (str) *: {\n                Optional  (str) weight: <class 'int'>,\n                Optional  (str) next_hop: <class 'str'>,\n                Optional  (str) path: <class 'str'>,\n                Optional  (str) status_codes: <class 'str'>,\n                Optional  (str) origin_codes: <class 'str'>,\n                Optional  (str) metric: <class 'int'>,\n                Optional  (str) localpref: <class 'int'>,\n                },\n              },\n            },\n          },\n        Optional  (str) vrf_route_identifier: <class 'str'>,\n        },\n      },\n    },\n  },\n}", "doc": " Parser for:\n        * 'show ip bgp'\n        * 'show ip bgp {address_family}'\n        * 'show ip bgp {address_family} rd {rd}'\n        * 'show ip bgp {address_family} vrf {vrf}'\n    ", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_bgp.py#L669", "class": "ShowIpBgp", "module_name": "show_bgp"}}, "show bridge-domain {bd_id}": {"ios": {"uid": "show_bridge-domain_bd_id", "schema": "{\nOptional  (str) lines_match_regexp: <class 'int'>,\nOptional  (str) bridge_domain: {\n  Any  (str) *: {\n    'state': <class 'str'>,\n    'mac_table': {\n      Any  (str) *: {\n        'mac_address': {\n          Any  (str) *: {\n            'mac_address': <class 'str'>,\n            'aed': <class 'int'>,\n            'policy': <class 'str'>,\n            'tag': <class 'str'>,\n            'age': <class 'int'>,\n            },\n          },\n        'pseudoport': <class 'str'>,\n        },\n      },\n    'bd_domain_id': <class 'int'>,\n    Any  (str) *: {\n      Any  (str) *: {\n        'num_of_ports': <class 'str'>,\n        'interfaces': <class 'list'>,\n        },\n      },\n    'mac_learning_state': <class 'str'>,\n    'aging_timer': <class 'int'>,\n    'number_of_ports_in_all': <class 'int'>,\n    'member_ports': <class 'list'>,\n    },\n  },\n}", "doc": "Parser for show bridge-domain\n                  show bridge-domain <WORD>\n                  show bridge-domain | count <WORD>\n    ", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_l2vpn.py#L80", "class": "ShowBridgeDomain", "module_name": "show_l2vpn"}, "iosxe": {"uid": "show_bridge-domain_bd_id", "schema": "{\nOptional  (str) lines_match_regexp: <class 'int'>,\nOptional  (str) bridge_domain: {\n  Any  (str) *: {\n    'state': <class 'str'>,\n    'mac_table': {\n      Any  (str) *: {\n        'mac_address': {\n          Any  (str) *: {\n            'mac_address': <class 'str'>,\n            'aed': <class 'int'>,\n            'policy': <class 'str'>,\n            'tag': <class 'str'>,\n            'age': <class 'int'>,\n            },\n          },\n        'pseudoport': <class 'str'>,\n        },\n      },\n    'bd_domain_id': <class 'int'>,\n    Any  (str) *: {\n      Any  (str) *: {\n        'num_of_ports': <class 'str'>,\n        'interfaces': <class 'list'>,\n        },\n      },\n    'mac_learning_state': <class 'str'>,\n    'aging_timer': <class 'int'>,\n    'number_of_ports_in_all': <class 'int'>,\n    'member_ports': <class 'list'>,\n    },\n  },\n}", "doc": "Parser for show bridge-domain\n                  show bridge-domain <WORD>\n                  show bridge-domain | count <WORD>", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_l2vpn.py#L73", "class": "ShowBridgeDomain", "module_name": "show_l2vpn"}}, "show sdr detail": {"iosxr": {"uid": "show_sdr_detail", "schema": "{\n'sdr_id': {\n  Any  (str) *: {\n    Optional  (str) mac_address: <class 'str'>,\n    'primary_node2': <class 'str'>,\n    'primary_node1': <class 'str'>,\n    Optional  (str) dsdrsc_node: <class 'str'>,\n    'membership': {\n      Any  (str) *: {\n        'type': <class 'str'>,\n        'node_status': <class 'str'>,\n        'partner_name': <class 'str'>,\n        Optional  (str) red_state: <class 'str'>,\n        },\n      },\n    'sdr_name': <class 'str'>,\n    Optional  (str) dsdrsc_partner_node: <class 'str'>,\n    },\n  },\n}", "doc": "Parser for show sdr detail", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_platform.py#L174", "class": "ShowSdrDetail", "module_name": "show_platform"}}, "show ospf vrf all-inclusive sham-links": {"iosxr": {"uid": "show_ospf_vrf_all-inclusive_sham-links", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'address_family': {\n      Any  (str) *: {\n        'instance': {\n          Any  (str) *: {\n            'areas': {\n              Any  (str) *: {\n                'sham_links': {\n                  Any  (str) *: {\n                    'dead_interval': <class 'int'>,\n                    'remote_id': <class 'str'>,\n                    'name': <class 'str'>,\n                    'wait_interval': <class 'int'>,\n                    'state': <class 'str'>,\n                    'local_id': <class 'str'>,\n                    'if_index': <class 'int'>,\n                    Optional  (str) authentication: {\n                      'auth_trailer_key': {\n                        Optional  (str) youngest_key_id: <class 'int'>,\n                        'crypto_algorithm': <class 'str'>,\n                        },\n                      },\n                    'cost': <class 'int'>,\n                    Optional  (str) nsf: {\n                      'enable': <class 'bool'>,\n                      'last_restart': <class 'str'>,\n                      },\n                    'hello_timer': <class 'str'>,\n                    'demand_circuit': <class 'bool'>,\n                    'transmit_delay': <class 'int'>,\n                    'hello_interval': <class 'int'>,\n                    'transit_area_id': <class 'str'>,\n                    'link_state': <class 'str'>,\n                    'retransmit_interval': <class 'int'>,\n                    Optional  (str) dcbitless_lsa_count: <class 'int'>,\n                    Optional  (str) donotage_lsa: <class 'str'>,\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "doc": "Parser for show ospf vrf all-inclusive sham-links", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_ospf.py#L2395", "class": "ShowOspfVrfAllInclusiveShamLinks", "module_name": "show_ospf"}}, "show ip ospf database router detail": {"nxos": {"uid": "show_ip_ospf_database_router_detail", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'address_family': {\n      Any  (str) *: {\n        'instance': {\n          Any  (str) *: {\n            Optional  (str) areas: {\n              Any  (str) *: {\n                'database': {\n                  'lsa_types': {\n                    Any  (str) *: {\n                      'lsa_type': <class 'int'>,\n                      'lsas': {\n                        Any  (str) *: {\n                          'ospfv2': {\n                            'header': {\n                              'age': <class 'int'>,\n                              'option_desc': <class 'str'>,\n                              'adv_router': <class 'str'>,\n                              Optional  (str) maxage: <class 'bool'>,\n                              'seq_num': <class 'str'>,\n                              'length': <class 'int'>,\n                              'checksum': <class 'str'>,\n                              'type': <class 'int'>,\n                              'lsa_id': <class 'str'>,\n                              'option': <class 'str'>,\n                              },\n                            'body': {\n                              'router': {\n                                'links': {\n                                  Any  (str) *: {\n                                    'topologies': {\n                                      Any  (str) *: {\n                                        'tos': <class 'int'>,\n                                        'metric': <class 'int'>,\n                                        'mt_id': <class 'int'>,\n                                        },\n                                      },\n                                    'link_id': <class 'str'>,\n                                    'num_tos_metrics': <class 'int'>,\n                                    'type': <class 'str'>,\n                                    'link_data': <class 'str'>,\n                                    },\n                                  },\n                                'num_of_links': <class 'int'>,\n                                Optional  (str) flags: <class 'str'>,\n                                },\n                              },\n                            },\n                          'lsa_id': <class 'str'>,\n                          'adv_router': <class 'str'>,\n                          },\n                        },\n                      },\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "doc": "Parser for:\n        show ip ospf database router detail\n        show ip ospf database router detail vrf <vrf>", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_ospf.py#L3495", "class": "ShowIpOspfDatabaseRouterDetail", "module_name": "show_ospf"}}, "show ip igmp groups": {"nxos": {"uid": "show_ip_igmp_groups", "schema": "{\n'vrfs': {\n  Any  (str) *: {\n    'total_entries': <class 'int'>,\n    Optional  (str) interface: {\n      Any  (str) *: {\n        'group': {\n          Any  (str) *: {\n            Optional  (str) up_time: <class 'str'>,\n            Optional  (str) source: {\n              Any  (str) *: {\n                'type': <class 'str'>,\n                'expire': <class 'str'>,\n                'last_reporter': <class 'str'>,\n                'up_time': <class 'str'>,\n                },\n              },\n            Optional  (str) last_reporter: <class 'str'>,\n            Optional  (str) expire: <class 'str'>,\n            Optional  (str) type: <class 'str'>,\n            },\n          },\n        },\n      },\n    },\n  },\n}", "doc": "Parser for:\n        show ip igmp groups\n        show ip igmp groups vrf all\n        show ip igmp groups vrf <vrf>", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_igmp.py#L876", "class": "ShowIpIgmpGroups", "module_name": "show_igmp"}}, "show bgp all neighbors {neighbor} policy": {"ios": {"uid": "show_bgp_all_neighbors_neighbor_policy", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'neighbor': {\n      Any  (str) *: {\n        'address_family': {\n          Any  (str) *: {\n            Optional  (str) nbr_af_route_map_name_in: <class 'str'>,\n            Optional  (str) nbr_af_route_map_name_out: <class 'str'>,\n            },\n          },\n        },\n      },\n    },\n  },\n}", "doc": "Parser for show bgp all neighbors <neighbor> policy", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_bgp.py#L48", "class": "ShowBgpAllNeighborsPolicy", "module_name": "show_bgp"}, "iosxe": {"uid": "show_bgp_all_neighbors_neighbor_policy", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'neighbor': {\n      Any  (str) *: {\n        'address_family': {\n          Any  (str) *: {\n            Optional  (str) nbr_af_route_map_name_in: <class 'str'>,\n            Optional  (str) nbr_af_route_map_name_out: <class 'str'>,\n            },\n          },\n        },\n      },\n    },\n  },\n}", "doc": " Parser for \"show bgp all neighbors {neighbor} policy\" ", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_bgp.py#L6026", "class": "ShowBgpAllNeighborsPolicy", "module_name": "show_bgp"}}, "show bgp all cluster-ids": {"ios": {"uid": "show_bgp_all_cluster-ids", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    Optional  (str) reflection_intra_cluster_configured: <class 'str'>,\n    Optional  (str) cluster_id: <class 'str'>,\n    Optional  (str) list_of_cluster_ids: {\n      Any  (str) *: {\n        Optional  (str) client_to_client_reflection_used: <class 'str'>,\n        Optional  (str) num_neighbors: <class 'int'>,\n        Optional  (str) client_to_client_reflection_configured: <class 'str'>,\n        },\n      },\n    Optional  (str) reflection_intra_cluster_used: <class 'str'>,\n    Optional  (str) configured_id: <class 'str'>,\n    Optional  (str) reflection_all_configured: <class 'str'>,\n    },\n  },\n}", "doc": "\n       Parser for show bgp all cluster-ids\n       Executing 'show vrf detail | inc \\(VRF' to collect vrf names.\n    ", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_bgp.py#L67", "class": "ShowBgpAllClusterIds", "module_name": "show_bgp"}, "iosxe": {"uid": "show_bgp_all_cluster-ids", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    Optional  (str) reflection_intra_cluster_configured: <class 'str'>,\n    Optional  (str) cluster_id: <class 'str'>,\n    Optional  (str) list_of_cluster_ids: {\n      Any  (str) *: {\n        Optional  (str) client_to_client_reflection_used: <class 'str'>,\n        Optional  (str) num_neighbors: <class 'int'>,\n        Optional  (str) client_to_client_reflection_configured: <class 'str'>,\n        },\n      },\n    Optional  (str) reflection_intra_cluster_used: <class 'str'>,\n    Optional  (str) configured_id: <class 'str'>,\n    Optional  (str) reflection_all_configured: <class 'str'>,\n    },\n  },\n}", "doc": " Parser for \"show bgp all cluster-ids\" ", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_bgp.py#L5864", "class": "ShowBgpAllClusterIds", "module_name": "show_bgp"}}, "show mpls ldp discovery {detail}": {"iosxe": {"uid": "show_mpls_ldp_discovery_detail", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'local_ldp_identifier': {\n      Any  (str) *: {\n        'discovery_sources': {\n          'interfaces': {\n            Any  (str) *: {\n              Optional  (str) recv: <class 'bool'>,\n              Any  (str) *: {\n                Any  (str) *: {\n                  Optional  (str) proposed_peer: <class 'int'>,\n                  Optional  (str) transport_ip_address: <class 'str'>,\n                  Optional  (str) reachable_via: <class 'str'>,\n                  Optional  (str) source_ip_address: <class 'str'>,\n                  Optional  (str) password: <class 'str'>,\n                  Optional  (str) holdtime_sec: <class 'int'>,\n                  Optional  (str) clients: <class 'str'>,\n                  Optional  (str) proposed_local: <class 'int'>,\n                  },\n                },\n              Optional  (str) hello_interval_ms: <class 'int'>,\n              'session': <class 'str'>,\n              Optional  (str) transport_ip_addr: <class 'str'>,\n              Optional  (str) xmit: <class 'bool'>,\n              Optional  (str) enabled: <class 'str'>,\n              },\n            },\n          },\n        Optional  (str) targeted_hellos: {\n          Any  (str) *: {\n            Any  (str) *: {\n              Optional  (str) xmit: <class 'bool'>,\n              Optional  (str) recv: <class 'bool'>,\n              'active': <class 'bool'>,\n              'session': <class 'str'>,\n              Optional  (str) ldp_id: <class 'str'>,\n              Optional  (str) tdp_id: <class 'str'>,\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "doc": "\n        Parser for show mpls ldp discovery\n                   show mpls ldp discovery all\n                   show mpls ldp discovery all detail\n                   show mpls ldp discovery detail\n                   show mpls ldp discovery vrf <vrf>\n                   show mpls ldp discovery vrf <vrf> detail\n       ", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_mpls.py#L1354", "class": "ShowMplsLdpDiscovery", "module_name": "show_mpls"}}, "show ipv6 nd interface vrf {vrf}": {"nxos": {"uid": "show_ipv6_nd_interface_vrf_vrf", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'interfaces': {\n      Any  (str) *: {\n        'link_status': <class 'str'>,\n        'interface': <class 'str'>,\n        'enable': <class 'bool'>,\n        'mac_extract': <class 'str'>,\n        'ip': <class 'str'>,\n        'router_advertisement': {\n          'reachable_time': <class 'int'>,\n          'suppress': <class 'bool'>,\n          'managed_address_configuration': <class 'bool'>,\n          'suppress_mtu': <class 'bool'>,\n          'lifetime': <class 'int'>,\n          'current_hop_limit': <class 'int'>,\n          'suppress_route_information': <class 'bool'>,\n          'retrans_timer': <class 'int'>,\n          'interval': <class 'int'>,\n          'default_router_preference': <class 'str'>,\n          'other_stateful_configuration': <class 'bool'>,\n          'mtu': <class 'int'>,\n          },\n        'oper_status': <class 'str'>,\n        'active_timers': {\n          'last_neighbor_advertisement': <class 'str'>,\n          'last_router_advertisement': <class 'str'>,\n          'next_router_advertisement': <class 'str'>,\n          'last_neighbor_solicitation': <class 'str'>,\n          },\n        'dad': {\n          'current_attempt': <class 'int'>,\n          'maximum_attempts': <class 'int'>,\n          },\n        'error_message': {\n          'redirects': <class 'bool'>,\n          'unreachables': <class 'bool'>,\n          },\n        'neighbor_solicitation': {\n          'interval': <class 'int'>,\n          'retry_base': <class 'int'>,\n          'retry_interval': <class 'int'>,\n          'retry_attempts': <class 'int'>,\n          },\n        'local_address': <class 'str'>,\n        },\n      },\n    },\n  },\n}", "doc": "Parser for :\n        show ipv6 nd interface\n        show ipv6 nd interface vrf all\n        show ipv6 nd interface vrf <vrf>", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_nd.py#L227", "class": "ShowIpv6NdInterface", "module_name": "show_nd"}}, "show arp traffic detail": {"iosxr": {"uid": "show_arp_traffic_detail", "schema": "{\nAny  (str) *: {\n  'cache': {\n    'alias': <class 'int'>,\n    'total_arp_idb': <class 'int'>,\n    'total_arp_entries': <class 'int'>,\n    'dynamic': <class 'int'>,\n    'static': <class 'int'>,\n    'standby': <class 'int'>,\n    'dhcp': <class 'int'>,\n    'interface': <class 'int'>,\n    'ip_packet_drop_count': <class 'int'>,\n    },\n  'statistics': {\n    'resolve_dropped_requests': <class 'int'>,\n    'in_requests_pkts': <class 'int'>,\n    'out_replies_pkts': <class 'int'>,\n    'out_proxy': <class 'int'>,\n    'in_replies_pkts': <class 'int'>,\n    'subscriber_intf_gratuitous': <class 'int'>,\n    'out_requests_pkts': <class 'int'>,\n    'resolve_rcvd_requests': <class 'int'>,\n    'no_buffers_errors': <class 'int'>,\n    'out_of_subnet_errors': <class 'int'>,\n    'out_gratuitous_pkts': <class 'int'>,\n    'out_local_proxy': <class 'int'>,\n    'subscriber_intf_replies': <class 'int'>,\n    'subscriber_intf_requests': <class 'int'>,\n    'out_of_memory_errors': <class 'int'>,\n    },\n  },\n}", "doc": " Parser for show arp traffic detail ", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_arp.py#L148", "class": "ShowArpTrafficDetail", "module_name": "show_arp"}}, "show nve vni ingress-replication": {"nxos": {"uid": "show_nve_vni_ingress-replication", "schema": "{\nAny  (str) *: {\n  'vni': {\n    Any  (str) *: {\n      Optional  (str) repl_ip: {\n        Any  (str) *: {\n          Optional  (str) up_time: <class 'str'>,\n          Optional  (str) repl_ip: <class 'str'>,\n          Optional  (str) source: <class 'str'>,\n          },\n        },\n      'vni': <class 'int'>,\n      },\n    },\n  },\n}", "doc": "parser for:\n        show nve vni Ingress-replication", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_vxlan.py#L1795", "class": "ShowNveVniIngressReplication", "module_name": "show_vxlan"}}, "show bgp {address_family} vrf {vrf} detail": {"iosxe": {"uid": "show_bgp_address_family_vrf_vrf_detail", "schema": "{\n'instance': {\n  'default': {\n    'vrf': {\n      Any  (str) *: {\n        'address_family': {\n          Any  (str) *: {\n            Optional  (str) route_distinguisher: <class 'str'>,\n            Optional  (str) prefixes: {\n              Any  (str) *: {\n                Optional  (str) table_version: <class 'str'>,\n                Optional  (str) available_path: <class 'str'>,\n                Optional  (str) index: {\n                  Any  (str) *: {\n                    Optional  (str) recipient_pathid: <class 'str'>,\n                    Optional  (str) transfer_pathid: <class 'str'>,\n                    Optional  (str) community: <class 'str'>,\n                    Optional  (str) agi_version: <class 'int'>,\n                    Optional  (str) next_hop: <class 'str'>,\n                    Optional  (str) ve_block_size: <class 'int'>,\n                    Optional  (str) next_hop_igp_metric: <class 'str'>,\n                    Optional  (str) local_vxlan_vtep: {\n                      Optional  (str) vtep_ip: <class 'str'>,\n                      Optional  (str) vrf: <class 'str'>,\n                      Optional  (str) encap: <class 'str'>,\n                      Optional  (str) vni: <class 'str'>,\n                      Optional  (str) local_router_mac: <class 'str'>,\n                      Optional  (str) bdi: <class 'str'>,\n                      },\n                    Optional  (str) label_base: <class 'int'>,\n                    Optional  (str) gateway: <class 'str'>,\n                    Optional  (str) cluster_list: <class 'str'>,\n                    Optional  (str) route_info: <class 'str'>,\n                    Optional  (str) next_hop_via: <class 'str'>,\n                    Optional  (str) update_group: Any  (str) *,\n                    Optional  (str) status_codes: <class 'str'>,\n                    Optional  (str) origin_codes: <class 'str'>,\n                    Optional  (str) metric: <class 'int'>,\n                    Optional  (str) inaccessible: <class 'bool'>,\n                    Optional  (str) localpref: <class 'int'>,\n                    Optional  (str) evpn: {\n                      Optional  (str) evpn_esi: <class 'str'>,\n                      Optional  (str) recursive_via_connected: <class 'bool'>,\n                      Optional  (str) local_vtep: <class 'str'>,\n                      Optional  (str) gateway_address: <class 'str'>,\n                      Optional  (str) ext_community: <class 'str'>,\n                      Optional  (str) label: <class 'int'>,\n                      Optional  (str) encap: <class 'str'>,\n                      Optional  (str) router_mac: <class 'str'>,\n                      },\n                    Optional  (str) weight: <class 'str'>,\n                    Optional  (str) originator: <class 'str'>,\n                    Optional  (str) refresh_epoch: <class 'int'>,\n                    },\n                  },\n                Optional  (str) best_path: <class 'str'>,\n                Optional  (str) paths: <class 'str'>,\n                },\n              },\n            Optional  (str) default_vrf: <class 'str'>,\n            },\n          },\n        },\n      },\n    },\n  },\n}", "doc": " Parser for:\n        * 'show bgp {address_family} vrf {vrf} detail'\n        * 'show bgp {address_family} rd {rd} detail'\n    ", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_bgp.py#L1488", "class": "ShowBgpDetail", "module_name": "show_bgp"}}, "show snmp mib": {"iosxe": {"uid": "show_snmp_mib", "schema": "{\nAny  (str) *: {\n  Optional  (Any) Any  (str) *: {\n    Optional  (Any) Any  (str) *: <class 'str'>,\n    },\n  },\n}", "doc": " Parser for \"show snmp mib\" ", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_snmp.py#L34", "class": "ShowSnmpMib", "module_name": "show_snmp"}}, "show bgp sessions": {"nxos": {"uid": "show_bgp_sessions", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'router_id': <class 'str'>,\n    'local_as': <class 'int'>,\n    Optional  (str) neighbor: {\n      Any  (str) *: {\n        'state': <class 'str'>,\n        'remote_as': <class 'int'>,\n        'connections_dropped': <class 'int'>,\n        'remote_port': <class 'int'>,\n        'notifications_received': <class 'int'>,\n        'notifications_sent': <class 'int'>,\n        'local_port': <class 'int'>,\n        'last_read': <class 'str'>,\n        'last_write': <class 'str'>,\n        'last_flap': <class 'str'>,\n        },\n      },\n    'vrf_peers': <class 'int'>,\n    'vrf_established_peers': <class 'int'>,\n    },\n  },\n'local_as': <class 'int'>,\n'total_peers': <class 'int'>,\n'total_established_peers': <class 'int'>,\n}", "doc": "Parser for:\n        show bgp sessions", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_bgp.py#L8995", "class": "ShowBgpSessions", "module_name": "show_bgp"}, "iosxr": {"uid": "show_bgp_sessions", "schema": null, "doc": "Parser for show bgp sessions", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_bgp.py#L4732", "class": "ShowBgpSessions", "module_name": "show_bgp"}}, "show arp vrf {vrf}": {"iosxe": {"uid": "show_arp_vrf_vrf", "schema": "{\n'interfaces': {\n  Any  (str) *: {\n    'ipv4': {\n      'neighbors': {\n        Any  (str) *: {\n          'ip': <class 'str'>,\n          'age': <class 'str'>,\n          'origin': <class 'str'>,\n          'protocol': <class 'str'>,\n          'type': <class 'str'>,\n          'link_layer_address': <class 'str'>,\n          },\n        },\n      },\n    },\n  },\n}", "doc": " Parser for show arp\n                  show arp <WROD>\n                  show arp vrf <vrf>\n                  show arp vrf <vrf> <WROD> ", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_arp.py#L57", "class": "ShowArp", "module_name": "show_arp"}}, "show arp application": {"iosxe": {"uid": "show_arp_application", "schema": "{\n'applications': {\n  Any  (str) *: {\n    'num_of_subblocks': <class 'int'>,\n    'id': <class 'int'>,\n    },\n  },\n'num_of_clients_registered': <class 'int'>,\n}", "doc": "\n    Parser for show arp application\n    ", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_arp.py#L1155", "class": "ShowArpApplication", "module_name": "show_arp"}}, "show run router isis": {"iosxr": {"uid": "show_run_router_isis", "schema": "{\n'isis': {\n  Any  (str) *: {\n    Optional  (str) interfaces: {\n      Optional  (Any) Any  (str) *: {\n        Optional  (str) address_family: {\n          Optional  (Any) Any  (str) *: {\n            Optional  (Any) Any  (str) *: Any  (str) *,\n            Optional  (Any) Any  (str) *: {\n              Optional  (Any) Any  (str) *: Any  (str) *,\n              },\n            },\n          },\n        Optional  (str) bfd: {\n          Optional  (Any) Any  (str) *: Any  (str) *,\n          },\n        Optional  (Any) Any  (str) *: Any  (str) *,\n        },\n      },\n    Optional  (Any) Any  (str) *: Any  (str) *,\n    Optional  (str) lsp_gen_interval: {\n      Optional  (Any) Any  (str) *: Any  (str) *,\n      },\n    Optional  (str) segment_routing: {\n      Optional  (Any) Any  (str) *: <class 'str'>,\n      },\n    Optional  (str) address_family: {\n      Optional  (Any) Any  (str) *: {\n        Optional  (str) fast_reroute: {\n          Optional  (str) per_prefix: {\n            Optional  (str) tiebreaker: {\n              Optional  (Any) Any  (str) *: Any  (str) *,\n              },\n            },\n          },\n        Optional  (str) mpls: {\n          Optional  (str) traffic_eng: Any  (str) *,\n          },\n        Optional  (str) segment_routing: {\n          Optional  (Any) Any  (str) *: <class 'str'>,\n          },\n        Optional  (str) spf_interval: {\n          Optional  (Any) Any  (str) *: Any  (str) *,\n          },\n        Optional  (str) spf_prefix_priority: {\n          Optional  (Any) Any  (str) *: Any  (str) *,\n          },\n        Optional  (Any) Any  (str) *: <class 'str'>,\n        },\n      },\n    },\n  },\n}", "doc": "Parser for show run router isis", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_run.py#L170", "class": "ShowRunRouterIsis", "module_name": "show_run"}}, "show ip ospf database external detail vrf {vrf}": {"nxos": {"uid": "show_ip_ospf_database_external_detail_vrf_vrf", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'address_family': {\n      Any  (str) *: {\n        'instance': {\n          Any  (str) *: {\n            Optional  (str) areas: {\n              Any  (str) *: {\n                'database': {\n                  'lsa_types': {\n                    Any  (str) *: {\n                      'lsa_type': <class 'int'>,\n                      'lsas': {\n                        Any  (str) *: {\n                          'ospfv2': {\n                            'header': {\n                              'age': <class 'int'>,\n                              'option_desc': <class 'str'>,\n                              'adv_router': <class 'str'>,\n                              'seq_num': <class 'str'>,\n                              'length': <class 'int'>,\n                              'checksum': <class 'str'>,\n                              'type': <class 'int'>,\n                              'lsa_id': <class 'str'>,\n                              'option': <class 'str'>,\n                              Optional  (str) maxage: <class 'bool'>,\n                              },\n                            'body': {\n                              'external': {\n                                'topologies': {\n                                  Any  (str) *: {\n                                    'forwarding_address': <class 'str'>,\n                                    'metric': <class 'int'>,\n                                    'mt_id': <class 'int'>,\n                                    Optional  (str) flags: <class 'str'>,\n                                    'tos': <class 'int'>,\n                                    'external_route_tag': <class 'int'>,\n                                    },\n                                  },\n                                'network_mask': <class 'str'>,\n                                },\n                              },\n                            },\n                          'lsa_id': <class 'str'>,\n                          'adv_router': <class 'str'>,\n                          },\n                        },\n                      },\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "doc": "Parser for:\n        show ip ospf database external detail\n        show ip ospf database external detail vrf <vrf>", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_ospf.py#L3234", "class": "ShowIpOspfDatabaseExternalDetail", "module_name": "show_ospf"}}, "show ipv6 mld local-groups vrf {vrf}": {"nxos": {"uid": "show_ipv6_mld_local-groups_vrf_vrf", "schema": "{\n'vrfs': {\n  Any  (str) *: {\n    Optional  (str) interface: {\n      Any  (str) *: {\n        'group': {\n          Any  (str) *: {\n            Optional  (str) last_reported: <class 'str'>,\n            Optional  (str) type: <class 'str'>,\n            Optional  (str) source: {\n              Any  (str) *: {\n                'last_reported': <class 'str'>,\n                'type': <class 'str'>,\n                },\n              },\n            },\n          },\n        Optional  (str) static_group: {\n          Any  (str) *: {\n            'source': <class 'str'>,\n            'group': <class 'str'>,\n            },\n          },\n        Optional  (str) join_group: {\n          Any  (str) *: {\n            'source': <class 'str'>,\n            'group': <class 'str'>,\n            },\n          },\n        },\n      },\n    },\n  },\n}", "doc": "Parser for:\n        show ipv6 mld local-groups\n        show ipv6 mld local-groups vrf all\n        show ipv6 mld local-groups vrf <vrf>", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_mld.py#L605", "class": "ShowIpv6MldLocalGroups", "module_name": "show_mld"}}, "show lisp all extranet {extranet} instance-id {instance_id}": {"iosxe": {"uid": "show_lisp_all_extranet_extranet_instance-id_instance_id", "schema": "{\n'lisp_router_instances': {\n  Any  (str) *: {\n    Optional  (str) service: {\n      Any  (str) *: {\n        Optional  (str) map_server: {\n          Optional  (str) virtual_network_ids: {\n            Any  (str) *: {\n              'extranets': {\n                Any  (str) *: {\n                  'home_instance_id': <class 'int'>,\n                  Optional  (str) subscriber: {\n                    Any  (str) *: {\n                      'eid_record': <class 'str'>,\n                      'bidirectional': <class 'bool'>,\n                      },\n                    },\n                  Optional  (str) provider: {\n                    Any  (str) *: {\n                      'eid_record': <class 'str'>,\n                      'bidirectional': <class 'bool'>,\n                      },\n                    },\n                  'extranet': <class 'str'>,\n                  },\n                },\n              'vni': <class 'str'>,\n              },\n            'total_extranet_entries': <class 'int'>,\n            },\n          },\n        },\n      },\n    },\n  },\n}", "doc": " Parser for \"show lisp all extranet <extranet> instance-id <instance_id>\"", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_lisp.py#L301", "class": "ShowLispExtranet", "module_name": "show_lisp"}}, "show {af} pim vrf {vrf} neighbor": {"ios": {"uid": "show_af_pim_vrf_vrf_neighbor", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'interfaces': {\n      Any  (str) *: {\n        'address_family': {\n          Any  (str) *: {\n            'neighbors': {\n              Optional  (str) secondary_address: <class 'list'>,\n              Any  (str) *: {\n                Optional  (str) state_refresh_capable: <class 'bool'>,\n                Optional  (str) version: <class 'str'>,\n                Optional  (str) genid_capable: <class 'bool'>,\n                Optional  (str) dr_load_balancing_capable: <class 'bool'>,\n                Optional  (str) dr_priority: <class 'int'>,\n                Optional  (str) up_time: <class 'str'>,\n                Optional  (str) expiration: <class 'str'>,\n                Optional  (str) bidir_capable: <class 'bool'>,\n                Optional  (str) designated_router: <class 'bool'>,\n                Optional  (str) default_dr_prioirty: <class 'bool'>,\n                Optional  (str) interface: <class 'str'>,\n                Optional  (str) proxy_capable: <class 'bool'>,\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "doc": "Parser for:\n            show ip/ipv6 pim [vrf <WORD>] neighbor\n            show ipv6 pim [vrf <word>] neighbor detail", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_pim.py#L76", "class": "ShowPimNeighbor", "module_name": "show_pim"}, "iosxe": {"uid": "show_af_pim_vrf_vrf_neighbor", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'interfaces': {\n      Any  (str) *: {\n        'address_family': {\n          Any  (str) *: {\n            'neighbors': {\n              Optional  (str) secondary_address: <class 'list'>,\n              Any  (str) *: {\n                Optional  (str) state_refresh_capable: <class 'bool'>,\n                Optional  (str) version: <class 'str'>,\n                Optional  (str) genid_capable: <class 'bool'>,\n                Optional  (str) dr_load_balancing_capable: <class 'bool'>,\n                Optional  (str) dr_priority: <class 'int'>,\n                Optional  (str) up_time: <class 'str'>,\n                Optional  (str) expiration: <class 'str'>,\n                Optional  (str) bidir_capable: <class 'bool'>,\n                Optional  (str) designated_router: <class 'bool'>,\n                Optional  (str) default_dr_prioirty: <class 'bool'>,\n                Optional  (str) interface: <class 'str'>,\n                Optional  (str) proxy_capable: <class 'bool'>,\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "doc": "Parser for show ip/ipv6 pim [vrf <WORD>] neighbor\n                  show ipv6 pim [vrf <word>] neighbor detail", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_pim.py#L1686", "class": "ShowPimNeighbor", "module_name": "show_pim"}}, "show bfd neighbors client {client} details": {"iosxe": {"uid": "show_bfd_neighbors_client_client_details", "schema": "{\n'our_address': {\n  Any  (str) *: {\n    'neighbor_address': {\n      Any  (str) *: {\n        Optional  (str) received_multiplier: <class 'int'>,\n        Optional  (str) up_time: <class 'str'>,\n        Optional  (str) elapsed_time_watermarks_last: <class 'int'>,\n        Optional  (str) holddown: <class 'int'>,\n        Optional  (str) cleanup_timer_hits: <class 'int'>,\n        Optional  (str) holddown_hits: <class 'int'>,\n        Optional  (str) sso_cleanup_timer_called: <class 'int'>,\n        'interface': <class 'str'>,\n        Optional  (str) hello: <class 'int'>,\n        'rh_rs': <class 'str'>,\n        Optional  (str) sso_cleanup_action_taken: <class 'int'>,\n        Optional  (str) hello_hits: <class 'int'>,\n        Optional  (str) holdown_timer: <class 'int'>,\n        Optional  (str) last_packet: {\n          Optional  (str) poll_bit: <class 'int'>,\n          Optional  (str) min_echo_int: <class 'int'>,\n          Optional  (str) final_bit: <class 'int'>,\n          Optional  (str) c_bit: <class 'int'>,\n          Optional  (str) multiplier: <class 'int'>,\n          Optional  (str) my_discr: <class 'int'>,\n          Optional  (str) length: <class 'int'>,\n          Optional  (str) version: <class 'int'>,\n          Optional  (str) diagnostic: <class 'int'>,\n          Optional  (str) your_discr: <class 'int'>,\n          Optional  (str) state_bit: <class 'str'>,\n          Optional  (str) min_tx_int: <class 'int'>,\n          Optional  (str) i_hear_you_bit: <class 'str'>,\n          Optional  (str) min_rx_int: <class 'int'>,\n          Optional  (str) demand_bit: <class 'int'>,\n          },\n        Optional  (str) holdown_timer_multiplier: <class 'int'>,\n        Optional  (str) session: {\n          'state': <class 'str'>,\n          'echo_function': <class 'bool'>,\n          Optional  (str) echo_interval_ms: <class 'int'>,\n          },\n        'state': <class 'str'>,\n        Optional  (str) session_host: <class 'str'>,\n        Optional  (str) pseudo_preemtive_process: {\n          Optional  (str) max: <class 'int'>,\n          Optional  (str) count: <class 'int'>,\n          Optional  (str) avg: <class 'int'>,\n          Optional  (str) min: <class 'int'>,\n          Optional  (str) last_ms_ago: <class 'int'>,\n          },\n        Optional  (str) rx: {\n          Optional  (str) last_ms_ago: <class 'int'>,\n          Optional  (str) max_int_ms: <class 'int'>,\n          Optional  (str) count: <class 'int'>,\n          Optional  (str) avg_int_ms: <class 'int'>,\n          Optional  (str) min_int_ms: <class 'int'>,\n          },\n        Optional  (str) handle: <class 'int'>,\n        Optional  (str) ipc_tx_failure_count: <class 'int'>,\n        Optional  (str) holddown_negotiated: <class 'int'>,\n        Optional  (str) local_diag: <class 'int'>,\n        Optional  (str) ipc_rx_failure_count: <class 'int'>,\n        Optional  (str) demand_mode: <class 'int'>,\n        Optional  (str) total_adjs_found: <class 'int'>,\n        Optional  (str) poll_bit: <class 'int'>,\n        Optional  (str) registered_protocols: <class 'list'>,\n        Optional  (str) min_tx_int: <class 'int'>,\n        Optional  (str) holddown_adjusted: <class 'int'>,\n        Optional  (str) min_rx_int: <class 'int'>,\n        Optional  (str) tx: {\n          Optional  (str) count: <class 'int'>,\n          Optional  (str) avg_int_ms: <class 'int'>,\n          Optional  (str) min_int_ms: <class 'int'>,\n          Optional  (str) last_ms_ago: <class 'int'>,\n          Optional  (str) max_int_ms: <class 'int'>,\n          },\n        Optional  (str) multiplier: <class 'int'>,\n        'ld_rd': <class 'str'>,\n        Optional  (str) elapsed_time_watermarks: <class 'str'>,\n        Optional  (str) received_min_rx_int: <class 'int'>,\n        },\n      },\n    },\n  },\n}", "doc": " Parser for the following commands:\n\t\t\t* 'show bfd neighbors details'\n\t\t\t* 'show bfd neighbors client {client} details'\n\t", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_bfd.py#L119", "class": "ShowBfdNeighborsDetails", "module_name": "show_bfd"}}, "show platform vm": {"iosxr": {"uid": "show_platform_vm", "schema": "{\n'node': {\n  Any  (str) *: {\n    'ip_address': <class 'str'>,\n    'type': <class 'str'>,\n    'partner_name': <class 'str'>,\n    'sw_status': <class 'str'>,\n    },\n  },\n}", "doc": "Parser for show platform vm", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_platform.py#L449", "class": "ShowPlatformVm", "module_name": "show_platform"}}, "show ipv6 mroute vrf all": {"nxos": {"uid": "show_ipv6_mroute_vrf_all", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'address_family': {\n      Any  (str) *: {\n        Optional  (str) multicast_group: {\n          Any  (str) *: {\n            Optional  (str) source_address: {\n              Any  (str) *: {\n                Optional  (str) bidir: <class 'bool'>,\n                Optional  (str) uptime: <class 'str'>,\n                Optional  (str) flags: <class 'str'>,\n                Optional  (str) incoming_interface_list: {\n                  Any  (str) *: {\n                    Optional  (str) rpf_nbr: <class 'str'>,\n                    },\n                  },\n                Optional  (str) outgoing_interface_list: {\n                  Any  (str) *: {\n                    Optional  (str) oil_flags: <class 'str'>,\n                    Optional  (str) oif_rpf: <class 'bool'>,\n                    Optional  (str) oil_uptime: <class 'str'>,\n                    },\n                  },\n                Optional  (str) oil_count: <class 'str'>,\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "doc": "Parser for show ipv6 mroute vrf all", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_mcast.py#L239", "class": "ShowIpv6MrouteVrfAll", "module_name": "show_mcast"}}, "show bgp {address_family} vrf {vrf}": {"iosxe": {"uid": "show_bgp_address_family_vrf_vrf", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'address_family': {\n      Any  (str) *: {\n        Optional  (str) pfx_limit: <class 'int'>,\n        Optional  (str) route_distinguisher: <class 'str'>,\n        Optional  (str) default_vrf: <class 'str'>,\n        Optional  (str) bgp_table_version: <class 'int'>,\n        Optional  (str) af_private_import_to_address_family: <class 'str'>,\n        Optional  (str) route_identifier: <class 'str'>,\n        Optional  (str) pfx_count: <class 'int'>,\n        Optional  (str) routes: {\n          Optional  (Any) Any  (str) *: {\n            Optional  (str) index: {\n              Optional  (Any) Any  (str) *: {\n                Optional  (str) weight: <class 'int'>,\n                Optional  (str) next_hop: <class 'str'>,\n                Optional  (str) path: <class 'str'>,\n                Optional  (str) status_codes: <class 'str'>,\n                Optional  (str) origin_codes: <class 'str'>,\n                Optional  (str) metric: <class 'int'>,\n                Optional  (str) localpref: <class 'int'>,\n                },\n              },\n            },\n          },\n        Optional  (str) vrf_route_identifier: <class 'str'>,\n        },\n      },\n    },\n  },\n}", "doc": " Parser for:\n        * 'show bgp {address_family} rd {rd}'\n        * 'show bgp {address_family} vrf {vrf}'\n    ", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_bgp.py#L631", "class": "ShowBgp", "module_name": "show_bgp"}}, "show ipv6 rip vrf {vrf} database": {"iosxe": {"uid": "show_ipv6_rip_vrf_vrf_database", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'address_family': {\n      Any  (str) *: {\n        'routes': {\n          Any  (str) *: {\n            'index': {\n              Any  (str) *: {\n                Optional  (str) installed: <class 'bool'>,\n                Optional  (str) next_hop: <class 'str'>,\n                Optional  (str) route_type: <class 'str'>,\n                Optional  (str) expire_time: <class 'str'>,\n                Optional  (str) interface: <class 'str'>,\n                Optional  (str) metric: <class 'int'>,\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "doc": "Parser for :\n           show ipv6 rip database\n           show ipv6 rip database vrf {vrf}\n           ", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_rip.py#L213", "class": "ShowIpv6RipDatabase", "module_name": "show_rip"}}, "show platform hardware qfp {status} bqs {slot} {iotype} statistics channel all": {"ios": {"uid": "show_platform_hardware_qfp_status_bqs_slot_iotype_statistics_channel_all", "schema": "{\n'channel': {\n  Any  (str) *: {\n    'badpkts': <class 'str'>,\n    'goodpkts': <class 'str'>,\n    'goodbytes': <class 'str'>,\n    'badbytes': <class 'str'>,\n    Optional  (str) comment: <class 'str'>,\n    },\n  },\n}", "doc": "Parser for show platform hardware qfp active bqs <x> ipm statistics channel all\n                  show platform hardware qfp standby bqs <x> ipm statistics channel all\n                  show platform hardware qfp active bqs <x> opm statistics channel all\n                  show platform hardware qfp standby bqs <x> opm statistics channel all", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_platform.py#L381", "class": "ShowPlatformHardwareQfpBqsStatisticsChannelAll", "module_name": "show_platform"}, "iosxe": {"uid": "show_platform_hardware_qfp_status_bqs_slot_iotype_statistics_channel_all", "schema": "{\n'channel': {\n  Any  (str) *: {\n    'badpkts': <class 'str'>,\n    'goodpkts': <class 'str'>,\n    'goodbytes': <class 'str'>,\n    'badbytes': <class 'str'>,\n    Optional  (str) comment: <class 'str'>,\n    },\n  },\n}", "doc": "Parser for show platform hardware qfp active bqs <x> ipm statistics channel all\n                  show platform hardware qfp standby bqs <x> ipm statistics channel all\n                  show platform hardware qfp active bqs <x> opm statistics channel all\n                  show platform hardware qfp standby bqs <x> opm statistics channel all", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_platform.py#L3919", "class": "ShowPlatformHardwareQfpBqsStatisticsChannelAll", "module_name": "show_platform"}}, "show ip igmp vrf {vrf} interface": {"ios": {"uid": "show_ip_igmp_vrf_vrf_interface", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    Optional  (str) global_active_groups: <class 'int'>,\n    Optional  (str) global_max_groups: <class 'int'>,\n    'interface': {\n      Any  (str) *: {\n        'querier_timeout': <class 'int'>,\n        Optional  (str) last_member_query_count: <class 'int'>,\n        'query_max_response_time': <class 'int'>,\n        Optional  (str) multicast: {\n          Optional  (str) dr_this_system: <class 'bool'>,\n          Optional  (str) designated_router: <class 'str'>,\n          Optional  (str) routing_enable: <class 'bool'>,\n          Optional  (str) routing_table: <class 'str'>,\n          Optional  (str) ttl_threshold: <class 'int'>,\n          },\n        Optional  (str) group_policy: <class 'str'>,\n        'query_interval': <class 'int'>,\n        Optional  (str) query_this_system: <class 'bool'>,\n        Optional  (str) max_groups: <class 'int'>,\n        'enable': <class 'bool'>,\n        'router_version': <class 'int'>,\n        'host_version': <class 'int'>,\n        Optional  (str) active_groups: <class 'int'>,\n        Optional  (str) counters: {\n          'leaves': <class 'int'>,\n          'joins': <class 'int'>,\n          },\n        'interface_status': <class 'str'>,\n        'oper_status': <class 'str'>,\n        Optional  (str) joined_group: {\n          Any  (str) *: {\n            'number_of_users': <class 'int'>,\n            },\n          },\n        Optional  (str) interface_adress: <class 'str'>,\n        Optional  (str) querier: <class 'str'>,\n        Optional  (str) configured_query_interval: <class 'int'>,\n        Optional  (str) configured_querier_timeout: <class 'int'>,\n        Optional  (str) last_member_query_interval: <class 'int'>,\n        },\n      },\n    },\n  },\n}", "doc": "\n    Parser for 'show ip igmp interface'\n    Parser for 'show ip igmp vrf <WORD> interface'\n    ", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_igmp.py#L17", "class": "ShowIpIgmpInterface", "module_name": "show_igmp"}, "iosxe": {"uid": "show_ip_igmp_vrf_vrf_interface", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    Optional  (str) global_active_groups: <class 'int'>,\n    Optional  (str) global_max_groups: <class 'int'>,\n    'interface': {\n      Any  (str) *: {\n        'querier_timeout': <class 'int'>,\n        Optional  (str) last_member_query_count: <class 'int'>,\n        'query_max_response_time': <class 'int'>,\n        Optional  (str) multicast: {\n          Optional  (str) dr_this_system: <class 'bool'>,\n          Optional  (str) designated_router: <class 'str'>,\n          Optional  (str) routing_enable: <class 'bool'>,\n          Optional  (str) routing_table: <class 'str'>,\n          Optional  (str) ttl_threshold: <class 'int'>,\n          },\n        Optional  (str) group_policy: <class 'str'>,\n        'query_interval': <class 'int'>,\n        Optional  (str) query_this_system: <class 'bool'>,\n        Optional  (str) max_groups: <class 'int'>,\n        'enable': <class 'bool'>,\n        'router_version': <class 'int'>,\n        'host_version': <class 'int'>,\n        Optional  (str) active_groups: <class 'int'>,\n        Optional  (str) counters: {\n          'leaves': <class 'int'>,\n          'joins': <class 'int'>,\n          },\n        'interface_status': <class 'str'>,\n        'oper_status': <class 'str'>,\n        Optional  (str) joined_group: {\n          Any  (str) *: {\n            'number_of_users': <class 'int'>,\n            },\n          },\n        Optional  (str) interface_adress: <class 'str'>,\n        Optional  (str) querier: <class 'str'>,\n        Optional  (str) configured_query_interval: <class 'int'>,\n        Optional  (str) configured_querier_timeout: <class 'int'>,\n        Optional  (str) last_member_query_interval: <class 'int'>,\n        },\n      },\n    },\n  },\n}", "doc": "\n    Parser for 'show ip igmp interface'\n    Parser for 'show ip igmp vrf <WORD> interface'\n    ", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_igmp.py#L79", "class": "ShowIpIgmpInterface", "module_name": "show_igmp"}}, "show ip protocols": {"ios": {"uid": "show_ip_protocols", "schema": "{\n'protocols': {\n  Optional  (str) ospf: {\n    'vrf': {\n      Any  (str) *: {\n        'address_family': {\n          Any  (str) *: {\n            'instance': {\n              Any  (str) *: {\n                'preference': {\n                  'single_value': {\n                    'all': <class 'int'>,\n                    },\n                  Optional  (str) multi_values: {\n                    'granularity': {\n                      'detail': {\n                        'inter_area': <class 'int'>,\n                        'intra_area': <class 'int'>,\n                        },\n                      Optional  (str) coarse: {\n                        'internal': <class 'int'>,\n                        },\n                      },\n                    'external': <class 'int'>,\n                    },\n                  },\n                Optional  (str) passive_interfaces: <class 'list'>,\n                'total_stub_area': <class 'int'>,\n                'incoming_filter_list': <class 'str'>,\n                'total_normal_area': <class 'int'>,\n                Optional  (str) routing_information_sources: {\n                  'gateway': {\n                    Any  (str) *: {\n                      'distance': <class 'int'>,\n                      'last_update': <class 'str'>,\n                      },\n                    },\n                  },\n                'total_nssa_area': <class 'int'>,\n                'total_areas': <class 'int'>,\n                Optional  (str) areas: {\n                  Any  (str) *: {\n                    Optional  (str) configured_interfaces: <class 'list'>,\n                    },\n                  },\n                'router_id': <class 'str'>,\n                'spf_control': {\n                  'paths': <class 'int'>,\n                  },\n                'outgoing_filter_list': <class 'str'>,\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  Optional  (str) bgp: {\n    'instance': {\n      'default': {\n        'vrf': {\n          'default': {\n            'address_family': {\n              'ipv4': {\n                'automatic_route_summarization': <class 'bool'>,\n                Optional  (str) neighbor: {\n                  Any  (str) *: {\n                    'neighbor_id': <class 'str'>,\n                    'distance': <class 'int'>,\n                    'last_update': <class 'str'>,\n                    },\n                  },\n                Optional  (str) preference: {\n                  'multi_values': {\n                    'internal': <class 'int'>,\n                    'external': <class 'int'>,\n                    'local': <class 'int'>,\n                    },\n                  },\n                'outgoing_filter_list': <class 'str'>,\n                'incoming_filter_list': <class 'str'>,\n                'maximum_path': <class 'int'>,\n                'igp_sync': <class 'bool'>,\n                },\n              },\n            },\n          },\n        'bgp_id': <class 'int'>,\n        },\n      },\n    },\n  Optional  (str) eigrp: {\n    'protocol_under_dev': <class 'bool'>,\n    },\n  Optional  (str) application: {\n    'preference': {\n      'single_value': {\n        'all': <class 'int'>,\n        },\n      },\n    'flushed': <class 'int'>,\n    'invalid': <class 'int'>,\n    'update_frequency': <class 'int'>,\n    'outgoing_filter_list': <class 'str'>,\n    'incoming_filter_list': <class 'str'>,\n    'maximum_path': <class 'int'>,\n    'holddown': <class 'int'>,\n    },\n  Optional  (str) isis: {\n    'vrf': {\n      Any  (str) *: {\n        'address_family': {\n          Any  (str) *: {\n            'instance': {\n              Any  (str) *: {\n                'redistributing': <class 'str'>,\n                'preference': {\n                  'single_value': {\n                    'all': <class 'int'>,\n                    },\n                  },\n                Optional  (str) passive_interfaces: <class 'list'>,\n                Optional  (str) configured_interfaces: <class 'list'>,\n                'outgoing_filter_list': <class 'str'>,\n                'incoming_filter_list': <class 'str'>,\n                Optional  (str) address_summarization: <class 'list'>,\n                Optional  (str) routing_information_sources: {\n                  'gateway': {\n                    Any  (str) *: {\n                      'distance': <class 'int'>,\n                      'last_update': <class 'str'>,\n                      },\n                    },\n                  },\n                Optional  (str) maximum_path: <class 'int'>,\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  Optional  (str) rip: {\n    'vrf': {\n      Any  (str) *: {\n        'address_family': {\n          Any  (str) *: {\n            Optional  (str) instance: {\n              Any  (str) *: {\n                'redistribute': {\n                  Any  (str) *: {\n                    Optional  (str) route_policy: <class 'int'>,\n                    Optional  (str) metric: <class 'int'>,\n                    Optional  (Any) Any  (str) *: {\n                      Optional  (str) route_policy: <class 'int'>,\n                      Optional  (str) metric: <class 'int'>,\n                      Optional  (str) route_type: <class 'str'>,\n                      },\n                    },\n                  },\n                Optional  (str) output_delay: <class 'int'>,\n                'send_version': Or (<class 'int'>, <class 'str'>),\n                Optional  (str) timers: {\n                  'next_update': <class 'int'>,\n                  'invalid_interval': <class 'int'>,\n                  'update_interval': <class 'int'>,\n                  'flush_interval': <class 'int'>,\n                  'holddown_interval': <class 'int'>,\n                  },\n                Optional  (str) neighbors: {\n                  Any  (str) *: {\n                    'distance': <class 'int'>,\n                    'last_update': <class 'str'>,\n                    },\n                  },\n                'outgoing_update_filterlist': {\n                  'outgoing_update_filterlist': <class 'str'>,\n                  Optional  (str) interfaces: {\n                    Any  (str) *: {\n                      'filter': <class 'str'>,\n                      'per_user': <class 'bool'>,\n                      'default': <class 'str'>,\n                      },\n                    },\n                  },\n                Optional  (str) default_redistribution_metric: <class 'int'>,\n                Optional  (str) incoming_route_metric: {\n                  'added': <class 'str'>,\n                  'list': <class 'str'>,\n                  },\n                Optional  (str) automatic_network_summarization_in_effect: <class 'bool'>,\n                'maximum_paths': <class 'int'>,\n                'incoming_update_filterlist': {\n                  'incoming_update_filterlist': <class 'str'>,\n                  Optional  (str) interfaces: {\n                    Any  (str) *: {\n                      'filter': <class 'str'>,\n                      'per_user': <class 'bool'>,\n                      'default': <class 'str'>,\n                      },\n                    },\n                  },\n                'receive_version': Or (<class 'int'>, <class 'str'>),\n                'network': <class 'list'>,\n                'distance': <class 'int'>,\n                'interfaces': {\n                  Any  (str) *: {\n                    Optional  (str) summary_address: {\n                      Any  (str) *: {\n                        Optional  (str) metric: <class 'str'>,\n                        },\n                      },\n                    Optional  (str) filtered_per_user: <class 'int'>,\n                    Optional  (str) neighbors: {\n                      Any  (str) *: {\n                        Optional  (str) address: <class 'str'>,\n                        },\n                      },\n                    Optional  (str) default_set: <class 'bool'>,\n                    'triggered_rip': <class 'str'>,\n                    'key_chain': <class 'str'>,\n                    'receive_version': <class 'str'>,\n                    'send_version': <class 'str'>,\n                    Optional  (str) passive: <class 'bool'>,\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "doc": " Parser for \"show ip protocols\" ", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_protocols.py#L10", "class": "ShowIpProtocols", "module_name": "show_protocols"}, "iosxe": {"uid": "show_ip_protocols", "schema": "{\n'protocols': {\n  Optional  (str) ospf: {\n    'vrf': {\n      Any  (str) *: {\n        'address_family': {\n          Any  (str) *: {\n            'instance': {\n              Any  (str) *: {\n                'preference': {\n                  'single_value': {\n                    'all': <class 'int'>,\n                    },\n                  Optional  (str) multi_values: {\n                    'granularity': {\n                      'detail': {\n                        'inter_area': <class 'int'>,\n                        'intra_area': <class 'int'>,\n                        },\n                      Optional  (str) coarse: {\n                        'internal': <class 'int'>,\n                        },\n                      },\n                    'external': <class 'int'>,\n                    },\n                  },\n                Optional  (str) passive_interfaces: <class 'list'>,\n                'total_stub_area': <class 'int'>,\n                'incoming_filter_list': <class 'str'>,\n                'total_normal_area': <class 'int'>,\n                Optional  (str) routing_information_sources: {\n                  'gateway': {\n                    Any  (str) *: {\n                      'distance': <class 'int'>,\n                      'last_update': <class 'str'>,\n                      },\n                    },\n                  },\n                'total_nssa_area': <class 'int'>,\n                'total_areas': <class 'int'>,\n                Optional  (str) areas: {\n                  Any  (str) *: {\n                    Optional  (str) configured_interfaces: <class 'list'>,\n                    },\n                  },\n                'router_id': <class 'str'>,\n                'spf_control': {\n                  'paths': <class 'int'>,\n                  },\n                'outgoing_filter_list': <class 'str'>,\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  Optional  (str) bgp: {\n    'instance': {\n      'default': {\n        'vrf': {\n          'default': {\n            'address_family': {\n              'ipv4': {\n                'automatic_route_summarization': <class 'bool'>,\n                Optional  (str) neighbor: {\n                  Any  (str) *: {\n                    'neighbor_id': <class 'str'>,\n                    'distance': <class 'int'>,\n                    'last_update': <class 'str'>,\n                    },\n                  },\n                Optional  (str) preference: {\n                  'multi_values': {\n                    'internal': <class 'int'>,\n                    'external': <class 'int'>,\n                    'local': <class 'int'>,\n                    },\n                  },\n                'outgoing_filter_list': <class 'str'>,\n                'incoming_filter_list': <class 'str'>,\n                'maximum_path': <class 'int'>,\n                'igp_sync': <class 'bool'>,\n                },\n              },\n            },\n          },\n        'bgp_id': <class 'int'>,\n        },\n      },\n    },\n  Optional  (str) eigrp: {\n    'protocol_under_dev': <class 'bool'>,\n    },\n  Optional  (str) application: {\n    'preference': {\n      'single_value': {\n        'all': <class 'int'>,\n        },\n      },\n    'flushed': <class 'int'>,\n    'invalid': <class 'int'>,\n    'update_frequency': <class 'int'>,\n    'outgoing_filter_list': <class 'str'>,\n    'incoming_filter_list': <class 'str'>,\n    'maximum_path': <class 'int'>,\n    'holddown': <class 'int'>,\n    },\n  Optional  (str) isis: {\n    'vrf': {\n      Any  (str) *: {\n        'address_family': {\n          Any  (str) *: {\n            'instance': {\n              Any  (str) *: {\n                'redistributing': <class 'str'>,\n                'preference': {\n                  'single_value': {\n                    'all': <class 'int'>,\n                    },\n                  },\n                Optional  (str) passive_interfaces: <class 'list'>,\n                Optional  (str) configured_interfaces: <class 'list'>,\n                'outgoing_filter_list': <class 'str'>,\n                'incoming_filter_list': <class 'str'>,\n                Optional  (str) address_summarization: <class 'list'>,\n                Optional  (str) routing_information_sources: {\n                  'gateway': {\n                    Any  (str) *: {\n                      'distance': <class 'int'>,\n                      'last_update': <class 'str'>,\n                      },\n                    },\n                  },\n                Optional  (str) maximum_path: <class 'int'>,\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  Optional  (str) rip: {\n    'vrf': {\n      Any  (str) *: {\n        'address_family': {\n          Any  (str) *: {\n            Optional  (str) instance: {\n              Any  (str) *: {\n                'redistribute': {\n                  Any  (str) *: {\n                    Optional  (str) route_policy: <class 'int'>,\n                    Optional  (str) metric: <class 'int'>,\n                    Optional  (Any) Any  (str) *: {\n                      Optional  (str) route_policy: <class 'int'>,\n                      Optional  (str) metric: <class 'int'>,\n                      Optional  (str) route_type: <class 'str'>,\n                      },\n                    },\n                  },\n                Optional  (str) output_delay: <class 'int'>,\n                'send_version': Or (<class 'int'>, <class 'str'>),\n                Optional  (str) timers: {\n                  'next_update': <class 'int'>,\n                  'invalid_interval': <class 'int'>,\n                  'update_interval': <class 'int'>,\n                  'flush_interval': <class 'int'>,\n                  'holddown_interval': <class 'int'>,\n                  },\n                Optional  (str) neighbors: {\n                  Any  (str) *: {\n                    'distance': <class 'int'>,\n                    'last_update': <class 'str'>,\n                    },\n                  },\n                'outgoing_update_filterlist': {\n                  'outgoing_update_filterlist': <class 'str'>,\n                  Optional  (str) interfaces: {\n                    Any  (str) *: {\n                      'filter': <class 'str'>,\n                      'per_user': <class 'bool'>,\n                      'default': <class 'str'>,\n                      },\n                    },\n                  },\n                Optional  (str) default_redistribution_metric: <class 'int'>,\n                Optional  (str) incoming_route_metric: {\n                  'added': <class 'str'>,\n                  'list': <class 'str'>,\n                  },\n                Optional  (str) automatic_network_summarization_in_effect: <class 'bool'>,\n                'maximum_paths': <class 'int'>,\n                'incoming_update_filterlist': {\n                  'incoming_update_filterlist': <class 'str'>,\n                  Optional  (str) interfaces: {\n                    Any  (str) *: {\n                      'filter': <class 'str'>,\n                      'per_user': <class 'bool'>,\n                      'default': <class 'str'>,\n                      },\n                    },\n                  },\n                'receive_version': Or (<class 'int'>, <class 'str'>),\n                'network': <class 'list'>,\n                'distance': <class 'int'>,\n                'interfaces': {\n                  Any  (str) *: {\n                    Optional  (str) summary_address: {\n                      Any  (str) *: {\n                        Optional  (str) metric: <class 'str'>,\n                        },\n                      },\n                    Optional  (str) filtered_per_user: <class 'int'>,\n                    Optional  (str) neighbors: {\n                      Any  (str) *: {\n                        Optional  (str) address: <class 'str'>,\n                        },\n                      },\n                    Optional  (str) default_set: <class 'bool'>,\n                    'triggered_rip': <class 'str'>,\n                    'key_chain': <class 'str'>,\n                    'receive_version': <class 'str'>,\n                    'send_version': <class 'str'>,\n                    Optional  (str) passive: <class 'bool'>,\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "doc": " Parser for \"show ip protocols\" ", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_protocols.py#L254", "class": "ShowIpProtocols", "module_name": "show_protocols"}}, "show ip pim interface df": {"ios": {"uid": "show_ip_pim_interface_df", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'address_family': {\n      Any  (str) *: {\n        Optional  (str) rp: {\n          Optional  (str) bidir: {\n            Optional  (str) interface_df_election: {\n              Any  (str) *: {\n                Optional  (str) df_uptime: <class 'str'>,\n                Optional  (str) winner_metric: <class 'int'>,\n                Optional  (str) metric: <class 'int'>,\n                Optional  (str) interface_name: <class 'str'>,\n                Optional  (str) df_address: <class 'str'>,\n                Optional  (str) address: <class 'str'>,\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "doc": "Parser for show ip pim [vrf <WORD>] interface df", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_pim.py#L102", "class": "ShowIpPimInterfaceDf", "module_name": "show_pim"}, "iosxe": {"uid": "show_ip_pim_interface_df", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'address_family': {\n      Any  (str) *: {\n        Optional  (str) rp: {\n          Optional  (str) bidir: {\n            Optional  (str) interface_df_election: {\n              Any  (str) *: {\n                Optional  (str) df_uptime: <class 'str'>,\n                Optional  (str) winner_metric: <class 'int'>,\n                Optional  (str) metric: <class 'int'>,\n                Optional  (str) interface_name: <class 'str'>,\n                Optional  (str) df_address: <class 'str'>,\n                Optional  (str) address: <class 'str'>,\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "doc": "Parser for show ip pim [vrf <WORD>] interface df", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_pim.py#L1865", "class": "ShowIpPimInterfaceDf", "module_name": "show_pim"}}, "show bgp neighbors {neighbor} advertised-routes": {"iosxe": {"uid": "show_bgp_neighbors_neighbor_advertised-routes", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'neighbor': {\n      Any  (str) *: {\n        'address_family': {\n          Any  (str) *: {\n            Optional  (str) route_distinguisher: <class 'str'>,\n            Optional  (str) bgp_table_version: <class 'int'>,\n            Optional  (str) default_vrf: <class 'str'>,\n            Optional  (str) local_router_id: <class 'str'>,\n            Optional  (str) advertised: {\n              Optional  (Any) Any  (str) *: {\n                Optional  (str) index: {\n                  Optional  (Any) Any  (str) *: {\n                    Optional  (str) origin_codes: <class 'str'>,\n                    Optional  (str) metric: <class 'int'>,\n                    Optional  (str) localprf: <class 'int'>,\n                    Optional  (str) next_hop: <class 'str'>,\n                    Optional  (str) weight: <class 'int'>,\n                    Optional  (str) status_codes: <class 'str'>,\n                    Optional  (str) path: <class 'str'>,\n                    Optional  (str) path_type: <class 'str'>,\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "doc": " Parser for:\n        * 'show bgp {address_family} neighbors {neighbor} advertised-routes'\n        * 'show bgp neighbors {neighbor} advertised-routes'\n    ", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_bgp.py#L4485", "class": "ShowBgpNeighborsAdvertisedRoutes", "module_name": "show_bgp"}}, "show bgp ipv4 mvpn": {"nxos": {"uid": "show_bgp_ipv4_mvpn", "schema": "{\n'instance': {\n  Any  (str) *: {\n    'vrf': {\n      Any  (str) *: {\n        'vrf_name_out': <class 'str'>,\n        'address_family': {\n          Any  (str) *: {\n            'router_id': <class 'str'>,\n            'table_version': <class 'str'>,\n            'af_name': <class 'str'>,\n            'rd': {\n              Any  (str) *: {\n                'prefix': {\n                  Any  (str) *: {\n                    'path': {\n                      Any  (str) *: {\n                        'origin': <class 'str'>,\n                        'pathnr': <class 'int'>,\n                        Optional  (str) bestcode: <class 'str'>,\n                        Optional  (str) statuscode: <class 'str'>,\n                        'localpref': <class 'str'>,\n                        'ipnexthop': <class 'str'>,\n                        Optional  (str) typecode: <class 'str'>,\n                        'weight': <class 'str'>,\n                        },\n                      },\n                    'nonipprefix': <class 'str'>,\n                    },\n                  },\n                Optional  (str) rd_vrf: <class 'str'>,\n                Optional  (str) rd_val: <class 'str'>,\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "doc": "Parser for:\n               show bgp ipv4 mvpn\n               show bgp ipv4 mvpn route-type <route_type>\n               show bgp ipv4 mvpn route-type <route_type> vrf <vrf>\n               show bgp ipv4 mvpn route-type <route_type> vrf all", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_bgp.py#L11020", "class": "ShowBgpIpMvpnRouteType", "module_name": "show_bgp"}}, "show platform": {"ios": {"uid": "show_platform", "schema": "{\nOptional  (str) main: {\n  Optional  (str) mac_persistency_wait_time: <class 'str'>,\n  Optional  (str) switch_mac_address: <class 'str'>,\n  Optional  (str) chassis: <class 'str'>,\n  },\n'slot': {\n  Any  (str) *: {\n    Optional  (str) lc: {\n      Any  (str) *: {\n        Optional  (str) cpld_ver: <class 'str'>,\n        Optional  (str) state: <class 'str'>,\n        Optional  (str) fw_ver: <class 'str'>,\n        Optional  (str) insert_time: <class 'str'>,\n        Optional  (str) subslot: {\n          Any  (str) *: {\n            Any  (str) *: {\n              Optional  (str) subslot: <class 'str'>,\n              Optional  (str) name: <class 'str'>,\n              Optional  (str) state: <class 'str'>,\n              Optional  (str) insert_time: <class 'str'>,\n              },\n            },\n          },\n        Optional  (str) name: <class 'str'>,\n        Optional  (str) slot: <class 'str'>,\n        },\n      },\n    Optional  (str) other: {\n      Any  (str) *: {\n        Optional  (str) name: <class 'str'>,\n        Optional  (str) cpld_ver: <class 'str'>,\n        Optional  (str) slot: <class 'str'>,\n        Optional  (str) fw_ver: <class 'str'>,\n        Optional  (str) state: <class 'str'>,\n        Optional  (str) insert_time: <class 'str'>,\n        },\n      },\n    Optional  (str) rp: {\n      Any  (str) *: {\n        Optional  (str) hw_ver: <class 'str'>,\n        Optional  (str) role: <class 'str'>,\n        Optional  (str) name: <class 'str'>,\n        Optional  (str) sn: <class 'str'>,\n        Optional  (str) num_of_ports: <class 'str'>,\n        Optional  (str) insert_time: <class 'str'>,\n        Optional  (str) priority: <class 'str'>,\n        Optional  (str) mac_address: <class 'str'>,\n        'state': <class 'str'>,\n        Optional  (str) fw_ver: <class 'str'>,\n        Optional  (str) sw_ver: <class 'str'>,\n        Optional  (str) swstack_role: <class 'str'>,\n        Optional  (str) slot: <class 'str'>,\n        Optional  (str) swstack_priority: <class 'str'>,\n        Optional  (str) cpld_ver: <class 'str'>,\n        Optional  (str) ports: <class 'str'>,\n        },\n      },\n    },\n  },\n}", "doc": "Parser for Parser for show platform", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_platform.py#L316", "class": "ShowPlatform", "module_name": "show_platform"}, "iosxr": {"uid": "show_platform", "schema": "{\n'slot': {\n  Any  (str) *: {\n    Any  (str) *: {\n      'state': <class 'str'>,\n      'config_state': <class 'str'>,\n      'name': <class 'str'>,\n      Optional  (str) subslot: {\n        Optional  (Any) Any  (str) *: {\n          Optional  (str) config_state: <class 'str'>,\n          Optional  (str) name: <class 'str'>,\n          Optional  (str) redundancy_state: <class 'str'>,\n          Optional  (str) state: <class 'str'>,\n          },\n        },\n      Optional  (str) redundancy_state: <class 'str'>,\n      'full_slot': <class 'str'>,\n      Optional  (str) plim: <class 'str'>,\n      },\n    },\n  },\n}", "doc": "Parser for show platform", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_platform.py#L319", "class": "ShowPlatform", "module_name": "show_platform"}, "iosxe": {"uid": "show_platform", "schema": "{\nOptional  (str) main: {\n  Optional  (str) mac_persistency_wait_time: <class 'str'>,\n  Optional  (str) switch_mac_address: <class 'str'>,\n  Optional  (str) chassis: <class 'str'>,\n  },\n'slot': {\n  Any  (str) *: {\n    Optional  (str) lc: {\n      Any  (str) *: {\n        Optional  (str) cpld_ver: <class 'str'>,\n        Optional  (str) state: <class 'str'>,\n        Optional  (str) fw_ver: <class 'str'>,\n        Optional  (str) insert_time: <class 'str'>,\n        Optional  (str) subslot: {\n          Any  (str) *: {\n            Any  (str) *: {\n              Optional  (str) subslot: <class 'str'>,\n              Optional  (str) name: <class 'str'>,\n              Optional  (str) state: <class 'str'>,\n              Optional  (str) insert_time: <class 'str'>,\n              },\n            },\n          },\n        Optional  (str) name: <class 'str'>,\n        Optional  (str) slot: <class 'str'>,\n        },\n      },\n    Optional  (str) other: {\n      Any  (str) *: {\n        Optional  (str) name: <class 'str'>,\n        Optional  (str) cpld_ver: <class 'str'>,\n        Optional  (str) slot: <class 'str'>,\n        Optional  (str) fw_ver: <class 'str'>,\n        Optional  (str) state: <class 'str'>,\n        Optional  (str) insert_time: <class 'str'>,\n        },\n      },\n    Optional  (str) rp: {\n      Any  (str) *: {\n        Optional  (str) hw_ver: <class 'str'>,\n        Optional  (str) role: <class 'str'>,\n        Optional  (str) name: <class 'str'>,\n        Optional  (str) sn: <class 'str'>,\n        Optional  (str) num_of_ports: <class 'str'>,\n        Optional  (str) insert_time: <class 'str'>,\n        Optional  (str) priority: <class 'str'>,\n        Optional  (str) mac_address: <class 'str'>,\n        'state': <class 'str'>,\n        Optional  (str) fw_ver: <class 'str'>,\n        Optional  (str) sw_ver: <class 'str'>,\n        Optional  (str) swstack_role: <class 'str'>,\n        Optional  (str) slot: <class 'str'>,\n        Optional  (str) swstack_priority: <class 'str'>,\n        Optional  (str) cpld_ver: <class 'str'>,\n        Optional  (str) ports: <class 'str'>,\n        },\n      },\n    },\n  },\n}", "doc": "Parser for show platform\n    parser class - implements detail parsing mechanisms for cli output.\n    ", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_platform.py#L1194", "class": "ShowPlatform", "module_name": "show_platform"}}, "show ip bgp template peer-policy {template_name}": {"ios": {"uid": "show_ip_bgp_template_peer-policy_template_name", "schema": "{\n'peer_policy': {\n  Any  (str) *: {\n    Optional  (str) as_override: <class 'bool'>,\n    Optional  (str) default_originate: <class 'bool'>,\n    Optional  (str) default_originate_route_map: <class 'str'>,\n    Optional  (str) route_map_name_in: <class 'str'>,\n    Optional  (str) route_map_name_out: <class 'str'>,\n    Optional  (str) maximum_prefix_max_prefix_no: <class 'int'>,\n    Optional  (str) maximum_prefix_threshold: <class 'int'>,\n    Optional  (str) maximum_prefix_restart: <class 'int'>,\n    Optional  (str) maximum_prefix_warning_only: <class 'bool'>,\n    Optional  (str) next_hop_self: <class 'bool'>,\n    Optional  (str) route_reflector_client: <class 'bool'>,\n    Optional  (str) send_community: <class 'str'>,\n    Optional  (str) soft_reconfiguration: <class 'bool'>,\n    Optional  (str) local_policies: <class 'str'>,\n    Optional  (str) inherited_policies: {\n      Optional  (str) next_hop_self: <class 'bool'>,\n      Optional  (str) route_reflector_client: <class 'bool'>,\n      Optional  (str) maximum_prefix_warning_only: <class 'bool'>,\n      Optional  (str) default_originate: <class 'bool'>,\n      Optional  (str) maximum_prefix_threshold: <class 'int'>,\n      Optional  (str) send_community: <class 'str'>,\n      Optional  (str) default_originate_route_map: <class 'str'>,\n      Optional  (str) soft_reconfiguration: <class 'bool'>,\n      Optional  (str) route_map_name_in: <class 'str'>,\n      Optional  (str) soo: <class 'str'>,\n      Optional  (str) route_map_name_out: <class 'str'>,\n      Optional  (str) maximum_prefix_max_prefix_no: <class 'int'>,\n      Optional  (str) allowas_in: <class 'bool'>,\n      Optional  (str) maximum_prefix_restart: <class 'int'>,\n      Optional  (str) allowas_in_as_number: <class 'int'>,\n      Optional  (str) as_override: <class 'bool'>,\n      },\n    Optional  (str) soo: <class 'str'>,\n    Optional  (str) inherited_polices: <class 'str'>,\n    Optional  (str) index: <class 'int'>,\n    Optional  (str) local_disable_policies: <class 'str'>,\n    Optional  (str) inherited_disable_polices: <class 'str'>,\n    Optional  (str) allowas_in: <class 'bool'>,\n    Optional  (str) allowas_in_as_number: <class 'int'>,\n    },\n  },\n}", "doc": "Parser for show ip bgp template peer-policy <WORD>", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_bgp.py#L102", "class": "ShowIpBgpTemplatePeerPolicy", "module_name": "show_bgp"}, "iosxe": {"uid": "show_ip_bgp_template_peer-policy_template_name", "schema": "{\n'peer_policy': {\n  Any  (str) *: {\n    Optional  (str) as_override: <class 'bool'>,\n    Optional  (str) default_originate: <class 'bool'>,\n    Optional  (str) default_originate_route_map: <class 'str'>,\n    Optional  (str) route_map_name_in: <class 'str'>,\n    Optional  (str) route_map_name_out: <class 'str'>,\n    Optional  (str) maximum_prefix_max_prefix_no: <class 'int'>,\n    Optional  (str) maximum_prefix_threshold: <class 'int'>,\n    Optional  (str) maximum_prefix_restart: <class 'int'>,\n    Optional  (str) maximum_prefix_warning_only: <class 'bool'>,\n    Optional  (str) next_hop_self: <class 'bool'>,\n    Optional  (str) route_reflector_client: <class 'bool'>,\n    Optional  (str) send_community: <class 'str'>,\n    Optional  (str) soft_reconfiguration: <class 'bool'>,\n    Optional  (str) local_policies: <class 'str'>,\n    Optional  (str) inherited_policies: {\n      Optional  (str) next_hop_self: <class 'bool'>,\n      Optional  (str) route_reflector_client: <class 'bool'>,\n      Optional  (str) maximum_prefix_warning_only: <class 'bool'>,\n      Optional  (str) default_originate: <class 'bool'>,\n      Optional  (str) maximum_prefix_threshold: <class 'int'>,\n      Optional  (str) send_community: <class 'str'>,\n      Optional  (str) default_originate_route_map: <class 'str'>,\n      Optional  (str) soft_reconfiguration: <class 'bool'>,\n      Optional  (str) route_map_name_in: <class 'str'>,\n      Optional  (str) soo: <class 'str'>,\n      Optional  (str) route_map_name_out: <class 'str'>,\n      Optional  (str) maximum_prefix_max_prefix_no: <class 'int'>,\n      Optional  (str) allowas_in: <class 'bool'>,\n      Optional  (str) maximum_prefix_restart: <class 'int'>,\n      Optional  (str) allowas_in_as_number: <class 'int'>,\n      Optional  (str) as_override: <class 'bool'>,\n      },\n    Optional  (str) soo: <class 'str'>,\n    Optional  (str) inherited_polices: <class 'str'>,\n    Optional  (str) index: <class 'int'>,\n    Optional  (str) local_disable_policies: <class 'str'>,\n    Optional  (str) inherited_disable_polices: <class 'str'>,\n    Optional  (str) allowas_in: <class 'bool'>,\n    Optional  (str) allowas_in_as_number: <class 'int'>,\n    },\n  },\n}", "doc": " Parser for \"show ip bgp template peer-policy {template_name}\" ", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_bgp.py#L6438", "class": "ShowIpBgpTemplatePeerPolicy", "module_name": "show_bgp"}}, "show platform hardware qfp {status} bqs {slot} opm mapping": {"ios": {"uid": "show_platform_hardware_qfp_status_bqs_slot_opm_mapping", "schema": "{\n'channel': {\n  Any  (str) *: {\n    Optional  (str) logical_channel: <class 'int'>,\n    'name': <class 'str'>,\n    Optional  (str) drain_mode: <class 'bool'>,\n    Optional  (str) port: <class 'int'>,\n    Optional  (str) interface: <class 'str'>,\n    Optional  (str) cfifo: <class 'int'>,\n    },\n  },\n}", "doc": "Parser for show platform hardware qfp active bqs <x> opm mapping\n                  show platform hardware qfp standby bqs <x> opm mapping", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_platform.py#L359", "class": "ShowPlatformHardwareQfpBqsOpmMapping", "module_name": "show_platform"}, "iosxe": {"uid": "show_platform_hardware_qfp_status_bqs_slot_opm_mapping", "schema": "{\n'channel': {\n  Any  (str) *: {\n    Optional  (str) logical_channel: <class 'int'>,\n    'name': <class 'str'>,\n    Optional  (str) drain_mode: <class 'bool'>,\n    Optional  (str) port: <class 'int'>,\n    Optional  (str) interface: <class 'str'>,\n    Optional  (str) cfifo: <class 'int'>,\n    },\n  },\n}", "doc": "Parser for show platform hardware qfp active bqs <x> opm mapping\n                  show platform hardware qfp standby bqs <x> opm mapping", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_platform.py#L3280", "class": "ShowPlatformHardwareQfpBqsOpmMapping", "module_name": "show_platform"}}, "show ip ospf neighbors detail": {"nxos": {"uid": "show_ip_ospf_neighbors_detail", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'address_family': {\n      Any  (str) *: {\n        'instance': {\n          Any  (str) *: {\n            'areas': {\n              Any  (str) *: {\n                Optional  (str) sham_links: {\n                  Any  (str) *: {\n                    'neighbors': {\n                      Any  (str) *: {\n                        Optional  (str) bdr_router_id: <class 'str'>,\n                        Optional  (str) statistics: {\n                          Optional  (str) nbr_event_count: <class 'int'>,\n                          },\n                        'dead_timer': <class 'str'>,\n                        'address': <class 'str'>,\n                        'dbd_options': <class 'str'>,\n                        'last_non_hello_packet_received': <class 'str'>,\n                        'state': <class 'str'>,\n                        'hello_options': <class 'str'>,\n                        Optional  (str) priority: <class 'int'>,\n                        'neighbor_router_id': <class 'str'>,\n                        Optional  (str) dr_ip_addr: <class 'str'>,\n                        Optional  (str) bdr_ip_addr: <class 'str'>,\n                        Optional  (str) dr_router_id: <class 'str'>,\n                        'last_state_change': <class 'str'>,\n                        },\n                      },\n                    },\n                  },\n                'interfaces': {\n                  Any  (str) *: {\n                    'neighbors': {\n                      Any  (str) *: {\n                        'dead_timer': <class 'str'>,\n                        Optional  (str) statistics: {\n                          Optional  (str) nbr_event_count: <class 'int'>,\n                          },\n                        'hello_options': <class 'str'>,\n                        'dbd_options': <class 'str'>,\n                        Optional  (str) priority: <class 'int'>,\n                        'state': <class 'str'>,\n                        'address': <class 'str'>,\n                        Optional  (str) dr_ip_addr: <class 'str'>,\n                        'neighbor_router_id': <class 'str'>,\n                        Optional  (str) bdr_ip_addr: <class 'str'>,\n                        Optional  (str) dr_router_id: <class 'str'>,\n                        'last_non_hello_packet_received': <class 'str'>,\n                        Optional  (str) bdr_router_id: <class 'str'>,\n                        'last_state_change': <class 'str'>,\n                        },\n                      },\n                    },\n                  },\n                Optional  (str) virtual_links: {\n                  Any  (str) *: {\n                    'neighbors': {\n                      Any  (str) *: {\n                        Optional  (str) priority: <class 'int'>,\n                        'dead_timer': <class 'str'>,\n                        Optional  (str) statistics: {\n                          Optional  (str) nbr_event_count: <class 'int'>,\n                          },\n                        'address': <class 'str'>,\n                        'dbd_options': <class 'str'>,\n                        'state': <class 'str'>,\n                        'hello_options': <class 'str'>,\n                        Optional  (str) dr_ip_addr: <class 'str'>,\n                        'neighbor_router_id': <class 'str'>,\n                        Optional  (str) bdr_ip_addr: <class 'str'>,\n                        Optional  (str) dr_router_id: <class 'str'>,\n                        'last_non_hello_packet_received': <class 'str'>,\n                        Optional  (str) bdr_router_id: <class 'str'>,\n                        'last_state_change': <class 'str'>,\n                        },\n                      },\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "doc": "Parser for:\n        show ip ospf neighbors detail\n        show ip ospf neighbors detail vrf <vrf>", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_ospf.py#L2307", "class": "ShowIpOspfNeighborDetail", "module_name": "show_ospf"}}, "show ip arp summary vrf {vrf}": {"nxos": {"uid": "show_ip_arp_summary_vrf_vrf", "schema": "{\n'resolved': <class 'int'>,\n'incomplete': <class 'int'>,\n'total': <class 'int'>,\n'unknown': <class 'int'>,\n'throttled': <class 'int'>,\n}", "doc": "Parser for:\n\t\tshow ip arp summary vrf all\n\t\tparser class - implements detail parsing mechanisms for cli,xml and yang output.\n\t", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_arp.py#L171", "class": "ShowIpArpSummaryVrfAll", "module_name": "show_arp"}}, "show bgp instance all {vrf_type} all {af_type} summary": {"iosxr": {"uid": "show_bgp_instance_all_vrf_type_all_af_type_summary", "schema": "{\n'instance': {\n  Any  (str) *: {\n    Optional  (str) vrf: {\n      Any  (str) *: {\n        Optional  (str) address_family: {\n          Any  (str) *: {\n            Optional  (str) router_id: <class 'str'>,\n            Optional  (str) operation_mode: <class 'str'>,\n            Optional  (str) non_stop_routing: <class 'str'>,\n            Optional  (str) scan_interval: <class 'int'>,\n            Optional  (str) table_state: <class 'str'>,\n            Optional  (str) process: {\n              Any  (str) *: {\n                'sendtblver': <class 'int'>,\n                'labelver': <class 'int'>,\n                'standbyver': <class 'int'>,\n                'rcvtblver': <class 'int'>,\n                'brib_rib': <class 'int'>,\n                'importver': <class 'int'>,\n                },\n              },\n            Optional  (str) instance_number: <class 'str'>,\n            Optional  (str) table_id: <class 'str'>,\n            Optional  (str) rd_version: <class 'int'>,\n            Optional  (str) route_distinguisher: <class 'str'>,\n            Optional  (str) vrf_id: <class 'str'>,\n            Optional  (str) generic_scan_interval: <class 'int'>,\n            Optional  (str) nsr_initial_initsync_version: <class 'int'>,\n            Optional  (str) bgp_table_version: <class 'int'>,\n            Optional  (str) nsr_issu_sync_group_versions: <class 'str'>,\n            Optional  (str) local_as: <class 'int'>,\n            Optional  (str) vrf_state: <class 'str'>,\n            Optional  (str) nsr_initial_init_ver_status: <class 'str'>,\n            Optional  (str) bgp_vrf: <class 'str'>,\n            },\n          },\n        Optional  (str) neighbor: {\n          Any  (str) *: {\n            'remote_as': <class 'int'>,\n            'address_family': {\n              Any  (str) *: {\n                'tbl_ver': <class 'int'>,\n                'output_queue': <class 'int'>,\n                'msg_rcvd': <class 'int'>,\n                Optional  (str) route_distinguisher: <class 'str'>,\n                'up_down': <class 'str'>,\n                'spk': <class 'int'>,\n                'msg_sent': <class 'int'>,\n                'input_queue': <class 'int'>,\n                'state_pfxrcd': <class 'str'>,\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "doc": " Parser for:\n        show bgp instance all all all summary\n        show bgp instance all vrf all summary\n        show bgp instance all vrf all ipv4 unicast summary\n        show bgp instance all vrf all ipv6 unicast summary\n        For checking any output with the parser ,below mandatory keys have to be in cli command.\n\n        - vrf_type\n    ", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_bgp.py#L3975", "class": "ShowBgpInstanceSummary", "module_name": "show_bgp"}}, "show bgp l2vpn evpn": {"nxos": {"uid": "show_bgp_l2vpn_evpn", "schema": "{\n'instance': {\n  Any  (str) *: {\n    'vrf': {\n      Any  (str) *: {\n        'vrf_name_out': <class 'str'>,\n        'address_family': {\n          Any  (str) *: {\n            'router_id': <class 'str'>,\n            'table_version': <class 'str'>,\n            'af_name': <class 'str'>,\n            'rd': {\n              Any  (str) *: {\n                'prefix': {\n                  Any  (str) *: {\n                    'path': {\n                      Any  (str) *: {\n                        'origin': <class 'str'>,\n                        'pathnr': <class 'int'>,\n                        Optional  (str) bestcode: <class 'str'>,\n                        Optional  (str) statuscode: <class 'str'>,\n                        'localpref': <class 'str'>,\n                        'ipnexthop': <class 'str'>,\n                        Optional  (str) typecode: <class 'str'>,\n                        'weight': <class 'str'>,\n                        },\n                      },\n                    'nonipprefix': <class 'str'>,\n                    },\n                  },\n                Optional  (str) rd_vrf: <class 'str'>,\n                Optional  (str) rd_val: <class 'str'>,\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "doc": "Parser for:\n           show bgp l2vpn evpn\n           show bgp l2vpn evpn vrf <vrf>\n           show bgp l2vpn evpn vrf all", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_bgp.py#L11500", "class": "ShowBgpL2vpnEvpn", "module_name": "show_bgp"}, "iosxr": {"uid": "show_bgp_l2vpn_evpn", "schema": null, "doc": "Parser for show bgp l2vpn evpn", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_bgp.py#L4822", "class": "ShowBgpL2vpnEvpn", "module_name": "show_bgp"}}, "show ip interface vrf all": {"nxos": {"uid": "show_ip_interface_vrf_all", "schema": "{\nAny  (str) *: {\n  'wccp_redirect_inbound': <class 'str'>,\n  'int_stat_last_reset': <class 'str'>,\n  'icmp_port_unreachable': <class 'str'>,\n  'load_sharing': <class 'str'>,\n  Optional  (str) multicast_groups_address: <class 'str'>,\n  'ip_mtu': <class 'int'>,\n  'vrf': <class 'str'>,\n  Optional  (str) ipv4: {\n    Any  (str) *: {\n      Optional  (str) secondary: <class 'bool'>,\n      Optional  (str) route_tag: <class 'str'>,\n      Optional  (str) ip: <class 'str'>,\n      Optional  (str) ip_subnet: <class 'str'>,\n      Optional  (str) broadcast_address: <class 'str'>,\n      Optional  (str) prefix_length: <class 'str'>,\n      Optional  (str) route_preference: <class 'str'>,\n      },\n    'counters': {\n      'multicast_packets_originated': <class 'int'>,\n      'broadcast_bytes_forwarded': <class 'int'>,\n      'multicast_bytes_forwarded': <class 'int'>,\n      'multicast_packets_consumed': <class 'int'>,\n      'unicast_bytes_consumed': <class 'int'>,\n      'multicast_packets_forwarded': <class 'int'>,\n      'multicast_packets_sent': <class 'int'>,\n      'labeled_packets_consumed': <class 'int'>,\n      'unicast_packets_consumed': <class 'int'>,\n      'multicast_bytes_consumed': <class 'int'>,\n      'broadcast_packets_consumed': <class 'int'>,\n      'broadcast_packets_received': <class 'int'>,\n      'unicast_bytes_forwarded': <class 'int'>,\n      'labeled_packets_forwarded': <class 'int'>,\n      'unicast_packets_received': <class 'int'>,\n      'labeled_bytes_consumed': <class 'int'>,\n      'labeled_packets_received': <class 'int'>,\n      'labeled_packets_sent': <class 'int'>,\n      'unicast_bytes_originated': <class 'int'>,\n      'unicast_bytes_received': <class 'int'>,\n      'labeled_packets_originated': <class 'int'>,\n      'broadcast_bytes_sent': <class 'int'>,\n      'multicast_bytes_originated': <class 'int'>,\n      'broadcast_packets_sent': <class 'int'>,\n      'labeled_bytes_received': <class 'int'>,\n      'broadcast_packets_originated': <class 'int'>,\n      'unicast_packets_sent': <class 'int'>,\n      'labeled_bytes_originated': <class 'int'>,\n      'broadcast_bytes_originated': <class 'int'>,\n      'multicast_bytes_sent': <class 'int'>,\n      'unicast_packets_originated': <class 'int'>,\n      'labeled_bytes_forwarded': <class 'int'>,\n      'unicast_packets_forwarded': <class 'int'>,\n      'multicast_bytes_received': <class 'int'>,\n      'broadcast_bytes_consumed': <class 'int'>,\n      'multicast_packets_received': <class 'int'>,\n      'broadcast_packets_forwarded': <class 'int'>,\n      'broadcast_bytes_received': <class 'int'>,\n      'labeled_bytes_sent': <class 'int'>,\n      'unicast_bytes_sent': <class 'int'>,\n      },\n    Optional  (str) unnumbered: {\n      'interface_ref': <class 'str'>,\n      },\n    },\n  Optional  (str) multicast_groups: <class 'list'>,\n  'wccp_redirect_outbound': <class 'str'>,\n  'icmp_redirects': <class 'str'>,\n  'interface_status': <class 'str'>,\n  'unicast_reverse_path': <class 'str'>,\n  Optional  (str) ip_forwarding: <class 'str'>,\n  'local_proxy_arp': <class 'str'>,\n  'wccp_redirect_exclude': <class 'str'>,\n  'icmp_unreachable': <class 'str'>,\n  'multicast_routing': <class 'str'>,\n  'directed_broadcast': <class 'str'>,\n  'proxy_arp': <class 'str'>,\n  'iod': <class 'int'>,\n  },\n}", "doc": "Parser for show ip interface vrf all", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_interface.py#L985", "class": "ShowIpInterfaceVrfAll", "module_name": "show_interface"}}, "show fabric multicast globals": {"nxos": {"uid": "show_fabric_multicast_globals", "schema": "{\n'multicast': {\n  'globals': {\n    'advertise_vpc_rpf_routes': <class 'str'>,\n    'pruning': <class 'str'>,\n    'fwd_encap': <class 'str'>,\n    'switch_role': <class 'str'>,\n    'peer_fabric_ctrl_addr': <class 'str'>,\n    'fabric_control_seg': <class 'str'>,\n    'created_vni_list': <class 'str'>,\n    'overlay_spt_only': <class 'bool'>,\n    'overlay_distributed_dr': <class 'bool'>,\n    },\n  },\n}", "doc": "parser for:\n        show fabric multicast globals", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_vxlan.py#L1866", "class": "ShowFabricMulticastGlobals", "module_name": "show_vxlan"}}, "show ipv6 routers vrf {vrf}": {"nxos": {"uid": "show_ipv6_routers_vrf_vrf", "schema": "{\n'interfaces': {\n  Any  (str) *: {\n    'neighbors': {\n      Any  (str) *: {\n        'preference': <class 'str'>,\n        'reachable_time': <class 'int'>,\n        'addr_flag': <class 'int'>,\n        'is_router': <class 'bool'>,\n        'prefix': <class 'str'>,\n        'current_hop_limit': <class 'int'>,\n        'autonomous_flag': <class 'int'>,\n        'last_update': <class 'str'>,\n        'ip': <class 'str'>,\n        'valid_lifetime': <class 'int'>,\n        'retransmission_time': <class 'int'>,\n        'homeagent_flag': <class 'int'>,\n        'mtu': <class 'int'>,\n        'preferred_lifetime': <class 'int'>,\n        'lifetime': <class 'int'>,\n        'onlink_flag': <class 'int'>,\n        'other_flag': <class 'int'>,\n        },\n      },\n    'interface': <class 'str'>,\n    },\n  },\n}", "doc": "Parser for :\n        show ipv6 routers\n        show ipv6 routers vrf all\n        show ipv6 routers vrf <vrf>", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_nd.py#L634", "class": "ShowIpv6Routers", "module_name": "show_nd"}}, "show ip route vrf {vrf}": {"ios": {"uid": "show_ip_route_vrf_vrf", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    Optional  (str) address_family: {\n      Any  (str) *: {\n        Optional  (str) routes: {\n          Any  (str) *: {\n            Optional  (str) source_protocol: <class 'str'>,\n            Optional  (str) redist_via: <class 'str'>,\n            Optional  (str) source_protocol_codes: <class 'str'>,\n            Optional  (str) mask: <class 'str'>,\n            Optional  (str) next_hop: {\n              Optional  (str) outgoing_interface: {\n                Any  (str) *: {\n                  Optional  (str) updated: <class 'str'>,\n                  Optional  (str) outgoing_interface: <class 'str'>,\n                  },\n                },\n              Optional  (str) next_hop_list: {\n                Any  (str) *: {\n                  Optional  (str) age: <class 'str'>,\n                  Optional  (str) from: <class 'str'>,\n                  Optional  (str) total_delay: <class 'str'>,\n                  Optional  (str) metric: <class 'str'>,\n                  Optional  (str) share_count: <class 'str'>,\n                  Optional  (str) index: <class 'int'>,\n                  Optional  (str) loading: <class 'str'>,\n                  Optional  (str) hops: <class 'str'>,\n                  Optional  (str) minimum_mtu: <class 'str'>,\n                  Optional  (str) next_hop: <class 'str'>,\n                  Optional  (str) outgoing_interface: <class 'str'>,\n                  Optional  (str) minimum_bandwidth: <class 'str'>,\n                  Optional  (str) reliability: <class 'str'>,\n                  Optional  (str) updated: <class 'str'>,\n                  },\n                },\n              },\n            Optional  (str) known_via: <class 'str'>,\n            Optional  (str) update: {\n              'age': <class 'str'>,\n              'interface': <class 'str'>,\n              'from': <class 'str'>,\n              },\n            Optional  (str) distance: <class 'int'>,\n            Optional  (str) route: <class 'str'>,\n            Optional  (str) type: <class 'str'>,\n            Optional  (str) net: <class 'str'>,\n            Optional  (str) active: <class 'bool'>,\n            Optional  (str) route_preference: <class 'int'>,\n            Optional  (str) redist_via_tag: <class 'str'>,\n            Optional  (str) metric: <class 'int'>,\n            },\n          },\n        },\n      },\n    },\n  },\n}", "doc": "Parser for :\n       show ip route\n       show ip route vrf <vrf>\n       show ip route <route>\n       show ip route vrf <vrf> <route>", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_routing.py#L10", "class": "ShowIpRoute", "module_name": "show_routing"}, "nxos": {"uid": "show_ip_route_vrf_vrf", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    Optional  (str) address_family: {\n      Any  (str) *: {\n        Optional  (str) routes: {\n          Any  (str) *: {\n            Optional  (str) route_preference: <class 'int'>,\n            Optional  (str) metric: <class 'int'>,\n            Optional  (str) ubest: <class 'int'>,\n            Optional  (str) mbest: <class 'int'>,\n            Optional  (str) active: <class 'bool'>,\n            Optional  (str) process_id: <class 'str'>,\n            Optional  (str) tag: <class 'int'>,\n            Optional  (str) next_hop: {\n              Optional  (str) outgoing_interface: {\n                Any  (str) *: {\n                  Optional  (str) best_ucast_nexthop: <class 'bool'>,\n                  Optional  (str) best_mcast_nexthop: <class 'bool'>,\n                  Optional  (str) outgoing_interface: <class 'str'>,\n                  Optional  (str) updated: <class 'str'>,\n                  },\n                },\n              Optional  (str) next_hop_list: {\n                Any  (str) *: {\n                  Optional  (str) outgoing_interface: <class 'str'>,\n                  Optional  (str) next_hop: <class 'str'>,\n                  Optional  (str) best_mcast_nexthop: <class 'bool'>,\n                  Optional  (str) index: <class 'int'>,\n                  Optional  (str) updated: <class 'str'>,\n                  Optional  (str) best_ucast_nexthop: <class 'bool'>,\n                  Optional  (str) next_hop_vrf: <class 'str'>,\n                  },\n                },\n              },\n            Optional  (str) attached: <class 'bool'>,\n            Optional  (str) source_protocol_status: <class 'str'>,\n            Optional  (str) source_protocol: <class 'str'>,\n            Optional  (str) route: <class 'str'>,\n            },\n          },\n        },\n      },\n    },\n  },\n}", "doc": "Parser for :\n       show ip route\n       show ip route vrf <vrf>\n       show ip route vrf all", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_routing.py#L323", "class": "ShowIpRoute", "module_name": "show_routing"}, "iosxe": {"uid": "show_ip_route_vrf_vrf", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    Optional  (str) address_family: {\n      Any  (str) *: {\n        Optional  (str) routes: {\n          Any  (str) *: {\n            Optional  (str) source_protocol: <class 'str'>,\n            Optional  (str) redist_via: <class 'str'>,\n            Optional  (str) source_protocol_codes: <class 'str'>,\n            Optional  (str) mask: <class 'str'>,\n            Optional  (str) next_hop: {\n              Optional  (str) outgoing_interface: {\n                Any  (str) *: {\n                  Optional  (str) updated: <class 'str'>,\n                  Optional  (str) outgoing_interface: <class 'str'>,\n                  },\n                },\n              Optional  (str) next_hop_list: {\n                Any  (str) *: {\n                  Optional  (str) age: <class 'str'>,\n                  Optional  (str) from: <class 'str'>,\n                  Optional  (str) total_delay: <class 'str'>,\n                  Optional  (str) metric: <class 'str'>,\n                  Optional  (str) share_count: <class 'str'>,\n                  Optional  (str) index: <class 'int'>,\n                  Optional  (str) loading: <class 'str'>,\n                  Optional  (str) hops: <class 'str'>,\n                  Optional  (str) minimum_mtu: <class 'str'>,\n                  Optional  (str) next_hop: <class 'str'>,\n                  Optional  (str) outgoing_interface: <class 'str'>,\n                  Optional  (str) minimum_bandwidth: <class 'str'>,\n                  Optional  (str) reliability: <class 'str'>,\n                  Optional  (str) updated: <class 'str'>,\n                  },\n                },\n              },\n            Optional  (str) known_via: <class 'str'>,\n            Optional  (str) update: {\n              'age': <class 'str'>,\n              'interface': <class 'str'>,\n              'from': <class 'str'>,\n              },\n            Optional  (str) distance: <class 'int'>,\n            Optional  (str) route: <class 'str'>,\n            Optional  (str) type: <class 'str'>,\n            Optional  (str) net: <class 'str'>,\n            Optional  (str) active: <class 'bool'>,\n            Optional  (str) route_preference: <class 'int'>,\n            Optional  (str) redist_via_tag: <class 'str'>,\n            Optional  (str) metric: <class 'int'>,\n            },\n          },\n        },\n      },\n    },\n  },\n}", "doc": "Parser for :\n       show ip route\n       show ip route vrf <vrf>", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_routing.py#L80", "class": "ShowIpRoute", "module_name": "show_routing"}}, "show ip bgp neighbors {neighbor}": {"iosxe": {"uid": "show_ip_bgp_neighbors_neighbor", "schema": "{\nOptional  (str) list_of_neighbors: <class 'list'>,\n'vrf': {\n  Any  (str) *: {\n    'neighbor': {\n      Any  (str) *: {\n        Optional  (str) bgp_event_timer: {\n          'starts': {\n            Any  (str) *: <class 'int'>,\n            },\n          'wakeups': {\n            Any  (str) *: <class 'int'>,\n            },\n          'next': {\n            Any  (str) *: <class 'str'>,\n            },\n          },\n        'address_family': {\n          Any  (str) *: {\n            Optional  (str) refresh_epoch: <class 'int'>,\n            Optional  (str) session_state: <class 'str'>,\n            Optional  (str) max_nlri: <class 'int'>,\n            Optional  (str) up_time: <class 'str'>,\n            Optional  (str) min_nlri: <class 'int'>,\n            Optional  (str) down_time: <class 'str'>,\n            Optional  (str) refresh_activity_counters: {\n              'sent': {\n                Any  (str) *: <class 'int'>,\n                },\n              'received': {\n                Any  (str) *: <class 'int'>,\n                },\n              },\n            Optional  (str) local_policy_denied_prefixes_counters: {\n              'inbound': {\n                Any  (str) *: Any  (str) *,\n                },\n              'outbound': {\n                Any  (str) *: Any  (str) *,\n                },\n              },\n            Optional  (str) last_detected_dynamic_slow_peer: <class 'str'>,\n            Optional  (str) last_read: <class 'str'>,\n            Optional  (str) dynamic_slow_peer_recovered: <class 'str'>,\n            Optional  (str) last_write: <class 'str'>,\n            Optional  (str) last_sent_refresh_start_of_rib: <class 'str'>,\n            Optional  (str) current_time: <class 'str'>,\n            Optional  (str) last_received_refresh_start_of_rib: <class 'str'>,\n            Optional  (str) bgp_table_version: <class 'int'>,\n            Optional  (str) last_sent_refresh_end_of_rib: <class 'str'>,\n            Optional  (str) neighbor_version: <class 'str'>,\n            Optional  (str) last_received_refresh_end_of_rib: <class 'str'>,\n            Optional  (str) output_queue_size: <class 'int'>,\n            Optional  (str) refresh_out: <class 'int'>,\n            Optional  (str) index: <class 'int'>,\n            Optional  (str) refresh_in: <class 'int'>,\n            Optional  (str) advertise_bit: <class 'int'>,\n            Optional  (str) route_reflector_client: <class 'bool'>,\n            Optional  (str) update_group_member: <class 'int'>,\n            Optional  (str) community_attribute_sent: <class 'bool'>,\n            Optional  (str) extended_community_attribute_sent: <class 'bool'>,\n            Optional  (str) prefix_activity_counters: {\n              'sent': {\n                Any  (str) *: Any  (str) *,\n                },\n              'received': {\n                Any  (str) *: Any  (str) *,\n                },\n              },\n            Optional  (str) suppress_ldp_signaling: <class 'bool'>,\n            Optional  (str) slow_peer_detection: <class 'bool'>,\n            Optional  (str) slow_peer_split_update_group_dynamic: <class 'bool'>,\n            },\n          },\n        'bgp_neighbor_counters': {\n          'messages': {\n            'sent': {\n              'notifications': <class 'int'>,\n              'route_refresh': <class 'int'>,\n              'total': <class 'int'>,\n              'opens': <class 'int'>,\n              'keepalives': <class 'int'>,\n              'updates': <class 'int'>,\n              },\n            'in_queue_depth': <class 'int'>,\n            'received': {\n              'notifications': <class 'int'>,\n              'route_refresh': <class 'int'>,\n              'total': <class 'int'>,\n              'opens': <class 'int'>,\n              'keepalives': <class 'int'>,\n              'updates': <class 'int'>,\n              },\n            'out_queue_depth': <class 'int'>,\n            },\n          },\n        'bgp_negotiated_keepalive_timers': {\n          'keepalive_interval': <class 'int'>,\n          'hold_time': <class 'int'>,\n          Optional  (str) min_holdtime: <class 'int'>,\n          },\n        'link': <class 'str'>,\n        'router_id': <class 'str'>,\n        Optional  (str) bgp_session_transport: {\n          Optional  (str) enqueued_packets: {\n            'mis_ordered_packet': <class 'int'>,\n            'input_packet': <class 'int'>,\n            'retransmit_packet': <class 'int'>,\n            },\n          Optional  (str) iss: <class 'int'>,\n          Optional  (str) snduna: <class 'int'>,\n          'connection': {\n            Optional  (str) reset_reason: <class 'str'>,\n            'dropped': <class 'int'>,\n            'established': <class 'int'>,\n            'last_reset': <class 'str'>,\n            },\n          Optional  (str) sndnxt: <class 'int'>,\n          Optional  (str) irs: <class 'int'>,\n          'address_tracking_status': <class 'str'>,\n          Optional  (str) sndwnd: <class 'int'>,\n          Optional  (str) snd_scale: <class 'int'>,\n          Optional  (str) maxrcvwnd: <class 'int'>,\n          Optional  (str) rcvwnd: <class 'int'>,\n          Optional  (str) rcv_scale: <class 'int'>,\n          Optional  (str) delrcvwnd: <class 'int'>,\n          Optional  (str) srtt: <class 'int'>,\n          'min_time_between_advertisement_runs': <class 'int'>,\n          Optional  (str) rtto: <class 'int'>,\n          Optional  (str) rtv: <class 'int'>,\n          Optional  (str) krtt: <class 'int'>,\n          Optional  (str) min_rtt: <class 'int'>,\n          Optional  (str) max_rtt: <class 'int'>,\n          Optional  (str) ack_hold: <class 'int'>,\n          Optional  (str) uptime: <class 'int'>,\n          Optional  (str) sent_idletime: <class 'int'>,\n          Optional  (str) receive_idletime: <class 'int'>,\n          Optional  (str) tcp_connection: <class 'bool'>,\n          Optional  (str) status_flags: <class 'str'>,\n          Optional  (str) option_flags: <class 'str'>,\n          Optional  (str) ip_precedence_value: <class 'int'>,\n          'tcp_path_mtu_discovery': <class 'str'>,\n          Optional  (str) transport: {\n            'local_port': <class 'str'>,\n            'local_host': <class 'str'>,\n            'foreign_port': <class 'str'>,\n            Optional  (str) mss: <class 'int'>,\n            'foreign_host': <class 'str'>,\n            },\n          Optional  (str) datagram: {\n            'datagram_sent': {\n              'second_congestion': <class 'int'>,\n              'with_data': <class 'int'>,\n              'retransmit': <class 'int'>,\n              'partialack': <class 'int'>,\n              'value': <class 'int'>,\n              'fastretransmit': <class 'int'>,\n              'total_data': <class 'int'>,\n              },\n            'datagram_received': {\n              'out_of_order': <class 'int'>,\n              'with_data': <class 'int'>,\n              'total_data': <class 'int'>,\n              'value': <class 'int'>,\n              },\n            },\n          Optional  (str) graceful_restart: <class 'str'>,\n          Optional  (str) packet_fast_path: <class 'int'>,\n          Optional  (str) gr_restart_time: <class 'int'>,\n          Optional  (str) packet_fast_processed: <class 'int'>,\n          Optional  (str) gr_stalepath_time: <class 'int'>,\n          Optional  (str) packet_slow_path: <class 'int'>,\n          Optional  (str) connection_state: <class 'str'>,\n          Optional  (str) fast_lock_acquisition_failures: <class 'int'>,\n          Optional  (str) io_status: <class 'int'>,\n          Optional  (str) lock_slow_path: <class 'int'>,\n          Optional  (str) unread_input_bytes: <class 'int'>,\n          Optional  (str) tcp_semaphore: <class 'str'>,\n          Optional  (str) ecn_connection: <class 'str'>,\n          Optional  (str) tcp_semaphore_status: <class 'str'>,\n          Optional  (str) minimum_incoming_ttl: <class 'int'>,\n          Optional  (str) sso: <class 'bool'>,\n          Optional  (str) outgoing_ttl: <class 'int'>,\n          Optional  (str) rcvnxt: <class 'int'>,\n          Optional  (str) connection_tableid: <class 'int'>,\n          'rib_route_ip': <class 'str'>,\n          Optional  (str) maximum_output_segment_queue_size: <class 'int'>,\n          },\n        'remote_as': <class 'int'>,\n        'bgp_version': <class 'int'>,\n        'session_state': <class 'str'>,\n        'shutdown': <class 'bool'>,\n        Optional  (str) local_as: <class 'int'>,\n        'bgp_negotiated_capabilities': {\n          'four_octets_asn': <class 'str'>,\n          Optional  (str) vpnv4_unicast: <class 'str'>,\n          Optional  (str) graceful_restart: <class 'str'>,\n          'route_refresh': <class 'str'>,\n          Optional  (str) vpnv6_unicast: <class 'str'>,\n          'stateful_switchover': <class 'str'>,\n          Optional  (str) ipv4_unicast: <class 'str'>,\n          Optional  (str) remote_restart_timer: <class 'int'>,\n          Optional  (str) ipv6_unicast: <class 'str'>,\n          Optional  (str) l2vpn_vpls: <class 'str'>,\n          Optional  (str) l2vpn_evpn: <class 'str'>,\n          Optional  (str) vpnv4_multicast: <class 'str'>,\n          Optional  (str) multisession: <class 'str'>,\n          Optional  (str) graceful_restart_af_advertised_by_peer: <class 'list'>,\n          Optional  (str) vpnv6_multicast: <class 'str'>,\n          'enhanced_refresh': <class 'str'>,\n          Optional  (str) mvpnv4_multicast: <class 'str'>,\n          Optional  (str) mvpnv6_multicast: <class 'str'>,\n          },\n        Optional  (str) description: <class 'str'>,\n        },\n      },\n    },\n  },\n}", "doc": " Parser for:\n        * 'show ip bgp neighbors'\n        * 'show ip bgp neighbors {neighbor}'\n        * 'show ip bgp {address_family} neighbors'\n        * 'show ip bgp {address_family} neighbors {neighbor}'\n        * 'show ip bgp {address_family} vrf {vrf} neighbors'\n        * 'show ip bgp {address_family} vrf {vrf} neighbors {neighbor}'\n    ", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_bgp.py#L3872", "class": "ShowIpBgpNeighbors", "module_name": "show_bgp"}}, "show ip bgp {address_family} neighbors {neighbor} routes": {"iosxe": {"uid": "show_ip_bgp_address_family_neighbors_neighbor_routes", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'neighbor': {\n      Any  (str) *: {\n        'address_family': {\n          Any  (str) *: {\n            Optional  (str) local_router_id: <class 'str'>,\n            Optional  (str) routes: {\n              Optional  (Any) Any  (str) *: {\n                Optional  (str) index: {\n                  Optional  (Any) Any  (str) *: {\n                    Optional  (str) path_type: <class 'str'>,\n                    Optional  (str) origin_codes: <class 'str'>,\n                    Optional  (str) metric: <class 'int'>,\n                    Optional  (str) localprf: <class 'int'>,\n                    Optional  (str) next_hop: <class 'str'>,\n                    Optional  (str) weight: <class 'int'>,\n                    Optional  (str) status_codes: <class 'str'>,\n                    Optional  (str) path: <class 'str'>,\n                    },\n                  },\n                },\n              },\n            Optional  (str) route_distinguisher: <class 'str'>,\n            Optional  (str) bgp_table_version: <class 'int'>,\n            Optional  (str) default_vrf: <class 'str'>,\n            },\n          },\n        },\n      },\n    },\n  },\n}", "doc": " Parser for:\n        * 'show ip bgp neighbors {neighbor} routes'\n        * 'show ip bgp {address_family} neighbors {neighbor} routes'\n    ", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_bgp.py#L5799", "class": "ShowIpBgpNeighborsRoutes", "module_name": "show_bgp"}}, "show ipv6 mld vrf {vrf} groups detail": {"ios": {"uid": "show_ipv6_mld_vrf_vrf_groups_detail", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'interface': {\n      Any  (str) *: {\n        Optional  (str) static_group: {\n          Any  (str) *: {\n            'source': <class 'str'>,\n            'group': <class 'str'>,\n            },\n          },\n        Optional  (str) join_group: {\n          Any  (str) *: {\n            'source': <class 'str'>,\n            'group': <class 'str'>,\n            },\n          },\n        'group': {\n          Any  (str) *: {\n            'up_time': <class 'str'>,\n            'filter_mode': <class 'str'>,\n            Optional  (str) source: {\n              Any  (str) *: {\n                'forward': <class 'bool'>,\n                Optional  (str) flags: <class 'str'>,\n                'up_time': <class 'str'>,\n                Optional  (str) expire: <class 'str'>,\n                },\n              },\n            'host_mode': <class 'str'>,\n            Optional  (str) expire: <class 'str'>,\n            'last_reporter': <class 'str'>,\n            },\n          },\n        },\n      },\n    },\n  },\n}", "doc": "Parser for:\n        show ipv6 mld groups detail\n        show ipv6 mld vrf <vrf> groups detail", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_mld.py#L24", "class": "ShowIpv6MldGroupsDetail", "module_name": "show_mld"}, "iosxe": {"uid": "show_ipv6_mld_vrf_vrf_groups_detail", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'interface': {\n      Any  (str) *: {\n        Optional  (str) static_group: {\n          Any  (str) *: {\n            'source': <class 'str'>,\n            'group': <class 'str'>,\n            },\n          },\n        Optional  (str) join_group: {\n          Any  (str) *: {\n            'source': <class 'str'>,\n            'group': <class 'str'>,\n            },\n          },\n        'group': {\n          Any  (str) *: {\n            'up_time': <class 'str'>,\n            'filter_mode': <class 'str'>,\n            Optional  (str) source: {\n              Any  (str) *: {\n                'forward': <class 'bool'>,\n                Optional  (str) flags: <class 'str'>,\n                'up_time': <class 'str'>,\n                Optional  (str) expire: <class 'str'>,\n                },\n              },\n            'host_mode': <class 'str'>,\n            Optional  (str) expire: <class 'str'>,\n            'last_reporter': <class 'str'>,\n            },\n          },\n        },\n      },\n    },\n  },\n}", "doc": "Parser for:\n        show ipv6 mld groups detail\n        show ipv6 mld vrf <vrf> groups detail", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_mld.py#L273", "class": "ShowIpv6MldGroupsDetail", "module_name": "show_mld"}}, "show ip bgp all neighbors {neighbor} received-routes": {"iosxe": {"uid": "show_ip_bgp_all_neighbors_neighbor_received-routes", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'neighbor': {\n      Any  (str) *: {\n        'address_family': {\n          Any  (str) *: {\n            Optional  (str) received_routes: {\n              Optional  (Any) Any  (str) *: {\n                Optional  (str) index: {\n                  Optional  (Any) Any  (str) *: {\n                    Optional  (str) next_hop: <class 'str'>,\n                    Optional  (str) weight: <class 'int'>,\n                    Optional  (str) status_codes: <class 'str'>,\n                    Optional  (str) path: <class 'str'>,\n                    Optional  (str) path_type: <class 'str'>,\n                    Optional  (str) origin_codes: <class 'str'>,\n                    Optional  (str) metric: <class 'int'>,\n                    Optional  (str) localprf: <class 'int'>,\n                    },\n                  },\n                },\n              },\n            Optional  (str) route_distinguisher: <class 'str'>,\n            Optional  (str) bgp_table_version: <class 'int'>,\n            Optional  (str) default_vrf: <class 'str'>,\n            Optional  (str) local_router_id: <class 'str'>,\n            },\n          },\n        },\n      },\n    },\n  },\n}", "doc": " Parser for:\n        * 'show ip bgp all neighbors {neighbor} received-routes'\n        * 'show ip bgp {address_family} all neighbors {neighbor} received-routes'\n    ", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_bgp.py#L5125", "class": "ShowIpBgpAllNeighborsReceivedRoutes", "module_name": "show_bgp"}}, "show ip static route vrf {vrf}": {"ios": {"uid": "show_ip_static_route_vrf_vrf", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    Optional  (str) address_family: {\n      Any  (str) *: {\n        Optional  (str) routes: {\n          Any  (str) *: {\n            Optional  (str) next_hop: {\n              Optional  (str) next_hop_list: {\n                Any  (str) *: {\n                  Optional  (str) preference: <class 'int'>,\n                  Optional  (str) next_hop: <class 'str'>,\n                  Optional  (str) index: <class 'int'>,\n                  Optional  (str) outgoing_interface: <class 'str'>,\n                  Optional  (str) active: <class 'bool'>,\n                  },\n                },\n              Optional  (str) outgoing_interface: {\n                Any  (str) *: {\n                  Optional  (str) preference: <class 'int'>,\n                  Optional  (str) active: <class 'bool'>,\n                  Optional  (str) outgoing_interface: <class 'str'>,\n                  },\n                },\n              },\n            Optional  (str) route: <class 'str'>,\n            },\n          },\n        },\n      },\n    },\n  },\n}", "doc": null, "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_static_routing.py#L9", "class": "ShowIpStaticRoute", "module_name": "show_static_routing"}, "iosxe": {"uid": "show_ip_static_route_vrf_vrf", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    Optional  (str) address_family: {\n      Any  (str) *: {\n        Optional  (str) routes: {\n          Any  (str) *: {\n            Optional  (str) next_hop: {\n              Optional  (str) next_hop_list: {\n                Any  (str) *: {\n                  Optional  (str) preference: <class 'int'>,\n                  Optional  (str) next_hop: <class 'str'>,\n                  Optional  (str) index: <class 'int'>,\n                  Optional  (str) outgoing_interface: <class 'str'>,\n                  Optional  (str) active: <class 'bool'>,\n                  },\n                },\n              Optional  (str) outgoing_interface: {\n                Any  (str) *: {\n                  Optional  (str) preference: <class 'int'>,\n                  Optional  (str) active: <class 'bool'>,\n                  Optional  (str) outgoing_interface: <class 'str'>,\n                  },\n                },\n              },\n            Optional  (str) route: <class 'str'>,\n            },\n          },\n        },\n      },\n    },\n  },\n}", "doc": "Parser for :\n       show ip static route\n       show ip static route vrf <vrf>\n    ", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_static_routing.py#L55", "class": "ShowIpStaticRoute", "module_name": "show_static_routing"}}, "show lacp internal": {"iosxe": {"uid": "show_lacp_internal", "schema": "{\n'interfaces': {\n  Any  (str) *: {\n    'protocol': <class 'str'>,\n    'name': <class 'str'>,\n    'members': {\n      Any  (str) *: {\n        'state': <class 'str'>,\n        'bundled': <class 'bool'>,\n        'port_num': <class 'int'>,\n        Optional  (str) activity: <class 'str'>,\n        'oper_key': <class 'int'>,\n        'lacp_port_priority': <class 'int'>,\n        'admin_key': <class 'int'>,\n        'interface': <class 'str'>,\n        'port_state': <class 'int'>,\n        'flags': <class 'str'>,\n        },\n      },\n    },\n  },\n}", "doc": "Parser for :\n      show lacp internal", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_lag.py#L209", "class": "ShowLacpInternal", "module_name": "show_lag"}}, "show ip ospf database router detail vrf {vrf}": {"nxos": {"uid": "show_ip_ospf_database_router_detail_vrf_vrf", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'address_family': {\n      Any  (str) *: {\n        'instance': {\n          Any  (str) *: {\n            Optional  (str) areas: {\n              Any  (str) *: {\n                'database': {\n                  'lsa_types': {\n                    Any  (str) *: {\n                      'lsa_type': <class 'int'>,\n                      'lsas': {\n                        Any  (str) *: {\n                          'ospfv2': {\n                            'header': {\n                              'age': <class 'int'>,\n                              'option_desc': <class 'str'>,\n                              'adv_router': <class 'str'>,\n                              Optional  (str) maxage: <class 'bool'>,\n                              'seq_num': <class 'str'>,\n                              'length': <class 'int'>,\n                              'checksum': <class 'str'>,\n                              'type': <class 'int'>,\n                              'lsa_id': <class 'str'>,\n                              'option': <class 'str'>,\n                              },\n                            'body': {\n                              'router': {\n                                'links': {\n                                  Any  (str) *: {\n                                    'topologies': {\n                                      Any  (str) *: {\n                                        'tos': <class 'int'>,\n                                        'metric': <class 'int'>,\n                                        'mt_id': <class 'int'>,\n                                        },\n                                      },\n                                    'link_id': <class 'str'>,\n                                    'num_tos_metrics': <class 'int'>,\n                                    'type': <class 'str'>,\n                                    'link_data': <class 'str'>,\n                                    },\n                                  },\n                                'num_of_links': <class 'int'>,\n                                Optional  (str) flags: <class 'str'>,\n                                },\n                              },\n                            },\n                          'lsa_id': <class 'str'>,\n                          'adv_router': <class 'str'>,\n                          },\n                        },\n                      },\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "doc": "Parser for:\n        show ip ospf database router detail\n        show ip ospf database router detail vrf <vrf>", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_ospf.py#L3495", "class": "ShowIpOspfDatabaseRouterDetail", "module_name": "show_ospf"}}, "show module": {"nxos": {"uid": "show_module", "schema": "{\nOptional  (str) xbar: {\n  Optional  (Any) Any  (str) *: {\n    Optional  (str) software: <class 'str'>,\n    Optional  (str) hardware: <class 'str'>,\n    Optional  (str) ports: <class 'str'>,\n    Optional  (str) status: <class 'str'>,\n    Optional  (str) serial_number: <class 'str'>,\n    Optional  (str) module_type: <class 'str'>,\n    Optional  (str) mac_address: <class 'str'>,\n    Optional  (str) model: <class 'str'>,\n    },\n  },\n'slot': {\n  Optional  (str) lc: {\n    Optional  (Any) Any  (str) *: {\n      Optional  (Any) Any  (str) *: {\n        Optional  (str) hardware: <class 'str'>,\n        Optional  (str) ports: <class 'str'>,\n        Optional  (str) mac_address: <class 'str'>,\n        Optional  (str) serial_number: <class 'str'>,\n        Optional  (str) status: <class 'str'>,\n        Optional  (str) slot/world_wide_name: <class 'str'>,\n        Optional  (str) model: <class 'str'>,\n        Optional  (str) software: <class 'str'>,\n        Optional  (str) online_diag_status: <class 'str'>,\n        },\n      },\n    },\n  'rp': {\n    Any  (str) *: {\n      Any  (str) *: {\n        Optional  (str) serial_number: <class 'str'>,\n        'ports': <class 'str'>,\n        Optional  (str) model: <class 'str'>,\n        Optional  (str) online_diag_status: <class 'str'>,\n        Optional  (str) software: <class 'str'>,\n        Optional  (str) slot/world_wide_name: <class 'str'>,\n        Optional  (str) hardware: <class 'str'>,\n        'status': <class 'str'>,\n        Optional  (str) mac_address: <class 'str'>,\n        },\n      },\n    },\n  },\n}", "doc": "Parser for show module", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_platform.py#L875", "class": "ShowModule", "module_name": "show_platform"}, "iosxe": {"uid": "show_module", "schema": "{\n'switch': {\n  Any  (str) *: {\n    'mac_address': <class 'str'>,\n    'hw_ver': <class 'str'>,\n    'sw_ver': <class 'str'>,\n    'model': <class 'str'>,\n    'port': <class 'str'>,\n    'serial_number': <class 'str'>,\n    },\n  },\n}", "doc": "Parser for show module", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_platform.py#L1859", "class": "ShowModule", "module_name": "show_platform"}}, "show platform hardware qfp {status} interface if-name {interface} statistics": {"ios": {"uid": "show_platform_hardware_qfp_status_interface_if-name_interface_statistics", "schema": "{\n'qfp': {\n  'active': {\n    'interface': {\n      Any  (str) *: {\n        'egress_drop_stats': {\n          Optional  (Any) Any  (str) *: {\n            'octets': <class 'int'>,\n            'packets': <class 'int'>,\n            },\n          },\n        'transmit_stats': {\n          Any  (str) *: {\n            'octets': <class 'int'>,\n            'packets': <class 'int'>,\n            },\n          },\n        Optional  (str) platform_handle: <class 'int'>,\n        'ingress_drop_stats': {\n          Optional  (Any) Any  (str) *: {\n            'octets': <class 'int'>,\n            'packets': <class 'int'>,\n            },\n          },\n        'receive_stats': {\n          Any  (str) *: {\n            'octets': <class 'int'>,\n            'packets': <class 'int'>,\n            },\n          },\n        },\n      },\n    },\n  },\n}", "doc": "Parser for show platform hardware qfp active interface if-name <interface> statistics\n                  show platform hardware qfp standby interface if-name <interface> statistics", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_platform.py#L389", "class": "ShowPlatformHardwareQfpInterfaceIfnameStatistics", "module_name": "show_platform"}, "iosxe": {"uid": "show_platform_hardware_qfp_status_interface_if-name_interface_statistics", "schema": "{\n'qfp': {\n  'active': {\n    'interface': {\n      Any  (str) *: {\n        'egress_drop_stats': {\n          Optional  (Any) Any  (str) *: {\n            'octets': <class 'int'>,\n            'packets': <class 'int'>,\n            },\n          },\n        'transmit_stats': {\n          Any  (str) *: {\n            'octets': <class 'int'>,\n            'packets': <class 'int'>,\n            },\n          },\n        Optional  (str) platform_handle: <class 'int'>,\n        'ingress_drop_stats': {\n          Optional  (Any) Any  (str) *: {\n            'octets': <class 'int'>,\n            'packets': <class 'int'>,\n            },\n          },\n        'receive_stats': {\n          Any  (str) *: {\n            'octets': <class 'int'>,\n            'packets': <class 'int'>,\n            },\n          },\n        },\n      },\n    },\n  },\n}", "doc": "Parser for show platform hardware qfp active interface if-name <interface> statistics\n                  show platform hardware qfp standby interface if-name <interface> statistics", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_platform.py#L4158", "class": "ShowPlatformHardwareQfpInterfaceIfnameStatistics", "module_name": "show_platform"}}, "show ip bgp all neighbors {neighbor} advertised-routes": {"iosxe": {"uid": "show_ip_bgp_all_neighbors_neighbor_advertised-routes", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'neighbor': {\n      Any  (str) *: {\n        'address_family': {\n          Any  (str) *: {\n            Optional  (str) route_distinguisher: <class 'str'>,\n            Optional  (str) bgp_table_version: <class 'int'>,\n            Optional  (str) default_vrf: <class 'str'>,\n            Optional  (str) local_router_id: <class 'str'>,\n            Optional  (str) advertised: {\n              Optional  (Any) Any  (str) *: {\n                Optional  (str) index: {\n                  Optional  (Any) Any  (str) *: {\n                    Optional  (str) origin_codes: <class 'str'>,\n                    Optional  (str) metric: <class 'int'>,\n                    Optional  (str) localprf: <class 'int'>,\n                    Optional  (str) next_hop: <class 'str'>,\n                    Optional  (str) weight: <class 'int'>,\n                    Optional  (str) status_codes: <class 'str'>,\n                    Optional  (str) path: <class 'str'>,\n                    Optional  (str) path_type: <class 'str'>,\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "doc": " Parser for:\n        * 'show ip bgp all neighbors {neighbor} advertised-routes'\n        * 'show ip bgp {address_family} all neighbors {neighbor} advertised-routes'\n    ", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_bgp.py#L4520", "class": "ShowIpBgpAllNeighborsAdvertisedRoutes", "module_name": "show_bgp"}}, "show running-config | inc peer-session": {"nxos": {"uid": "show_running-config___inc_peer-session", "schema": "{\n'peer_session': {\n  Any  (str) *: {\n    Optional  (str) shutdown: <class 'bool'>,\n    Optional  (str) holdtime: <class 'int'>,\n    Optional  (str) local_as: <class 'bool'>,\n    Optional  (str) inherited_vrf_default: <class 'str'>,\n    Optional  (str) update_source: <class 'str'>,\n    Optional  (str) remote_as: <class 'bool'>,\n    Optional  (str) description: <class 'str'>,\n    Optional  (str) password: <class 'bool'>,\n    Optional  (str) transport_connection_mode: <class 'str'>,\n    Optional  (str) bfd: <class 'bool'>,\n    Optional  (str) ebgp_multihop_enable: <class 'bool'>,\n    Optional  (str) ebgp_multihop_limit: <class 'int'>,\n    Optional  (str) disable_connectivity_check: <class 'bool'>,\n    Optional  (str) keepalive: <class 'int'>,\n    Optional  (str) suppress_capabilities: <class 'bool'>,\n    },\n  },\n}", "doc": "Parser for:\n        show bgp peer-session <peer_session>\n        Executing 'show running-config bgp | inc peer-session' to collect\n        configured peer-session names.\n    ", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_bgp.py#L1101", "class": "ShowBgpPeerSession", "module_name": "show_bgp"}}, "show platform hardware slot {slot} plim statistics internal": {"ios": {"uid": "show_platform_hardware_slot_slot_plim_statistics_internal", "schema": "{\nOptional  (str) slot: {\n  Any  (str) *: {\n    'subslot': {\n      Any  (str) *: {\n        'transmitted': {\n          Optional  (str) spi4_interrupt_counters: {\n            'frame_error': <class 'int'>,\n            'fifo_over_flow': <class 'int'>,\n            'dip2_error': <class 'int'>,\n            'out_of_frame': <class 'int'>,\n            },\n          Optional  (str) ipc_pkts: <class 'int'>,\n          Optional  (str) bytes: <class 'int'>,\n          Optional  (str) ipc_bytes: <class 'int'>,\n          Optional  (str) ipc_err: <class 'int'>,\n          Optional  (str) pkts: <class 'int'>,\n          },\n        'received': {\n          Optional  (str) bytes: <class 'int'>,\n          Optional  (str) ipc_bytes: <class 'int'>,\n          Optional  (str) ipc_err: <class 'int'>,\n          Optional  (str) pkts: <class 'int'>,\n          Optional  (str) spi4_interrupt_counters: {\n            'sequence_error': <class 'int'>,\n            'burst_error': <class 'int'>,\n            'dip4_error': <class 'int'>,\n            'packet_gap_error': <class 'int'>,\n            'control_word_error': <class 'int'>,\n            'disabled': <class 'int'>,\n            'loss_of_sync': <class 'int'>,\n            'eop_abort': <class 'int'>,\n            'out_of_frame': <class 'int'>,\n            },\n          Optional  (str) ipc_pkts: <class 'int'>,\n          },\n        'name': <class 'str'>,\n        'status': <class 'str'>,\n        },\n      },\n    },\n  },\nOptional  (str) port: {\n  Any  (str) *: {\n    'transmitted': {\n      'low_priority': {\n        'dropped_bytes': <class 'int'>,\n        'bytes': <class 'int'>,\n        'pkts': <class 'int'>,\n        'dropped_pkts': <class 'int'>,\n        },\n      'high_priority': {\n        'dropped_bytes': <class 'int'>,\n        'bytes': <class 'int'>,\n        'pkts': <class 'int'>,\n        'dropped_pkts': <class 'int'>,\n        },\n      },\n    'received': {\n      'low_priority': {\n        'dropped_pkts': <class 'int'>,\n        'errored_bytes': <class 'int'>,\n        'pkts': <class 'int'>,\n        'errored_pkts': <class 'int'>,\n        'bytes': <class 'int'>,\n        'dropped_bytes': <class 'int'>,\n        },\n      'high_priority': {\n        'dropped_pkts': <class 'int'>,\n        'errored_bytes': <class 'int'>,\n        'pkts': <class 'int'>,\n        'errored_pkts': <class 'int'>,\n        'bytes': <class 'int'>,\n        'dropped_bytes': <class 'int'>,\n        },\n      },\n    },\n  },\n}", "doc": "Parser for show platform hardware port <x/x/x> plim statistics\n                  show platform hardware slot <x> plim statistics\n                  show platform hardware slot <x> plim statistics internal\n                  show platform hardware subslot <x/x> plim statistics", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_platform.py#L351", "class": "ShowPlatformHardwarePlim", "module_name": "show_platform"}, "iosxe": {"uid": "show_platform_hardware_slot_slot_plim_statistics_internal", "schema": "{\nOptional  (str) slot: {\n  Any  (str) *: {\n    'subslot': {\n      Any  (str) *: {\n        'transmitted': {\n          Optional  (str) spi4_interrupt_counters: {\n            'frame_error': <class 'int'>,\n            'fifo_over_flow': <class 'int'>,\n            'dip2_error': <class 'int'>,\n            'out_of_frame': <class 'int'>,\n            },\n          Optional  (str) ipc_pkts: <class 'int'>,\n          Optional  (str) bytes: <class 'int'>,\n          Optional  (str) ipc_bytes: <class 'int'>,\n          Optional  (str) ipc_err: <class 'int'>,\n          Optional  (str) pkts: <class 'int'>,\n          },\n        'received': {\n          Optional  (str) bytes: <class 'int'>,\n          Optional  (str) ipc_bytes: <class 'int'>,\n          Optional  (str) ipc_err: <class 'int'>,\n          Optional  (str) pkts: <class 'int'>,\n          Optional  (str) spi4_interrupt_counters: {\n            'sequence_error': <class 'int'>,\n            'burst_error': <class 'int'>,\n            'dip4_error': <class 'int'>,\n            'packet_gap_error': <class 'int'>,\n            'control_word_error': <class 'int'>,\n            'disabled': <class 'int'>,\n            'loss_of_sync': <class 'int'>,\n            'eop_abort': <class 'int'>,\n            'out_of_frame': <class 'int'>,\n            },\n          Optional  (str) ipc_pkts: <class 'int'>,\n          },\n        'name': <class 'str'>,\n        'status': <class 'str'>,\n        },\n      },\n    },\n  },\nOptional  (str) port: {\n  Any  (str) *: {\n    'transmitted': {\n      'low_priority': {\n        'dropped_bytes': <class 'int'>,\n        'bytes': <class 'int'>,\n        'pkts': <class 'int'>,\n        'dropped_pkts': <class 'int'>,\n        },\n      'high_priority': {\n        'dropped_bytes': <class 'int'>,\n        'bytes': <class 'int'>,\n        'pkts': <class 'int'>,\n        'dropped_pkts': <class 'int'>,\n        },\n      },\n    'received': {\n      'low_priority': {\n        'dropped_pkts': <class 'int'>,\n        'errored_bytes': <class 'int'>,\n        'pkts': <class 'int'>,\n        'errored_pkts': <class 'int'>,\n        'bytes': <class 'int'>,\n        'dropped_bytes': <class 'int'>,\n        },\n      'high_priority': {\n        'dropped_pkts': <class 'int'>,\n        'errored_bytes': <class 'int'>,\n        'pkts': <class 'int'>,\n        'errored_pkts': <class 'int'>,\n        'bytes': <class 'int'>,\n        'dropped_bytes': <class 'int'>,\n        },\n      },\n    },\n  },\n}", "doc": "Parser for show platform hardware port <x/x/x> plim statistics\n                  show platform hardware slot <x> plim statistics\n                  show platform hardware slot <x> plim statistics internal\n                  show platform hardware subslot <x/x> plim statistics", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_platform.py#L2892", "class": "ShowPlatformHardwarePlim", "module_name": "show_platform"}}, "show ipv6 pim interface vrf {vrf}": {"nxos": {"uid": "show_ipv6_pim_interface_vrf_vrf", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'interfaces': {\n      Any  (str) *: {\n        'address_family': {\n          Any  (str) *: {\n            Optional  (str) dr_address: <class 'str'>,\n            Optional  (str) sm: {\n              Optional  (str) passive: <class 'bool'>,\n              },\n            Optional  (str) dr_priority: <class 'int'>,\n            Optional  (str) vpc_svi: <class 'bool'>,\n            Optional  (str) configured_dr_priority: <class 'int'>,\n            Optional  (str) auto_enabled: <class 'bool'>,\n            Optional  (str) neighbor_count: <class 'int'>,\n            Optional  (str) hello_interval: <class 'int'>,\n            Optional  (str) hello_expiration: <class 'str'>,\n            Optional  (str) neighbor_holdtime: <class 'int'>,\n            Optional  (str) dr_delay: <class 'int'>,\n            Optional  (str) bsr_border: <class 'bool'>,\n            Optional  (str) genid: <class 'str'>,\n            Optional  (str) hello_md5_ah_authentication: <class 'str'>,\n            Optional  (str) neighbor_filter: <class 'str'>,\n            Optional  (str) jp_inbound_policy: <class 'str'>,\n            Optional  (str) jp_outbound_policy: <class 'str'>,\n            Optional  (str) jp_interval: <class 'int'>,\n            Optional  (str) oper_status: <class 'str'>,\n            Optional  (str) statistics: {\n              Optional  (str) general: {\n                Optional  (str) graft_acks: <class 'str'>,\n                Optional  (str) hellos: <class 'str'>,\n                Optional  (str) df_offers: <class 'str'>,\n                Optional  (str) jps: <class 'str'>,\n                Optional  (str) df_winners: <class 'str'>,\n                Optional  (str) asserts: <class 'str'>,\n                Optional  (str) df_backoffs: <class 'str'>,\n                Optional  (str) grafts: <class 'str'>,\n                Optional  (str) df_passes: <class 'str'>,\n                },\n              Optional  (str) errors: {\n                Optional  (str) joins_received_with_wrong_rp: <class 'int'>,\n                Optional  (str) jps_filtered_by_inbound_policy: <class 'int'>,\n                Optional  (str) authentication_failed: <class 'int'>,\n                Optional  (str) packets_received_on_passiveinterface: <class 'int'>,\n                Optional  (str) joins_received_with_bidir_groups: <class 'int'>,\n                Optional  (str) packet_length_errors: <class 'int'>,\n                Optional  (str) bad_version_packets: <class 'int'>,\n                Optional  (str) joins_received_with_no_rp: <class 'int'>,\n                Optional  (str) jps_filtered_by_outbound_policy: <class 'int'>,\n                Optional  (str) packets_from_self: <class 'int'>,\n                Optional  (str) packets_from_non_neighbors: <class 'int'>,\n                Optional  (str) checksum: <class 'int'>,\n                Optional  (str) jps_received_on_rpf_interface: <class 'int'>,\n                Optional  (str) invalid_packet_types: <class 'int'>,\n                Optional  (str) invalid_df_subtypes: <class 'int'>,\n                Optional  (str) joins_received_with_ssm_groups: <class 'int'>,\n                },\n              Optional  (str) last_reset: <class 'str'>,\n              },\n            Optional  (str) jp_next_sending: <class 'int'>,\n            Optional  (str) link_status: <class 'str'>,\n            Optional  (str) admin_status: <class 'str'>,\n            Optional  (str) bfd: {\n              Optional  (str) enable: <class 'bool'>,\n              },\n            Optional  (str) address: <class 'list'>,\n            },\n          },\n        },\n      },\n    },\n  },\n}", "doc": "Parser for:\n        show ipv6 pim interface vrf <vrf>\n        show ipv6 pim interface\n        show ipv6 pim interface <interface>\n        show ipv6 pim interface <interface> vrf <vrf>", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_pim.py#L95", "class": "ShowIpv6PimInterface", "module_name": "show_pim"}}, "show ip igmp groups vrf {vrf}": {"nxos": {"uid": "show_ip_igmp_groups_vrf_vrf", "schema": "{\n'vrfs': {\n  Any  (str) *: {\n    'total_entries': <class 'int'>,\n    Optional  (str) interface: {\n      Any  (str) *: {\n        'group': {\n          Any  (str) *: {\n            Optional  (str) up_time: <class 'str'>,\n            Optional  (str) source: {\n              Any  (str) *: {\n                'type': <class 'str'>,\n                'expire': <class 'str'>,\n                'last_reporter': <class 'str'>,\n                'up_time': <class 'str'>,\n                },\n              },\n            Optional  (str) last_reporter: <class 'str'>,\n            Optional  (str) expire: <class 'str'>,\n            Optional  (str) type: <class 'str'>,\n            },\n          },\n        },\n      },\n    },\n  },\n}", "doc": "Parser for:\n        show ip igmp groups\n        show ip igmp groups vrf all\n        show ip igmp groups vrf <vrf>", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_igmp.py#L876", "class": "ShowIpIgmpGroups", "module_name": "show_igmp"}}, "show ip bgp all dampening parameters": {"ios": {"uid": "show_ip_bgp_all_dampening_parameters", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    Optional  (str) address_family: {\n      Any  (str) *: {\n        Optional  (str) dampening_half_life_time: <class 'int'>,\n        Optional  (str) dampening_reuse_time: <class 'int'>,\n        Optional  (str) dampening_max_suppress_penalty: <class 'int'>,\n        Optional  (str) dampening: <class 'bool'>,\n        Optional  (str) dampening_suppress_time: <class 'int'>,\n        Optional  (str) dampening_decay_time: <class 'int'>,\n        Optional  (str) dampening_max_suppress_time: <class 'int'>,\n        },\n      },\n    },\n  },\n}", "doc": "Parser for show ip bgp all dampening parameters", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_bgp.py#L107", "class": "ShowIpBgpAllDampeningParameters", "module_name": "show_bgp"}, "iosxe": {"uid": "show_ip_bgp_all_dampening_parameters", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    Optional  (str) address_family: {\n      Any  (str) *: {\n        Optional  (str) dampening_half_life_time: <class 'int'>,\n        Optional  (str) dampening_reuse_time: <class 'int'>,\n        Optional  (str) dampening_max_suppress_penalty: <class 'int'>,\n        Optional  (str) dampening: <class 'bool'>,\n        Optional  (str) dampening_suppress_time: <class 'int'>,\n        Optional  (str) dampening_decay_time: <class 'int'>,\n        Optional  (str) dampening_max_suppress_time: <class 'int'>,\n        },\n      },\n    },\n  },\n}", "doc": " Parser for \"show ip bgp all dampening parameters\" ", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_bgp.py#L6711", "class": "ShowIpBgpAllDampeningParameters", "module_name": "show_bgp"}}, "show bgp {address_family} all neighbors {neighbor} routes": {"ios": {"uid": "show_bgp_address_family_all_neighbors_neighbor_routes", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'neighbor': {\n      Any  (str) *: {\n        'address_family': {\n          Any  (str) *: {\n            Optional  (str) local_router_id: <class 'str'>,\n            Optional  (str) routes: {\n              Optional  (Any) Any  (str) *: {\n                Optional  (str) index: {\n                  Optional  (Any) Any  (str) *: {\n                    Optional  (str) path_type: <class 'str'>,\n                    Optional  (str) origin_codes: <class 'str'>,\n                    Optional  (str) metric: <class 'int'>,\n                    Optional  (str) localprf: <class 'int'>,\n                    Optional  (str) next_hop: <class 'str'>,\n                    Optional  (str) weight: <class 'int'>,\n                    Optional  (str) status_codes: <class 'str'>,\n                    Optional  (str) path: <class 'str'>,\n                    },\n                  },\n                },\n              },\n            Optional  (str) route_distinguisher: <class 'str'>,\n            Optional  (str) bgp_table_version: <class 'int'>,\n            Optional  (str) default_vrf: <class 'str'>,\n            },\n          },\n        },\n      },\n    },\n  },\n}", "doc": "\n    Parser for show bgp all neighbors <WORD> routes\n    executing 'show bgp all neighbors | i BGP neighbor' for finding vrf names\n    ", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_bgp.py#L94", "class": "ShowBgpAllNeighborsRoutes", "module_name": "show_bgp"}, "iosxe": {"uid": "show_bgp_address_family_all_neighbors_neighbor_routes", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'neighbor': {\n      Any  (str) *: {\n        'address_family': {\n          Any  (str) *: {\n            Optional  (str) local_router_id: <class 'str'>,\n            Optional  (str) routes: {\n              Optional  (Any) Any  (str) *: {\n                Optional  (str) index: {\n                  Optional  (Any) Any  (str) *: {\n                    Optional  (str) path_type: <class 'str'>,\n                    Optional  (str) origin_codes: <class 'str'>,\n                    Optional  (str) metric: <class 'int'>,\n                    Optional  (str) localprf: <class 'int'>,\n                    Optional  (str) next_hop: <class 'str'>,\n                    Optional  (str) weight: <class 'int'>,\n                    Optional  (str) status_codes: <class 'str'>,\n                    Optional  (str) path: <class 'str'>,\n                    },\n                  },\n                },\n              },\n            Optional  (str) route_distinguisher: <class 'str'>,\n            Optional  (str) bgp_table_version: <class 'int'>,\n            Optional  (str) default_vrf: <class 'str'>,\n            },\n          },\n        },\n      },\n    },\n  },\n}", "doc": " Parser for:\n        * 'show bgp all neighbors {neighbor} routes'\n        * 'show bgp {address_family} all neighbors {neighbor} routes'\n    ", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_bgp.py#L5694", "class": "ShowBgpAllNeighborsRoutes", "module_name": "show_bgp"}}, "show vdc membership status": {"nxos": {"uid": "show_vdc_membership_status", "schema": "{\n'virtual_device': {\n  Any  (str) *: {\n    'membership': {\n      Any  (str) *: {\n        Any  (str) *: {\n          'vd_ms_status': <class 'str'>,\n          'vd_ms_type': <class 'str'>,\n          },\n        },\n      },\n    },\n  },\n}", "doc": "Parser for show vdc membership status", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_platform.py#L1305", "class": "ShowVdcMembershipStatus", "module_name": "show_platform"}}, "show ip bgp {address_family} all neighbors {neighbor} received-routes": {"iosxe": {"uid": "show_ip_bgp_address_family_all_neighbors_neighbor_received-routes", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'neighbor': {\n      Any  (str) *: {\n        'address_family': {\n          Any  (str) *: {\n            Optional  (str) received_routes: {\n              Optional  (Any) Any  (str) *: {\n                Optional  (str) index: {\n                  Optional  (Any) Any  (str) *: {\n                    Optional  (str) next_hop: <class 'str'>,\n                    Optional  (str) weight: <class 'int'>,\n                    Optional  (str) status_codes: <class 'str'>,\n                    Optional  (str) path: <class 'str'>,\n                    Optional  (str) path_type: <class 'str'>,\n                    Optional  (str) origin_codes: <class 'str'>,\n                    Optional  (str) metric: <class 'int'>,\n                    Optional  (str) localprf: <class 'int'>,\n                    },\n                  },\n                },\n              },\n            Optional  (str) route_distinguisher: <class 'str'>,\n            Optional  (str) bgp_table_version: <class 'int'>,\n            Optional  (str) default_vrf: <class 'str'>,\n            Optional  (str) local_router_id: <class 'str'>,\n            },\n          },\n        },\n      },\n    },\n  },\n}", "doc": " Parser for:\n        * 'show ip bgp all neighbors {neighbor} received-routes'\n        * 'show ip bgp {address_family} all neighbors {neighbor} received-routes'\n    ", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_bgp.py#L5125", "class": "ShowIpBgpAllNeighborsReceivedRoutes", "module_name": "show_bgp"}}, "show ip msdp peer": {"nxos": {"uid": "show_ip_msdp_peer", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'peer': {\n      Any  (str) *: {\n        'elapsed_time': <class 'str'>,\n        Optional  (str) mesh_group: <class 'str'>,\n        'timer': {\n          'keepalive_interval': <class 'int'>,\n          'connect_retry_interval': <class 'int'>,\n          'holdtime_interval': <class 'int'>,\n          },\n        'peer_as': <class 'str'>,\n        'enable': <class 'bool'>,\n        'connect_source': <class 'str'>,\n        Optional  (str) sa_filter: {\n          Optional  (str) out: <class 'str'>,\n          Optional  (str) in: <class 'str'>,\n          },\n        Optional  (str) authentication: {\n          'password': {\n            Optional  (str) key: <class 'str'>,\n            'set': <class 'bool'>,\n            },\n          },\n        'statistics': {\n          'sent': {\n            Optional  (str) data_message: <class 'int'>,\n            Optional  (str) sa_response: <class 'int'>,\n            Optional  (str) sa_request: <class 'int'>,\n            Optional  (str) keepalive: <class 'int'>,\n            Optional  (str) total: <class 'int'>,\n            Optional  (str) notification: <class 'int'>,\n            Optional  (str) ctrl_message: <class 'int'>,\n            Optional  (str) sa_message: <class 'int'>,\n            },\n          Optional  (str) connection_attempts: <class 'int'>,\n          'last_message_received': <class 'str'>,\n          'port': {\n            'local': <class 'int'>,\n            'remote': <class 'int'>,\n            },\n          Optional  (str) cache_lifetime: <class 'str'>,\n          'discontinuity_time': <class 'str'>,\n          Optional  (str) established_transitions: <class 'int'>,\n          'received': {\n            Optional  (str) ctrl_message: <class 'int'>,\n            Optional  (str) sa_message: <class 'int'>,\n            Optional  (str) data_message: <class 'int'>,\n            Optional  (str) sa_response: <class 'int'>,\n            Optional  (str) sa_request: <class 'int'>,\n            Optional  (str) keepalive: <class 'int'>,\n            Optional  (str) total: <class 'int'>,\n            Optional  (str) notification: <class 'int'>,\n            },\n          'error': {\n            'rpf_failure': <class 'str'>,\n            },\n          },\n        'session_state': <class 'str'>,\n        'sa_limit': <class 'str'>,\n        'connect_source_address': <class 'str'>,\n        Optional  (str) description: <class 'str'>,\n        Optional  (str) reset_reason: <class 'str'>,\n        },\n      },\n    },\n  },\n}", "doc": "Parser for :\n       show ip msdp peer vrf <vrf>", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_msdp.py#L102", "class": "ShowIpMsdpPeerVrf", "module_name": "show_msdp"}}, "show mpls ldp discovery vrf {vrf} {detail}": {"iosxe": {"uid": "show_mpls_ldp_discovery_vrf_vrf_detail", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'local_ldp_identifier': {\n      Any  (str) *: {\n        'discovery_sources': {\n          'interfaces': {\n            Any  (str) *: {\n              Optional  (str) recv: <class 'bool'>,\n              Any  (str) *: {\n                Any  (str) *: {\n                  Optional  (str) proposed_peer: <class 'int'>,\n                  Optional  (str) transport_ip_address: <class 'str'>,\n                  Optional  (str) reachable_via: <class 'str'>,\n                  Optional  (str) source_ip_address: <class 'str'>,\n                  Optional  (str) password: <class 'str'>,\n                  Optional  (str) holdtime_sec: <class 'int'>,\n                  Optional  (str) clients: <class 'str'>,\n                  Optional  (str) proposed_local: <class 'int'>,\n                  },\n                },\n              Optional  (str) hello_interval_ms: <class 'int'>,\n              'session': <class 'str'>,\n              Optional  (str) transport_ip_addr: <class 'str'>,\n              Optional  (str) xmit: <class 'bool'>,\n              Optional  (str) enabled: <class 'str'>,\n              },\n            },\n          },\n        Optional  (str) targeted_hellos: {\n          Any  (str) *: {\n            Any  (str) *: {\n              Optional  (str) xmit: <class 'bool'>,\n              Optional  (str) recv: <class 'bool'>,\n              'active': <class 'bool'>,\n              'session': <class 'str'>,\n              Optional  (str) ldp_id: <class 'str'>,\n              Optional  (str) tdp_id: <class 'str'>,\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "doc": "\n        Parser for show mpls ldp discovery\n                   show mpls ldp discovery all\n                   show mpls ldp discovery all detail\n                   show mpls ldp discovery detail\n                   show mpls ldp discovery vrf <vrf>\n                   show mpls ldp discovery vrf <vrf> detail\n       ", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_mpls.py#L1354", "class": "ShowMplsLdpDiscovery", "module_name": "show_mpls"}}, "show ip msdp peer vrf {vrf}": {"nxos": {"uid": "show_ip_msdp_peer_vrf_vrf", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'peer': {\n      Any  (str) *: {\n        'elapsed_time': <class 'str'>,\n        Optional  (str) mesh_group: <class 'str'>,\n        'timer': {\n          'keepalive_interval': <class 'int'>,\n          'connect_retry_interval': <class 'int'>,\n          'holdtime_interval': <class 'int'>,\n          },\n        'peer_as': <class 'str'>,\n        'enable': <class 'bool'>,\n        'connect_source': <class 'str'>,\n        Optional  (str) sa_filter: {\n          Optional  (str) out: <class 'str'>,\n          Optional  (str) in: <class 'str'>,\n          },\n        Optional  (str) authentication: {\n          'password': {\n            Optional  (str) key: <class 'str'>,\n            'set': <class 'bool'>,\n            },\n          },\n        'statistics': {\n          'sent': {\n            Optional  (str) data_message: <class 'int'>,\n            Optional  (str) sa_response: <class 'int'>,\n            Optional  (str) sa_request: <class 'int'>,\n            Optional  (str) keepalive: <class 'int'>,\n            Optional  (str) total: <class 'int'>,\n            Optional  (str) notification: <class 'int'>,\n            Optional  (str) ctrl_message: <class 'int'>,\n            Optional  (str) sa_message: <class 'int'>,\n            },\n          Optional  (str) connection_attempts: <class 'int'>,\n          'last_message_received': <class 'str'>,\n          'port': {\n            'local': <class 'int'>,\n            'remote': <class 'int'>,\n            },\n          Optional  (str) cache_lifetime: <class 'str'>,\n          'discontinuity_time': <class 'str'>,\n          Optional  (str) established_transitions: <class 'int'>,\n          'received': {\n            Optional  (str) ctrl_message: <class 'int'>,\n            Optional  (str) sa_message: <class 'int'>,\n            Optional  (str) data_message: <class 'int'>,\n            Optional  (str) sa_response: <class 'int'>,\n            Optional  (str) sa_request: <class 'int'>,\n            Optional  (str) keepalive: <class 'int'>,\n            Optional  (str) total: <class 'int'>,\n            Optional  (str) notification: <class 'int'>,\n            },\n          'error': {\n            'rpf_failure': <class 'str'>,\n            },\n          },\n        'session_state': <class 'str'>,\n        'sa_limit': <class 'str'>,\n        'connect_source_address': <class 'str'>,\n        Optional  (str) description: <class 'str'>,\n        Optional  (str) reset_reason: <class 'str'>,\n        },\n      },\n    },\n  },\n}", "doc": "Parser for :\n       show ip msdp peer vrf <vrf>", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_msdp.py#L102", "class": "ShowIpMsdpPeerVrf", "module_name": "show_msdp"}}, "show bgp instance all {vrf_type} all {af_type}": {"iosxr": {"uid": "show_bgp_instance_all_vrf_type_all_af_type", "schema": "{\n'instance': {\n  Any  (str) *: {\n    Optional  (str) vrf: {\n      Any  (str) *: {\n        Optional  (str) address_family: {\n          Any  (str) *: {\n            Optional  (str) router_identifier: <class 'str'>,\n            Optional  (str) table_state: <class 'str'>,\n            Optional  (str) table_id: <class 'str'>,\n            Optional  (str) nsr_initial_initsync_version: <class 'str'>,\n            Optional  (str) route_distinguisher: <class 'str'>,\n            Optional  (str) vrf_id: <class 'str'>,\n            Optional  (str) processed_paths: <class 'int'>,\n            Optional  (str) bgp_table_version: <class 'int'>,\n            Optional  (str) instance_number: <class 'str'>,\n            Optional  (str) local_as: <class 'int'>,\n            Optional  (str) nsr_issu_sync_group_versions: <class 'str'>,\n            Optional  (str) vrf_state: <class 'str'>,\n            Optional  (str) default_vrf: <class 'str'>,\n            Optional  (str) bgp_vrf: <class 'str'>,\n            Optional  (str) prefix: {\n              Any  (str) *: {\n                Optional  (str) index: {\n                  Any  (str) *: {\n                    Optional  (str) locprf: <class 'str'>,\n                    Optional  (str) weight: <class 'str'>,\n                    Optional  (str) path: <class 'str'>,\n                    Optional  (str) status_codes: <class 'str'>,\n                    Optional  (str) origin_codes: <class 'str'>,\n                    'next_hop': <class 'str'>,\n                    Optional  (str) metric: <class 'str'>,\n                    },\n                  },\n                },\n              },\n            Optional  (str) processed_prefix: <class 'int'>,\n            Optional  (str) generic_scan_interval: <class 'str'>,\n            Optional  (str) scan_interval: <class 'int'>,\n            Optional  (str) non_stop_routing: <class 'bool'>,\n            Optional  (str) rd_version: <class 'int'>,\n            Optional  (str) nsr_initial_init_ver_status: <class 'str'>,\n            },\n          },\n        },\n      },\n    },\n  },\n}", "doc": "Parser for:\n        show bgp instance all all all\n        show bgp instance all vrf all\n        show bgp instance all vrf all ipv4 unicast\n        show bgp instance all vrf all ipv6 unicast\n        For checking any output with the parser ,below mandatory keys have to be in cli command.\n\n        - vrf_type\n\n    ", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_bgp.py#L4360", "class": "ShowBgpInstanceAllAll", "module_name": "show_bgp"}}, "tokens": ["ios", "iosxe", "asr1k", "c3850", "iosxr", "junos", "nxos"], "show {af} prefix-list": {"nxos": {"uid": "show_af_prefix-list", "schema": "{\n'prefix_set_name': {\n  Any  (str) *: {\n    'protocol': <class 'str'>,\n    'entries': <class 'int'>,\n    'prefix_set_name': <class 'str'>,\n    'prefixes': {\n      Any  (str) *: {\n        'action': <class 'str'>,\n        'masklength_range': <class 'str'>,\n        'prefix': <class 'str'>,\n        'sequence': <class 'int'>,\n        },\n      },\n    },\n  },\n}", "doc": "Parser for show ipv6 prefix-list detail", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_prefix_list.py#L152", "class": "ShowIpv6PrefixList", "module_name": "show_prefix_list"}}, "show processes cpu platform": {"ios": {"uid": "show_processes_cpu_platform", "schema": "{\n'pid': {\n  Any  (str) *: {\n    'ppid': <class 'int'>,\n    'size': <class 'int'>,\n    'name': <class 'str'>,\n    'one_min': <class 'str'>,\n    'status': <class 'str'>,\n    'five_min': <class 'str'>,\n    'five_sec': <class 'str'>,\n    },\n  },\n'cpu_utilization': {\n  'cpu_util_one_min': <class 'str'>,\n  'cpu_util_five_secs': <class 'str'>,\n  'cpu_util_five_min': <class 'str'>,\n  'core': {\n    Any  (str) *: {\n      'core_cpu_util_five_secs': <class 'str'>,\n      'core_cpu_util_five_min': <class 'str'>,\n      'core_cpu_util_one_min': <class 'str'>,\n      },\n    },\n  },\n}", "doc": "Parser for show processes cpu platform", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_platform.py#L331", "class": "ShowProcessesCpuPlatform", "module_name": "show_platform"}, "iosxe": {"uid": "show_processes_cpu_platform", "schema": "{\n'pid': {\n  Any  (str) *: {\n    'ppid': <class 'int'>,\n    'size': <class 'int'>,\n    'name': <class 'str'>,\n    'one_min': <class 'str'>,\n    'status': <class 'str'>,\n    'five_min': <class 'str'>,\n    'five_sec': <class 'str'>,\n    },\n  },\n'cpu_utilization': {\n  'cpu_util_one_min': <class 'str'>,\n  'cpu_util_five_secs': <class 'str'>,\n  'cpu_util_five_min': <class 'str'>,\n  'core': {\n    Any  (str) *: {\n      'core_cpu_util_five_secs': <class 'str'>,\n      'core_cpu_util_five_min': <class 'str'>,\n      'core_cpu_util_one_min': <class 'str'>,\n      },\n    },\n  },\n}", "doc": "Parser for show processes cpu platform", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_platform.py#L2201", "class": "ShowProcessesCpuPlatform", "module_name": "show_platform"}}, "show ip bgp": {"iosxe": {"uid": "show_ip_bgp", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'address_family': {\n      Any  (str) *: {\n        Optional  (str) pfx_limit: <class 'int'>,\n        Optional  (str) route_distinguisher: <class 'str'>,\n        Optional  (str) default_vrf: <class 'str'>,\n        Optional  (str) bgp_table_version: <class 'int'>,\n        Optional  (str) af_private_import_to_address_family: <class 'str'>,\n        Optional  (str) route_identifier: <class 'str'>,\n        Optional  (str) pfx_count: <class 'int'>,\n        Optional  (str) routes: {\n          Optional  (Any) Any  (str) *: {\n            Optional  (str) index: {\n              Optional  (Any) Any  (str) *: {\n                Optional  (str) weight: <class 'int'>,\n                Optional  (str) next_hop: <class 'str'>,\n                Optional  (str) path: <class 'str'>,\n                Optional  (str) status_codes: <class 'str'>,\n                Optional  (str) origin_codes: <class 'str'>,\n                Optional  (str) metric: <class 'int'>,\n                Optional  (str) localpref: <class 'int'>,\n                },\n              },\n            },\n          },\n        Optional  (str) vrf_route_identifier: <class 'str'>,\n        },\n      },\n    },\n  },\n}", "doc": " Parser for:\n        * 'show ip bgp'\n        * 'show ip bgp {address_family}'\n        * 'show ip bgp {address_family} rd {rd}'\n        * 'show ip bgp {address_family} vrf {vrf}'\n    ", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_bgp.py#L669", "class": "ShowIpBgp", "module_name": "show_bgp"}}, "show l2route mac-ip all detail": {"nxos": {"uid": "show_l2route_mac-ip_all_detail", "schema": "{\n'topology': {\n  'topo_id': {\n    Any  (str) *: {\n      'mac_ip': {\n        Any  (str) *: {\n          'seq_num': <class 'int'>,\n          'mac_addr': <class 'str'>,\n          Optional  (str) sent_to: <class 'str'>,\n          'host_ip': <class 'str'>,\n          'mac_ip_prod_type': <class 'str'>,\n          Optional  (str) soo: <class 'int'>,\n          Optional  (str) l3_info: <class 'int'>,\n          'mac_ip_flags': <class 'str'>,\n          'next_hop1': <class 'str'>,\n          },\n        },\n      },\n    },\n  },\n}", "doc": "parser for:\n        show l2route mac-ip all detail", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_vxlan.py#L1298", "class": "ShowL2routeMacIpAllDetail", "module_name": "show_vxlan"}}, "show mpls ldp discovery": {"iosxe": {"uid": "show_mpls_ldp_discovery", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'local_ldp_identifier': {\n      Any  (str) *: {\n        'discovery_sources': {\n          'interfaces': {\n            Any  (str) *: {\n              Optional  (str) recv: <class 'bool'>,\n              Any  (str) *: {\n                Any  (str) *: {\n                  Optional  (str) proposed_peer: <class 'int'>,\n                  Optional  (str) transport_ip_address: <class 'str'>,\n                  Optional  (str) reachable_via: <class 'str'>,\n                  Optional  (str) source_ip_address: <class 'str'>,\n                  Optional  (str) password: <class 'str'>,\n                  Optional  (str) holdtime_sec: <class 'int'>,\n                  Optional  (str) clients: <class 'str'>,\n                  Optional  (str) proposed_local: <class 'int'>,\n                  },\n                },\n              Optional  (str) hello_interval_ms: <class 'int'>,\n              'session': <class 'str'>,\n              Optional  (str) transport_ip_addr: <class 'str'>,\n              Optional  (str) xmit: <class 'bool'>,\n              Optional  (str) enabled: <class 'str'>,\n              },\n            },\n          },\n        Optional  (str) targeted_hellos: {\n          Any  (str) *: {\n            Any  (str) *: {\n              Optional  (str) xmit: <class 'bool'>,\n              Optional  (str) recv: <class 'bool'>,\n              'active': <class 'bool'>,\n              'session': <class 'str'>,\n              Optional  (str) ldp_id: <class 'str'>,\n              Optional  (str) tdp_id: <class 'str'>,\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "doc": "\n        Parser for show mpls ldp discovery\n                   show mpls ldp discovery all\n                   show mpls ldp discovery all detail\n                   show mpls ldp discovery detail\n                   show mpls ldp discovery vrf <vrf>\n                   show mpls ldp discovery vrf <vrf> detail\n       ", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_mpls.py#L1354", "class": "ShowMplsLdpDiscovery", "module_name": "show_mpls"}}, "show bgp {address_family} neighbors {neighbor} routes": {"iosxe": {"uid": "show_bgp_address_family_neighbors_neighbor_routes", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'neighbor': {\n      Any  (str) *: {\n        'address_family': {\n          Any  (str) *: {\n            Optional  (str) local_router_id: <class 'str'>,\n            Optional  (str) routes: {\n              Optional  (Any) Any  (str) *: {\n                Optional  (str) index: {\n                  Optional  (Any) Any  (str) *: {\n                    Optional  (str) path_type: <class 'str'>,\n                    Optional  (str) origin_codes: <class 'str'>,\n                    Optional  (str) metric: <class 'int'>,\n                    Optional  (str) localprf: <class 'int'>,\n                    Optional  (str) next_hop: <class 'str'>,\n                    Optional  (str) weight: <class 'int'>,\n                    Optional  (str) status_codes: <class 'str'>,\n                    Optional  (str) path: <class 'str'>,\n                    },\n                  },\n                },\n              },\n            Optional  (str) route_distinguisher: <class 'str'>,\n            Optional  (str) bgp_table_version: <class 'int'>,\n            Optional  (str) default_vrf: <class 'str'>,\n            },\n          },\n        },\n      },\n    },\n  },\n}", "doc": " Parser for:\n        * 'show bgp {address_family} neighbors {neighbor} routes'\n        * 'show bgp neighbors {neighbor} routes'\n    ", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_bgp.py#L5729", "class": "ShowBgpNeighborsRoutes", "module_name": "show_bgp"}}, "show ip static route": {"ios": {"uid": "show_ip_static_route", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    Optional  (str) address_family: {\n      Any  (str) *: {\n        Optional  (str) routes: {\n          Any  (str) *: {\n            Optional  (str) next_hop: {\n              Optional  (str) next_hop_list: {\n                Any  (str) *: {\n                  Optional  (str) preference: <class 'int'>,\n                  Optional  (str) next_hop: <class 'str'>,\n                  Optional  (str) index: <class 'int'>,\n                  Optional  (str) outgoing_interface: <class 'str'>,\n                  Optional  (str) active: <class 'bool'>,\n                  },\n                },\n              Optional  (str) outgoing_interface: {\n                Any  (str) *: {\n                  Optional  (str) preference: <class 'int'>,\n                  Optional  (str) active: <class 'bool'>,\n                  Optional  (str) outgoing_interface: <class 'str'>,\n                  },\n                },\n              },\n            Optional  (str) route: <class 'str'>,\n            },\n          },\n        },\n      },\n    },\n  },\n}", "doc": null, "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_static_routing.py#L9", "class": "ShowIpStaticRoute", "module_name": "show_static_routing"}, "iosxe": {"uid": "show_ip_static_route", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    Optional  (str) address_family: {\n      Any  (str) *: {\n        Optional  (str) routes: {\n          Any  (str) *: {\n            Optional  (str) next_hop: {\n              Optional  (str) next_hop_list: {\n                Any  (str) *: {\n                  Optional  (str) preference: <class 'int'>,\n                  Optional  (str) next_hop: <class 'str'>,\n                  Optional  (str) index: <class 'int'>,\n                  Optional  (str) outgoing_interface: <class 'str'>,\n                  Optional  (str) active: <class 'bool'>,\n                  },\n                },\n              Optional  (str) outgoing_interface: {\n                Any  (str) *: {\n                  Optional  (str) preference: <class 'int'>,\n                  Optional  (str) active: <class 'bool'>,\n                  Optional  (str) outgoing_interface: <class 'str'>,\n                  },\n                },\n              },\n            Optional  (str) route: <class 'str'>,\n            },\n          },\n        },\n      },\n    },\n  },\n}", "doc": "Parser for :\n       show ip static route\n       show ip static route vrf <vrf>\n    ", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_static_routing.py#L55", "class": "ShowIpStaticRoute", "module_name": "show_static_routing"}}, "show interfaces switchport": {"iosxe": {"uid": "show_interfaces_switchport", "schema": "{\nAny  (str) *: {\n  'switchport_mode': <class 'str'>,\n  Optional  (str) capture_vlans: <class 'str'>,\n  Optional  (str) capture_mode: <class 'bool'>,\n  Optional  (str) trunk_vlans: <class 'str'>,\n  Optional  (str) unknown_multicast_blocked: <class 'bool'>,\n  Optional  (str) access_vlan: <class 'str'>,\n  Optional  (str) private_vlan: {\n    Optional  (str) associations: <class 'str'>,\n    Optional  (str) operational: <class 'str'>,\n    Optional  (str) native_vlan: <class 'str'>,\n    Optional  (str) host_association: <class 'str'>,\n    Optional  (str) normal_vlans: <class 'str'>,\n    Optional  (str) mapping: <class 'str'>,\n    Optional  (str) native_vlan_tagging: <class 'bool'>,\n    Optional  (str) trunk_mappings: <class 'str'>,\n    Optional  (str) encapsulation: <class 'str'>,\n    },\n  'switchport_enable': <class 'bool'>,\n  Optional  (str) port_channel: {\n    Optional  (str) port_channel_int: <class 'str'>,\n    Optional  (str) port_channel_member: <class 'bool'>,\n    Optional  (str) port_channel_member_intfs: <class 'list'>,\n    },\n  Optional  (str) appliance_trust: <class 'str'>,\n  Optional  (str) pruning_vlans: <class 'str'>,\n  Optional  (str) encapsulation: {\n    Optional  (str) native_vlan: <class 'str'>,\n    Optional  (str) administrative_encapsulation: <class 'str'>,\n    Optional  (str) operational_encapsulation: <class 'str'>,\n    },\n  Optional  (str) unknown_unicast_blocked: <class 'bool'>,\n  Optional  (str) negotiation_of_trunk: <class 'bool'>,\n  Optional  (str) native_vlan_tagging: <class 'bool'>,\n  Optional  (str) protected: <class 'bool'>,\n  Optional  (str) operational_mode: <class 'str'>,\n  },\n}", "doc": "parser for show interfaces switchport", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_interface.py#L1134", "class": "ShowInterfacesSwitchport", "module_name": "show_interface"}}, "show ip msdp summary": {"nxos": {"uid": "show_ip_msdp_summary", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'originator_id': <class 'str'>,\n    'local_as': <class 'int'>,\n    Optional  (str) peer: {\n      Any  (str) *: {\n        'session_state': <class 'str'>,\n        'elapsed_time': <class 'str'>,\n        'address': <class 'str'>,\n        'peer_as': <class 'int'>,\n        'statistics': {\n          'last_message_received': <class 'str'>,\n          'num_of_sg_received': <class 'int'>,\n          },\n        },\n      },\n    'statistics': {\n      'num_of_configured_peers': <class 'int'>,\n      'num_of_established_peers': <class 'int'>,\n      'num_of_shutdown_peers': <class 'int'>,\n      },\n    },\n  },\n}", "doc": "Parser for :\n        show ip msdp summary\n        show ip msdp summary vrf all\n        show ip msdp summary vrf <vrf>", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_msdp.py#L722", "class": "ShowIpMsdpSummary", "module_name": "show_msdp"}}, "show l2vpn xconnect summary": {"iosxr": {"uid": "show_l2vpn_xconnect_summary", "schema": null, "doc": "Parser for show l2vpn xconnect summary", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_xconnect.py#L22", "class": "ShowL2VpnXconnectSummary", "module_name": "show_xconnect"}}, "show ip bgp {address_family} rd {rd} detail": {"iosxe": {"uid": "show_ip_bgp_address_family_rd_rd_detail", "schema": "{\n'instance': {\n  'default': {\n    'vrf': {\n      Any  (str) *: {\n        'address_family': {\n          Any  (str) *: {\n            Optional  (str) route_distinguisher: <class 'str'>,\n            Optional  (str) prefixes: {\n              Any  (str) *: {\n                Optional  (str) table_version: <class 'str'>,\n                Optional  (str) available_path: <class 'str'>,\n                Optional  (str) index: {\n                  Any  (str) *: {\n                    Optional  (str) recipient_pathid: <class 'str'>,\n                    Optional  (str) transfer_pathid: <class 'str'>,\n                    Optional  (str) community: <class 'str'>,\n                    Optional  (str) agi_version: <class 'int'>,\n                    Optional  (str) next_hop: <class 'str'>,\n                    Optional  (str) ve_block_size: <class 'int'>,\n                    Optional  (str) next_hop_igp_metric: <class 'str'>,\n                    Optional  (str) local_vxlan_vtep: {\n                      Optional  (str) vtep_ip: <class 'str'>,\n                      Optional  (str) vrf: <class 'str'>,\n                      Optional  (str) encap: <class 'str'>,\n                      Optional  (str) vni: <class 'str'>,\n                      Optional  (str) local_router_mac: <class 'str'>,\n                      Optional  (str) bdi: <class 'str'>,\n                      },\n                    Optional  (str) label_base: <class 'int'>,\n                    Optional  (str) gateway: <class 'str'>,\n                    Optional  (str) cluster_list: <class 'str'>,\n                    Optional  (str) route_info: <class 'str'>,\n                    Optional  (str) next_hop_via: <class 'str'>,\n                    Optional  (str) update_group: Any  (str) *,\n                    Optional  (str) status_codes: <class 'str'>,\n                    Optional  (str) origin_codes: <class 'str'>,\n                    Optional  (str) metric: <class 'int'>,\n                    Optional  (str) inaccessible: <class 'bool'>,\n                    Optional  (str) localpref: <class 'int'>,\n                    Optional  (str) evpn: {\n                      Optional  (str) evpn_esi: <class 'str'>,\n                      Optional  (str) recursive_via_connected: <class 'bool'>,\n                      Optional  (str) local_vtep: <class 'str'>,\n                      Optional  (str) gateway_address: <class 'str'>,\n                      Optional  (str) ext_community: <class 'str'>,\n                      Optional  (str) label: <class 'int'>,\n                      Optional  (str) encap: <class 'str'>,\n                      Optional  (str) router_mac: <class 'str'>,\n                      },\n                    Optional  (str) weight: <class 'str'>,\n                    Optional  (str) originator: <class 'str'>,\n                    Optional  (str) refresh_epoch: <class 'int'>,\n                    },\n                  },\n                Optional  (str) best_path: <class 'str'>,\n                Optional  (str) paths: <class 'str'>,\n                },\n              },\n            Optional  (str) default_vrf: <class 'str'>,\n            },\n          },\n        },\n      },\n    },\n  },\n}", "doc": " Parser for:\n        * 'show ip bgp {address_family} vrf {vrf} detail'\n        * 'show ip bgp {address_family} rd {rd} detail'\n    ", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_bgp.py#L1528", "class": "ShowIpBgpDetail", "module_name": "show_bgp"}}, "show ip igmp local-groups": {"nxos": {"uid": "show_ip_igmp_local-groups", "schema": "{\n'vrfs': {\n  Any  (str) *: {\n    Optional  (str) interface: {\n      Any  (str) *: {\n        Optional  (str) static_group: {\n          Any  (str) *: {\n            'source': <class 'str'>,\n            'group': <class 'str'>,\n            },\n          },\n        Optional  (str) join_group: {\n          Any  (str) *: {\n            'source': <class 'str'>,\n            'group': <class 'str'>,\n            },\n          },\n        'group': {\n          Any  (str) *: {\n            Optional  (str) type: <class 'str'>,\n            Optional  (str) source: {\n              Any  (str) *: {\n                'type': <class 'str'>,\n                'last_reporter': <class 'str'>,\n                },\n              },\n            Optional  (str) last_reporter: <class 'str'>,\n            },\n          },\n        },\n      },\n    },\n  },\n}", "doc": "Parser for:\n        show ip igmp local-groups\n        show ip igmp local-groups vrf all\n        show ip igmp local-groups vrf <vrf>", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_igmp.py#L1026", "class": "ShowIpIgmpLocalGroups", "module_name": "show_igmp"}}, "show bgp neighbors": {"iosxe": {"uid": "show_bgp_neighbors", "schema": "{\nOptional  (str) list_of_neighbors: <class 'list'>,\n'vrf': {\n  Any  (str) *: {\n    'neighbor': {\n      Any  (str) *: {\n        Optional  (str) bgp_event_timer: {\n          'starts': {\n            Any  (str) *: <class 'int'>,\n            },\n          'wakeups': {\n            Any  (str) *: <class 'int'>,\n            },\n          'next': {\n            Any  (str) *: <class 'str'>,\n            },\n          },\n        'address_family': {\n          Any  (str) *: {\n            Optional  (str) refresh_epoch: <class 'int'>,\n            Optional  (str) session_state: <class 'str'>,\n            Optional  (str) max_nlri: <class 'int'>,\n            Optional  (str) up_time: <class 'str'>,\n            Optional  (str) min_nlri: <class 'int'>,\n            Optional  (str) down_time: <class 'str'>,\n            Optional  (str) refresh_activity_counters: {\n              'sent': {\n                Any  (str) *: <class 'int'>,\n                },\n              'received': {\n                Any  (str) *: <class 'int'>,\n                },\n              },\n            Optional  (str) local_policy_denied_prefixes_counters: {\n              'inbound': {\n                Any  (str) *: Any  (str) *,\n                },\n              'outbound': {\n                Any  (str) *: Any  (str) *,\n                },\n              },\n            Optional  (str) last_detected_dynamic_slow_peer: <class 'str'>,\n            Optional  (str) last_read: <class 'str'>,\n            Optional  (str) dynamic_slow_peer_recovered: <class 'str'>,\n            Optional  (str) last_write: <class 'str'>,\n            Optional  (str) last_sent_refresh_start_of_rib: <class 'str'>,\n            Optional  (str) current_time: <class 'str'>,\n            Optional  (str) last_received_refresh_start_of_rib: <class 'str'>,\n            Optional  (str) bgp_table_version: <class 'int'>,\n            Optional  (str) last_sent_refresh_end_of_rib: <class 'str'>,\n            Optional  (str) neighbor_version: <class 'str'>,\n            Optional  (str) last_received_refresh_end_of_rib: <class 'str'>,\n            Optional  (str) output_queue_size: <class 'int'>,\n            Optional  (str) refresh_out: <class 'int'>,\n            Optional  (str) index: <class 'int'>,\n            Optional  (str) refresh_in: <class 'int'>,\n            Optional  (str) advertise_bit: <class 'int'>,\n            Optional  (str) route_reflector_client: <class 'bool'>,\n            Optional  (str) update_group_member: <class 'int'>,\n            Optional  (str) community_attribute_sent: <class 'bool'>,\n            Optional  (str) extended_community_attribute_sent: <class 'bool'>,\n            Optional  (str) prefix_activity_counters: {\n              'sent': {\n                Any  (str) *: Any  (str) *,\n                },\n              'received': {\n                Any  (str) *: Any  (str) *,\n                },\n              },\n            Optional  (str) suppress_ldp_signaling: <class 'bool'>,\n            Optional  (str) slow_peer_detection: <class 'bool'>,\n            Optional  (str) slow_peer_split_update_group_dynamic: <class 'bool'>,\n            },\n          },\n        'bgp_neighbor_counters': {\n          'messages': {\n            'sent': {\n              'notifications': <class 'int'>,\n              'route_refresh': <class 'int'>,\n              'total': <class 'int'>,\n              'opens': <class 'int'>,\n              'keepalives': <class 'int'>,\n              'updates': <class 'int'>,\n              },\n            'in_queue_depth': <class 'int'>,\n            'received': {\n              'notifications': <class 'int'>,\n              'route_refresh': <class 'int'>,\n              'total': <class 'int'>,\n              'opens': <class 'int'>,\n              'keepalives': <class 'int'>,\n              'updates': <class 'int'>,\n              },\n            'out_queue_depth': <class 'int'>,\n            },\n          },\n        'bgp_negotiated_keepalive_timers': {\n          'keepalive_interval': <class 'int'>,\n          'hold_time': <class 'int'>,\n          Optional  (str) min_holdtime: <class 'int'>,\n          },\n        'link': <class 'str'>,\n        'router_id': <class 'str'>,\n        Optional  (str) bgp_session_transport: {\n          Optional  (str) enqueued_packets: {\n            'mis_ordered_packet': <class 'int'>,\n            'input_packet': <class 'int'>,\n            'retransmit_packet': <class 'int'>,\n            },\n          Optional  (str) iss: <class 'int'>,\n          Optional  (str) snduna: <class 'int'>,\n          'connection': {\n            Optional  (str) reset_reason: <class 'str'>,\n            'dropped': <class 'int'>,\n            'established': <class 'int'>,\n            'last_reset': <class 'str'>,\n            },\n          Optional  (str) sndnxt: <class 'int'>,\n          Optional  (str) irs: <class 'int'>,\n          'address_tracking_status': <class 'str'>,\n          Optional  (str) sndwnd: <class 'int'>,\n          Optional  (str) snd_scale: <class 'int'>,\n          Optional  (str) maxrcvwnd: <class 'int'>,\n          Optional  (str) rcvwnd: <class 'int'>,\n          Optional  (str) rcv_scale: <class 'int'>,\n          Optional  (str) delrcvwnd: <class 'int'>,\n          Optional  (str) srtt: <class 'int'>,\n          'min_time_between_advertisement_runs': <class 'int'>,\n          Optional  (str) rtto: <class 'int'>,\n          Optional  (str) rtv: <class 'int'>,\n          Optional  (str) krtt: <class 'int'>,\n          Optional  (str) min_rtt: <class 'int'>,\n          Optional  (str) max_rtt: <class 'int'>,\n          Optional  (str) ack_hold: <class 'int'>,\n          Optional  (str) uptime: <class 'int'>,\n          Optional  (str) sent_idletime: <class 'int'>,\n          Optional  (str) receive_idletime: <class 'int'>,\n          Optional  (str) tcp_connection: <class 'bool'>,\n          Optional  (str) status_flags: <class 'str'>,\n          Optional  (str) option_flags: <class 'str'>,\n          Optional  (str) ip_precedence_value: <class 'int'>,\n          'tcp_path_mtu_discovery': <class 'str'>,\n          Optional  (str) transport: {\n            'local_port': <class 'str'>,\n            'local_host': <class 'str'>,\n            'foreign_port': <class 'str'>,\n            Optional  (str) mss: <class 'int'>,\n            'foreign_host': <class 'str'>,\n            },\n          Optional  (str) datagram: {\n            'datagram_sent': {\n              'second_congestion': <class 'int'>,\n              'with_data': <class 'int'>,\n              'retransmit': <class 'int'>,\n              'partialack': <class 'int'>,\n              'value': <class 'int'>,\n              'fastretransmit': <class 'int'>,\n              'total_data': <class 'int'>,\n              },\n            'datagram_received': {\n              'out_of_order': <class 'int'>,\n              'with_data': <class 'int'>,\n              'total_data': <class 'int'>,\n              'value': <class 'int'>,\n              },\n            },\n          Optional  (str) graceful_restart: <class 'str'>,\n          Optional  (str) packet_fast_path: <class 'int'>,\n          Optional  (str) gr_restart_time: <class 'int'>,\n          Optional  (str) packet_fast_processed: <class 'int'>,\n          Optional  (str) gr_stalepath_time: <class 'int'>,\n          Optional  (str) packet_slow_path: <class 'int'>,\n          Optional  (str) connection_state: <class 'str'>,\n          Optional  (str) fast_lock_acquisition_failures: <class 'int'>,\n          Optional  (str) io_status: <class 'int'>,\n          Optional  (str) lock_slow_path: <class 'int'>,\n          Optional  (str) unread_input_bytes: <class 'int'>,\n          Optional  (str) tcp_semaphore: <class 'str'>,\n          Optional  (str) ecn_connection: <class 'str'>,\n          Optional  (str) tcp_semaphore_status: <class 'str'>,\n          Optional  (str) minimum_incoming_ttl: <class 'int'>,\n          Optional  (str) sso: <class 'bool'>,\n          Optional  (str) outgoing_ttl: <class 'int'>,\n          Optional  (str) rcvnxt: <class 'int'>,\n          Optional  (str) connection_tableid: <class 'int'>,\n          'rib_route_ip': <class 'str'>,\n          Optional  (str) maximum_output_segment_queue_size: <class 'int'>,\n          },\n        'remote_as': <class 'int'>,\n        'bgp_version': <class 'int'>,\n        'session_state': <class 'str'>,\n        'shutdown': <class 'bool'>,\n        Optional  (str) local_as: <class 'int'>,\n        'bgp_negotiated_capabilities': {\n          'four_octets_asn': <class 'str'>,\n          Optional  (str) vpnv4_unicast: <class 'str'>,\n          Optional  (str) graceful_restart: <class 'str'>,\n          'route_refresh': <class 'str'>,\n          Optional  (str) vpnv6_unicast: <class 'str'>,\n          'stateful_switchover': <class 'str'>,\n          Optional  (str) ipv4_unicast: <class 'str'>,\n          Optional  (str) remote_restart_timer: <class 'int'>,\n          Optional  (str) ipv6_unicast: <class 'str'>,\n          Optional  (str) l2vpn_vpls: <class 'str'>,\n          Optional  (str) l2vpn_evpn: <class 'str'>,\n          Optional  (str) vpnv4_multicast: <class 'str'>,\n          Optional  (str) multisession: <class 'str'>,\n          Optional  (str) graceful_restart_af_advertised_by_peer: <class 'list'>,\n          Optional  (str) vpnv6_multicast: <class 'str'>,\n          'enhanced_refresh': <class 'str'>,\n          Optional  (str) mvpnv4_multicast: <class 'str'>,\n          Optional  (str) mvpnv6_multicast: <class 'str'>,\n          },\n        Optional  (str) description: <class 'str'>,\n        },\n      },\n    },\n  },\n}", "doc": " Parser for:\n        * 'show bgp neighbors'\n        * 'show bgp neighbors {neighbor}'\n        * 'show bgp {address_family} neighbors'\n        * 'show bgp {address_family} neighbors {neighbor}'\n        * 'show bgp {address_family} vrf {vrf} neighbors'\n        * 'show bgp {address_family} vrf {vrf} neighbors {neighbor}'\n    ", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_bgp.py#L3739", "class": "ShowBgpNeighbors", "module_name": "show_bgp"}}, "show feature": {"nxos": {"uid": "show_feature", "schema": "{\n'feature': {\n  Any  (str) *: {\n    'instance': {\n      Any  (str) *: {\n        'state': <class 'str'>,\n        Optional  (str) running: <class 'str'>,\n        },\n      },\n    },\n  },\n}", "doc": "Parser for show feature", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_feature.py#L35", "class": "ShowFeature", "module_name": "show_feature"}}, "show bgp all neighbors {neighbor} routes": {"ios": {"uid": "show_bgp_all_neighbors_neighbor_routes", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'neighbor': {\n      Any  (str) *: {\n        'address_family': {\n          Any  (str) *: {\n            Optional  (str) local_router_id: <class 'str'>,\n            Optional  (str) routes: {\n              Optional  (Any) Any  (str) *: {\n                Optional  (str) index: {\n                  Optional  (Any) Any  (str) *: {\n                    Optional  (str) path_type: <class 'str'>,\n                    Optional  (str) origin_codes: <class 'str'>,\n                    Optional  (str) metric: <class 'int'>,\n                    Optional  (str) localprf: <class 'int'>,\n                    Optional  (str) next_hop: <class 'str'>,\n                    Optional  (str) weight: <class 'int'>,\n                    Optional  (str) status_codes: <class 'str'>,\n                    Optional  (str) path: <class 'str'>,\n                    },\n                  },\n                },\n              },\n            Optional  (str) route_distinguisher: <class 'str'>,\n            Optional  (str) bgp_table_version: <class 'int'>,\n            Optional  (str) default_vrf: <class 'str'>,\n            },\n          },\n        },\n      },\n    },\n  },\n}", "doc": "\n    Parser for show bgp all neighbors <WORD> routes\n    executing 'show bgp all neighbors | i BGP neighbor' for finding vrf names\n    ", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_bgp.py#L94", "class": "ShowBgpAllNeighborsRoutes", "module_name": "show_bgp"}, "iosxe": {"uid": "show_bgp_all_neighbors_neighbor_routes", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'neighbor': {\n      Any  (str) *: {\n        'address_family': {\n          Any  (str) *: {\n            Optional  (str) local_router_id: <class 'str'>,\n            Optional  (str) routes: {\n              Optional  (Any) Any  (str) *: {\n                Optional  (str) index: {\n                  Optional  (Any) Any  (str) *: {\n                    Optional  (str) path_type: <class 'str'>,\n                    Optional  (str) origin_codes: <class 'str'>,\n                    Optional  (str) metric: <class 'int'>,\n                    Optional  (str) localprf: <class 'int'>,\n                    Optional  (str) next_hop: <class 'str'>,\n                    Optional  (str) weight: <class 'int'>,\n                    Optional  (str) status_codes: <class 'str'>,\n                    Optional  (str) path: <class 'str'>,\n                    },\n                  },\n                },\n              },\n            Optional  (str) route_distinguisher: <class 'str'>,\n            Optional  (str) bgp_table_version: <class 'int'>,\n            Optional  (str) default_vrf: <class 'str'>,\n            },\n          },\n        },\n      },\n    },\n  },\n}", "doc": " Parser for:\n        * 'show bgp all neighbors {neighbor} routes'\n        * 'show bgp {address_family} all neighbors {neighbor} routes'\n    ", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_bgp.py#L5694", "class": "ShowBgpAllNeighborsRoutes", "module_name": "show_bgp"}}, "show lisp all instance-id {instance_id} {service} map-cache": {"iosxe": {"uid": "show_lisp_all_instance-id_instance_id_service_map-cache", "schema": "{\n'lisp_router_instances': {\n  Any  (str) *: {\n    'lisp_router_instance_id': <class 'int'>,\n    Optional  (str) service: {\n      Any  (str) *: {\n        'itr': {\n          'map_cache': {\n            Any  (str) *: {\n              'mappings': {\n                Any  (str) *: {\n                  'creation_time': <class 'str'>,\n                  'eid': {\n                    Optional  (str) ipv4_prefix: {\n                      'ipv4_prefix': <class 'str'>,\n                      },\n                    'address_type': <class 'str'>,\n                    Optional  (str) ipv6: {\n                      'ipv6': <class 'str'>,\n                      },\n                    'vrf': <class 'str'>,\n                    Optional  (str) ipv6_prefix: {\n                      'ipv6_prefix': <class 'str'>,\n                      },\n                    Optional  (str) ipv4: {\n                      'ipv4': <class 'str'>,\n                      },\n                    },\n                  'via': <class 'str'>,\n                  Optional  (str) positive_mapping: {\n                    'rlocs': {\n                      Any  (str) *: {\n                        'state': <class 'str'>,\n                        'locator_address': {\n                          Optional  (str) ipv6_prefix: {\n                            'ipv6_prefix': <class 'str'>,\n                            },\n                          Optional  (str) ipv4: {\n                            'ipv4': <class 'str'>,\n                            },\n                          'virtual_network_id': <class 'str'>,\n                          Optional  (str) ipv4_prefix: {\n                            'ipv4_prefix': <class 'str'>,\n                            },\n                          Optional  (str) ipv6: {\n                            'ipv6': <class 'str'>,\n                            },\n                          'address_type': <class 'str'>,\n                          },\n                        Optional  (str) encap_iid: <class 'str'>,\n                        'uptime': <class 'str'>,\n                        'priority': <class 'int'>,\n                        'id': <class 'str'>,\n                        'weight': <class 'int'>,\n                        },\n                      },\n                    },\n                  'time_to_live': <class 'str'>,\n                  'id': <class 'str'>,\n                  Optional  (str) negative_mapping: {\n                    'map_reply_action': <class 'str'>,\n                    },\n                  },\n                },\n              'vni': <class 'str'>,\n              'entries': <class 'int'>,\n              },\n            },\n          },\n        'service': <class 'str'>,\n        },\n      },\n    },\n  },\n}", "doc": "Parser for \"show lisp all instance-id <instance_id> <service> map-cache\"", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_lisp.py#L1535", "class": "ShowLispServiceMapCache", "module_name": "show_lisp"}}, "show ip interface brief vrf all": {"nxos": {"uid": "show_ip_interface_brief_vrf_all", "schema": "{\n'interface': {\n  Any  (str) *: {\n    Optional  (str) interface_status: <class 'str'>,\n    Optional  (str) ip_address: <class 'str'>,\n    },\n  },\n}", "doc": "Parser for show ip interface brief vrf all", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_interface.py#L2880", "class": "ShowIpInterfaceBriefVrfAll", "module_name": "show_interface"}}, "show l2vpn forwarding bridge-domain {bridge_domain} mac-address location {location}": {"iosxr": {"uid": "show_l2vpn_forwarding_bridge-domain_bridge_domain_mac-address_location_location", "schema": null, "doc": "Parser for:\n        show l2vpn forwarding bridge-domain mac-address location <location>\n        show l2vpn forwarding bridge-domain <bridge_domain> mac-address location <location>\n    ", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_l2vpn.py#L69", "class": "ShowL2vpnForwardingBridgeDomainMacAddress", "module_name": "show_l2vpn"}}, "show nve peers": {"nxos": {"uid": "show_nve_peers", "schema": "{\nAny  (str) *: {\n  'nve_name': <class 'str'>,\n  'peer_ip': {\n    Any  (str) *: {\n      'uptime': <class 'str'>,\n      'learn_type': <class 'str'>,\n      'peer_state': <class 'str'>,\n      'router_mac': <class 'str'>,\n      },\n    },\n  },\n}", "doc": "Parser for :\n       show nve peers", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_vxlan.py#L53", "class": "ShowNvePeers", "module_name": "show_vxlan"}}, "show lisp all instance-id {instance_id} {service} server summary": {"iosxe": {"uid": "show_lisp_all_instance-id_instance_id_service_server_summary", "schema": "{\n'lisp_router_instances': {\n  Any  (str) *: {\n    'service': {\n      Any  (str) *: {\n        'instance_id': {\n          Any  (str) *: {\n            'map_server': {\n              'summary': {\n                Optional  (str) site_registration_limit: <class 'int'>,\n                Optional  (str) site_registration_count: <class 'int'>,\n                'number_configured_sites': <class 'int'>,\n                'number_registered_sites': <class 'int'>,\n                Optional  (str) af_datum: {\n                  Any  (str) *: {\n                    Optional  (str) number_configured_eids: <class 'int'>,\n                    'address_type': <class 'str'>,\n                    Optional  (str) number_registered_eids: <class 'int'>,\n                    },\n                  },\n                'sites_with_inconsistent_registrations': <class 'int'>,\n                },\n              Optional  (str) sites: {\n                Any  (str) *: {\n                  'site_id': <class 'str'>,\n                  'configured': <class 'int'>,\n                  'registered': <class 'int'>,\n                  'inconsistent': <class 'int'>,\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    'lisp_router_instance_id': <class 'int'>,\n    },\n  },\n}", "doc": "Parser for \"show lisp all instance-id <instance_id> <service> server summary\"", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_lisp.py#L2426", "class": "ShowLispServiceServerSummary", "module_name": "show_lisp"}}, "show evpn evi detail": {"iosxr": {"uid": "show_evpn_evi_detail", "schema": null, "doc": "Parser class for 'show evpn evi detail' CLI.", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_evpn.py#L58", "class": "ShowEvpnEviDetail", "module_name": "show_evpn"}}, "show ip ospf mpls ldp interface vrf {vrf}": {"nxos": {"uid": "show_ip_ospf_mpls_ldp_interface_vrf_vrf", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'address_family': {\n      Any  (str) *: {\n        'instance': {\n          Any  (str) *: {\n            'areas': {\n              Any  (str) *: {\n                Optional  (str) virtual_links: {\n                  Any  (str) *: {\n                    'state': <class 'str'>,\n                    'area': <class 'str'>,\n                    'mpls': {\n                      'ldp': {\n                        Optional  (str) achieved: <class 'bool'>,\n                        'autoconfig': <class 'bool'>,\n                        'autoconfig_area_id': <class 'str'>,\n                        Optional  (str) required: <class 'bool'>,\n                        'igp_sync': <class 'bool'>,\n                        },\n                      },\n                    'name': <class 'str'>,\n                    'interface_type': <class 'str'>,\n                    },\n                  },\n                Optional  (str) interfaces: {\n                  Any  (str) *: {\n                    'state': <class 'str'>,\n                    'area': <class 'str'>,\n                    'mpls': {\n                      'ldp': {\n                        'autoconfig': <class 'bool'>,\n                        'autoconfig_area_id': <class 'str'>,\n                        Optional  (str) achieved: <class 'bool'>,\n                        'igp_sync': <class 'bool'>,\n                        Optional  (str) required: <class 'bool'>,\n                        },\n                      },\n                    'name': <class 'str'>,\n                    'interface_type': <class 'str'>,\n                    },\n                  },\n                'mpls': {\n                  'ldp': {\n                    'autoconfig': <class 'bool'>,\n                    'autoconfig_area_id': <class 'str'>,\n                    Optional  (str) achieved: <class 'bool'>,\n                    Optional  (str) required: <class 'bool'>,\n                    'igp_sync': <class 'bool'>,\n                    },\n                  },\n                Optional  (str) sham_links: {\n                  Any  (str) *: {\n                    'state': <class 'str'>,\n                    'area': <class 'str'>,\n                    'mpls': {\n                      'ldp': {\n                        'autoconfig': <class 'bool'>,\n                        'autoconfig_area_id': <class 'str'>,\n                        Optional  (str) required: <class 'bool'>,\n                        'igp_sync': <class 'bool'>,\n                        Optional  (str) achieved: <class 'bool'>,\n                        },\n                      },\n                    'name': <class 'str'>,\n                    'interface_type': <class 'str'>,\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "doc": "Parser for:\n        show ip ospf mpls ldp interface\n        show ip ospf mpls ldp interface vrf <vrf>", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_ospf.py#L814", "class": "ShowIpOspfMplsLdpInterface", "module_name": "show_ospf"}}, "show pim vrf {vrf} {af} mstatic": {"iosxr": {"uid": "show_pim_vrf_vrf_af_mstatic", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'address_family': {\n      Any  (str) *: {\n        'mroute': {\n          Any  (str) *: {\n            'path': {\n              Any  (str) *: {\n                'interface_name': <class 'str'>,\n                'admin_distance': <class 'int'>,\n                'neighbor_address': <class 'str'>,\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "doc": "Parser for show pim vrf <vrf> <address_family> mstatic\n    For checking any output with the parser ,below mandatory keys have to be in cli command.\n\n    - vrf\n    - af\n    ", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_pim.py#L46", "class": "ShowPimVrfMstatic", "module_name": "show_pim"}}, "show processes cpu": {"ios": {"uid": "show_processes_cpu", "schema": "{\nOptional  (str) nonzero_cpu_processes: <class 'list'>,\nOptional  (str) five_sec_cpu_total: <class 'int'>,\nOptional  (str) one_min_cpu: <class 'int'>,\nOptional  (str) sort: {\n  Any  (str) *: {\n    'pid': <class 'int'>,\n    'tty': <class 'int'>,\n    'five_sec_cpu': <class 'float'>,\n    'five_min_cpu': <class 'float'>,\n    'invoked': <class 'int'>,\n    'one_min_cpu': <class 'float'>,\n    'process': <class 'str'>,\n    'runtime': <class 'int'>,\n    'usecs': <class 'int'>,\n    },\n  },\nOptional  (str) five_min_cpu: <class 'int'>,\nOptional  (str) five_sec_cpu_interrupts: <class 'int'>,\nOptional  (str) zero_cpu_processes: <class 'list'>,\n}", "doc": "Parser for show processes cpu\n                  show processes cpu | include <WORD>", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_platform.py#L304", "class": "ShowProcessesCpu", "module_name": "show_platform"}, "iosxe": {"uid": "show_processes_cpu", "schema": "{\nOptional  (str) nonzero_cpu_processes: <class 'list'>,\nOptional  (str) five_sec_cpu_total: <class 'int'>,\nOptional  (str) one_min_cpu: <class 'int'>,\nOptional  (str) sort: {\n  Any  (str) *: {\n    'pid': <class 'int'>,\n    'tty': <class 'int'>,\n    'five_sec_cpu': <class 'float'>,\n    'five_min_cpu': <class 'float'>,\n    'invoked': <class 'int'>,\n    'one_min_cpu': <class 'float'>,\n    'process': <class 'str'>,\n    'runtime': <class 'int'>,\n    'usecs': <class 'int'>,\n    },\n  },\nOptional  (str) five_min_cpu: <class 'int'>,\nOptional  (str) five_sec_cpu_interrupts: <class 'int'>,\nOptional  (str) zero_cpu_processes: <class 'list'>,\n}", "doc": "Parser for show processes cpu\n                  show processes cpu | include <WORD>", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_platform.py#L2360", "class": "ShowProcessesCpu", "module_name": "show_platform"}}, "show route ipv6": {"iosxr": {"uid": "show_route_ipv6", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    Optional  (str) address_family: {\n      Any  (str) *: {\n        Optional  (str) routes: {\n          Any  (str) *: {\n            Optional  (str) metric: <class 'int'>,\n            Optional  (str) route: <class 'str'>,\n            Optional  (str) source_protocol: <class 'str'>,\n            Optional  (str) source_protocol_codes: <class 'str'>,\n            Optional  (str) active: <class 'bool'>,\n            Optional  (str) route_preference: <class 'int'>,\n            Optional  (str) next_hop: {\n              Optional  (str) next_hop_list: {\n                Any  (str) *: {\n                  Optional  (str) index: <class 'int'>,\n                  Optional  (str) updated: <class 'str'>,\n                  Optional  (str) next_hop: <class 'str'>,\n                  Optional  (str) outgoing_interface: <class 'str'>,\n                  },\n                },\n              Optional  (str) outgoing_interface: {\n                Any  (str) *: {\n                  Optional  (str) outgoing_interface: <class 'str'>,\n                  Optional  (str) updated: <class 'str'>,\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "doc": "Parser for :\n       show route ipv6\n       show route vrf <vrf> ipv6", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_routing.py#L357", "class": "ShowRouteIpv6", "module_name": "show_routing"}}, "show standby delay": {"ios": {"uid": "show_standby_delay", "schema": "{\nAny  (str) *: {\n  'delay': {\n    'minimum_delay': <class 'int'>,\n    'reload_delay': <class 'int'>,\n    },\n  },\n}", "doc": "Parser for show standby delay", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_standby.py#L23", "class": "ShowStandbyDelay", "module_name": "show_standby"}, "iosxe": {"uid": "show_standby_delay", "schema": "{\nAny  (str) *: {\n  'delay': {\n    'minimum_delay': <class 'int'>,\n    'reload_delay': <class 'int'>,\n    },\n  },\n}", "doc": "Parser for show standby delay", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_standby.py#L977", "class": "ShowStandbyDelay", "module_name": "show_standby"}}, "show standby all": {"ios": {"uid": "show_standby_all", "schema": "{\nAny  (str) *: {\n  Optional  (str) mac_next_refresh: <class 'int'>,\n  'address_family': {\n    Any  (str) *: {\n      'version': {\n        Any  (str) *: {\n          'groups': {\n            Any  (str) *: {\n              Optional  (str) local_virtual_mac_default: <class 'str'>,\n              Optional  (str) global_ipv6_addresses: {\n                Any  (str) *: {\n                  'address': <class 'str'>,\n                  },\n                },\n              Optional  (str) hsrp_router_state_reason: <class 'str'>,\n              Optional  (str) active_router: <class 'str'>,\n              Optional  (str) priority: <class 'int'>,\n              Optional  (str) standby_router: <class 'str'>,\n              Optional  (str) preempt: <class 'bool'>,\n              Optional  (str) standby_ip_address: <class 'str'>,\n              Optional  (str) preempt_min_delay: <class 'int'>,\n              Optional  (str) standby_ipv6_address: <class 'str'>,\n              Optional  (str) preempt_reload_delay: <class 'int'>,\n              Optional  (str) tracked_objects: {\n                Optional  (Any) Any  (str) *: {\n                  Optional  (str) object_name: <class 'int'>,\n                  },\n                },\n              Optional  (str) preempt_sync_delay: <class 'int'>,\n              Optional  (str) local_virtual_mac_address_conf: <class 'str'>,\n              Optional  (str) virtual_mac_address_mac_in_use: <class 'bool'>,\n              Optional  (str) standby_expires_in: <class 'float'>,\n              Optional  (str) virtual_mac_address: <class 'str'>,\n              Optional  (str) statistics: {\n                Optional  (str) num_state_changes: <class 'int'>,\n                },\n              Optional  (str) slave_group_number: <class 'int'>,\n              Optional  (str) active_router_priority: <class 'int'>,\n              Optional  (str) standby_priority: <class 'int'>,\n              Optional  (str) active_ip_address: <class 'str'>,\n              Optional  (str) follow: <class 'str'>,\n              Optional  (str) active_ipv6_address: <class 'str'>,\n              Optional  (str) timers: {\n                Optional  (str) hold_msec_flag: <class 'bool'>,\n                Optional  (str) next_hello_sent: <class 'float'>,\n                Optional  (str) hold_msec: <class 'int'>,\n                Optional  (str) hello_msec_flag: <class 'bool'>,\n                Optional  (str) hold_sec: <class 'int'>,\n                Optional  (str) hello_msec: <class 'int'>,\n                Optional  (str) cfgd_hello_msec: <class 'int'>,\n                Optional  (str) hello_sec: <class 'int'>,\n                Optional  (str) cfgd_hold_msec: <class 'int'>,\n                },\n              'group_number': <class 'int'>,\n              Optional  (str) active_expires_in: <class 'float'>,\n              Optional  (str) primary_ipv4_address: {\n                'address': <class 'str'>,\n                },\n              Optional  (str) hsrp_router_state: <class 'str'>,\n              Optional  (str) default_priority: <class 'int'>,\n              Optional  (str) last_state_change: <class 'str'>,\n              Optional  (str) configured_priority: <class 'int'>,\n              Optional  (str) secondary_ipv4_addresses: {\n                Any  (str) *: {\n                  'address': <class 'str'>,\n                  },\n                },\n              Optional  (str) authentication: <class 'str'>,\n              Optional  (str) session_name: <class 'str'>,\n              Optional  (str) authentication_type: <class 'str'>,\n              Optional  (str) active_mac_address: <class 'str'>,\n              Optional  (str) active_mac_in_use: <class 'bool'>,\n              Optional  (str) link_local_ipv6_address: {\n                Optional  (str) auto_configure: <class 'str'>,\n                Optional  (str) address: <class 'str'>,\n                },\n              Optional  (str) local_virtual_mac_address: <class 'str'>,\n              },\n            },\n          Optional  (str) slave_groups: {\n            Any  (str) *: {\n              Optional  (str) active_mac_address: <class 'str'>,\n              Optional  (str) active_mac_in_use: <class 'bool'>,\n              Optional  (str) link_local_ipv6_address: {\n                Optional  (str) address: <class 'str'>,\n                Optional  (str) auto_configure: <class 'str'>,\n                },\n              Optional  (str) local_virtual_mac_address: <class 'str'>,\n              Optional  (str) standby_ip_address: <class 'str'>,\n              Optional  (str) local_virtual_mac_default: <class 'str'>,\n              Optional  (str) global_ipv6_addresses: {\n                Any  (str) *: {\n                  'address': <class 'str'>,\n                  },\n                },\n              Optional  (str) tracked_objects: {\n                Optional  (Any) Any  (str) *: {\n                  Optional  (str) object_name: <class 'int'>,\n                  },\n                },\n              Optional  (str) active_router: <class 'str'>,\n              Optional  (str) priority: <class 'int'>,\n              Optional  (str) standby_router: <class 'str'>,\n              Optional  (str) preempt: <class 'bool'>,\n              Optional  (str) active_ip_address: <class 'str'>,\n              Optional  (str) preempt_min_delay: <class 'int'>,\n              Optional  (str) standby_ipv6_address: <class 'str'>,\n              Optional  (str) preempt_reload_delay: <class 'int'>,\n              Optional  (str) virtual_mac_address_mac_in_use: <class 'bool'>,\n              Optional  (str) preempt_sync_delay: <class 'int'>,\n              Optional  (str) local_virtual_mac_address_conf: <class 'str'>,\n              Optional  (str) virtual_mac_address: <class 'str'>,\n              Optional  (str) statistics: {\n                Optional  (str) num_state_changes: <class 'int'>,\n                },\n              'group_number': <class 'int'>,\n              Optional  (str) slave_group_number: <class 'int'>,\n              Optional  (str) active_router_priority: <class 'int'>,\n              Optional  (str) follow: <class 'str'>,\n              Optional  (str) standby_priority: <class 'int'>,\n              Optional  (str) timers: {\n                Optional  (str) hold_msec: <class 'int'>,\n                Optional  (str) hello_msec_flag: <class 'bool'>,\n                Optional  (str) hold_sec: <class 'int'>,\n                Optional  (str) hello_msec: <class 'int'>,\n                Optional  (str) cfgd_hello_msec: <class 'int'>,\n                Optional  (str) hello_sec: <class 'int'>,\n                Optional  (str) cfgd_hold_msec: <class 'int'>,\n                Optional  (str) hold_msec_flag: <class 'bool'>,\n                Optional  (str) next_hello_sent: <class 'float'>,\n                },\n              Optional  (str) hsrp_router_state: <class 'str'>,\n              Optional  (str) standby_expires_in: <class 'float'>,\n              Optional  (str) active_ipv6_address: <class 'str'>,\n              Optional  (str) hsrp_router_state_reason: <class 'str'>,\n              Optional  (str) active_expires_in: <class 'float'>,\n              Optional  (str) primary_ipv4_address: {\n                'address': <class 'str'>,\n                },\n              Optional  (str) last_state_change: <class 'str'>,\n              Optional  (str) default_priority: <class 'int'>,\n              Optional  (str) authentication: <class 'str'>,\n              Optional  (str) configured_priority: <class 'int'>,\n              Optional  (str) secondary_ipv4_addresses: {\n                Any  (str) *: {\n                  'address': <class 'str'>,\n                  },\n                },\n              Optional  (str) authentication_type: <class 'str'>,\n              Optional  (str) session_name: <class 'str'>,\n              },\n            },\n          },\n        },\n      },\n    },\n  Optional  (str) redirects_disable: <class 'bool'>,\n  Optional  (str) interface: <class 'str'>,\n  Optional  (str) mac_refresh: <class 'int'>,\n  Optional  (str) use_bia: <class 'bool'>,\n  },\n}", "doc": "Parser for show standby all", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_standby.py#L19", "class": "ShowStandbyAll", "module_name": "show_standby"}, "iosxe": {"uid": "show_standby_all", "schema": "{\nAny  (str) *: {\n  Optional  (str) mac_next_refresh: <class 'int'>,\n  'address_family': {\n    Any  (str) *: {\n      'version': {\n        Any  (str) *: {\n          'groups': {\n            Any  (str) *: {\n              Optional  (str) local_virtual_mac_default: <class 'str'>,\n              Optional  (str) global_ipv6_addresses: {\n                Any  (str) *: {\n                  'address': <class 'str'>,\n                  },\n                },\n              Optional  (str) hsrp_router_state_reason: <class 'str'>,\n              Optional  (str) active_router: <class 'str'>,\n              Optional  (str) priority: <class 'int'>,\n              Optional  (str) standby_router: <class 'str'>,\n              Optional  (str) preempt: <class 'bool'>,\n              Optional  (str) standby_ip_address: <class 'str'>,\n              Optional  (str) preempt_min_delay: <class 'int'>,\n              Optional  (str) standby_ipv6_address: <class 'str'>,\n              Optional  (str) preempt_reload_delay: <class 'int'>,\n              Optional  (str) tracked_objects: {\n                Optional  (Any) Any  (str) *: {\n                  Optional  (str) object_name: <class 'int'>,\n                  },\n                },\n              Optional  (str) preempt_sync_delay: <class 'int'>,\n              Optional  (str) local_virtual_mac_address_conf: <class 'str'>,\n              Optional  (str) virtual_mac_address_mac_in_use: <class 'bool'>,\n              Optional  (str) standby_expires_in: <class 'float'>,\n              Optional  (str) virtual_mac_address: <class 'str'>,\n              Optional  (str) statistics: {\n                Optional  (str) num_state_changes: <class 'int'>,\n                },\n              Optional  (str) slave_group_number: <class 'int'>,\n              Optional  (str) active_router_priority: <class 'int'>,\n              Optional  (str) standby_priority: <class 'int'>,\n              Optional  (str) active_ip_address: <class 'str'>,\n              Optional  (str) follow: <class 'str'>,\n              Optional  (str) active_ipv6_address: <class 'str'>,\n              Optional  (str) timers: {\n                Optional  (str) hold_msec_flag: <class 'bool'>,\n                Optional  (str) next_hello_sent: <class 'float'>,\n                Optional  (str) hold_msec: <class 'int'>,\n                Optional  (str) hello_msec_flag: <class 'bool'>,\n                Optional  (str) hold_sec: <class 'int'>,\n                Optional  (str) hello_msec: <class 'int'>,\n                Optional  (str) cfgd_hello_msec: <class 'int'>,\n                Optional  (str) hello_sec: <class 'int'>,\n                Optional  (str) cfgd_hold_msec: <class 'int'>,\n                },\n              'group_number': <class 'int'>,\n              Optional  (str) active_expires_in: <class 'float'>,\n              Optional  (str) primary_ipv4_address: {\n                'address': <class 'str'>,\n                },\n              Optional  (str) hsrp_router_state: <class 'str'>,\n              Optional  (str) default_priority: <class 'int'>,\n              Optional  (str) last_state_change: <class 'str'>,\n              Optional  (str) configured_priority: <class 'int'>,\n              Optional  (str) secondary_ipv4_addresses: {\n                Any  (str) *: {\n                  'address': <class 'str'>,\n                  },\n                },\n              Optional  (str) authentication: <class 'str'>,\n              Optional  (str) session_name: <class 'str'>,\n              Optional  (str) authentication_type: <class 'str'>,\n              Optional  (str) active_mac_address: <class 'str'>,\n              Optional  (str) active_mac_in_use: <class 'bool'>,\n              Optional  (str) link_local_ipv6_address: {\n                Optional  (str) auto_configure: <class 'str'>,\n                Optional  (str) address: <class 'str'>,\n                },\n              Optional  (str) local_virtual_mac_address: <class 'str'>,\n              },\n            },\n          Optional  (str) slave_groups: {\n            Any  (str) *: {\n              Optional  (str) active_mac_address: <class 'str'>,\n              Optional  (str) active_mac_in_use: <class 'bool'>,\n              Optional  (str) link_local_ipv6_address: {\n                Optional  (str) address: <class 'str'>,\n                Optional  (str) auto_configure: <class 'str'>,\n                },\n              Optional  (str) local_virtual_mac_address: <class 'str'>,\n              Optional  (str) standby_ip_address: <class 'str'>,\n              Optional  (str) local_virtual_mac_default: <class 'str'>,\n              Optional  (str) global_ipv6_addresses: {\n                Any  (str) *: {\n                  'address': <class 'str'>,\n                  },\n                },\n              Optional  (str) tracked_objects: {\n                Optional  (Any) Any  (str) *: {\n                  Optional  (str) object_name: <class 'int'>,\n                  },\n                },\n              Optional  (str) active_router: <class 'str'>,\n              Optional  (str) priority: <class 'int'>,\n              Optional  (str) standby_router: <class 'str'>,\n              Optional  (str) preempt: <class 'bool'>,\n              Optional  (str) active_ip_address: <class 'str'>,\n              Optional  (str) preempt_min_delay: <class 'int'>,\n              Optional  (str) standby_ipv6_address: <class 'str'>,\n              Optional  (str) preempt_reload_delay: <class 'int'>,\n              Optional  (str) virtual_mac_address_mac_in_use: <class 'bool'>,\n              Optional  (str) preempt_sync_delay: <class 'int'>,\n              Optional  (str) local_virtual_mac_address_conf: <class 'str'>,\n              Optional  (str) virtual_mac_address: <class 'str'>,\n              Optional  (str) statistics: {\n                Optional  (str) num_state_changes: <class 'int'>,\n                },\n              'group_number': <class 'int'>,\n              Optional  (str) slave_group_number: <class 'int'>,\n              Optional  (str) active_router_priority: <class 'int'>,\n              Optional  (str) follow: <class 'str'>,\n              Optional  (str) standby_priority: <class 'int'>,\n              Optional  (str) timers: {\n                Optional  (str) hold_msec: <class 'int'>,\n                Optional  (str) hello_msec_flag: <class 'bool'>,\n                Optional  (str) hold_sec: <class 'int'>,\n                Optional  (str) hello_msec: <class 'int'>,\n                Optional  (str) cfgd_hello_msec: <class 'int'>,\n                Optional  (str) hello_sec: <class 'int'>,\n                Optional  (str) cfgd_hold_msec: <class 'int'>,\n                Optional  (str) hold_msec_flag: <class 'bool'>,\n                Optional  (str) next_hello_sent: <class 'float'>,\n                },\n              Optional  (str) hsrp_router_state: <class 'str'>,\n              Optional  (str) standby_expires_in: <class 'float'>,\n              Optional  (str) active_ipv6_address: <class 'str'>,\n              Optional  (str) hsrp_router_state_reason: <class 'str'>,\n              Optional  (str) active_expires_in: <class 'float'>,\n              Optional  (str) primary_ipv4_address: {\n                'address': <class 'str'>,\n                },\n              Optional  (str) last_state_change: <class 'str'>,\n              Optional  (str) default_priority: <class 'int'>,\n              Optional  (str) authentication: <class 'str'>,\n              Optional  (str) configured_priority: <class 'int'>,\n              Optional  (str) secondary_ipv4_addresses: {\n                Any  (str) *: {\n                  'address': <class 'str'>,\n                  },\n                },\n              Optional  (str) authentication_type: <class 'str'>,\n              Optional  (str) session_name: <class 'str'>,\n              },\n            },\n          },\n        },\n      },\n    },\n  Optional  (str) redirects_disable: <class 'bool'>,\n  Optional  (str) interface: <class 'str'>,\n  Optional  (str) mac_refresh: <class 'int'>,\n  Optional  (str) use_bia: <class 'bool'>,\n  },\n}", "doc": "Parser for show standby all\n    parser class - implements detail parsing mechanisms for cli,yang output.\n    ", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_standby.py#L373", "class": "ShowStandbyAll", "module_name": "show_standby"}}, "show processes cpu history": {"ios": {"uid": "show_processes_cpu_history", "schema": "{\n'60s': {\n  Any  (str) *: {\n    'maximum': <class 'int'>,\n    Optional  (str) average: <class 'int'>,\n    },\n  },\n'72h': {\n  Any  (str) *: {\n    'maximum': <class 'int'>,\n    Optional  (str) average: <class 'int'>,\n    },\n  },\n'60m': {\n  Any  (str) *: {\n    'maximum': <class 'int'>,\n    Optional  (str) average: <class 'int'>,\n    },\n  },\n}", "doc": "Parser for show processes cpu history", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_platform.py#L326", "class": "ShowProcessesCpuHistory", "module_name": "show_platform"}, "iosxe": {"uid": "show_processes_cpu_history", "schema": "{\n'60s': {\n  Any  (str) *: {\n    'maximum': <class 'int'>,\n    Optional  (str) average: <class 'int'>,\n    },\n  },\n'72h': {\n  Any  (str) *: {\n    'maximum': <class 'int'>,\n    Optional  (str) average: <class 'int'>,\n    },\n  },\n'60m': {\n  Any  (str) *: {\n    'maximum': <class 'int'>,\n    Optional  (str) average: <class 'int'>,\n    },\n  },\n}", "doc": "Parser for show processes cpu history", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_platform.py#L4310", "class": "ShowProcessesCpuHistory", "module_name": "show_platform"}}, "show processes | include {process}": {"nxos": {"uid": "show_processes___include_process", "schema": "{\n'process': {\n  Any  (str) *: {\n    Optional  (str) process: <class 'str'>,\n    Optional  (str) state: <class 'str'>,\n    Optional  (str) start_cnt: <class 'int'>,\n    Optional  (str) pid: {\n      Any  (str) *: {\n        'pid': <class 'int'>,\n        'state': <class 'str'>,\n        'start_cnt': <class 'int'>,\n        'process': <class 'str'>,\n        'type': <class 'str'>,\n        Optional  (str) tty: <class 'int'>,\n        Optional  (str) pc: <class 'str'>,\n        },\n      },\n    Optional  (str) type: <class 'str'>,\n    },\n  },\n}", "doc": "Parser for show processes <process>", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_process.py#L42", "class": "ShowProcesses", "module_name": "show_process"}}, "show lisp all instance-id {instance_id} {service} statistics": {"iosxe": {"uid": "show_lisp_all_instance-id_instance_id_service_statistics", "schema": "{\n'lisp_router_instances': {\n  Any  (str) *: {\n    'service': {\n      Any  (str) *: {\n        'statistics': {\n          Any  (str) *: {\n            Optional  (str) map_resolvers: {\n              Any  (str) *: {\n                'metric': <class 'str'>,\n                'positive': <class 'int'>,\n                'no_reply': <class 'int'>,\n                'reqs_sent': <class 'int'>,\n                'negative': <class 'int'>,\n                'last_reply': <class 'str'>,\n                },\n              },\n            'last_cleared': <class 'str'>,\n            Any  (str) *: Any  (str) *,\n            },\n          },\n        },\n      },\n    },\n  },\n}", "doc": "Parser for \"show lisp all instance-id <instance_id> <service> statistics\"", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_lisp.py#L3062", "class": "ShowLispServiceStatistics", "module_name": "show_lisp"}}, "show access-lists {acl}": {"ios": {"uid": "show_access-lists_acl", "schema": "{\nAny  (str) *: {\n  'type': <class 'str'>,\n  'name': <class 'str'>,\n  Optional  (str) per_user: <class 'bool'>,\n  Optional  (str) aces: {\n    Any  (str) *: {\n      'matches': {\n        Optional  (str) l4: {\n          Any  (str) *: {\n            Optional  (str) window_size: <class 'int'>,\n            Optional  (str) urgent_pointer: <class 'int'>,\n            Optional  (str) data_offset: <class 'int'>,\n            Optional  (str) options: <class 'int'>,\n            Optional  (str) destination_port: {\n              Optional  (str) operator: {\n                'port': <class 'int'>,\n                'operator': <class 'str'>,\n                },\n              Optional  (str) range: {\n                'upper_port': <class 'int'>,\n                'lower_port': <class 'int'>,\n                },\n              },\n            Optional  (str) source_port: {\n              Optional  (str) operator: {\n                'port': <class 'str'>,\n                'operator': <class 'str'>,\n                },\n              Optional  (str) range: {\n                'upper_port': <class 'int'>,\n                'lower_port': <class 'int'>,\n                },\n              },\n            Optional  (str) code: <class 'int'>,\n            Optional  (str) flags: <class 'str'>,\n            Optional  (str) acknowledgement_number: <class 'int'>,\n            Optional  (str) reserved: <class 'int'>,\n            Optional  (str) type: <class 'int'>,\n            Optional  (str) options_name: <class 'str'>,\n            Optional  (str) established: <class 'bool'>,\n            },\n          },\n        Optional  (str) l2: {\n          'eth': {\n            'destination_mac_address': <class 'str'>,\n            Optional  (str) vlan: <class 'int'>,\n            Optional  (str) lsap: <class 'str'>,\n            Optional  (str) protocol_family: <class 'str'>,\n            Optional  (str) ether_type: <class 'str'>,\n            Optional  (str) cos: <class 'int'>,\n            'source_mac_address': <class 'str'>,\n            },\n          },\n        Optional  (str) l3: {\n          Any  (str) *: {\n            'protocol': <class 'str'>,\n            Optional  (str) ttl: <class 'int'>,\n            'destination_network': {\n              Any  (str) *: {\n                'destination_network': <class 'str'>,\n                },\n              },\n            Optional  (str) precedence: <class 'str'>,\n            Optional  (str) ttl_operator: <class 'str'>,\n            Optional  (str) dscp: <class 'str'>,\n            'source_network': {\n              Any  (str) *: {\n                'source_network': <class 'str'>,\n                },\n              },\n            Optional  (str) precedence_code: <class 'int'>,\n            },\n          },\n        },\n      Optional  (str) statistics: {\n        'matched_packets': <class 'int'>,\n        },\n      'name': <class 'str'>,\n      'actions': {\n        'forwarding': <class 'str'>,\n        Optional  (str) logging: <class 'str'>,\n        },\n      },\n    },\n  },\n}", "doc": "Parser for show access-lists\n                  show ip access-lists\n                  show ip access-lists <acl>\n                  show ipv6 access-lists\n                  show ipv6 access-lists <acl>", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_acl.py#L9", "class": "ShowAccessLists", "module_name": "show_acl"}, "iosxe": {"uid": "show_access-lists_acl", "schema": "{\nAny  (str) *: {\n  'type': <class 'str'>,\n  'name': <class 'str'>,\n  Optional  (str) per_user: <class 'bool'>,\n  Optional  (str) aces: {\n    Any  (str) *: {\n      'matches': {\n        Optional  (str) l4: {\n          Any  (str) *: {\n            Optional  (str) window_size: <class 'int'>,\n            Optional  (str) urgent_pointer: <class 'int'>,\n            Optional  (str) data_offset: <class 'int'>,\n            Optional  (str) options: <class 'int'>,\n            Optional  (str) destination_port: {\n              Optional  (str) operator: {\n                'port': <class 'int'>,\n                'operator': <class 'str'>,\n                },\n              Optional  (str) range: {\n                'upper_port': <class 'int'>,\n                'lower_port': <class 'int'>,\n                },\n              },\n            Optional  (str) source_port: {\n              Optional  (str) operator: {\n                'port': <class 'str'>,\n                'operator': <class 'str'>,\n                },\n              Optional  (str) range: {\n                'upper_port': <class 'int'>,\n                'lower_port': <class 'int'>,\n                },\n              },\n            Optional  (str) code: <class 'int'>,\n            Optional  (str) flags: <class 'str'>,\n            Optional  (str) acknowledgement_number: <class 'int'>,\n            Optional  (str) reserved: <class 'int'>,\n            Optional  (str) type: <class 'int'>,\n            Optional  (str) options_name: <class 'str'>,\n            Optional  (str) established: <class 'bool'>,\n            },\n          },\n        Optional  (str) l2: {\n          'eth': {\n            'destination_mac_address': <class 'str'>,\n            Optional  (str) vlan: <class 'int'>,\n            Optional  (str) lsap: <class 'str'>,\n            Optional  (str) protocol_family: <class 'str'>,\n            Optional  (str) ether_type: <class 'str'>,\n            Optional  (str) cos: <class 'int'>,\n            'source_mac_address': <class 'str'>,\n            },\n          },\n        Optional  (str) l3: {\n          Any  (str) *: {\n            'protocol': <class 'str'>,\n            Optional  (str) ttl: <class 'int'>,\n            'destination_network': {\n              Any  (str) *: {\n                'destination_network': <class 'str'>,\n                },\n              },\n            Optional  (str) precedence: <class 'str'>,\n            Optional  (str) ttl_operator: <class 'str'>,\n            Optional  (str) dscp: <class 'str'>,\n            'source_network': {\n              Any  (str) *: {\n                'source_network': <class 'str'>,\n                },\n              },\n            Optional  (str) precedence_code: <class 'int'>,\n            },\n          },\n        },\n      Optional  (str) statistics: {\n        'matched_packets': <class 'int'>,\n        },\n      'name': <class 'str'>,\n      'actions': {\n        'forwarding': <class 'str'>,\n        Optional  (str) logging: <class 'str'>,\n        },\n      },\n    },\n  },\n}", "doc": "Parser for show access-lists\n                  show ip access-lists\n                  show ip access-lists <acl>\n                  show ipv6 access-lists\n                  show ipv6 access-lists <acl>", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_acl.py#L118", "class": "ShowAccessLists", "module_name": "show_acl"}}, "show bgp vrf {vrf} all summary": {"nxos": {"uid": "show_bgp_vrf_vrf_all_summary", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    Optional  (str) neighbor: {\n      Any  (str) *: {\n        'address_family': {\n          Any  (str) *: {\n            Optional  (str) soft_reconfig_bytes: <class 'int'>,\n            'msg_rcvd': <class 'int'>,\n            'inq': <class 'int'>,\n            Optional  (str) local_as: <class 'int'>,\n            Optional  (str) bgp_table_version: <class 'int'>,\n            Optional  (str) soft_reconfig_identical_paths: <class 'int'>,\n            Optional  (str) route_identifier: <class 'str'>,\n            Optional  (str) config_peers: <class 'int'>,\n            'state_pfxrcd': <class 'str'>,\n            Optional  (str) prefixes: {\n              'total_entries': <class 'int'>,\n              'memory_usage': <class 'int'>,\n              },\n            Optional  (str) path: {\n              'total_entries': <class 'int'>,\n              'memory_usage': <class 'int'>,\n              },\n            'as': <class 'int'>,\n            Optional  (str) capable_peers: <class 'int'>,\n            Optional  (str) attribute_entries: <class 'str'>,\n            Optional  (str) as_path_entries: <class 'str'>,\n            'neighbor_table_version': <class 'int'>,\n            'state': <class 'str'>,\n            Optional  (str) community_entries: <class 'str'>,\n            Optional  (str) history_paths: <class 'int'>,\n            Optional  (str) clusterlist_entries: <class 'str'>,\n            'msg_sent': <class 'int'>,\n            'tbl_ver': <class 'int'>,\n            Optional  (str) dampened_paths: <class 'int'>,\n            'outq': <class 'int'>,\n            Optional  (str) soft_reconfig_recvd_paths: <class 'int'>,\n            'up_down': <class 'str'>,\n            Optional  (str) dampening: <class 'bool'>,\n            Optional  (str) soft_reconfig_combo_paths: <class 'int'>,\n            Optional  (str) prefix_received: <class 'str'>,\n            Optional  (str) soft_reconfig_filtered_recvd: <class 'int'>,\n            },\n          },\n        },\n      },\n    },\n  },\n}", "doc": "Parser for show bgp vrf <WORD> all summary", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_bgp.py#L3414", "class": "ShowBgpVrfAllAllSummary", "module_name": "show_bgp"}}, "dir": {"ios": {"uid": "dir", "schema": "{\n'dir': {\n  'dir': <class 'str'>,\n  Any  (str) *: {\n    Optional  (str) bytes_free: <class 'str'>,\n    'files': {\n      Any  (str) *: {\n        Optional  (str) permissions: <class 'str'>,\n        Optional  (str) index: <class 'str'>,\n        'size': <class 'str'>,\n        Optional  (str) last_modified_date: <class 'str'>,\n        },\n      },\n    Optional  (str) bytes_total: <class 'str'>,\n    },\n  },\n}", "doc": "Parser for dir\n    ", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_platform.py#L58", "class": "Dir", "module_name": "show_platform"}, "nxos": {"uid": "dir", "schema": "{\n'disk_used_space': <class 'str'>,\n'disk_total_space': <class 'str'>,\n'dir': <class 'str'>,\n'disk_free_space': <class 'str'>,\n'files': {\n  Any  (str) *: {\n    'time': <class 'str'>,\n    'date': <class 'str'>,\n    'size': <class 'str'>,\n    },\n  },\n}", "doc": "Parser for dir", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_platform.py#L1046", "class": "Dir", "module_name": "show_platform"}, "iosxr": {"uid": "dir", "schema": "{\n'dir': {\n  Optional  (str) files: {\n    Any  (str) *: {\n      Optional  (str) size: <class 'str'>,\n      Optional  (str) time: <class 'str'>,\n      Optional  (str) permission: <class 'str'>,\n      Optional  (str) index: <class 'str'>,\n      Optional  (str) date: <class 'str'>,\n      },\n    },\n  'total_free_bytes': <class 'str'>,\n  'dir_name': <class 'str'>,\n  'total_bytes': <class 'str'>,\n  },\n}", "doc": "Parser for dir", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_platform.py#L1262", "class": "Dir", "module_name": "show_platform"}, "iosxe": {"uid": "dir", "schema": "{\n'dir': {\n  'dir': <class 'str'>,\n  Any  (str) *: {\n    Optional  (str) bytes_free: <class 'str'>,\n    'files': {\n      Any  (str) *: {\n        Optional  (str) permissions: <class 'str'>,\n        Optional  (str) index: <class 'str'>,\n        'size': <class 'str'>,\n        Optional  (str) last_modified_date: <class 'str'>,\n        },\n      },\n    Optional  (str) bytes_total: <class 'str'>,\n    },\n  },\n}", "doc": "Parser for dir\n    parser class - implements detail parsing mechanisms for cli output.\n    ", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_platform.py#L590", "class": "Dir", "module_name": "show_platform"}}, "show l2route topology detail": {"nxos": {"uid": "show_l2route_topology_detail", "schema": "{\n'topology': {\n  'topo_id': {\n    Any  (str) *: {\n      'topo_name': {\n        Any  (str) *: {\n          Optional  (str) encap_type: <class 'int'>,\n          Optional  (str) flags: <class 'str'>,\n          Optional  (str) iod: <class 'int'>,\n          Optional  (str) vrf_id: <class 'int'>,\n          Optional  (str) if_hdl: <class 'int'>,\n          Optional  (str) vtep_ip: <class 'str'>,\n          Optional  (str) prev_flags: <class 'str'>,\n          'topo_name': <class 'str'>,\n          Optional  (str) emulated_ip: <class 'str'>,\n          Optional  (str) sub_flags: <class 'str'>,\n          Optional  (str) vmac: <class 'str'>,\n          Optional  (str) emulated_ro_ip: <class 'str'>,\n          Optional  (str) tx_id: <class 'int'>,\n          Optional  (str) rcvd_flag: <class 'int'>,\n          Optional  (str) topo_type: <class 'str'>,\n          Optional  (str) rmac: <class 'str'>,\n          Optional  (str) vni: <class 'int'>,\n          },\n        },\n      },\n    },\n  },\n}", "doc": "parser for:\n        show l2route topology detail", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_vxlan.py#L1057", "class": "ShowL2routeTopologyDetail", "module_name": "show_vxlan"}}, "show evpn evi": {"iosxr": {"uid": "show_evpn_evi", "schema": null, "doc": "Parser class for 'show evpn evi' CLI.", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_evpn.py#L42", "class": "ShowEvpnEvi", "module_name": "show_evpn"}}, "show install inactive summary": {"iosxr": {"uid": "show_install_inactive_summary", "schema": "{\n'inactive_packages': Any  (str) *,\nOptional  (str) num_inactive_packages: <class 'int'>,\nOptional  (str) sdr: <class 'list'>,\n}", "doc": "Parser for show install inactive summary", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_platform.py#L567", "class": "ShowInstallInactiveSummary", "module_name": "show_platform"}}, "show redundancy status": {"nxos": {"uid": "show_redundancy_status", "schema": "{\nOptional  (str) active_supervisor_time: <class 'str'>,\nAny  (str) *: {\n  Optional  (str) supervisor_state: <class 'str'>,\n  Optional  (str) internal_state: <class 'str'>,\n  'redundancy_state': <class 'str'>,\n  },\nOptional  (str) kernel_uptime: <class 'str'>,\nOptional  (str) system_start_time: <class 'str'>,\nOptional  (str) system_uptime: <class 'str'>,\n'redundancy_mode': {\n  'administrative': <class 'str'>,\n  'operational': <class 'str'>,\n  },\n}", "doc": "Parser for show system redundancy status", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_platform.py#L639", "class": "ShowSystemRedundancyStatus", "module_name": "show_platform"}}, "show route vrf {vrf} ipv4": {"iosxr": {"uid": "show_route_vrf_vrf_ipv4", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    Optional  (str) address_family: {\n      Any  (str) *: {\n        Optional  (str) routes: {\n          Any  (str) *: {\n            Optional  (str) metric: <class 'int'>,\n            Optional  (str) route: <class 'str'>,\n            Optional  (str) source_protocol: <class 'str'>,\n            Optional  (str) source_protocol_codes: <class 'str'>,\n            Optional  (str) active: <class 'bool'>,\n            Optional  (str) route_preference: <class 'int'>,\n            Optional  (str) next_hop: {\n              Optional  (str) next_hop_list: {\n                Any  (str) *: {\n                  Optional  (str) index: <class 'int'>,\n                  Optional  (str) updated: <class 'str'>,\n                  Optional  (str) next_hop: <class 'str'>,\n                  Optional  (str) outgoing_interface: <class 'str'>,\n                  },\n                },\n              Optional  (str) outgoing_interface: {\n                Any  (str) *: {\n                  Optional  (str) outgoing_interface: <class 'str'>,\n                  Optional  (str) updated: <class 'str'>,\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "doc": "Parser for :\n       show route ipv4\n       show route vrf <vrf> ipv4", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_routing.py#L58", "class": "ShowRouteIpv4", "module_name": "show_routing"}}, "show ip interface brief | include {ip}": {"ios": {"uid": "show_ip_interface_brief___include_ip", "schema": "{\n'interface': {\n  Any  (str) *: {\n    Optional  (str) interface_status: <class 'str'>,\n    Optional  (str) ip_address: <class 'str'>,\n    Optional  (str) protocol_status: <class 'str'>,\n    Optional  (str) method: <class 'str'>,\n    Optional  (str) interface_ok: <class 'str'>,\n    },\n  },\n}", "doc": "Parser for:  show ip interface brief | include <WORD>", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_interface.py#L53", "class": "ShowIpInterfaceBriefPipeIp", "module_name": "show_interface"}, "iosxr": {"uid": "show_ip_interface_brief___include_ip", "schema": "{\n'interface': {\n  Any  (str) *: {\n    Optional  (str) protocol_status: <class 'str'>,\n    Optional  (str) vrf_name: <class 'str'>,\n    Optional  (str) interface_status: <class 'str'>,\n    Optional  (str) ip_address: <class 'str'>,\n    },\n  },\n}", "doc": "Parser for show ip interface brief | include Vlan", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_interface.py#L102", "class": "ShowIpInterfaceBriefPipeVlan", "module_name": "show_interface"}, "iosxe": {"uid": "show_ip_interface_brief___include_ip", "schema": "{\n'interface': {\n  Any  (str) *: {\n    Optional  (str) interface_status: <class 'str'>,\n    Optional  (str) ip_address: <class 'str'>,\n    Optional  (str) protocol_status: <class 'str'>,\n    Optional  (str) method: <class 'str'>,\n    Optional  (str) interface_ok: <class 'str'>,\n    },\n  },\n}", "doc": "Parser for:\n     show ip interface brief | include <WORD>\n     parser class implements detail parsing mechanisms for cli and yang output.\n    ", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_interface.py#L1040", "class": "ShowIpInterfaceBriefPipeIp", "module_name": "show_interface"}}, "show ipv6 route vrf {vrf}": {"nxos": {"uid": "show_ipv6_route_vrf_vrf", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    Optional  (str) address_family: {\n      Any  (str) *: {\n        Optional  (str) routes: {\n          Any  (str) *: {\n            Optional  (str) next_hop: {\n              Optional  (str) next_hop_list: {\n                Any  (str) *: {\n                  Optional  (str) best_mcast_nexthop: <class 'bool'>,\n                  Optional  (str) next_hop: <class 'str'>,\n                  Optional  (str) best_ucast_nexthop: <class 'bool'>,\n                  Optional  (str) updated: <class 'str'>,\n                  Optional  (str) outgoing_interface: <class 'str'>,\n                  Optional  (str) index: <class 'int'>,\n                  Optional  (str) next_hop_vrf: <class 'str'>,\n                  Optional  (str) next_hop_af: <class 'str'>,\n                  },\n                },\n              Optional  (str) outgoing_interface: {\n                Any  (str) *: {\n                  Optional  (str) outgoing_interface: <class 'str'>,\n                  Optional  (str) best_ucast_nexthop: <class 'bool'>,\n                  Optional  (str) updated: <class 'str'>,\n                  Optional  (str) best_mcast_nexthop: <class 'bool'>,\n                  },\n                },\n              },\n            Optional  (str) ubest: <class 'int'>,\n            Optional  (str) process_id: <class 'str'>,\n            Optional  (str) route_preference: <class 'int'>,\n            Optional  (str) active: <class 'bool'>,\n            Optional  (str) source_protocol_status: <class 'str'>,\n            Optional  (str) attached: <class 'bool'>,\n            Optional  (str) route: <class 'str'>,\n            Optional  (str) source_protocol: <class 'str'>,\n            Optional  (str) tag: <class 'int'>,\n            Optional  (str) mbest: <class 'int'>,\n            Optional  (str) metric: <class 'int'>,\n            },\n          },\n        },\n      },\n    },\n  },\n}", "doc": "Parser for :\n       show ipv6 route\n       show ipv6 route vrf <vrf>\n       show ipv6 route vrf all", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_routing.py#L634", "class": "ShowIpv6Route", "module_name": "show_routing"}}, "show crypto pki certificates {trustpoint_name}": {"iosxe": {"uid": "show_crypto_pki_certificates_trustpoint_name", "schema": "{\n'trustpoints': {\n  Any  (str) *: {\n    'associated_trustpoints': {\n      Any  (str) *: {\n        Optional  (str) crl_distribution_points: <class 'str'>,\n        'subject': {\n          Optional  (str) pid: <class 'str'>,\n          Optional  (str) name: <class 'str'>,\n          'cn': <class 'str'>,\n          Optional  (str) o: <class 'str'>,\n          Optional  (str) serial_number: <class 'str'>,\n          },\n        'issuer': {\n          'cn': <class 'str'>,\n          Optional  (str) o: <class 'str'>,\n          },\n        'usage': <class 'str'>,\n        Optional  (str) storage: <class 'str'>,\n        'validity_date': {\n          'start_date': <class 'str'>,\n          'end_date': <class 'str'>,\n          },\n        'serial_number_in_hex': <class 'str'>,\n        'status': <class 'str'>,\n        },\n      },\n    },\n  },\n}", "doc": "Parser for show crypto pki certificates <WORD>", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_crypto.py#L57", "class": "ShowCryptoPkiCertificates", "module_name": "show_crypto"}}, "show bgp l2vpn evpn summary": {"nxos": {"uid": "show_bgp_l2vpn_evpn_summary", "schema": "{\n'instance': {\n  Any  (str) *: {\n    'vrf': {\n      Any  (str) *: {\n        'vrf_local_as': <class 'int'>,\n        'vrf_name_out': <class 'str'>,\n        'vrf_router_id': <class 'str'>,\n        'address_family': {\n          Any  (str) *: {\n            'configuredpeers': <class 'int'>,\n            'numberclusterlist': <class 'int'>,\n            'totalnetworks': <class 'int'>,\n            'bytespaths': <class 'int'>,\n            'numbercommunities': <class 'int'>,\n            'totalpaths': <class 'int'>,\n            'bytesclusterlist': <class 'int'>,\n            'dampening': <class 'str'>,\n            'numberattrs': <class 'int'>,\n            'capablepeers': <class 'int'>,\n            'bytescommunities': <class 'int'>,\n            'bytesattrs': <class 'int'>,\n            'neighbor': {\n              Any  (str) *: {\n                'state': <class 'str'>,\n                'inq': <class 'int'>,\n                'neighbortableversion': <class 'int'>,\n                'remoteas': <class 'int'>,\n                Optional  (str) prefixreceived: <class 'int'>,\n                'neighbor': <class 'str'>,\n                'msgsent': <class 'int'>,\n                'time': <class 'str'>,\n                'version': <class 'int'>,\n                'outq': <class 'int'>,\n                'msgrecvd': <class 'int'>,\n                },\n              },\n            'memoryused': <class 'int'>,\n            'numberpaths': <class 'int'>,\n            'tableversion': <class 'int'>,\n            },\n          },\n        },\n      },\n    },\n  },\n}", "doc": "parser for:\n        show bgp l2vpn evpn summary", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_bgp.py#L9867", "class": "ShowBgpL2vpnEvpnSummary", "module_name": "show_bgp"}}, "show bgp all neighbors {neighbor} received-routes": {"ios": {"uid": "show_bgp_all_neighbors_neighbor_received-routes", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'neighbor': {\n      Any  (str) *: {\n        'address_family': {\n          Any  (str) *: {\n            Optional  (str) received_routes: {\n              Optional  (Any) Any  (str) *: {\n                Optional  (str) index: {\n                  Optional  (Any) Any  (str) *: {\n                    Optional  (str) next_hop: <class 'str'>,\n                    Optional  (str) weight: <class 'int'>,\n                    Optional  (str) status_codes: <class 'str'>,\n                    Optional  (str) path: <class 'str'>,\n                    Optional  (str) path_type: <class 'str'>,\n                    Optional  (str) origin_codes: <class 'str'>,\n                    Optional  (str) metric: <class 'int'>,\n                    Optional  (str) localprf: <class 'int'>,\n                    },\n                  },\n                },\n              },\n            Optional  (str) route_distinguisher: <class 'str'>,\n            Optional  (str) bgp_table_version: <class 'int'>,\n            Optional  (str) default_vrf: <class 'str'>,\n            Optional  (str) local_router_id: <class 'str'>,\n            },\n          },\n        },\n      },\n    },\n  },\n}", "doc": "\n    Parser for show bgp all neighbors <WORD> received-routes\n    executing 'show bgp all neighbors | i BGP neighbor' for finging vrf names\n    ", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_bgp.py#L82", "class": "ShowBgpAllNeighborsReceivedRoutes", "module_name": "show_bgp"}, "iosxe": {"uid": "show_bgp_all_neighbors_neighbor_received-routes", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'neighbor': {\n      Any  (str) *: {\n        'address_family': {\n          Any  (str) *: {\n            Optional  (str) received_routes: {\n              Optional  (Any) Any  (str) *: {\n                Optional  (str) index: {\n                  Optional  (Any) Any  (str) *: {\n                    Optional  (str) next_hop: <class 'str'>,\n                    Optional  (str) weight: <class 'int'>,\n                    Optional  (str) status_codes: <class 'str'>,\n                    Optional  (str) path: <class 'str'>,\n                    Optional  (str) path_type: <class 'str'>,\n                    Optional  (str) origin_codes: <class 'str'>,\n                    Optional  (str) metric: <class 'int'>,\n                    Optional  (str) localprf: <class 'int'>,\n                    },\n                  },\n                },\n              },\n            Optional  (str) route_distinguisher: <class 'str'>,\n            Optional  (str) bgp_table_version: <class 'int'>,\n            Optional  (str) default_vrf: <class 'str'>,\n            Optional  (str) local_router_id: <class 'str'>,\n            },\n          },\n        },\n      },\n    },\n  },\n}", "doc": " Parser for:\n        * 'show bgp all neighbors {neighbor} received-routes'\n        * 'show bgp {address_family} all neighbors {neighbor} received-routes'\n    ", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_bgp.py#L5055", "class": "ShowBgpAllNeighborsReceivedRoutes", "module_name": "show_bgp"}}, "show ethernet cfm peer meps": {"iosxr": {"uid": "show_ethernet_cfm_peer_meps", "schema": null, "doc": "Parser for show ethernet cfm peer meps", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_ethernet.py#L37", "class": "ShowEthernetCfmMeps", "module_name": "show_ethernet"}}, "show mpls l2transport vc detail": {"ios": {"uid": "show_mpls_l2transport_vc_detail", "schema": "{\n'interface': {\n  Any  (str) *: {\n    Optional  (str) local_circuit: <class 'str'>,\n    Optional  (str) sequencing: {\n      'sent': <class 'str'>,\n      'received': <class 'str'>,\n      },\n    Optional  (str) state: <class 'str'>,\n    Optional  (str) last_status_change_time: <class 'str'>,\n    Optional  (str) ethernet_vlan: {\n      Any  (str) *: {\n        'status': <class 'str'>,\n        },\n      },\n    Optional  (str) statistics: {\n      'bytes': {\n        'sent': <class 'int'>,\n        'received': <class 'int'>,\n        },\n      Optional  (str) packets_drop: {\n        'sent': <class 'int'>,\n        'received': <class 'int'>,\n        },\n      'packets': {\n        'sent': <class 'int'>,\n        'received': <class 'int'>,\n        },\n      },\n    Optional  (str) status: <class 'str'>,\n    Optional  (str) signaling_protocol: {\n      Any  (str) *: {\n        Optional  (str) id: <class 'str'>,\n        Optional  (str) mac_withdraw: {\n          'sent': <class 'int'>,\n          'received': <class 'int'>,\n          },\n        Optional  (str) status: <class 'str'>,\n        'mpls_vc_labels': {\n          'local': <class 'int'>,\n          'remote': <class 'int'>,\n          },\n        Optional  (str) targeted_hello_ip: <class 'str'>,\n        Optional  (str) peer_id: <class 'str'>,\n        'mtu': {\n          'local': <class 'int'>,\n          'remote': <class 'int'>,\n          },\n        Optional  (str) peer_state: <class 'str'>,\n        Optional  (str) remote_interface_description: <class 'str'>,\n        'group_id': {\n          'local': <class 'int'>,\n          'remote': <class 'int'>,\n          },\n        },\n      },\n    Optional  (str) create_time: <class 'str'>,\n    'destination_address': {\n      Any  (str) *: {\n        'vc_status': <class 'str'>,\n        Optional  (str) imposed_label_stack: <class 'str'>,\n        'vc_id': <class 'int'>,\n        Optional  (str) default_path: <class 'str'>,\n        Optional  (str) tunnel_label: <class 'str'>,\n        Optional  (str) preferred_path: <class 'str'>,\n        Optional  (str) next_hop: <class 'str'>,\n        Optional  (str) output_interface: <class 'str'>,\n        },\n      },\n    Optional  (str) line_protocol_status: <class 'str'>,\n    },\n  },\n}", "doc": "\n    Parser for show mpls l2transport vc detail\n    ", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_mpls.py#L19", "class": "ShowMplsL2TransportDetail", "module_name": "show_mpls"}, "iosxe": {"uid": "show_mpls_l2transport_vc_detail", "schema": "{\n'interface': {\n  Any  (str) *: {\n    Optional  (str) local_circuit: <class 'str'>,\n    Optional  (str) sequencing: {\n      'sent': <class 'str'>,\n      'received': <class 'str'>,\n      },\n    Optional  (str) state: <class 'str'>,\n    Optional  (str) last_status_change_time: <class 'str'>,\n    Optional  (str) ethernet_vlan: {\n      Any  (str) *: {\n        'status': <class 'str'>,\n        },\n      },\n    Optional  (str) statistics: {\n      'bytes': {\n        'sent': <class 'int'>,\n        'received': <class 'int'>,\n        },\n      Optional  (str) packets_drop: {\n        'sent': <class 'int'>,\n        'received': <class 'int'>,\n        },\n      'packets': {\n        'sent': <class 'int'>,\n        'received': <class 'int'>,\n        },\n      },\n    Optional  (str) status: <class 'str'>,\n    Optional  (str) signaling_protocol: {\n      Any  (str) *: {\n        Optional  (str) id: <class 'str'>,\n        Optional  (str) mac_withdraw: {\n          'sent': <class 'int'>,\n          'received': <class 'int'>,\n          },\n        Optional  (str) status: <class 'str'>,\n        'mpls_vc_labels': {\n          'local': <class 'int'>,\n          'remote': <class 'int'>,\n          },\n        Optional  (str) targeted_hello_ip: <class 'str'>,\n        Optional  (str) peer_id: <class 'str'>,\n        'mtu': {\n          'local': <class 'int'>,\n          'remote': <class 'int'>,\n          },\n        Optional  (str) peer_state: <class 'str'>,\n        Optional  (str) remote_interface_description: <class 'str'>,\n        'group_id': {\n          'local': <class 'int'>,\n          'remote': <class 'int'>,\n          },\n        },\n      },\n    Optional  (str) create_time: <class 'str'>,\n    'destination_address': {\n      Any  (str) *: {\n        'vc_status': <class 'str'>,\n        Optional  (str) imposed_label_stack: <class 'str'>,\n        'vc_id': <class 'int'>,\n        Optional  (str) default_path: <class 'str'>,\n        Optional  (str) tunnel_label: <class 'str'>,\n        Optional  (str) preferred_path: <class 'str'>,\n        Optional  (str) next_hop: <class 'str'>,\n        Optional  (str) output_interface: <class 'str'>,\n        },\n      },\n    Optional  (str) line_protocol_status: <class 'str'>,\n    },\n  },\n}", "doc": "\n    Parser for show mpls l2transport vc detail\n    ", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_mpls.py#L2318", "class": "ShowMplsL2TransportDetail", "module_name": "show_mpls"}}, "show route vrf {vrf} ipv6": {"iosxr": {"uid": "show_route_vrf_vrf_ipv6", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    Optional  (str) address_family: {\n      Any  (str) *: {\n        Optional  (str) routes: {\n          Any  (str) *: {\n            Optional  (str) metric: <class 'int'>,\n            Optional  (str) route: <class 'str'>,\n            Optional  (str) source_protocol: <class 'str'>,\n            Optional  (str) source_protocol_codes: <class 'str'>,\n            Optional  (str) active: <class 'bool'>,\n            Optional  (str) route_preference: <class 'int'>,\n            Optional  (str) next_hop: {\n              Optional  (str) next_hop_list: {\n                Any  (str) *: {\n                  Optional  (str) index: <class 'int'>,\n                  Optional  (str) updated: <class 'str'>,\n                  Optional  (str) next_hop: <class 'str'>,\n                  Optional  (str) outgoing_interface: <class 'str'>,\n                  },\n                },\n              Optional  (str) outgoing_interface: {\n                Any  (str) *: {\n                  Optional  (str) outgoing_interface: <class 'str'>,\n                  Optional  (str) updated: <class 'str'>,\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "doc": "Parser for :\n       show route ipv6\n       show route vrf <vrf> ipv6", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_routing.py#L357", "class": "ShowRouteIpv6", "module_name": "show_routing"}}, "show run formal | i af-group": {"iosxr": {"uid": "show_run_formal___i_af-group", "schema": "{\n'instance': {\n  Any  (str) *: {\n    'pp_name': {\n      Any  (str) *: {\n        Optional  (str) maximum_prefix_max_prefix_no: <class 'int'>,\n        Optional  (str) soo_inherit: <class 'str'>,\n        Optional  (str) maximum_prefix_threshold: <class 'int'>,\n        Optional  (str) maximum_prefix_restart: <class 'int'>,\n        Optional  (str) soft_reconfiguration_inherit: <class 'str'>,\n        Optional  (str) maximum_prefix_warning_only: <class 'str'>,\n        Optional  (str) next_hop_self: <class 'bool'>,\n        Optional  (str) allowas_in_inherit: <class 'str'>,\n        Optional  (str) allowas_in: <class 'bool'>,\n        Optional  (str) next_hop_self_inherit: <class 'str'>,\n        Optional  (str) route_map_name_in: <class 'str'>,\n        Optional  (str) as_override: <class 'bool'>,\n        Optional  (str) route_map_name_in_inherit: <class 'str'>,\n        Optional  (str) allowas_in_as_number: <class 'int'>,\n        Optional  (str) route_map_name_out: <class 'str'>,\n        Optional  (str) route_map_name_out_inherit: <class 'str'>,\n        Optional  (str) route_reflector_client: <class 'bool'>,\n        Optional  (str) route_reflector_client_inherit: <class 'str'>,\n        Optional  (str) as_override_inherit: <class 'str'>,\n        Optional  (str) send_community: <class 'str'>,\n        Optional  (str) send_comm_ebgp: <class 'bool'>,\n        Optional  (str) soft_reconfiguration: <class 'str'>,\n        Optional  (str) send_comm_ebgp_inherit: <class 'str'>,\n        Optional  (str) default_originate: <class 'bool'>,\n        Optional  (str) send_ext_comm_ebgp: <class 'bool'>,\n        Optional  (str) address_family: <class 'str'>,\n        Optional  (str) send_ext_comm_ebgp_inherit: <class 'str'>,\n        Optional  (str) default_originate_route_map: <class 'str'>,\n        Optional  (str) soo: <class 'str'>,\n        Optional  (str) default_originate_inherit: <class 'str'>,\n        },\n      },\n    },\n  },\n}", "doc": "Parser for show bgp instance af-group configuration", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_bgp.py#L293", "class": "ShowBgpInstanceAfGroupConfiguration", "module_name": "show_bgp"}}, "show bgp vrf-db vrf all": {"iosxr": {"uid": "show_bgp_vrf-db_vrf_all", "schema": null, "doc": "Parser for show bgp vrf-db vrf all", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_bgp.py#L4751", "class": "ShowBgpVrfDbVrfAll", "module_name": "show_bgp"}}, "show interface switchport": {"nxos": {"uid": "show_interface_switchport", "schema": "{\nAny  (str) *: {\n  'switchport_monitor': <class 'str'>,\n  'switchport_mode': <class 'str'>,\n  'trunk_vlans': <class 'str'>,\n  'operational_private_vlan': <class 'str'>,\n  'switchport_status': <class 'str'>,\n  'access_vlan': <class 'int'>,\n  'admin_priv_vlan_secondary_host_assoc': <class 'str'>,\n  'admin_priv_vlan_primary_host_assoc': <class 'str'>,\n  'switchport_enable': <class 'bool'>,\n  Optional  (str) access_vlan_mode: <class 'str'>,\n  'admin_priv_vlan_trunk_native_vlan': <class 'str'>,\n  'native_vlan': <class 'int'>,\n  'admin_priv_vlan_secondary_mapping': <class 'str'>,\n  'admin_priv_vlan_primary_mapping': <class 'str'>,\n  'admin_priv_vlan_trunk_private_vlans': <class 'str'>,\n  Optional  (str) native_vlan_mode: <class 'str'>,\n  'admin_priv_vlan_trunk_normal_vlans': <class 'str'>,\n  'admin_priv_vlan_trunk_encapsulation': <class 'str'>,\n  },\n}", "doc": "Parser for show interface switchport", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_interface.py#L1664", "class": "ShowInterfaceSwitchport", "module_name": "show_interface"}, "iosxr": {"uid": "show_interface_switchport", "schema": "{\n'interface': {\n  Any  (str) *: {\n    Optional  (str) switchport_mode: {\n      Optional  (Any) Any  (str) *: {\n        Optional  (str) vlan_id: {\n          Optional  (Any) Any  (str) *: {\n            Optional  (str) admin_trunking_encapsulation: <class 'str'>,\n            },\n          },\n        },\n      },\n    Optional  (str) operational_trunking_encapsulation: <class 'str'>,\n    },\n  },\n}", "doc": "Parser for show interface switchport", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_interface.py#L137", "class": "ShowInterfaceSwitchport", "module_name": "show_interface"}}, "show bgp l2vpn evpn route-type {route_type}": {"nxos": {"uid": "show_bgp_l2vpn_evpn_route-type_route_type", "schema": "{\n'instance': {\n  Any  (str) *: {\n    'vrf': {\n      Any  (str) *: {\n        'address_family': {\n          Any  (str) *: {\n            'rd': {\n              Any  (str) *: {\n                Optional  (str) rd: <class 'str'>,\n                Optional  (str) rd_vniid: <class 'int'>,\n                'prefix': {\n                  Any  (str) *: {\n                    'bestpathnr': <class 'int'>,\n                    'path': {\n                      Any  (str) *: {\n                        Optional  (str) clusterlist: <class 'list'>,\n                        'neighborid': <class 'str'>,\n                        'localpref': <class 'int'>,\n                        'pathvalid': <class 'bool'>,\n                        Optional  (str) pmsi_tunnel_attribute: {\n                          Optional  (str) tunnel_type: <class 'str'>,\n                          Optional  (str) flags: <class 'str'>,\n                          Optional  (str) tunnel_id: <class 'str'>,\n                          Optional  (str) label: <class 'str'>,\n                          },\n                        'origin': <class 'str'>,\n                        Optional  (str) policyincomplete: <class 'bool'>,\n                        Optional  (str) pathdeleted: <class 'bool'>,\n                        Optional  (str) pathstaled: <class 'bool'>,\n                        'weight': <class 'int'>,\n                        Optional  (str) pathhistory: <class 'bool'>,\n                        Optional  (str) pathovermaxaslimit: <class 'bool'>,\n                        Optional  (str) pathmultipath: <class 'bool'>,\n                        Optional  (str) originatorid: <class 'str'>,\n                        Optional  (str) pathnolabeledrnh: <class 'bool'>,\n                        Optional  (str) pathnr: <class 'int'>,\n                        Optional  (str) inaccessible: <class 'bool'>,\n                        Optional  (str) inlabel: <class 'int'>,\n                        Optional  (str) extcommunity: <class 'list'>,\n                        'nexthopmetric': <class 'int'>,\n                        'neighbor': <class 'str'>,\n                        Optional  (str) advertisedto: <class 'list'>,\n                        'pathbest': <class 'bool'>,\n                        'ipnexthop': <class 'str'>,\n                        },\n                      },\n                    Optional  (str) on_xmitlist: <class 'bool'>,\n                    Optional  (str) totalpaths: <class 'int'>,\n                    'nonipprefix': <class 'str'>,\n                    Optional  (str) suppressed: <class 'bool'>,\n                    Optional  (str) mpath: <class 'str'>,\n                    Optional  (str) needsresync: <class 'bool'>,\n                    Optional  (str) on_newlist: <class 'bool'>,\n                    'prefixversion': <class 'int'>,\n                    Optional  (str) locked: <class 'bool'>,\n                    },\n                  },\n                Optional  (str) rd_vrf: <class 'str'>,\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "doc": "parser for:\n        show bgp l2vpn evpn route-type <1>\n        show bgp l2vpn evpn route-type <2>\n        show bgp l2vpn evpn route-type <3>\n        show bgp l2vpn evpn route-type <4>", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_bgp.py#L10066", "class": "ShowBgpL2vpnEvpnRouteType", "module_name": "show_bgp"}}, "show ip pim group-range": {"nxos": {"uid": "show_ip_pim_group-range", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'address_family': {\n      Any  (str) *: {\n        'sm': {\n          Any  (str) *: {\n            Any  (str) *: {\n              Optional  (str) rp_address: <class 'str'>,\n              Optional  (str) shared_tree_only: <class 'str'>,\n              Optional  (str) mode: <class 'str'>,\n              Optional  (str) action: <class 'str'>,\n              Optional  (str) range: <class 'str'>,\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "doc": "parser for:\n        show ip pim group-range\n        show ip pim group-range vrf <vrf>", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_pim.py#L3060", "class": "ShowIpPimGroupRange", "module_name": "show_pim"}}, "show bgp instance all {vrf_type} all {af_type} neighbors {neighbor} {route}": {"iosxr": {"uid": "show_bgp_instance_all_vrf_type_all_af_type_neighbors_neighbor_route", "schema": "{\n'instance': {\n  Any  (str) *: {\n    Optional  (str) vrf: {\n      Any  (str) *: {\n        Optional  (str) address_family: {\n          Any  (str) *: {\n            Optional  (str) vrf_id: <class 'str'>,\n            Optional  (str) generic_scan_interval: <class 'int'>,\n            Optional  (str) processed_paths: <class 'int'>,\n            Optional  (str) non_stop_routing: <class 'bool'>,\n            Optional  (str) nsr_initial_init_ver_status: <class 'str'>,\n            Optional  (str) table_state: <class 'str'>,\n            Optional  (str) route_distinguisher: <class 'str'>,\n            Optional  (str) table_id: <class 'str'>,\n            Optional  (str) default_vrf: <class 'str'>,\n            Optional  (str) rd_version: <class 'int'>,\n            Optional  (str) router_identifier: <class 'str'>,\n            Optional  (str) processed_prefixes: <class 'int'>,\n            Optional  (str) routing_table_version: <class 'int'>,\n            Optional  (str) routes: {\n              Any  (str) *: {\n                Optional  (str) index: {\n                  Any  (str) *: {\n                    Optional  (str) weight: <class 'str'>,\n                    Optional  (str) status_codes: <class 'str'>,\n                    Optional  (str) path: <class 'str'>,\n                    Optional  (str) next_hop: <class 'str'>,\n                    Optional  (str) origin_codes: <class 'str'>,\n                    Optional  (str) metric: <class 'str'>,\n                    Optional  (str) locprf: <class 'str'>,\n                    },\n                  },\n                },\n              },\n            Optional  (str) nsr_initial_initsync_version: <class 'str'>,\n            Optional  (str) local_as: <class 'int'>,\n            Optional  (str) state: <class 'str'>,\n            Optional  (str) scan_interval: <class 'int'>,\n            Optional  (str) nsr_issu_sync_group_versions: <class 'str'>,\n            },\n          },\n        },\n      },\n    },\n  },\n}", "doc": " Parser for:\n        show bgp instance all all all neighbors <WORD> routes\n        show bgp instance all vrf all neighbors <WORD> routes\n        show bgp instance all vrf all ipv4 unicast neighbors <WORD> routes\n        show bgp instance all vrf all ipv6 unicast neighbors <WORD> routes\n        For checking any output with the parser ,below mandatory keys have to be in cli command.\n\n        - vrf_type\n    ", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_bgp.py#L3884", "class": "ShowBgpInstanceNeighborsRoutes", "module_name": "show_bgp"}}, "show access-lists": {"ios": {"uid": "show_access-lists", "schema": "{\nAny  (str) *: {\n  'type': <class 'str'>,\n  'name': <class 'str'>,\n  Optional  (str) per_user: <class 'bool'>,\n  Optional  (str) aces: {\n    Any  (str) *: {\n      'matches': {\n        Optional  (str) l4: {\n          Any  (str) *: {\n            Optional  (str) window_size: <class 'int'>,\n            Optional  (str) urgent_pointer: <class 'int'>,\n            Optional  (str) data_offset: <class 'int'>,\n            Optional  (str) options: <class 'int'>,\n            Optional  (str) destination_port: {\n              Optional  (str) operator: {\n                'port': <class 'int'>,\n                'operator': <class 'str'>,\n                },\n              Optional  (str) range: {\n                'upper_port': <class 'int'>,\n                'lower_port': <class 'int'>,\n                },\n              },\n            Optional  (str) source_port: {\n              Optional  (str) operator: {\n                'port': <class 'str'>,\n                'operator': <class 'str'>,\n                },\n              Optional  (str) range: {\n                'upper_port': <class 'int'>,\n                'lower_port': <class 'int'>,\n                },\n              },\n            Optional  (str) code: <class 'int'>,\n            Optional  (str) flags: <class 'str'>,\n            Optional  (str) acknowledgement_number: <class 'int'>,\n            Optional  (str) reserved: <class 'int'>,\n            Optional  (str) type: <class 'int'>,\n            Optional  (str) options_name: <class 'str'>,\n            Optional  (str) established: <class 'bool'>,\n            },\n          },\n        Optional  (str) l2: {\n          'eth': {\n            'destination_mac_address': <class 'str'>,\n            Optional  (str) vlan: <class 'int'>,\n            Optional  (str) lsap: <class 'str'>,\n            Optional  (str) protocol_family: <class 'str'>,\n            Optional  (str) ether_type: <class 'str'>,\n            Optional  (str) cos: <class 'int'>,\n            'source_mac_address': <class 'str'>,\n            },\n          },\n        Optional  (str) l3: {\n          Any  (str) *: {\n            'protocol': <class 'str'>,\n            Optional  (str) ttl: <class 'int'>,\n            'destination_network': {\n              Any  (str) *: {\n                'destination_network': <class 'str'>,\n                },\n              },\n            Optional  (str) precedence: <class 'str'>,\n            Optional  (str) ttl_operator: <class 'str'>,\n            Optional  (str) dscp: <class 'str'>,\n            'source_network': {\n              Any  (str) *: {\n                'source_network': <class 'str'>,\n                },\n              },\n            Optional  (str) precedence_code: <class 'int'>,\n            },\n          },\n        },\n      Optional  (str) statistics: {\n        'matched_packets': <class 'int'>,\n        },\n      'name': <class 'str'>,\n      'actions': {\n        'forwarding': <class 'str'>,\n        Optional  (str) logging: <class 'str'>,\n        },\n      },\n    },\n  },\n}", "doc": "Parser for show access-lists\n                  show ip access-lists\n                  show ip access-lists <acl>\n                  show ipv6 access-lists\n                  show ipv6 access-lists <acl>", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_acl.py#L9", "class": "ShowAccessLists", "module_name": "show_acl"}, "iosxe": {"uid": "show_access-lists", "schema": "{\nAny  (str) *: {\n  'type': <class 'str'>,\n  'name': <class 'str'>,\n  Optional  (str) per_user: <class 'bool'>,\n  Optional  (str) aces: {\n    Any  (str) *: {\n      'matches': {\n        Optional  (str) l4: {\n          Any  (str) *: {\n            Optional  (str) window_size: <class 'int'>,\n            Optional  (str) urgent_pointer: <class 'int'>,\n            Optional  (str) data_offset: <class 'int'>,\n            Optional  (str) options: <class 'int'>,\n            Optional  (str) destination_port: {\n              Optional  (str) operator: {\n                'port': <class 'int'>,\n                'operator': <class 'str'>,\n                },\n              Optional  (str) range: {\n                'upper_port': <class 'int'>,\n                'lower_port': <class 'int'>,\n                },\n              },\n            Optional  (str) source_port: {\n              Optional  (str) operator: {\n                'port': <class 'str'>,\n                'operator': <class 'str'>,\n                },\n              Optional  (str) range: {\n                'upper_port': <class 'int'>,\n                'lower_port': <class 'int'>,\n                },\n              },\n            Optional  (str) code: <class 'int'>,\n            Optional  (str) flags: <class 'str'>,\n            Optional  (str) acknowledgement_number: <class 'int'>,\n            Optional  (str) reserved: <class 'int'>,\n            Optional  (str) type: <class 'int'>,\n            Optional  (str) options_name: <class 'str'>,\n            Optional  (str) established: <class 'bool'>,\n            },\n          },\n        Optional  (str) l2: {\n          'eth': {\n            'destination_mac_address': <class 'str'>,\n            Optional  (str) vlan: <class 'int'>,\n            Optional  (str) lsap: <class 'str'>,\n            Optional  (str) protocol_family: <class 'str'>,\n            Optional  (str) ether_type: <class 'str'>,\n            Optional  (str) cos: <class 'int'>,\n            'source_mac_address': <class 'str'>,\n            },\n          },\n        Optional  (str) l3: {\n          Any  (str) *: {\n            'protocol': <class 'str'>,\n            Optional  (str) ttl: <class 'int'>,\n            'destination_network': {\n              Any  (str) *: {\n                'destination_network': <class 'str'>,\n                },\n              },\n            Optional  (str) precedence: <class 'str'>,\n            Optional  (str) ttl_operator: <class 'str'>,\n            Optional  (str) dscp: <class 'str'>,\n            'source_network': {\n              Any  (str) *: {\n                'source_network': <class 'str'>,\n                },\n              },\n            Optional  (str) precedence_code: <class 'int'>,\n            },\n          },\n        },\n      Optional  (str) statistics: {\n        'matched_packets': <class 'int'>,\n        },\n      'name': <class 'str'>,\n      'actions': {\n        'forwarding': <class 'str'>,\n        Optional  (str) logging: <class 'str'>,\n        },\n      },\n    },\n  },\n}", "doc": "Parser for show access-lists\n                  show ip access-lists\n                  show ip access-lists <acl>\n                  show ipv6 access-lists\n                  show ipv6 access-lists <acl>", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_acl.py#L118", "class": "ShowAccessLists", "module_name": "show_acl"}}, "show bgp {address_family} all neighbors {neighbor} advertised-routes": {"ios": {"uid": "show_bgp_address_family_all_neighbors_neighbor_advertised-routes", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'neighbor': {\n      Any  (str) *: {\n        'address_family': {\n          Any  (str) *: {\n            Optional  (str) route_distinguisher: <class 'str'>,\n            Optional  (str) bgp_table_version: <class 'int'>,\n            Optional  (str) default_vrf: <class 'str'>,\n            Optional  (str) local_router_id: <class 'str'>,\n            Optional  (str) advertised: {\n              Optional  (Any) Any  (str) *: {\n                Optional  (str) index: {\n                  Optional  (Any) Any  (str) *: {\n                    Optional  (str) origin_codes: <class 'str'>,\n                    Optional  (str) metric: <class 'int'>,\n                    Optional  (str) localprf: <class 'int'>,\n                    Optional  (str) next_hop: <class 'str'>,\n                    Optional  (str) weight: <class 'int'>,\n                    Optional  (str) status_codes: <class 'str'>,\n                    Optional  (str) path: <class 'str'>,\n                    Optional  (str) path_type: <class 'str'>,\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "doc": "Parser for show bgp all neighbors <WORD> advertised-routes", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_bgp.py#L56", "class": "ShowBgpAllNeighborsAdvertisedRoutes", "module_name": "show_bgp"}, "iosxe": {"uid": "show_bgp_address_family_all_neighbors_neighbor_advertised-routes", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'neighbor': {\n      Any  (str) *: {\n        'address_family': {\n          Any  (str) *: {\n            Optional  (str) route_distinguisher: <class 'str'>,\n            Optional  (str) bgp_table_version: <class 'int'>,\n            Optional  (str) default_vrf: <class 'str'>,\n            Optional  (str) local_router_id: <class 'str'>,\n            Optional  (str) advertised: {\n              Optional  (Any) Any  (str) *: {\n                Optional  (str) index: {\n                  Optional  (Any) Any  (str) *: {\n                    Optional  (str) origin_codes: <class 'str'>,\n                    Optional  (str) metric: <class 'int'>,\n                    Optional  (str) localprf: <class 'int'>,\n                    Optional  (str) next_hop: <class 'str'>,\n                    Optional  (str) weight: <class 'int'>,\n                    Optional  (str) status_codes: <class 'str'>,\n                    Optional  (str) path: <class 'str'>,\n                    Optional  (str) path_type: <class 'str'>,\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "doc": " Parser for:\n        * 'show bgp all neighbors {neighbor} advertised-routes'\n        * 'show bgp {address_family} all neighbors {neighbor} advertised-routes'\n    ", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_bgp.py#L4450", "class": "ShowBgpAllNeighborsAdvertisedRoutes", "module_name": "show_bgp"}}, "show mpls interfaces {interface} detail": {"iosxe": {"uid": "show_mpls_interfaces_interface_detail", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'interfaces': {\n      Any  (str) *: {\n        Optional  (str) bgp: <class 'str'>,\n        Optional  (str) ip_labeling_enabled: {\n          Any  (str) *: {\n            'ldp': <class 'bool'>,\n            Optional  (str) interface_config: <class 'bool'>,\n            },\n          },\n        Optional  (str) lsp_tunnel_labeling_enabled: <class 'bool'>,\n        Optional  (str) tunnel: <class 'str'>,\n        Optional  (str) lp_frr_labeling_enabled: <class 'bool'>,\n        Optional  (str) mpls_operational: <class 'bool'>,\n        Optional  (str) bgp_labeling_enabled: <class 'bool'>,\n        Optional  (str) static: <class 'str'>,\n        Optional  (str) operational: <class 'str'>,\n        Optional  (str) mtu: <class 'int'>,\n        Optional  (str) type: <class 'str'>,\n        Optional  (str) session: <class 'str'>,\n        Optional  (str) ip: <class 'str'>,\n        },\n      },\n    },\n  },\n}", "doc": "Parser for\n        show mpls interfaces\n        show mpls interfaces all\n        show mpls interfaces vrf <vrf>\n        show mpls interfaces <interface>\n        show mpls interfaces <interface> detail\n        show mpls interfaces detail", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_mpls.py#L2049", "class": "ShowMplsInterface", "module_name": "show_mpls"}}, "show l2route mac all detail": {"nxos": {"uid": "show_l2route_mac_all_detail", "schema": "{\n'topology': {\n  'topo_id': {\n    Any  (str) *: {\n      'mac': {\n        Any  (str) *: {\n          'seq_num': <class 'int'>,\n          'mac_addr': <class 'str'>,\n          Optional  (str) peer_id: <class 'int'>,\n          'fwd_state': <class 'str'>,\n          Optional  (str) sent_to: <class 'str'>,\n          'prod_type': <class 'str'>,\n          Optional  (str) soo: <class 'int'>,\n          'rte_res': <class 'str'>,\n          'next_hop1': <class 'str'>,\n          'flags': <class 'str'>,\n          },\n        },\n      },\n    },\n  },\n}", "doc": "parser for:\n        show l2route mac all detail", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_vxlan.py#L1181", "class": "ShowL2routeMacAllDetail", "module_name": "show_vxlan"}}, "show bgp vrf {vrf} all neighbors {neighbor} received-routes": {"nxos": {"uid": "show_bgp_vrf_vrf_all_neighbors_neighbor_received-routes", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'neighbor': {\n      Any  (str) *: {\n        'address_family': {\n          Any  (str) *: {\n            Optional  (str) route_distinguisher: <class 'str'>,\n            Optional  (str) default_vrf: <class 'str'>,\n            Optional  (str) local_router_id: <class 'str'>,\n            Optional  (str) bgp_table_version: <class 'int'>,\n            Optional  (str) received_routes: {\n              Optional  (Any) Any  (str) *: {\n                Optional  (str) index: {\n                  Optional  (Any) Any  (str) *: {\n                    Optional  (str) metric: <class 'int'>,\n                    Optional  (str) origin_codes: <class 'str'>,\n                    Optional  (str) locprf: <class 'int'>,\n                    Optional  (str) next_hop: <class 'str'>,\n                    Optional  (str) weight: <class 'int'>,\n                    Optional  (str) status_codes: <class 'str'>,\n                    Optional  (str) path: <class 'str'>,\n                    Optional  (str) path_type: <class 'str'>,\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "doc": "Parser for show bgp vrf <vrf> all neighbors <neighbor> received-routes", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_bgp.py#L5302", "class": "ShowBgpVrfAllNeighborsReceivedRoutes", "module_name": "show_bgp"}}, "show interfaces terse": {"junos": {"uid": "show_interfaces_terse", "schema": "{\nAny  (str) *: {\n  Optional  (str) protocol: {\n    Any  (str) *: {\n      Optional  (Any) Any  (str) *: {\n        Optional  (str) remote: <class 'str'>,\n        'local': <class 'str'>,\n        },\n      },\n    },\n  'oper_status': <class 'str'>,\n  Optional  (str) admin_state: <class 'str'>,\n  Optional  (str) link_state: <class 'str'>,\n  Optional  (str) phys_address: <class 'str'>,\n  'enabled': <class 'bool'>,\n  },\n}", "doc": "Parser for show interfaces terse [| match <interface>]", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/junos/show_interface.py#L46", "class": "ShowInterfacesTerse", "module_name": "show_interface"}}, "show spanning-tree mst configuration": {"ios": {"uid": "show_spanning-tree_mst_configuration", "schema": "{\n'mstp': {\n  'instances_configured': <class 'int'>,\n  'revision': <class 'int'>,\n  'name': <class 'str'>,\n  'mst_instances': {\n    Any  (str) *: {\n      'vlan_mapped': <class 'str'>,\n      },\n    },\n  },\n}", "doc": "Parser for show spanning-tree mst configuration ", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_spanning_tree.py#L47", "class": "ShowSpanningTreeMstConfiguration", "module_name": "show_spanning_tree"}, "iosxe": {"uid": "show_spanning-tree_mst_configuration", "schema": "{\n'mstp': {\n  'instances_configured': <class 'int'>,\n  'revision': <class 'int'>,\n  'name': <class 'str'>,\n  'mst_instances': {\n    Any  (str) *: {\n      'vlan_mapped': <class 'str'>,\n      },\n    },\n  },\n}", "doc": "Parser for show spanning-tree mst configuration", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_spanning_tree.py#L1001", "class": "ShowSpanningTreeMstConfiguration", "module_name": "show_spanning_tree"}}, "sh nve interface {intf} detail": {"nxos": {"uid": "sh_nve_interface_intf_detail", "schema": "{\n'interface': {\n  Any  (str) *: {\n    'state': <class 'str'>,\n    Optional  (str) encapsulation: <class 'str'>,\n    Optional  (str) source_interface: {\n      Any  (str) *: {\n        Optional  (str) primary: <class 'str'>,\n        Optional  (str) secondary: <class 'str'>,\n        },\n      },\n    Optional  (str) vpc_capability: {\n      Any  (str) *: {\n        Optional  (str) notified: <class 'bool'>,\n        },\n      },\n    },\n  },\n}", "doc": "Parser for show nve interface", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_interface.py#L2775", "class": "ShowNveInterface", "module_name": "show_interface"}}, "show ip bgp summary": {"iosxe": {"uid": "show_ip_bgp_summary", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    Optional  (str) neighbor: {\n      Any  (str) *: {\n        'address_family': {\n          Any  (str) *: {\n            Optional  (str) prefixes: {\n              'total_entries': <class 'int'>,\n              'memory_usage': <class 'int'>,\n              },\n            'msg_rcvd': <class 'int'>,\n            Optional  (str) path: {\n              'total_entries': <class 'int'>,\n              'memory_usage': <class 'int'>,\n              },\n            Optional  (str) cache_entries: {\n              Any  (str) *: {\n                'total_entries': <class 'int'>,\n                'memory_usage': <class 'int'>,\n                },\n              },\n            'input_queue': <class 'int'>,\n            'state_pfxrcd': <class 'str'>,\n            Optional  (str) entries: {\n              Any  (str) *: {\n                'total_entries': <class 'int'>,\n                'memory_usage': <class 'int'>,\n                },\n              },\n            Optional  (str) community_entries: {\n              'total_entries': <class 'int'>,\n              'memory_usage': <class 'int'>,\n              },\n            Optional  (str) attribute_entries: <class 'str'>,\n            'as': <class 'int'>,\n            Optional  (str) total_memory: <class 'int'>,\n            Optional  (str) activity_prefixes: <class 'str'>,\n            'tbl_ver': <class 'int'>,\n            Optional  (str) activity_paths: <class 'str'>,\n            Optional  (str) scan_interval: <class 'int'>,\n            'output_queue': <class 'int'>,\n            'msg_sent': <class 'int'>,\n            Optional  (str) route_identifier: <class 'str'>,\n            Optional  (str) local_as: <class 'int'>,\n            'up_down': <class 'str'>,\n            Optional  (str) bgp_table_version: <class 'int'>,\n            'version': <class 'int'>,\n            Optional  (str) routing_table_version: <class 'int'>,\n            },\n          },\n        },\n      },\n    },\n  },\n'bgp_id': <class 'int'>,\n}", "doc": " Parser for:\n        * 'show ip bgp summary'\n        * 'show ip bgp {address_family} summary'\n        * 'show ip bgp {address_family} vrf {vrf} summary'\n        * 'show ip bgp {address_family} rd {rd} summary'\n    ", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_bgp.py#L2132", "class": "ShowIpBgpSummary", "module_name": "show_bgp"}}, "show evpn evi mac": {"iosxr": {"uid": "show_evpn_evi_mac", "schema": null, "doc": "Parser class for 'show evpn evi mac' CLI.", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_evpn.py#L73", "class": "ShowEvpnEviMac", "module_name": "show_evpn"}}, "show install active summary": {"iosxr": {"uid": "show_install_active_summary", "schema": "{\nOptional  (str) sdr: <class 'str'>,\n'active_packages': Any  (str) *,\nOptional  (str) num_active_packages: <class 'int'>,\n}", "doc": "Parser for show install active summary", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_platform.py#L503", "class": "ShowInstallActiveSummary", "module_name": "show_platform"}}, "show interfaces": {"ios": {"uid": "show_interfaces", "schema": "{\nAny  (str) *: {\n  Optional  (str) phys_address: <class 'str'>,\n  Optional  (str) rxload: <class 'str'>,\n  Optional  (str) output_hang: <class 'str'>,\n  Optional  (str) delay: <class 'int'>,\n  Optional  (str) ipv4: {\n    Optional  (str) unnumbered: {\n      'interface_ref': <class 'str'>,\n      },\n    Any  (str) *: {\n      Optional  (str) ip: <class 'str'>,\n      Optional  (str) prefix_length: <class 'str'>,\n      Optional  (str) secondary: <class 'bool'>,\n      },\n    },\n  Optional  (str) media_type: <class 'str'>,\n  Optional  (str) counters: {\n    Optional  (str) out_buffer_failure: <class 'int'>,\n    Optional  (str) in_throttles: <class 'int'>,\n    Optional  (str) in_pkts: <class 'int'>,\n    Optional  (str) out_buffers_swapped: <class 'int'>,\n    Optional  (str) in_mac_pause_frames: <class 'int'>,\n    Optional  (str) in_frame: <class 'int'>,\n    Optional  (str) last_clear: <class 'str'>,\n    Optional  (str) out_pkts: <class 'int'>,\n    Optional  (str) in_runts: <class 'int'>,\n    Optional  (str) out_octets: <class 'int'>,\n    Optional  (str) out_babble: <class 'int'>,\n    Optional  (str) out_multicast_pkts: <class 'int'>,\n    Optional  (str) in_overrun: <class 'int'>,\n    Optional  (str) out_broadcast_pkts: <class 'int'>,\n    Optional  (str) in_ignored: <class 'int'>,\n    Optional  (str) in_multicast_pkts: <class 'int'>,\n    Optional  (str) out_errors: <class 'int'>,\n    Optional  (str) out_collision: <class 'int'>,\n    Optional  (str) in_broadcast_pkts: <class 'int'>,\n    Optional  (str) out_interface_resets: <class 'int'>,\n    Optional  (str) in_watchdog: <class 'int'>,\n    Optional  (str) out_unknown_protocl_drops: <class 'int'>,\n    Optional  (str) in_with_dribble: <class 'int'>,\n    Optional  (str) out_babbles: <class 'int'>,\n    Optional  (str) out_deferred: <class 'int'>,\n    Optional  (str) out_underruns: <class 'int'>,\n    Optional  (str) in_octets: <class 'int'>,\n    Optional  (str) out_late_collision: <class 'int'>,\n    Optional  (str) out_lost_carrier: <class 'int'>,\n    Optional  (str) in_crc_errors: <class 'int'>,\n    Optional  (str) rate: {\n      Optional  (str) in_rate: <class 'int'>,\n      Optional  (str) out_rate_pkts: <class 'int'>,\n      Optional  (str) load_interval: <class 'int'>,\n      Optional  (str) in_rate_pkts: <class 'int'>,\n      Optional  (str) out_rate_bps: <class 'int'>,\n      Optional  (str) in_rate_bps: <class 'int'>,\n      Optional  (str) out_rate: <class 'int'>,\n      Optional  (str) in_rate_pps: <class 'int'>,\n      Optional  (str) out_rate_pps: <class 'int'>,\n      },\n    Optional  (str) out_no_carrier: <class 'int'>,\n    Optional  (str) in_errors: <class 'int'>,\n    Optional  (str) in_abort: <class 'int'>,\n    Optional  (str) in_giants: <class 'int'>,\n    Optional  (str) out_mac_pause_frames: <class 'int'>,\n    Optional  (str) in_no_buffer: <class 'int'>,\n    },\n  Optional  (str) keepalive: <class 'int'>,\n  Optional  (str) port_channel: {\n    Optional  (str) port_channel_member_intfs: <class 'list'>,\n    Optional  (str) port_channel_int: <class 'str'>,\n    Optional  (str) port_channel_member: <class 'bool'>,\n    },\n  Optional  (str) connected: <class 'bool'>,\n  Optional  (str) link_state: <class 'str'>,\n  Optional  (str) medium: <class 'str'>,\n  'oper_status': <class 'str'>,\n  Optional  (str) reliability: <class 'str'>,\n  Optional  (str) port_speed: <class 'str'>,\n  'bandwidth': <class 'int'>,\n  'mtu': <class 'int'>,\n  Optional  (str) description: <class 'str'>,\n  Optional  (str) arp_type: <class 'str'>,\n  Optional  (str) link_type: <class 'str'>,\n  'enabled': <class 'bool'>,\n  Optional  (str) auto_negotiate: <class 'bool'>,\n  'type': <class 'str'>,\n  Optional  (str) line_protocol: <class 'str'>,\n  Optional  (str) arp_timeout: <class 'str'>,\n  Optional  (str) last_output: <class 'str'>,\n  Optional  (str) duplex_mode: <class 'str'>,\n  Optional  (str) queues: {\n    Optional  (str) input_queue_flushes: <class 'int'>,\n    Optional  (str) total_output_drop: <class 'int'>,\n    Optional  (str) output_queue_size: <class 'int'>,\n    Optional  (str) input_queue_size: <class 'int'>,\n    Optional  (str) input_queue_max: <class 'int'>,\n    Optional  (str) output_queue_max: <class 'int'>,\n    Optional  (str) input_queue_drops: <class 'int'>,\n    Optional  (str) queue_strategy: <class 'str'>,\n    },\n  Optional  (str) last_input: <class 'str'>,\n  Optional  (str) mac_address: <class 'str'>,\n  Optional  (str) encapsulations: {\n    Optional  (str) native_vlan: <class 'int'>,\n    Optional  (str) encapsulation: <class 'str'>,\n    Optional  (str) second_dot1q: <class 'str'>,\n    Optional  (str) first_dot1q: <class 'str'>,\n    },\n  Optional  (str) flow_control: {\n    Optional  (str) receive: <class 'bool'>,\n    Optional  (str) send: <class 'bool'>,\n    },\n  Optional  (str) txload: <class 'str'>,\n  },\n}", "doc": "parser for show interfaces", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_interface.py#L38", "class": "ShowInterfaces", "module_name": "show_interface"}, "iosxe": {"uid": "show_interfaces", "schema": "{\nAny  (str) *: {\n  Optional  (str) phys_address: <class 'str'>,\n  Optional  (str) rxload: <class 'str'>,\n  Optional  (str) output_hang: <class 'str'>,\n  Optional  (str) delay: <class 'int'>,\n  Optional  (str) ipv4: {\n    Optional  (str) unnumbered: {\n      'interface_ref': <class 'str'>,\n      },\n    Any  (str) *: {\n      Optional  (str) ip: <class 'str'>,\n      Optional  (str) prefix_length: <class 'str'>,\n      Optional  (str) secondary: <class 'bool'>,\n      },\n    },\n  Optional  (str) media_type: <class 'str'>,\n  Optional  (str) counters: {\n    Optional  (str) out_buffer_failure: <class 'int'>,\n    Optional  (str) in_throttles: <class 'int'>,\n    Optional  (str) in_pkts: <class 'int'>,\n    Optional  (str) out_buffers_swapped: <class 'int'>,\n    Optional  (str) in_mac_pause_frames: <class 'int'>,\n    Optional  (str) in_frame: <class 'int'>,\n    Optional  (str) last_clear: <class 'str'>,\n    Optional  (str) out_pkts: <class 'int'>,\n    Optional  (str) in_runts: <class 'int'>,\n    Optional  (str) out_octets: <class 'int'>,\n    Optional  (str) out_babble: <class 'int'>,\n    Optional  (str) out_multicast_pkts: <class 'int'>,\n    Optional  (str) in_overrun: <class 'int'>,\n    Optional  (str) out_broadcast_pkts: <class 'int'>,\n    Optional  (str) in_ignored: <class 'int'>,\n    Optional  (str) in_multicast_pkts: <class 'int'>,\n    Optional  (str) out_errors: <class 'int'>,\n    Optional  (str) out_collision: <class 'int'>,\n    Optional  (str) in_broadcast_pkts: <class 'int'>,\n    Optional  (str) out_interface_resets: <class 'int'>,\n    Optional  (str) in_watchdog: <class 'int'>,\n    Optional  (str) out_unknown_protocl_drops: <class 'int'>,\n    Optional  (str) in_with_dribble: <class 'int'>,\n    Optional  (str) out_babbles: <class 'int'>,\n    Optional  (str) out_deferred: <class 'int'>,\n    Optional  (str) out_underruns: <class 'int'>,\n    Optional  (str) in_octets: <class 'int'>,\n    Optional  (str) out_late_collision: <class 'int'>,\n    Optional  (str) out_lost_carrier: <class 'int'>,\n    Optional  (str) in_crc_errors: <class 'int'>,\n    Optional  (str) rate: {\n      Optional  (str) in_rate: <class 'int'>,\n      Optional  (str) out_rate_pkts: <class 'int'>,\n      Optional  (str) load_interval: <class 'int'>,\n      Optional  (str) in_rate_pkts: <class 'int'>,\n      Optional  (str) out_rate_bps: <class 'int'>,\n      Optional  (str) in_rate_bps: <class 'int'>,\n      Optional  (str) out_rate: <class 'int'>,\n      Optional  (str) in_rate_pps: <class 'int'>,\n      Optional  (str) out_rate_pps: <class 'int'>,\n      },\n    Optional  (str) out_no_carrier: <class 'int'>,\n    Optional  (str) in_errors: <class 'int'>,\n    Optional  (str) in_abort: <class 'int'>,\n    Optional  (str) in_giants: <class 'int'>,\n    Optional  (str) out_mac_pause_frames: <class 'int'>,\n    Optional  (str) in_no_buffer: <class 'int'>,\n    },\n  Optional  (str) keepalive: <class 'int'>,\n  Optional  (str) port_channel: {\n    Optional  (str) port_channel_member_intfs: <class 'list'>,\n    Optional  (str) port_channel_int: <class 'str'>,\n    Optional  (str) port_channel_member: <class 'bool'>,\n    },\n  Optional  (str) connected: <class 'bool'>,\n  Optional  (str) link_state: <class 'str'>,\n  Optional  (str) medium: <class 'str'>,\n  'oper_status': <class 'str'>,\n  Optional  (str) reliability: <class 'str'>,\n  Optional  (str) port_speed: <class 'str'>,\n  'bandwidth': <class 'int'>,\n  'mtu': <class 'int'>,\n  Optional  (str) description: <class 'str'>,\n  Optional  (str) arp_type: <class 'str'>,\n  Optional  (str) link_type: <class 'str'>,\n  'enabled': <class 'bool'>,\n  Optional  (str) auto_negotiate: <class 'bool'>,\n  'type': <class 'str'>,\n  Optional  (str) line_protocol: <class 'str'>,\n  Optional  (str) arp_timeout: <class 'str'>,\n  Optional  (str) last_output: <class 'str'>,\n  Optional  (str) duplex_mode: <class 'str'>,\n  Optional  (str) queues: {\n    Optional  (str) input_queue_flushes: <class 'int'>,\n    Optional  (str) total_output_drop: <class 'int'>,\n    Optional  (str) output_queue_size: <class 'int'>,\n    Optional  (str) input_queue_size: <class 'int'>,\n    Optional  (str) input_queue_max: <class 'int'>,\n    Optional  (str) output_queue_max: <class 'int'>,\n    Optional  (str) input_queue_drops: <class 'int'>,\n    Optional  (str) queue_strategy: <class 'str'>,\n    },\n  Optional  (str) last_input: <class 'str'>,\n  Optional  (str) mac_address: <class 'str'>,\n  Optional  (str) encapsulations: {\n    Optional  (str) native_vlan: <class 'int'>,\n    Optional  (str) encapsulation: <class 'str'>,\n    Optional  (str) second_dot1q: <class 'str'>,\n    Optional  (str) first_dot1q: <class 'str'>,\n    },\n  Optional  (str) flow_control: {\n    Optional  (str) receive: <class 'bool'>,\n    Optional  (str) send: <class 'bool'>,\n    },\n  Optional  (str) txload: <class 'str'>,\n  },\n}", "doc": "parser for show interfaces\n                  show interfaces <interface>", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_interface.py#L173", "class": "ShowInterfaces", "module_name": "show_interface"}}, "show ipv6 pim vrf {vrf} bsr candidate-rp": {"ios": {"uid": "show_ipv6_pim_vrf_vrf_bsr_candidate-rp", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'address_family': {\n      Any  (str) *: {\n        'rp': {\n          'bsr': {\n            Optional  (str) rp_candidate_next_advertisement: <class 'str'>,\n            Any  (str) *: {\n              Optional  (str) scope: <class 'str'>,\n              Optional  (str) holdtime: <class 'int'>,\n              Optional  (str) priority: <class 'int'>,\n              Optional  (str) mode: <class 'str'>,\n              Optional  (str) address: <class 'str'>,\n              Optional  (str) interval: <class 'int'>,\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "doc": "Parser for:\n        show ipv6 pim bsr candidate-rp\n        show ipv6 pim vrf <vrf> bsr candidate-rp", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_pim.py#L43", "class": "ShowIpv6PimBsrCandidateRp", "module_name": "show_pim"}, "iosxe": {"uid": "show_ipv6_pim_vrf_vrf_bsr_candidate-rp", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'address_family': {\n      Any  (str) *: {\n        'rp': {\n          'bsr': {\n            Optional  (str) rp_candidate_next_advertisement: <class 'str'>,\n            Any  (str) *: {\n              Optional  (str) scope: <class 'str'>,\n              Optional  (str) holdtime: <class 'int'>,\n              Optional  (str) priority: <class 'int'>,\n              Optional  (str) mode: <class 'str'>,\n              Optional  (str) address: <class 'str'>,\n              Optional  (str) interval: <class 'int'>,\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "doc": "Parser for:\n        show ipv6 pim bsr candidate-rp\n        show ipv6 pim vrf <vrf> bsr candidate-rp", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_pim.py#L333", "class": "ShowIpv6PimBsrCandidateRp", "module_name": "show_pim"}}, "show bgp instances": {"iosxr": {"uid": "show_bgp_instances", "schema": "{\n'instance': {\n  Any  (str) *: {\n    Optional  (str) address_families: <class 'list'>,\n    'instance_id': <class 'int'>,\n    'num_vrfs': <class 'int'>,\n    'placed_grp': <class 'str'>,\n    'bgp_id': <class 'int'>,\n    },\n  },\n}", "doc": "Parser for show bgp instances", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_bgp.py#L84", "class": "ShowBgpInstances", "module_name": "show_bgp"}}, "show ipv6 icmp neighbor detail vrf {vrf}": {"nxos": {"uid": "show_ipv6_icmp_neighbor_detail_vrf_vrf", "schema": "{\n'interfaces': {\n  Any  (str) *: {\n    'neighbors': {\n      Any  (str) *: {\n        'ip': <class 'str'>,\n        'neighbor_state': <class 'str'>,\n        Optional  (str) physical_interface: <class 'str'>,\n        'link_layer_address': <class 'str'>,\n        'age': <class 'str'>,\n        },\n      },\n    'interface': <class 'str'>,\n    },\n  },\n}", "doc": "Parser for :\n        show ipv6 icmp neighbor detail\n        show ipv6 icmp neighbor detail vrf all\n        show ipv6 icmp neighbor detail vrf <vrf>", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_nd.py#L524", "class": "ShowIpv6IcmpNeighborDetail", "module_name": "show_nd"}}, "show ip igmp ssm-mapping {group}": {"iosxe": {"uid": "show_ip_igmp_ssm-mapping_group", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'ssm_map': {\n      Any  (str) *: {\n        'group_address': <class 'str'>,\n        'database': <class 'str'>,\n        'source_addr': <class 'str'>,\n        },\n      },\n    },\n  },\n}", "doc": "\n    Parser for 'show ip igmp ssm-mapping <WROD>'\n    parser for 'show ip igmp vrf <WORD> ssm-mapping <WORD>'\n    ", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_igmp.py#L640", "class": "ShowIpIgmpSsmMapping", "module_name": "show_igmp"}}, "show ip route": {"ios": {"uid": "show_ip_route", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    Optional  (str) address_family: {\n      Any  (str) *: {\n        Optional  (str) routes: {\n          Any  (str) *: {\n            Optional  (str) source_protocol: <class 'str'>,\n            Optional  (str) redist_via: <class 'str'>,\n            Optional  (str) source_protocol_codes: <class 'str'>,\n            Optional  (str) mask: <class 'str'>,\n            Optional  (str) next_hop: {\n              Optional  (str) outgoing_interface: {\n                Any  (str) *: {\n                  Optional  (str) updated: <class 'str'>,\n                  Optional  (str) outgoing_interface: <class 'str'>,\n                  },\n                },\n              Optional  (str) next_hop_list: {\n                Any  (str) *: {\n                  Optional  (str) age: <class 'str'>,\n                  Optional  (str) from: <class 'str'>,\n                  Optional  (str) total_delay: <class 'str'>,\n                  Optional  (str) metric: <class 'str'>,\n                  Optional  (str) share_count: <class 'str'>,\n                  Optional  (str) index: <class 'int'>,\n                  Optional  (str) loading: <class 'str'>,\n                  Optional  (str) hops: <class 'str'>,\n                  Optional  (str) minimum_mtu: <class 'str'>,\n                  Optional  (str) next_hop: <class 'str'>,\n                  Optional  (str) outgoing_interface: <class 'str'>,\n                  Optional  (str) minimum_bandwidth: <class 'str'>,\n                  Optional  (str) reliability: <class 'str'>,\n                  Optional  (str) updated: <class 'str'>,\n                  },\n                },\n              },\n            Optional  (str) known_via: <class 'str'>,\n            Optional  (str) update: {\n              'age': <class 'str'>,\n              'interface': <class 'str'>,\n              'from': <class 'str'>,\n              },\n            Optional  (str) distance: <class 'int'>,\n            Optional  (str) route: <class 'str'>,\n            Optional  (str) type: <class 'str'>,\n            Optional  (str) net: <class 'str'>,\n            Optional  (str) active: <class 'bool'>,\n            Optional  (str) route_preference: <class 'int'>,\n            Optional  (str) redist_via_tag: <class 'str'>,\n            Optional  (str) metric: <class 'int'>,\n            },\n          },\n        },\n      },\n    },\n  },\n}", "doc": "Parser for :\n       show ip route\n       show ip route vrf <vrf>\n       show ip route <route>\n       show ip route vrf <vrf> <route>", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_routing.py#L10", "class": "ShowIpRoute", "module_name": "show_routing"}, "iosxe": {"uid": "show_ip_route", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    Optional  (str) address_family: {\n      Any  (str) *: {\n        Optional  (str) routes: {\n          Any  (str) *: {\n            Optional  (str) source_protocol: <class 'str'>,\n            Optional  (str) redist_via: <class 'str'>,\n            Optional  (str) source_protocol_codes: <class 'str'>,\n            Optional  (str) mask: <class 'str'>,\n            Optional  (str) next_hop: {\n              Optional  (str) outgoing_interface: {\n                Any  (str) *: {\n                  Optional  (str) updated: <class 'str'>,\n                  Optional  (str) outgoing_interface: <class 'str'>,\n                  },\n                },\n              Optional  (str) next_hop_list: {\n                Any  (str) *: {\n                  Optional  (str) age: <class 'str'>,\n                  Optional  (str) from: <class 'str'>,\n                  Optional  (str) total_delay: <class 'str'>,\n                  Optional  (str) metric: <class 'str'>,\n                  Optional  (str) share_count: <class 'str'>,\n                  Optional  (str) index: <class 'int'>,\n                  Optional  (str) loading: <class 'str'>,\n                  Optional  (str) hops: <class 'str'>,\n                  Optional  (str) minimum_mtu: <class 'str'>,\n                  Optional  (str) next_hop: <class 'str'>,\n                  Optional  (str) outgoing_interface: <class 'str'>,\n                  Optional  (str) minimum_bandwidth: <class 'str'>,\n                  Optional  (str) reliability: <class 'str'>,\n                  Optional  (str) updated: <class 'str'>,\n                  },\n                },\n              },\n            Optional  (str) known_via: <class 'str'>,\n            Optional  (str) update: {\n              'age': <class 'str'>,\n              'interface': <class 'str'>,\n              'from': <class 'str'>,\n              },\n            Optional  (str) distance: <class 'int'>,\n            Optional  (str) route: <class 'str'>,\n            Optional  (str) type: <class 'str'>,\n            Optional  (str) net: <class 'str'>,\n            Optional  (str) active: <class 'bool'>,\n            Optional  (str) route_preference: <class 'int'>,\n            Optional  (str) redist_via_tag: <class 'str'>,\n            Optional  (str) metric: <class 'int'>,\n            },\n          },\n        },\n      },\n    },\n  },\n}", "doc": "Parser for :\n       show ip route\n       show ip route vrf <vrf>", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_routing.py#L80", "class": "ShowIpRoute", "module_name": "show_routing"}}, "show bgp neighbors {neighbor} routes": {"iosxe": {"uid": "show_bgp_neighbors_neighbor_routes", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'neighbor': {\n      Any  (str) *: {\n        'address_family': {\n          Any  (str) *: {\n            Optional  (str) local_router_id: <class 'str'>,\n            Optional  (str) routes: {\n              Optional  (Any) Any  (str) *: {\n                Optional  (str) index: {\n                  Optional  (Any) Any  (str) *: {\n                    Optional  (str) path_type: <class 'str'>,\n                    Optional  (str) origin_codes: <class 'str'>,\n                    Optional  (str) metric: <class 'int'>,\n                    Optional  (str) localprf: <class 'int'>,\n                    Optional  (str) next_hop: <class 'str'>,\n                    Optional  (str) weight: <class 'int'>,\n                    Optional  (str) status_codes: <class 'str'>,\n                    Optional  (str) path: <class 'str'>,\n                    },\n                  },\n                },\n              },\n            Optional  (str) route_distinguisher: <class 'str'>,\n            Optional  (str) bgp_table_version: <class 'int'>,\n            Optional  (str) default_vrf: <class 'str'>,\n            },\n          },\n        },\n      },\n    },\n  },\n}", "doc": " Parser for:\n        * 'show bgp {address_family} neighbors {neighbor} routes'\n        * 'show bgp neighbors {neighbor} routes'\n    ", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_bgp.py#L5729", "class": "ShowBgpNeighborsRoutes", "module_name": "show_bgp"}}, "show ip interface brief {interface}": {"ios": {"uid": "show_ip_interface_brief_interface", "schema": "{\n'interface': {\n  Any  (str) *: {\n    Optional  (str) vlan_id: {\n      Optional  (Any) Any  (str) *: {\n        'ip_address': <class 'str'>,\n        Optional  (str) protocol: <class 'str'>,\n        Optional  (str) method: <class 'str'>,\n        Optional  (str) status: <class 'str'>,\n        Optional  (str) interface_is_ok: <class 'str'>,\n        },\n      },\n    Optional  (str) protocol: <class 'str'>,\n    Optional  (str) interface_is_ok: <class 'str'>,\n    Optional  (str) ip_address: <class 'str'>,\n    Optional  (str) method: <class 'str'>,\n    Optional  (str) status: <class 'str'>,\n    },\n  },\n}", "doc": "Parser for: show ip interface brief", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_interface.py#L43", "class": "ShowIpInterfaceBrief", "module_name": "show_interface"}, "iosxe": {"uid": "show_ip_interface_brief_interface", "schema": "{\n'interface': {\n  Any  (str) *: {\n    Optional  (str) vlan_id: {\n      Optional  (Any) Any  (str) *: {\n        'ip_address': <class 'str'>,\n        Optional  (str) protocol: <class 'str'>,\n        Optional  (str) method: <class 'str'>,\n        Optional  (str) status: <class 'str'>,\n        Optional  (str) interface_is_ok: <class 'str'>,\n        },\n      },\n    Optional  (str) protocol: <class 'str'>,\n    Optional  (str) interface_is_ok: <class 'str'>,\n    Optional  (str) ip_address: <class 'str'>,\n    Optional  (str) method: <class 'str'>,\n    Optional  (str) status: <class 'str'>,\n    },\n  },\n}", "doc": "Parser for:\n     show ip interface brief\n     parser class implements detail parsing mechanisms for cli and yang output.\n    ", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_interface.py#L858", "class": "ShowIpInterfaceBrief", "module_name": "show_interface"}}, "show evpn ethernet-segment esi {esi}": {"iosxr": {"uid": "show_evpn_ethernet-segment_esi_esi", "schema": null, "doc": "Parser class for 'show evpn ethernet-segment' CLI.", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_evpn.py#L304", "class": "ShowEvpnEthernetSegment", "module_name": "show_evpn"}}, "show {af} rpf vrf {vrf} {mroute}": {"iosxe": {"uid": "show_af_rpf_vrf_vrf_mroute", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'source_address': <class 'str'>,\n    Optional  (str) source_host: <class 'str'>,\n    'path': {\n      Any  (str) *: {\n        Optional  (str) distance_preferred_lookup: <class 'bool'>,\n        Optional  (str) lookup_vrf: <class 'str'>,\n        'table_type': <class 'str'>,\n        Optional  (str) neighbor_host: <class 'str'>,\n        Optional  (str) originated_topology: <class 'str'>,\n        Optional  (str) admin_distance: <class 'str'>,\n        Optional  (str) route_mask: <class 'str'>,\n        Optional  (str) table_feature: <class 'str'>,\n        'neighbor_address': <class 'str'>,\n        Optional  (str) table_feature_instance: <class 'str'>,\n        'interface_name': <class 'str'>,\n        Optional  (str) recursion_count: <class 'int'>,\n        Optional  (str) lookup_topology: <class 'str'>,\n        Optional  (str) metric: <class 'int'>,\n        },\n      },\n    },\n  },\n}", "doc": "Parser for:\n        show ipv6 rpf <mroute address>\n        show ipv6 rpf vrf <vrf> <mroute address>", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_rpf.py#L271", "class": "ShowIpv6Rpf", "module_name": "show_rpf"}}, "show ip bgp all neighbors {neighbor}": {"iosxe": {"uid": "show_ip_bgp_all_neighbors_neighbor", "schema": "{\nOptional  (str) list_of_neighbors: <class 'list'>,\n'vrf': {\n  Any  (str) *: {\n    'neighbor': {\n      Any  (str) *: {\n        Optional  (str) bgp_event_timer: {\n          'starts': {\n            Any  (str) *: <class 'int'>,\n            },\n          'wakeups': {\n            Any  (str) *: <class 'int'>,\n            },\n          'next': {\n            Any  (str) *: <class 'str'>,\n            },\n          },\n        'address_family': {\n          Any  (str) *: {\n            Optional  (str) refresh_epoch: <class 'int'>,\n            Optional  (str) session_state: <class 'str'>,\n            Optional  (str) max_nlri: <class 'int'>,\n            Optional  (str) up_time: <class 'str'>,\n            Optional  (str) min_nlri: <class 'int'>,\n            Optional  (str) down_time: <class 'str'>,\n            Optional  (str) refresh_activity_counters: {\n              'sent': {\n                Any  (str) *: <class 'int'>,\n                },\n              'received': {\n                Any  (str) *: <class 'int'>,\n                },\n              },\n            Optional  (str) local_policy_denied_prefixes_counters: {\n              'inbound': {\n                Any  (str) *: Any  (str) *,\n                },\n              'outbound': {\n                Any  (str) *: Any  (str) *,\n                },\n              },\n            Optional  (str) last_detected_dynamic_slow_peer: <class 'str'>,\n            Optional  (str) last_read: <class 'str'>,\n            Optional  (str) dynamic_slow_peer_recovered: <class 'str'>,\n            Optional  (str) last_write: <class 'str'>,\n            Optional  (str) last_sent_refresh_start_of_rib: <class 'str'>,\n            Optional  (str) current_time: <class 'str'>,\n            Optional  (str) last_received_refresh_start_of_rib: <class 'str'>,\n            Optional  (str) bgp_table_version: <class 'int'>,\n            Optional  (str) last_sent_refresh_end_of_rib: <class 'str'>,\n            Optional  (str) neighbor_version: <class 'str'>,\n            Optional  (str) last_received_refresh_end_of_rib: <class 'str'>,\n            Optional  (str) output_queue_size: <class 'int'>,\n            Optional  (str) refresh_out: <class 'int'>,\n            Optional  (str) index: <class 'int'>,\n            Optional  (str) refresh_in: <class 'int'>,\n            Optional  (str) advertise_bit: <class 'int'>,\n            Optional  (str) route_reflector_client: <class 'bool'>,\n            Optional  (str) update_group_member: <class 'int'>,\n            Optional  (str) community_attribute_sent: <class 'bool'>,\n            Optional  (str) extended_community_attribute_sent: <class 'bool'>,\n            Optional  (str) prefix_activity_counters: {\n              'sent': {\n                Any  (str) *: Any  (str) *,\n                },\n              'received': {\n                Any  (str) *: Any  (str) *,\n                },\n              },\n            Optional  (str) suppress_ldp_signaling: <class 'bool'>,\n            Optional  (str) slow_peer_detection: <class 'bool'>,\n            Optional  (str) slow_peer_split_update_group_dynamic: <class 'bool'>,\n            },\n          },\n        'bgp_neighbor_counters': {\n          'messages': {\n            'sent': {\n              'notifications': <class 'int'>,\n              'route_refresh': <class 'int'>,\n              'total': <class 'int'>,\n              'opens': <class 'int'>,\n              'keepalives': <class 'int'>,\n              'updates': <class 'int'>,\n              },\n            'in_queue_depth': <class 'int'>,\n            'received': {\n              'notifications': <class 'int'>,\n              'route_refresh': <class 'int'>,\n              'total': <class 'int'>,\n              'opens': <class 'int'>,\n              'keepalives': <class 'int'>,\n              'updates': <class 'int'>,\n              },\n            'out_queue_depth': <class 'int'>,\n            },\n          },\n        'bgp_negotiated_keepalive_timers': {\n          'keepalive_interval': <class 'int'>,\n          'hold_time': <class 'int'>,\n          Optional  (str) min_holdtime: <class 'int'>,\n          },\n        'link': <class 'str'>,\n        'router_id': <class 'str'>,\n        Optional  (str) bgp_session_transport: {\n          Optional  (str) enqueued_packets: {\n            'mis_ordered_packet': <class 'int'>,\n            'input_packet': <class 'int'>,\n            'retransmit_packet': <class 'int'>,\n            },\n          Optional  (str) iss: <class 'int'>,\n          Optional  (str) snduna: <class 'int'>,\n          'connection': {\n            Optional  (str) reset_reason: <class 'str'>,\n            'dropped': <class 'int'>,\n            'established': <class 'int'>,\n            'last_reset': <class 'str'>,\n            },\n          Optional  (str) sndnxt: <class 'int'>,\n          Optional  (str) irs: <class 'int'>,\n          'address_tracking_status': <class 'str'>,\n          Optional  (str) sndwnd: <class 'int'>,\n          Optional  (str) snd_scale: <class 'int'>,\n          Optional  (str) maxrcvwnd: <class 'int'>,\n          Optional  (str) rcvwnd: <class 'int'>,\n          Optional  (str) rcv_scale: <class 'int'>,\n          Optional  (str) delrcvwnd: <class 'int'>,\n          Optional  (str) srtt: <class 'int'>,\n          'min_time_between_advertisement_runs': <class 'int'>,\n          Optional  (str) rtto: <class 'int'>,\n          Optional  (str) rtv: <class 'int'>,\n          Optional  (str) krtt: <class 'int'>,\n          Optional  (str) min_rtt: <class 'int'>,\n          Optional  (str) max_rtt: <class 'int'>,\n          Optional  (str) ack_hold: <class 'int'>,\n          Optional  (str) uptime: <class 'int'>,\n          Optional  (str) sent_idletime: <class 'int'>,\n          Optional  (str) receive_idletime: <class 'int'>,\n          Optional  (str) tcp_connection: <class 'bool'>,\n          Optional  (str) status_flags: <class 'str'>,\n          Optional  (str) option_flags: <class 'str'>,\n          Optional  (str) ip_precedence_value: <class 'int'>,\n          'tcp_path_mtu_discovery': <class 'str'>,\n          Optional  (str) transport: {\n            'local_port': <class 'str'>,\n            'local_host': <class 'str'>,\n            'foreign_port': <class 'str'>,\n            Optional  (str) mss: <class 'int'>,\n            'foreign_host': <class 'str'>,\n            },\n          Optional  (str) datagram: {\n            'datagram_sent': {\n              'second_congestion': <class 'int'>,\n              'with_data': <class 'int'>,\n              'retransmit': <class 'int'>,\n              'partialack': <class 'int'>,\n              'value': <class 'int'>,\n              'fastretransmit': <class 'int'>,\n              'total_data': <class 'int'>,\n              },\n            'datagram_received': {\n              'out_of_order': <class 'int'>,\n              'with_data': <class 'int'>,\n              'total_data': <class 'int'>,\n              'value': <class 'int'>,\n              },\n            },\n          Optional  (str) graceful_restart: <class 'str'>,\n          Optional  (str) packet_fast_path: <class 'int'>,\n          Optional  (str) gr_restart_time: <class 'int'>,\n          Optional  (str) packet_fast_processed: <class 'int'>,\n          Optional  (str) gr_stalepath_time: <class 'int'>,\n          Optional  (str) packet_slow_path: <class 'int'>,\n          Optional  (str) connection_state: <class 'str'>,\n          Optional  (str) fast_lock_acquisition_failures: <class 'int'>,\n          Optional  (str) io_status: <class 'int'>,\n          Optional  (str) lock_slow_path: <class 'int'>,\n          Optional  (str) unread_input_bytes: <class 'int'>,\n          Optional  (str) tcp_semaphore: <class 'str'>,\n          Optional  (str) ecn_connection: <class 'str'>,\n          Optional  (str) tcp_semaphore_status: <class 'str'>,\n          Optional  (str) minimum_incoming_ttl: <class 'int'>,\n          Optional  (str) sso: <class 'bool'>,\n          Optional  (str) outgoing_ttl: <class 'int'>,\n          Optional  (str) rcvnxt: <class 'int'>,\n          Optional  (str) connection_tableid: <class 'int'>,\n          'rib_route_ip': <class 'str'>,\n          Optional  (str) maximum_output_segment_queue_size: <class 'int'>,\n          },\n        'remote_as': <class 'int'>,\n        'bgp_version': <class 'int'>,\n        'session_state': <class 'str'>,\n        'shutdown': <class 'bool'>,\n        Optional  (str) local_as: <class 'int'>,\n        'bgp_negotiated_capabilities': {\n          'four_octets_asn': <class 'str'>,\n          Optional  (str) vpnv4_unicast: <class 'str'>,\n          Optional  (str) graceful_restart: <class 'str'>,\n          'route_refresh': <class 'str'>,\n          Optional  (str) vpnv6_unicast: <class 'str'>,\n          'stateful_switchover': <class 'str'>,\n          Optional  (str) ipv4_unicast: <class 'str'>,\n          Optional  (str) remote_restart_timer: <class 'int'>,\n          Optional  (str) ipv6_unicast: <class 'str'>,\n          Optional  (str) l2vpn_vpls: <class 'str'>,\n          Optional  (str) l2vpn_evpn: <class 'str'>,\n          Optional  (str) vpnv4_multicast: <class 'str'>,\n          Optional  (str) multisession: <class 'str'>,\n          Optional  (str) graceful_restart_af_advertised_by_peer: <class 'list'>,\n          Optional  (str) vpnv6_multicast: <class 'str'>,\n          'enhanced_refresh': <class 'str'>,\n          Optional  (str) mvpnv4_multicast: <class 'str'>,\n          Optional  (str) mvpnv6_multicast: <class 'str'>,\n          },\n        Optional  (str) description: <class 'str'>,\n        },\n      },\n    },\n  },\n}", "doc": " Parser for:\n        * 'show ip bgp all neighbors',\n        * 'show ip bgp all neighbors {neighbor}'\n        * 'show ip bgp {address_family} all neighbors'\n        * 'show ip bgp {address_family} all neighbors {neighbor}'\n    ", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_bgp.py#L3814", "class": "ShowIpBgpAllNeighbors", "module_name": "show_bgp"}}, "show monitor": {"iosxe": {"uid": "show_monitor", "schema": "{\n'session': {\n  Any  (str) *: {\n    Optional  (str) destination_erspan_id: <class 'str'>,\n    Optional  (str) origin_ip_address: <class 'str'>,\n    Optional  (str) source_ports: {\n      Any  (str) *: <class 'str'>,\n      },\n    Optional  (str) source_erspan_id: <class 'str'>,\n    'type': <class 'str'>,\n    Optional  (str) source_subinterfaces: {\n      Any  (str) *: <class 'str'>,\n      },\n    'status': <class 'str'>,\n    Optional  (str) source_rspan_vlan: <class 'int'>,\n    Optional  (str) dest_rspan_vlan: <class 'int'>,\n    Optional  (str) source_vlans: {\n      Any  (str) *: <class 'str'>,\n      },\n    Optional  (str) filter_access_group: <class 'int'>,\n    Optional  (str) destination_ports: <class 'str'>,\n    Optional  (str) destination_ip_address: <class 'str'>,\n    Optional  (str) source_ip_address: <class 'str'>,\n    Optional  (str) mtu: <class 'int'>,\n    },\n  },\n}", "doc": " Parser for\n      \"show monitor\"\n      \"show monitor session {session}\"\n      \"show monitor session all\"\n    ", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_monitor.py#L64", "class": "ShowMonitor", "module_name": "show_monitor"}}, "show mpls ldp neighbor detail": {"iosxe": {"uid": "show_mpls_ldp_neighbor_detail", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'peers': {\n      Any  (str) *: {\n        'label_space_id': {\n          Any  (str) *: {\n            Optional  (str) nsr: <class 'str'>,\n            'msg_rcvd': <class 'int'>,\n            'downstream': <class 'bool'>,\n            'tcp_connection': <class 'str'>,\n            Optional  (str) capabilities: {\n              'sent': {\n                'mldp_point_to_multipoint': <class 'str'>,\n                'typed_wildcard': <class 'str'>,\n                'ICCP': {\n                  'maj_ver': <class 'int'>,\n                  'type': <class 'str'>,\n                  'min_ver': <class 'int'>,\n                  },\n                'dynamic_anouncement': <class 'str'>,\n                'mldp_multipoint_to_multipoint': <class 'str'>,\n                },\n              Optional  (str) received: {\n                Optional  (str) typed_wildcard: <class 'str'>,\n                Optional  (str) mldp_point_to_multipoint: <class 'str'>,\n                Optional  (str) ICCP: {\n                  'maj_ver': <class 'int'>,\n                  'type': <class 'str'>,\n                  'min_ver': <class 'int'>,\n                  },\n                Optional  (str) mldp_multipoint_to_multipoint: <class 'str'>,\n                Optional  (str) dynamic_anouncement: <class 'str'>,\n                },\n              },\n            'msg_sent': <class 'int'>,\n            Optional  (str) last_tib_rev_sent: <class 'int'>,\n            'state': <class 'str'>,\n            'uptime': <class 'str'>,\n            'address_bound': <class 'list'>,\n            'local_ldp_ident': <class 'str'>,\n            Optional  (str) password: <class 'str'>,\n            Optional  (str) peer_holdtime_ms: <class 'str'>,\n            Optional  (str) ka_interval_ms: <class 'str'>,\n            Optional  (str) peer_state: <class 'str'>,\n            'ldp_discovery_sources': {\n              'interface': {\n                Any  (str) *: {\n                  'ip_address': {\n                    Any  (str) *: {\n                      Optional  (str) holdtime_ms: <class 'int'>,\n                      Optional  (str) hello_interval_ms: <class 'int'>,\n                      },\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "doc": "Parser for show mpls ldp neighbor detail,\n                  show mpls ldp neighbor vrf <vrf> detail", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_mpls.py#L1021", "class": "ShowMplsLdpNeighborDetail", "module_name": "show_mpls"}}, "show mrib vrf {vrf} {af} route": {"iosxr": {"uid": "show_mrib_vrf_vrf_af_route", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'address_family': {\n      Any  (str) *: {\n        'multicast_group': {\n          Any  (str) *: {\n            'source_address': {\n              Any  (str) *: {\n                Optional  (str) mt_slot: <class 'str'>,\n                'uptime': <class 'str'>,\n                Optional  (str) mvpn_tid: <class 'str'>,\n                Optional  (str) incoming_interface_list: {\n                  Any  (str) *: {\n                    'uptime': <class 'str'>,\n                    Optional  (str) rpf_nbr: <class 'str'>,\n                    'flags': <class 'str'>,\n                    },\n                  },\n                Optional  (str) outgoing_interface_list: {\n                  Any  (str) *: {\n                    'uptime': <class 'str'>,\n                    'flags': <class 'str'>,\n                    },\n                  },\n                Optional  (str) mvpn_remote_tid: <class 'str'>,\n                Optional  (str) flags: <class 'str'>,\n                Optional  (str) mvpn_payload: <class 'str'>,\n                Optional  (str) rpf_nbr: <class 'str'>,\n                Optional  (str) mdt_ifh: <class 'str'>,\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "doc": "\n    Parser for show mrib vrf <vrf> <address-family> route\n    For checking any output with the parser, below mandatory keys have to be in cli command.\n    - vrf\n    - af\n    ", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_mrib.py#L64", "class": "ShowMribVrfRoute", "module_name": "show_mrib"}}, "show ip mroute vrf {vrf} static": {"ios": {"uid": "show_ip_mroute_vrf_vrf_static", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'mroute': {\n      Any  (str) *: {\n        'path': {\n          Any  (str) *: {\n            Optional  (str) admin_distance: <class 'str'>,\n            'neighbor_address': <class 'str'>,\n            },\n          },\n        },\n      },\n    },\n  },\n}", "doc": "Parser for:\n            show ip mroute static\n            show ip mroute vrf <vrf> static\n        ", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_mcast.py#L35", "class": "ShowIpMrouteStatic", "module_name": "show_mcast"}, "iosxe": {"uid": "show_ip_mroute_vrf_vrf_static", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'mroute': {\n      Any  (str) *: {\n        'path': {\n          Any  (str) *: {\n            Optional  (str) admin_distance: <class 'str'>,\n            'neighbor_address': <class 'str'>,\n            },\n          },\n        },\n      },\n    },\n  },\n}", "doc": "Parser for:\n            show ip mroute static\n            show ip mroute vrf <vrf> static\n        ", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_mcast.py#L329", "class": "ShowIpMrouteStatic", "module_name": "show_mcast"}}, "show ipv6 interface": {"ios": {"uid": "show_ipv6_interface", "schema": "{\nAny  (str) *: {\n  'oper_status': <class 'str'>,\n  Optional  (str) addresses_config_method: <class 'str'>,\n  'enabled': <class 'bool'>,\n  Optional  (str) mtu: <class 'int'>,\n  Optional  (str) autoconf: <class 'bool'>,\n  Optional  (str) vrf: <class 'str'>,\n  'ipv6': {\n    Any  (str) *: {\n      'ip': <class 'str'>,\n      Optional  (str) prefix_length: <class 'str'>,\n      Optional  (str) autoconf: {\n        'valid_lifetime': <class 'int'>,\n        'preferred_lifetime': <class 'int'>,\n        },\n      Optional  (str) eui_64: <class 'bool'>,\n      Optional  (str) anycast: <class 'bool'>,\n      Optional  (str) virtual: <class 'bool'>,\n      Optional  (str) origin: <class 'str'>,\n      Optional  (str) status: <class 'str'>,\n      },\n    'enabled': <class 'bool'>,\n    Optional  (str) icmp: {\n      Optional  (str) redirects: <class 'bool'>,\n      Optional  (str) error_messages_limited: <class 'int'>,\n      Optional  (str) unreachables: <class 'str'>,\n      },\n    Optional  (str) unnumbered: {\n      'interface_ref': <class 'str'>,\n      },\n    Optional  (str) nd: {\n      Optional  (str) router_advertisements_interval: <class 'int'>,\n      Optional  (str) dad_attempts: <class 'int'>,\n      Optional  (str) ns_retransmit_interval: <class 'int'>,\n      Optional  (str) advertised_reachable_time: <class 'int'>,\n      Optional  (str) reachable_time: <class 'int'>,\n      Optional  (str) router_advertisements_live: <class 'int'>,\n      Optional  (str) advertised_retransmit_interval: <class 'int'>,\n      Optional  (str) using_time: <class 'int'>,\n      Optional  (str) dad_enabled: <class 'bool'>,\n      Optional  (str) advertised_retransmit_interval_unspecified: <class 'bool'>,\n      Optional  (str) advertised_default_router_preference: <class 'str'>,\n      Optional  (str) advertised_reachable_time_unspecified: <class 'bool'>,\n      },\n    },\n  Optional  (str) joined_group_addresses: <class 'list'>,\n  },\n}", "doc": "Parser for show ipv6 interface", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_interface.py#L63", "class": "ShowIpv6Interface", "module_name": "show_interface"}, "iosxe": {"uid": "show_ipv6_interface", "schema": "{\nAny  (str) *: {\n  'oper_status': <class 'str'>,\n  Optional  (str) addresses_config_method: <class 'str'>,\n  'enabled': <class 'bool'>,\n  Optional  (str) mtu: <class 'int'>,\n  Optional  (str) autoconf: <class 'bool'>,\n  Optional  (str) vrf: <class 'str'>,\n  'ipv6': {\n    Any  (str) *: {\n      'ip': <class 'str'>,\n      Optional  (str) prefix_length: <class 'str'>,\n      Optional  (str) autoconf: {\n        'valid_lifetime': <class 'int'>,\n        'preferred_lifetime': <class 'int'>,\n        },\n      Optional  (str) eui_64: <class 'bool'>,\n      Optional  (str) anycast: <class 'bool'>,\n      Optional  (str) virtual: <class 'bool'>,\n      Optional  (str) origin: <class 'str'>,\n      Optional  (str) status: <class 'str'>,\n      },\n    'enabled': <class 'bool'>,\n    Optional  (str) icmp: {\n      Optional  (str) redirects: <class 'bool'>,\n      Optional  (str) error_messages_limited: <class 'int'>,\n      Optional  (str) unreachables: <class 'str'>,\n      },\n    Optional  (str) unnumbered: {\n      'interface_ref': <class 'str'>,\n      },\n    Optional  (str) nd: {\n      Optional  (str) router_advertisements_interval: <class 'int'>,\n      Optional  (str) dad_attempts: <class 'int'>,\n      Optional  (str) ns_retransmit_interval: <class 'int'>,\n      Optional  (str) advertised_reachable_time: <class 'int'>,\n      Optional  (str) reachable_time: <class 'int'>,\n      Optional  (str) router_advertisements_live: <class 'int'>,\n      Optional  (str) advertised_retransmit_interval: <class 'int'>,\n      Optional  (str) using_time: <class 'int'>,\n      Optional  (str) dad_enabled: <class 'bool'>,\n      Optional  (str) advertised_retransmit_interval_unspecified: <class 'bool'>,\n      Optional  (str) advertised_default_router_preference: <class 'str'>,\n      Optional  (str) advertised_reachable_time_unspecified: <class 'bool'>,\n      },\n    },\n  Optional  (str) joined_group_addresses: <class 'list'>,\n  },\n}", "doc": "Parser for show ipv6 interface", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_interface.py#L2176", "class": "ShowIpv6Interface", "module_name": "show_interface"}}, "show dot1x all statistics": {"iosxe": {"uid": "show_dot1x_all_statistics", "schema": "{\n'interfaces': {\n  Any  (str) *: {\n    'interface': <class 'str'>,\n    'statistics': {\n      Optional  (str) txreqid: <class 'int'>,\n      'lastrxsrcmac': <class 'str'>,\n      'rxtotal': <class 'int'>,\n      'rxlenerr': <class 'int'>,\n      Optional  (str) rxrespid: <class 'int'>,\n      'rxversion': <class 'int'>,\n      'txtotal': <class 'int'>,\n      Optional  (str) rxstart: <class 'int'>,\n      Optional  (str) txlogoff: <class 'int'>,\n      'rxinvalid': <class 'int'>,\n      Optional  (str) txstart: <class 'int'>,\n      Optional  (str) rxlogoff: <class 'int'>,\n      Optional  (str) txresp: <class 'int'>,\n      Optional  (str) rxresp: <class 'int'>,\n      Optional  (str) txreq: <class 'int'>,\n      Optional  (str) rxreq: <class 'int'>,\n      },\n    },\n  },\n}", "doc": "Parser for show dot1x all statistics", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_dot1x.py#L304", "class": "ShowDot1xAllStatistics", "module_name": "show_dot1x"}}, "show ip bgp {address_family} vrf {vrf} neighbors {neighbor}": {"iosxe": {"uid": "show_ip_bgp_address_family_vrf_vrf_neighbors_neighbor", "schema": "{\nOptional  (str) list_of_neighbors: <class 'list'>,\n'vrf': {\n  Any  (str) *: {\n    'neighbor': {\n      Any  (str) *: {\n        Optional  (str) bgp_event_timer: {\n          'starts': {\n            Any  (str) *: <class 'int'>,\n            },\n          'wakeups': {\n            Any  (str) *: <class 'int'>,\n            },\n          'next': {\n            Any  (str) *: <class 'str'>,\n            },\n          },\n        'address_family': {\n          Any  (str) *: {\n            Optional  (str) refresh_epoch: <class 'int'>,\n            Optional  (str) session_state: <class 'str'>,\n            Optional  (str) max_nlri: <class 'int'>,\n            Optional  (str) up_time: <class 'str'>,\n            Optional  (str) min_nlri: <class 'int'>,\n            Optional  (str) down_time: <class 'str'>,\n            Optional  (str) refresh_activity_counters: {\n              'sent': {\n                Any  (str) *: <class 'int'>,\n                },\n              'received': {\n                Any  (str) *: <class 'int'>,\n                },\n              },\n            Optional  (str) local_policy_denied_prefixes_counters: {\n              'inbound': {\n                Any  (str) *: Any  (str) *,\n                },\n              'outbound': {\n                Any  (str) *: Any  (str) *,\n                },\n              },\n            Optional  (str) last_detected_dynamic_slow_peer: <class 'str'>,\n            Optional  (str) last_read: <class 'str'>,\n            Optional  (str) dynamic_slow_peer_recovered: <class 'str'>,\n            Optional  (str) last_write: <class 'str'>,\n            Optional  (str) last_sent_refresh_start_of_rib: <class 'str'>,\n            Optional  (str) current_time: <class 'str'>,\n            Optional  (str) last_received_refresh_start_of_rib: <class 'str'>,\n            Optional  (str) bgp_table_version: <class 'int'>,\n            Optional  (str) last_sent_refresh_end_of_rib: <class 'str'>,\n            Optional  (str) neighbor_version: <class 'str'>,\n            Optional  (str) last_received_refresh_end_of_rib: <class 'str'>,\n            Optional  (str) output_queue_size: <class 'int'>,\n            Optional  (str) refresh_out: <class 'int'>,\n            Optional  (str) index: <class 'int'>,\n            Optional  (str) refresh_in: <class 'int'>,\n            Optional  (str) advertise_bit: <class 'int'>,\n            Optional  (str) route_reflector_client: <class 'bool'>,\n            Optional  (str) update_group_member: <class 'int'>,\n            Optional  (str) community_attribute_sent: <class 'bool'>,\n            Optional  (str) extended_community_attribute_sent: <class 'bool'>,\n            Optional  (str) prefix_activity_counters: {\n              'sent': {\n                Any  (str) *: Any  (str) *,\n                },\n              'received': {\n                Any  (str) *: Any  (str) *,\n                },\n              },\n            Optional  (str) suppress_ldp_signaling: <class 'bool'>,\n            Optional  (str) slow_peer_detection: <class 'bool'>,\n            Optional  (str) slow_peer_split_update_group_dynamic: <class 'bool'>,\n            },\n          },\n        'bgp_neighbor_counters': {\n          'messages': {\n            'sent': {\n              'notifications': <class 'int'>,\n              'route_refresh': <class 'int'>,\n              'total': <class 'int'>,\n              'opens': <class 'int'>,\n              'keepalives': <class 'int'>,\n              'updates': <class 'int'>,\n              },\n            'in_queue_depth': <class 'int'>,\n            'received': {\n              'notifications': <class 'int'>,\n              'route_refresh': <class 'int'>,\n              'total': <class 'int'>,\n              'opens': <class 'int'>,\n              'keepalives': <class 'int'>,\n              'updates': <class 'int'>,\n              },\n            'out_queue_depth': <class 'int'>,\n            },\n          },\n        'bgp_negotiated_keepalive_timers': {\n          'keepalive_interval': <class 'int'>,\n          'hold_time': <class 'int'>,\n          Optional  (str) min_holdtime: <class 'int'>,\n          },\n        'link': <class 'str'>,\n        'router_id': <class 'str'>,\n        Optional  (str) bgp_session_transport: {\n          Optional  (str) enqueued_packets: {\n            'mis_ordered_packet': <class 'int'>,\n            'input_packet': <class 'int'>,\n            'retransmit_packet': <class 'int'>,\n            },\n          Optional  (str) iss: <class 'int'>,\n          Optional  (str) snduna: <class 'int'>,\n          'connection': {\n            Optional  (str) reset_reason: <class 'str'>,\n            'dropped': <class 'int'>,\n            'established': <class 'int'>,\n            'last_reset': <class 'str'>,\n            },\n          Optional  (str) sndnxt: <class 'int'>,\n          Optional  (str) irs: <class 'int'>,\n          'address_tracking_status': <class 'str'>,\n          Optional  (str) sndwnd: <class 'int'>,\n          Optional  (str) snd_scale: <class 'int'>,\n          Optional  (str) maxrcvwnd: <class 'int'>,\n          Optional  (str) rcvwnd: <class 'int'>,\n          Optional  (str) rcv_scale: <class 'int'>,\n          Optional  (str) delrcvwnd: <class 'int'>,\n          Optional  (str) srtt: <class 'int'>,\n          'min_time_between_advertisement_runs': <class 'int'>,\n          Optional  (str) rtto: <class 'int'>,\n          Optional  (str) rtv: <class 'int'>,\n          Optional  (str) krtt: <class 'int'>,\n          Optional  (str) min_rtt: <class 'int'>,\n          Optional  (str) max_rtt: <class 'int'>,\n          Optional  (str) ack_hold: <class 'int'>,\n          Optional  (str) uptime: <class 'int'>,\n          Optional  (str) sent_idletime: <class 'int'>,\n          Optional  (str) receive_idletime: <class 'int'>,\n          Optional  (str) tcp_connection: <class 'bool'>,\n          Optional  (str) status_flags: <class 'str'>,\n          Optional  (str) option_flags: <class 'str'>,\n          Optional  (str) ip_precedence_value: <class 'int'>,\n          'tcp_path_mtu_discovery': <class 'str'>,\n          Optional  (str) transport: {\n            'local_port': <class 'str'>,\n            'local_host': <class 'str'>,\n            'foreign_port': <class 'str'>,\n            Optional  (str) mss: <class 'int'>,\n            'foreign_host': <class 'str'>,\n            },\n          Optional  (str) datagram: {\n            'datagram_sent': {\n              'second_congestion': <class 'int'>,\n              'with_data': <class 'int'>,\n              'retransmit': <class 'int'>,\n              'partialack': <class 'int'>,\n              'value': <class 'int'>,\n              'fastretransmit': <class 'int'>,\n              'total_data': <class 'int'>,\n              },\n            'datagram_received': {\n              'out_of_order': <class 'int'>,\n              'with_data': <class 'int'>,\n              'total_data': <class 'int'>,\n              'value': <class 'int'>,\n              },\n            },\n          Optional  (str) graceful_restart: <class 'str'>,\n          Optional  (str) packet_fast_path: <class 'int'>,\n          Optional  (str) gr_restart_time: <class 'int'>,\n          Optional  (str) packet_fast_processed: <class 'int'>,\n          Optional  (str) gr_stalepath_time: <class 'int'>,\n          Optional  (str) packet_slow_path: <class 'int'>,\n          Optional  (str) connection_state: <class 'str'>,\n          Optional  (str) fast_lock_acquisition_failures: <class 'int'>,\n          Optional  (str) io_status: <class 'int'>,\n          Optional  (str) lock_slow_path: <class 'int'>,\n          Optional  (str) unread_input_bytes: <class 'int'>,\n          Optional  (str) tcp_semaphore: <class 'str'>,\n          Optional  (str) ecn_connection: <class 'str'>,\n          Optional  (str) tcp_semaphore_status: <class 'str'>,\n          Optional  (str) minimum_incoming_ttl: <class 'int'>,\n          Optional  (str) sso: <class 'bool'>,\n          Optional  (str) outgoing_ttl: <class 'int'>,\n          Optional  (str) rcvnxt: <class 'int'>,\n          Optional  (str) connection_tableid: <class 'int'>,\n          'rib_route_ip': <class 'str'>,\n          Optional  (str) maximum_output_segment_queue_size: <class 'int'>,\n          },\n        'remote_as': <class 'int'>,\n        'bgp_version': <class 'int'>,\n        'session_state': <class 'str'>,\n        'shutdown': <class 'bool'>,\n        Optional  (str) local_as: <class 'int'>,\n        'bgp_negotiated_capabilities': {\n          'four_octets_asn': <class 'str'>,\n          Optional  (str) vpnv4_unicast: <class 'str'>,\n          Optional  (str) graceful_restart: <class 'str'>,\n          'route_refresh': <class 'str'>,\n          Optional  (str) vpnv6_unicast: <class 'str'>,\n          'stateful_switchover': <class 'str'>,\n          Optional  (str) ipv4_unicast: <class 'str'>,\n          Optional  (str) remote_restart_timer: <class 'int'>,\n          Optional  (str) ipv6_unicast: <class 'str'>,\n          Optional  (str) l2vpn_vpls: <class 'str'>,\n          Optional  (str) l2vpn_evpn: <class 'str'>,\n          Optional  (str) vpnv4_multicast: <class 'str'>,\n          Optional  (str) multisession: <class 'str'>,\n          Optional  (str) graceful_restart_af_advertised_by_peer: <class 'list'>,\n          Optional  (str) vpnv6_multicast: <class 'str'>,\n          'enhanced_refresh': <class 'str'>,\n          Optional  (str) mvpnv4_multicast: <class 'str'>,\n          Optional  (str) mvpnv6_multicast: <class 'str'>,\n          },\n        Optional  (str) description: <class 'str'>,\n        },\n      },\n    },\n  },\n}", "doc": " Parser for:\n        * 'show ip bgp neighbors'\n        * 'show ip bgp neighbors {neighbor}'\n        * 'show ip bgp {address_family} neighbors'\n        * 'show ip bgp {address_family} neighbors {neighbor}'\n        * 'show ip bgp {address_family} vrf {vrf} neighbors'\n        * 'show ip bgp {address_family} vrf {vrf} neighbors {neighbor}'\n    ", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_bgp.py#L3872", "class": "ShowIpBgpNeighbors", "module_name": "show_bgp"}}, "show spanning-tree summary": {"ios": {"uid": "show_spanning-tree_summary", "schema": "{\n'bpdu_guard': <class 'bool'>,\nOptional  (str) root_bridge_for: <class 'str'>,\nOptional  (str) pvst_simulation: <class 'bool'>,\nOptional  (str) etherchannel_misconfig_guard: <class 'bool'>,\n'total_statistics': {\n  'listenings': <class 'int'>,\n  'stp_actives': <class 'int'>,\n  'forwardings': <class 'int'>,\n  Optional  (str) num_of_msts: <class 'int'>,\n  'blockings': <class 'int'>,\n  Optional  (str) num_of_vlans: <class 'int'>,\n  'learnings': <class 'int'>,\n  },\nOptional  (str) mode: {\n  Any  (str) *: {\n    Any  (str) *: {\n      'learning': <class 'int'>,\n      'stp_active': <class 'int'>,\n      'forwarding': <class 'int'>,\n      'blocking': <class 'int'>,\n      'listening': <class 'int'>,\n      },\n    },\n  },\nOptional  (str) configured_pathcost: {\n  Optional  (str) operational_value: <class 'str'>,\n  'method': <class 'str'>,\n  },\nOptional  (str) extended_system_id: <class 'bool'>,\nOptional  (str) portfast_default: <class 'bool'>,\n'uplink_fast': <class 'bool'>,\nOptional  (str) bpdu_filter: <class 'bool'>,\nOptional  (str) bridge_assurance: <class 'bool'>,\n'backbone_fast': <class 'bool'>,\nOptional  (str) loop_guard: <class 'bool'>,\n}", "doc": "Parser for show show spanning-tree summary", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_spanning_tree.py#L25", "class": "ShowSpanningTreeSummary", "module_name": "show_spanning_tree"}, "iosxe": {"uid": "show_spanning-tree_summary", "schema": "{\n'bpdu_guard': <class 'bool'>,\nOptional  (str) root_bridge_for: <class 'str'>,\nOptional  (str) pvst_simulation: <class 'bool'>,\nOptional  (str) etherchannel_misconfig_guard: <class 'bool'>,\n'total_statistics': {\n  'listenings': <class 'int'>,\n  'stp_actives': <class 'int'>,\n  'forwardings': <class 'int'>,\n  Optional  (str) num_of_msts: <class 'int'>,\n  'blockings': <class 'int'>,\n  Optional  (str) num_of_vlans: <class 'int'>,\n  'learnings': <class 'int'>,\n  },\nOptional  (str) mode: {\n  Any  (str) *: {\n    Any  (str) *: {\n      'learning': <class 'int'>,\n      'stp_active': <class 'int'>,\n      'forwarding': <class 'int'>,\n      'blocking': <class 'int'>,\n      'listening': <class 'int'>,\n      },\n    },\n  },\nOptional  (str) configured_pathcost: {\n  Optional  (str) operational_value: <class 'str'>,\n  'method': <class 'str'>,\n  },\nOptional  (str) extended_system_id: <class 'bool'>,\nOptional  (str) portfast_default: <class 'bool'>,\n'uplink_fast': <class 'bool'>,\nOptional  (str) bpdu_filter: <class 'bool'>,\nOptional  (str) bridge_assurance: <class 'bool'>,\n'backbone_fast': <class 'bool'>,\nOptional  (str) loop_guard: <class 'bool'>,\n}", "doc": "Parser for show show spanning-tree summary", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_spanning_tree.py#L67", "class": "ShowSpanningTreeSummary", "module_name": "show_spanning_tree"}}, "show ip multicast vrf {vrf}": {"ios": {"uid": "show_ip_multicast_vrf_vrf", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'fallback_group_mode': <class 'str'>,\n    'multipath': <class 'bool'>,\n    'route_limit': <class 'str'>,\n    'enable': <class 'bool'>,\n    'multicast_bound_with_filter_autorp': <class 'int'>,\n    'mo_frr': <class 'bool'>,\n    },\n  },\n}", "doc": "Parser for:\n        show ip multicast\n        show ip multicast vrf <vrf>\n    ", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_mcast.py#L42", "class": "ShowIpMulticast", "module_name": "show_mcast"}, "iosxe": {"uid": "show_ip_multicast_vrf_vrf", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'fallback_group_mode': <class 'str'>,\n    'multipath': <class 'bool'>,\n    'route_limit': <class 'str'>,\n    'enable': <class 'bool'>,\n    'multicast_bound_with_filter_autorp': <class 'int'>,\n    'mo_frr': <class 'bool'>,\n    },\n  },\n}", "doc": "Parser for:\n        show ip multicast\n        show ip multicast vrf <vrf>\n    ", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_mcast.py#L419", "class": "ShowIpMulticast", "module_name": "show_mcast"}}, "show mpls ldp discovery {all}": {"iosxe": {"uid": "show_mpls_ldp_discovery_all", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'local_ldp_identifier': {\n      Any  (str) *: {\n        'discovery_sources': {\n          'interfaces': {\n            Any  (str) *: {\n              Optional  (str) recv: <class 'bool'>,\n              Any  (str) *: {\n                Any  (str) *: {\n                  Optional  (str) proposed_peer: <class 'int'>,\n                  Optional  (str) transport_ip_address: <class 'str'>,\n                  Optional  (str) reachable_via: <class 'str'>,\n                  Optional  (str) source_ip_address: <class 'str'>,\n                  Optional  (str) password: <class 'str'>,\n                  Optional  (str) holdtime_sec: <class 'int'>,\n                  Optional  (str) clients: <class 'str'>,\n                  Optional  (str) proposed_local: <class 'int'>,\n                  },\n                },\n              Optional  (str) hello_interval_ms: <class 'int'>,\n              'session': <class 'str'>,\n              Optional  (str) transport_ip_addr: <class 'str'>,\n              Optional  (str) xmit: <class 'bool'>,\n              Optional  (str) enabled: <class 'str'>,\n              },\n            },\n          },\n        Optional  (str) targeted_hellos: {\n          Any  (str) *: {\n            Any  (str) *: {\n              Optional  (str) xmit: <class 'bool'>,\n              Optional  (str) recv: <class 'bool'>,\n              'active': <class 'bool'>,\n              'session': <class 'str'>,\n              Optional  (str) ldp_id: <class 'str'>,\n              Optional  (str) tdp_id: <class 'str'>,\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "doc": "\n        Parser for show mpls ldp discovery\n                   show mpls ldp discovery all\n                   show mpls ldp discovery all detail\n                   show mpls ldp discovery detail\n                   show mpls ldp discovery vrf <vrf>\n                   show mpls ldp discovery vrf <vrf> detail\n       ", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_mpls.py#L1354", "class": "ShowMplsLdpDiscovery", "module_name": "show_mpls"}}, "show bgp ipv4 mvpn route-type {route_type}": {"nxos": {"uid": "show_bgp_ipv4_mvpn_route-type_route_type", "schema": "{\n'instance': {\n  Any  (str) *: {\n    'vrf': {\n      Any  (str) *: {\n        'vrf_name_out': <class 'str'>,\n        'address_family': {\n          Any  (str) *: {\n            'router_id': <class 'str'>,\n            'table_version': <class 'str'>,\n            'af_name': <class 'str'>,\n            'rd': {\n              Any  (str) *: {\n                'prefix': {\n                  Any  (str) *: {\n                    'path': {\n                      Any  (str) *: {\n                        'origin': <class 'str'>,\n                        'pathnr': <class 'int'>,\n                        Optional  (str) bestcode: <class 'str'>,\n                        Optional  (str) statuscode: <class 'str'>,\n                        'localpref': <class 'str'>,\n                        'ipnexthop': <class 'str'>,\n                        Optional  (str) typecode: <class 'str'>,\n                        'weight': <class 'str'>,\n                        },\n                      },\n                    'nonipprefix': <class 'str'>,\n                    },\n                  },\n                Optional  (str) rd_vrf: <class 'str'>,\n                Optional  (str) rd_val: <class 'str'>,\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "doc": "Parser for:\n               show bgp ipv4 mvpn\n               show bgp ipv4 mvpn route-type <route_type>\n               show bgp ipv4 mvpn route-type <route_type> vrf <vrf>\n               show bgp ipv4 mvpn route-type <route_type> vrf all", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_bgp.py#L11020", "class": "ShowBgpIpMvpnRouteType", "module_name": "show_bgp"}}, "show processes cpu sorted": {"ios": {"uid": "show_processes_cpu_sorted", "schema": "{\nOptional  (str) nonzero_cpu_processes: <class 'list'>,\nOptional  (str) five_sec_cpu_total: <class 'int'>,\nOptional  (str) one_min_cpu: <class 'int'>,\nOptional  (str) sort: {\n  Any  (str) *: {\n    'pid': <class 'int'>,\n    'tty': <class 'int'>,\n    'five_sec_cpu': <class 'float'>,\n    'five_min_cpu': <class 'float'>,\n    'invoked': <class 'int'>,\n    'one_min_cpu': <class 'float'>,\n    'process': <class 'str'>,\n    'runtime': <class 'int'>,\n    'usecs': <class 'int'>,\n    },\n  },\nOptional  (str) five_min_cpu: <class 'int'>,\nOptional  (str) five_sec_cpu_interrupts: <class 'int'>,\nOptional  (str) zero_cpu_processes: <class 'list'>,\n}", "doc": "Parser for show processes cpu sorted\n                  show processes cpu sorted <1min|5min|5sec>\n                  show processes cpu sorted | include <WORD>\n                  show processes cpu sorted <1min|5min|5sec> | include <WORD>\n    ", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_platform.py#L295", "class": "ShowProcessesCpuSorted", "module_name": "show_platform"}, "iosxe": {"uid": "show_processes_cpu_sorted", "schema": "{\nOptional  (str) nonzero_cpu_processes: <class 'list'>,\nOptional  (str) five_sec_cpu_total: <class 'int'>,\nOptional  (str) one_min_cpu: <class 'int'>,\nOptional  (str) sort: {\n  Any  (str) *: {\n    'pid': <class 'int'>,\n    'tty': <class 'int'>,\n    'five_sec_cpu': <class 'float'>,\n    'five_min_cpu': <class 'float'>,\n    'invoked': <class 'int'>,\n    'one_min_cpu': <class 'float'>,\n    'process': <class 'str'>,\n    'runtime': <class 'int'>,\n    'usecs': <class 'int'>,\n    },\n  },\nOptional  (str) five_min_cpu: <class 'int'>,\nOptional  (str) five_sec_cpu_interrupts: <class 'int'>,\nOptional  (str) zero_cpu_processes: <class 'list'>,\n}", "doc": "Parser for show processes cpu sorted\n                  show processes cpu sorted <1min|5min|5sec>\n                  show processes cpu sorted | include <WORD>\n                  show processes cpu sorted <1min|5min|5sec> | include <WORD>", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_platform.py#L2100", "class": "ShowProcessesCpuSorted", "module_name": "show_platform"}}, "show l2vpn mac-learning {mac_type} all location {location}": {"iosxr": {"uid": "show_l2vpn_mac-learning_mac_type_all_location_location", "schema": null, "doc": "Parser for show l2vpn mac-learning <mac_type> all location <location>", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_l2vpn.py#L17", "class": "ShowL2vpnMacLearning", "module_name": "show_l2vpn"}}, "show ipv6 static-route": {"nxos": {"uid": "show_ipv6_static-route", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    Optional  (str) address_family: {\n      Any  (str) *: {\n        Optional  (str) routes: {\n          Any  (str) *: {\n            Optional  (str) route: <class 'str'>,\n            Optional  (str) next_hop: {\n              Optional  (str) next_hop_list: {\n                Any  (str) *: {\n                  Optional  (str) bfd_enabled: <class 'bool'>,\n                  Optional  (str) next_hop: <class 'str'>,\n                  Optional  (str) preference: <class 'int'>,\n                  Optional  (str) next_hop_netmask: <class 'str'>,\n                  Optional  (str) resolved_tid: <class 'int'>,\n                  Optional  (str) index: <class 'int'>,\n                  Optional  (str) outgoing_interface: <class 'str'>,\n                  Optional  (str) next_hop_vrf: <class 'str'>,\n                  Optional  (str) rnh_active: <class 'bool'>,\n                  },\n                },\n              Optional  (str) outgoing_interface: {\n                Any  (str) *: {\n                  Optional  (str) rnh_active: <class 'bool'>,\n                  Optional  (str) preference: <class 'int'>,\n                  Optional  (str) bfd_enabled: <class 'bool'>,\n                  Optional  (str) resolved_tid: <class 'int'>,\n                  Optional  (str) next_hop_vrf: <class 'str'>,\n                  Optional  (str) outgoing_interface: <class 'str'>,\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "doc": "Parser for:\n        show ipv6 static-route\n        show ipv6 static-route vrf <vrf>\n        show ipv6 static-route vrf all", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_static_routing.py#L260", "class": "ShowIpv6StaticRoute", "module_name": "show_static_routing"}}, "show mrib vrf {vrf} ipv4 route summary": {"iosxr": {"uid": "show_mrib_vrf_vrf_ipv4_route_summary", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'address_family': {\n      Any  (str) *: {\n        'no_g_routes': <class 'int'>,\n        'no_route_x_interfaces': <class 'int'>,\n        'no_s_g_routes': <class 'int'>,\n        'total_no_interfaces': <class 'int'>,\n        'no_group_ranges': <class 'int'>,\n        },\n      },\n    },\n  },\n}", "doc": "\n    Parser for show mrib vrf <vrf> <address-family> route summary\n    For checking any output with the parser, below mandatory keys have to be in cli command.\n    - vrf\n    - af (optional)\n    ", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_mrib.py#L267", "class": "ShowMribVrfRouteSummary", "module_name": "show_mrib"}}, "show ipv6 static detail": {"ios": {"uid": "show_ipv6_static_detail", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    Optional  (str) address_family: {\n      Any  (str) *: {\n        Optional  (str) routes: {\n          Any  (str) *: {\n            Optional  (str) next_hop: {\n              Optional  (str) outgoing_interface: {\n                Any  (str) *: {\n                  Optional  (str) preference: <class 'int'>,\n                  Optional  (str) outgoing_interface: <class 'str'>,\n                  Optional  (str) tag: <class 'int'>,\n                  Optional  (str) active: <class 'bool'>,\n                  },\n                },\n              Optional  (str) next_hop_list: {\n                Any  (str) *: {\n                  Optional  (str) track: <class 'int'>,\n                  Optional  (str) next_hop: <class 'str'>,\n                  Optional  (str) index: <class 'int'>,\n                  Optional  (str) track_state: <class 'str'>,\n                  Optional  (str) active: <class 'bool'>,\n                  Optional  (str) outgoing_interface: <class 'str'>,\n                  Optional  (str) resolved_outgoing_interface: <class 'str'>,\n                  Optional  (str) resolved_paths_number: <class 'int'>,\n                  Optional  (str) rejected_by: <class 'str'>,\n                  Optional  (str) max_depth: <class 'int'>,\n                  Optional  (str) preference: <class 'int'>,\n                  Optional  (str) tag: <class 'int'>,\n                  },\n                },\n              },\n            Optional  (str) route: <class 'str'>,\n            },\n          },\n        },\n      },\n    },\n  },\n}", "doc": null, "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_static_routing.py#L12", "class": "ShowIpv6StaticDetail", "module_name": "show_static_routing"}, "iosxe": {"uid": "show_ipv6_static_detail", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    Optional  (str) address_family: {\n      Any  (str) *: {\n        Optional  (str) routes: {\n          Any  (str) *: {\n            Optional  (str) next_hop: {\n              Optional  (str) outgoing_interface: {\n                Any  (str) *: {\n                  Optional  (str) preference: <class 'int'>,\n                  Optional  (str) outgoing_interface: <class 'str'>,\n                  Optional  (str) tag: <class 'int'>,\n                  Optional  (str) active: <class 'bool'>,\n                  },\n                },\n              Optional  (str) next_hop_list: {\n                Any  (str) *: {\n                  Optional  (str) track: <class 'int'>,\n                  Optional  (str) next_hop: <class 'str'>,\n                  Optional  (str) index: <class 'int'>,\n                  Optional  (str) track_state: <class 'str'>,\n                  Optional  (str) active: <class 'bool'>,\n                  Optional  (str) outgoing_interface: <class 'str'>,\n                  Optional  (str) resolved_outgoing_interface: <class 'str'>,\n                  Optional  (str) resolved_paths_number: <class 'int'>,\n                  Optional  (str) rejected_by: <class 'str'>,\n                  Optional  (str) max_depth: <class 'int'>,\n                  Optional  (str) preference: <class 'int'>,\n                  Optional  (str) tag: <class 'int'>,\n                  },\n                },\n              },\n            Optional  (str) route: <class 'str'>,\n            },\n          },\n        },\n      },\n    },\n  },\n}", "doc": "Parser for:\n       show ipv6 static detail\n       show ipv6 static vrf <vrf> detail\n    ", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_static_routing.py#L237", "class": "ShowIpv6StaticDetail", "module_name": "show_static_routing"}}, "show platform hardware qfp {status} statistics drop | exclude _0_": {"ios": {"uid": "show_platform_hardware_qfp_status_statistics_drop___exclude__0_", "schema": "{\n'global_drop_stats': {\n  Any  (str) *: {\n    'octets': <class 'int'>,\n    'packets': <class 'int'>,\n    },\n  },\n}", "doc": "Parser for show platform hardware qfp active statistics drop\n                  show platform hardware qfp standby statistics drop", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_platform.py#L395", "class": "ShowPlatformHardwareQfpStatisticsDrop", "module_name": "show_platform"}, "iosxe": {"uid": "show_platform_hardware_qfp_status_statistics_drop___exclude__0_", "schema": "{\n'global_drop_stats': {\n  Any  (str) *: {\n    'octets': <class 'int'>,\n    'packets': <class 'int'>,\n    },\n  },\n}", "doc": "Parser for show platform hardware qfp active statistics drop\n                  show platform hardware qfp standby statistics drop", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_platform.py#L4249", "class": "ShowPlatformHardwareQfpStatisticsDrop", "module_name": "show_platform"}}, "show ipv6 mld groups vrf {vrf}": {"nxos": {"uid": "show_ipv6_mld_groups_vrf_vrf", "schema": "{\n'vrfs': {\n  Any  (str) *: {\n    'groups_count': <class 'int'>,\n    Optional  (str) interface: {\n      Any  (str) *: {\n        'group': {\n          Any  (str) *: {\n            Optional  (str) expire: <class 'str'>,\n            Optional  (str) type: <class 'str'>,\n            Optional  (str) up_time: <class 'str'>,\n            Optional  (str) source: {\n              Any  (str) *: {\n                'type': <class 'str'>,\n                'expire': <class 'str'>,\n                'last_reporter': <class 'str'>,\n                'up_time': <class 'str'>,\n                },\n              },\n            Optional  (str) last_reporter: <class 'str'>,\n            },\n          },\n        },\n      },\n    },\n  },\n}", "doc": "Parser for:\n        show ipv6 mld groups\n        show ipv6 mld groups vrf all\n        show ipv6 mld groups vrf <vrf>", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_mld.py#L467", "class": "ShowIpv6MldGroups", "module_name": "show_mld"}}, "show monitor session all": {"iosxe": {"uid": "show_monitor_session_all", "schema": "{\n'session': {\n  Any  (str) *: {\n    Optional  (str) destination_erspan_id: <class 'str'>,\n    Optional  (str) origin_ip_address: <class 'str'>,\n    Optional  (str) source_ports: {\n      Any  (str) *: <class 'str'>,\n      },\n    Optional  (str) source_erspan_id: <class 'str'>,\n    'type': <class 'str'>,\n    Optional  (str) source_subinterfaces: {\n      Any  (str) *: <class 'str'>,\n      },\n    'status': <class 'str'>,\n    Optional  (str) source_rspan_vlan: <class 'int'>,\n    Optional  (str) dest_rspan_vlan: <class 'int'>,\n    Optional  (str) source_vlans: {\n      Any  (str) *: <class 'str'>,\n      },\n    Optional  (str) filter_access_group: <class 'int'>,\n    Optional  (str) destination_ports: <class 'str'>,\n    Optional  (str) destination_ip_address: <class 'str'>,\n    Optional  (str) source_ip_address: <class 'str'>,\n    Optional  (str) mtu: <class 'int'>,\n    },\n  },\n}", "doc": " Parser for\n      \"show monitor\"\n      \"show monitor session {session}\"\n      \"show monitor session all\"\n    ", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_monitor.py#L64", "class": "ShowMonitor", "module_name": "show_monitor"}}, "show ip bgp {address_family} all": {"iosxe": {"uid": "show_ip_bgp_address_family_all", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'address_family': {\n      Any  (str) *: {\n        Optional  (str) pfx_limit: <class 'int'>,\n        Optional  (str) route_distinguisher: <class 'str'>,\n        Optional  (str) default_vrf: <class 'str'>,\n        Optional  (str) bgp_table_version: <class 'int'>,\n        Optional  (str) af_private_import_to_address_family: <class 'str'>,\n        Optional  (str) route_identifier: <class 'str'>,\n        Optional  (str) pfx_count: <class 'int'>,\n        Optional  (str) routes: {\n          Optional  (Any) Any  (str) *: {\n            Optional  (str) index: {\n              Optional  (Any) Any  (str) *: {\n                Optional  (str) weight: <class 'int'>,\n                Optional  (str) next_hop: <class 'str'>,\n                Optional  (str) path: <class 'str'>,\n                Optional  (str) status_codes: <class 'str'>,\n                Optional  (str) origin_codes: <class 'str'>,\n                Optional  (str) metric: <class 'int'>,\n                Optional  (str) localpref: <class 'int'>,\n                },\n              },\n            },\n          },\n        Optional  (str) vrf_route_identifier: <class 'str'>,\n        },\n      },\n    },\n  },\n}", "doc": " Parser for:\n        * 'show ip bgp all'\n        * 'show ip bgp {address_family} all'\n    ", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_bgp.py#L598", "class": "ShowIpBgpAll", "module_name": "show_bgp"}}, "show lisp all service {service}": {"iosxe": {"uid": "show_lisp_all_service_service", "schema": "{\n'lisp_router_instances': {\n  Any  (str) *: {\n    Optional  (str) service: {\n      Any  (str) *: {\n        'locator_status_algorithms': {\n          'lsb_reports': <class 'str'>,\n          'rloc_probe_on_route_change': <class 'str'>,\n          'rloc_probe_algorithm': <class 'bool'>,\n          'ipv6_rloc_min_mask_len': <class 'int'>,\n          'ipv4_rloc_min_mask_len': <class 'int'>,\n          'rloc_probe_on_member_change': <class 'bool'>,\n          },\n        'delegated_database_tree': <class 'bool'>,\n        'instance_id': {\n          Any  (str) *: {\n            Optional  (str) eid_table: <class 'str'>,\n            'database': {\n              Optional  (str) import_site_db_size: <class 'int'>,\n              Optional  (str) import_site_db_limit: <class 'int'>,\n              Optional  (str) proxy_db_size: <class 'int'>,\n              Optional  (str) inactive_deconfig_away_size: <class 'int'>,\n              Optional  (str) route_import_database_limit: <class 'int'>,\n              Optional  (str) dynamic_database_limit: <class 'int'>,\n              Optional  (str) static_database_size: <class 'int'>,\n              Optional  (str) static_database_limit: <class 'int'>,\n              Optional  (str) total_database_mapping_size: <class 'int'>,\n              Optional  (str) dynamic_database_size: <class 'int'>,\n              Optional  (str) route_import_database_size: <class 'int'>,\n              Optional  (str) dynamic_database_mapping_limit: <class 'int'>,\n              },\n            Optional  (str) site_registration_limit: <class 'int'>,\n            'itr': {\n              'local_rloc_last_resort': <class 'str'>,\n              Optional  (str) use_proxy_etr_rloc: <class 'str'>,\n              },\n            Optional  (str) map_request_source: <class 'str'>,\n            Optional  (str) map_cache: {\n              Optional  (str) map_cache_size: <class 'int'>,\n              Optional  (str) imported_route_count: <class 'int'>,\n              Optional  (str) persistent_map_cache: <class 'bool'>,\n              Optional  (str) imported_route_limit: <class 'int'>,\n              Optional  (str) static_mappings_configured: <class 'int'>,\n              },\n            Optional  (str) mapping_servers: {\n              Any  (str) *: {\n                Optional  (str) uptime: <class 'str'>,\n                'ms_address': <class 'str'>,\n                },\n              },\n            },\n          },\n        'itr': {\n          'proxy_itr_router': <class 'bool'>,\n          Optional  (str) map_resolvers: {\n            Any  (str) *: {\n              'map_resolver': <class 'str'>,\n              },\n            },\n          'multiple_smr_suppression_time': <class 'int'>,\n          'enabled': <class 'bool'>,\n          'solicit_map_request': <class 'str'>,\n          Optional  (str) proxy_itrs: {\n            Any  (str) *: {\n              'proxy_etr_address': <class 'str'>,\n              },\n            },\n          'max_smr_per_map_cache_entry': <class 'str'>,\n          },\n        'etr': {\n          Optional  (str) encapsulation: <class 'str'>,\n          'proxy_etr_router': <class 'bool'>,\n          Optional  (str) mapping_servers: {\n            Any  (str) *: {\n              Optional  (str) uptime: <class 'str'>,\n              'ms_address': <class 'str'>,\n              },\n            },\n          'map_cache_ttl': <class 'str'>,\n          'enabled': <class 'bool'>,\n          'accept_mapping_data': <class 'str'>,\n          Optional  (str) use_petrs: {\n            Any  (str) *: {\n              'use_petr': <class 'str'>,\n              },\n            },\n          },\n        'map_resolver': {\n          'enabled': <class 'bool'>,\n          },\n        'locator_table': <class 'str'>,\n        'mobility_first_hop_router': <class 'bool'>,\n        'map_cache': {\n          'map_cache_limit': <class 'int'>,\n          Optional  (str) map_cache_fib_updates: <class 'str'>,\n          'map_cache_activity_check_period': <class 'int'>,\n          },\n        'service': <class 'str'>,\n        Optional  (str) source_locator_configuration: {\n          'vlans': {\n            Any  (str) *: {\n              'address': <class 'str'>,\n              'interface': <class 'str'>,\n              },\n            },\n          },\n        'map_server': {\n          'enabled': <class 'bool'>,\n          },\n        'nat_traversal_router': <class 'bool'>,\n        },\n      },\n    Optional  (str) lisp_router_id: {\n      'site_id': <class 'str'>,\n      'xtr_id': <class 'str'>,\n      },\n    'lisp_router_instance_id': <class 'int'>,\n    },\n  },\n}", "doc": "Parser for \"show lisp all instance-id <instance_id> <service>\"", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_lisp.py#L788", "class": "ShowLispService", "module_name": "show_lisp"}}, "show {ip} route vrf {vrf} {route}": {"iosxe": {"uid": "show_ip_route_vrf_vrf_route", "schema": "{\n'total_prefixes': <class 'int'>,\n'entry': {\n  Any  (str) *: {\n    'ip': <class 'str'>,\n    'known_via': <class 'str'>,\n    'mask': <class 'str'>,\n    'metric': <class 'str'>,\n    'paths': {\n      Any  (str) *: {\n        Optional  (str) from: <class 'str'>,\n        Optional  (str) fwd_ip: <class 'str'>,\n        Optional  (str) age: <class 'str'>,\n        Optional  (str) fwd_intf: <class 'str'>,\n        },\n      },\n    Optional  (str) type: <class 'str'>,\n    Optional  (str) share_count: <class 'str'>,\n    'distance': <class 'str'>,\n    Optional  (str) route_count: <class 'str'>,\n    },\n  },\n}", "doc": "Parser for :\n       show ipv6 route <Hostname or A.B.C.D>\n       show ipv6 route vrf <vrf> <Hostname or A.B.C.D>", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_routing.py#L1152", "class": "ShowIpv6RouteWord", "module_name": "show_routing"}}, "show ip igmp vrf {vrf} ssm-mapping {group}": {"iosxe": {"uid": "show_ip_igmp_vrf_vrf_ssm-mapping_group", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'ssm_map': {\n      Any  (str) *: {\n        'group_address': <class 'str'>,\n        'database': <class 'str'>,\n        'source_addr': <class 'str'>,\n        },\n      },\n    },\n  },\n}", "doc": "\n    Parser for 'show ip igmp ssm-mapping <WROD>'\n    parser for 'show ip igmp vrf <WORD> ssm-mapping <WORD>'\n    ", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_igmp.py#L640", "class": "ShowIpIgmpSsmMapping", "module_name": "show_igmp"}}, "show nve vni": {"nxos": {"uid": "show_nve_vni", "schema": "{\nAny  (str) *: {\n  'vni': {\n    Any  (str) *: {\n      'vni': <class 'int'>,\n      'vni_state': <class 'str'>,\n      'type': <class 'str'>,\n      'mode': <class 'str'>,\n      'mcast': <class 'str'>,\n      'flags': <class 'str'>,\n      },\n    },\n  },\n}", "doc": "parser for:\n        show nve vni", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_vxlan.py#L187", "class": "ShowNveVni", "module_name": "show_vxlan"}}, "show ip ospf sham-links": {"ios": {"uid": "show_ip_ospf_sham-links", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'address_family': {\n      Any  (str) *: {\n        'instance': {\n          Any  (str) *: {\n            'areas': {\n              Any  (str) *: {\n                'sham_links': {\n                  Any  (str) *: {\n                    Optional  (str) retransmit_interval: <class 'int'>,\n                    'transit_area_id': <class 'str'>,\n                    Optional  (str) transmit_delay: <class 'int'>,\n                    'cost': <class 'int'>,\n                    Optional  (str) hello_timer: <class 'str'>,\n                    'local_id': <class 'str'>,\n                    Optional  (str) demand_circuit: <class 'bool'>,\n                    Optional  (str) dcbitless_lsa_count: <class 'int'>,\n                    'state': <class 'str'>,\n                    Optional  (str) donotage_lsa: <class 'str'>,\n                    Optional  (str) adjacency_state: <class 'str'>,\n                    Optional  (str) first: <class 'str'>,\n                    Optional  (str) last_retransmission_max_scan: <class 'int'>,\n                    Optional  (str) ttl_security: {\n                      Optional  (str) hops: <class 'int'>,\n                      'enable': <class 'bool'>,\n                      },\n                    Optional  (str) index: <class 'str'>,\n                    'remote_id': <class 'str'>,\n                    'name': <class 'str'>,\n                    Optional  (str) next: <class 'str'>,\n                    Optional  (str) last_retransmission_max_length: <class 'int'>,\n                    Optional  (str) dead_interval: <class 'int'>,\n                    Optional  (str) topology: {\n                      Any  (str) *: {\n                        'cost': <class 'int'>,\n                        'shutdown': <class 'bool'>,\n                        'name': <class 'str'>,\n                        'disabled': <class 'bool'>,\n                        },\n                      },\n                    Optional  (str) last_retransmission_scan_length: <class 'int'>,\n                    Optional  (str) hello_interval: <class 'int'>,\n                    Optional  (str) last_retransmission_scan_time: <class 'int'>,\n                    Optional  (str) total_retransmission: <class 'int'>,\n                    'link_state': <class 'str'>,\n                    Optional  (str) retrans_qlen: <class 'int'>,\n                    Optional  (str) wait_interval: <class 'int'>,\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "doc": " Parser for 'show ip ospf sham-links' ", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_ospf.py#L54", "class": "ShowIpOspfShamLinks", "module_name": "show_ospf"}, "nxos": {"uid": "show_ip_ospf_sham-links", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'address_family': {\n      Any  (str) *: {\n        'instance': {\n          Any  (str) *: {\n            'areas': {\n              Any  (str) *: {\n                'sham_links': {\n                  Any  (str) *: {\n                    'dead_interval': <class 'int'>,\n                    'retransmit_interval': <class 'int'>,\n                    'transit_area_id': <class 'str'>,\n                    'index': <class 'int'>,\n                    'wait_interval': <class 'int'>,\n                    'local_id': <class 'str'>,\n                    Optional  (str) authentication: {\n                      Optional  (str) key_id: <class 'str'>,\n                      Optional  (str) auth_trailer_key_chain: {\n                        Optional  (str) status: <class 'str'>,\n                        'key_chain': <class 'str'>,\n                        },\n                      Optional  (str) auth_trailer_key: {\n                        'crypto_algorithm': <class 'str'>,\n                        },\n                      },\n                    'statistics': {\n                      'link_scope_lsa_count': <class 'int'>,\n                      'link_scope_lsa_cksum_sum': <class 'int'>,\n                      },\n                    'state': <class 'str'>,\n                    Optional  (str) hello_timer: <class 'str'>,\n                    Optional  (str) wait_timer: <class 'int'>,\n                    'hello_interval': <class 'int'>,\n                    'destination': <class 'str'>,\n                    Optional  (str) neighbors: {\n                      Any  (str) *: {\n                        'dead_timer': <class 'str'>,\n                        'remote': <class 'str'>,\n                        'address': <class 'str'>,\n                        'area': <class 'str'>,\n                        'instance': <class 'str'>,\n                        'backbone_area_id': <class 'str'>,\n                        'statistics': {\n                          Optional  (str) nbr_retrans_qlen: <class 'str'>,\n                          'nbr_event_count': <class 'int'>,\n                          },\n                        'state': <class 'str'>,\n                        'hello_option': <class 'str'>,\n                        'neighbor_router_id': <class 'str'>,\n                        'last_change': <class 'str'>,\n                        'last_non_hello_received': <class 'str'>,\n                        'dbd_option': <class 'str'>,\n                        'local': <class 'str'>,\n                        },\n                      },\n                    'remote_id': <class 'str'>,\n                    'name': <class 'str'>,\n                    'transmit_delay': <class 'int'>,\n                    Optional  (str) unnumbered_interface: <class 'str'>,\n                    'backbone_area_id': <class 'str'>,\n                    Optional  (str) unnumbered_ip_address: <class 'str'>,\n                    Optional  (str) nbr_total: <class 'int'>,\n                    'interface_type': <class 'str'>,\n                    Optional  (str) nbr_flood: <class 'int'>,\n                    'link_state': <class 'str'>,\n                    Optional  (str) nbr_adjs: <class 'int'>,\n                    'cost': <class 'int'>,\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "doc": "Parser for:\n        show ip ospf sham-links\n        show ip ospf sham-links vrf <vrf>", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_ospf.py#L1615", "class": "ShowIpOspfShamLinks", "module_name": "show_ospf"}, "iosxe": {"uid": "show_ip_ospf_sham-links", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'address_family': {\n      Any  (str) *: {\n        'instance': {\n          Any  (str) *: {\n            'areas': {\n              Any  (str) *: {\n                'sham_links': {\n                  Any  (str) *: {\n                    Optional  (str) retransmit_interval: <class 'int'>,\n                    'transit_area_id': <class 'str'>,\n                    Optional  (str) transmit_delay: <class 'int'>,\n                    'cost': <class 'int'>,\n                    Optional  (str) hello_timer: <class 'str'>,\n                    'local_id': <class 'str'>,\n                    Optional  (str) demand_circuit: <class 'bool'>,\n                    Optional  (str) dcbitless_lsa_count: <class 'int'>,\n                    'state': <class 'str'>,\n                    Optional  (str) donotage_lsa: <class 'str'>,\n                    Optional  (str) adjacency_state: <class 'str'>,\n                    Optional  (str) first: <class 'str'>,\n                    Optional  (str) last_retransmission_max_scan: <class 'int'>,\n                    Optional  (str) ttl_security: {\n                      Optional  (str) hops: <class 'int'>,\n                      'enable': <class 'bool'>,\n                      },\n                    Optional  (str) index: <class 'str'>,\n                    'remote_id': <class 'str'>,\n                    'name': <class 'str'>,\n                    Optional  (str) next: <class 'str'>,\n                    Optional  (str) last_retransmission_max_length: <class 'int'>,\n                    Optional  (str) dead_interval: <class 'int'>,\n                    Optional  (str) topology: {\n                      Any  (str) *: {\n                        'cost': <class 'int'>,\n                        'shutdown': <class 'bool'>,\n                        'name': <class 'str'>,\n                        'disabled': <class 'bool'>,\n                        },\n                      },\n                    Optional  (str) last_retransmission_scan_length: <class 'int'>,\n                    Optional  (str) hello_interval: <class 'int'>,\n                    Optional  (str) last_retransmission_scan_time: <class 'int'>,\n                    Optional  (str) total_retransmission: <class 'int'>,\n                    'link_state': <class 'str'>,\n                    Optional  (str) retrans_qlen: <class 'int'>,\n                    Optional  (str) wait_interval: <class 'int'>,\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "doc": " Parser for:\n        * 'show ip ospf sham-links'\n    ", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_ospf.py#L2541", "class": "ShowIpOspfShamLinks", "module_name": "show_ospf"}}, "show bgp {address_family} rd {rd}": {"iosxe": {"uid": "show_bgp_address_family_rd_rd", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'address_family': {\n      Any  (str) *: {\n        Optional  (str) pfx_limit: <class 'int'>,\n        Optional  (str) route_distinguisher: <class 'str'>,\n        Optional  (str) default_vrf: <class 'str'>,\n        Optional  (str) bgp_table_version: <class 'int'>,\n        Optional  (str) af_private_import_to_address_family: <class 'str'>,\n        Optional  (str) route_identifier: <class 'str'>,\n        Optional  (str) pfx_count: <class 'int'>,\n        Optional  (str) routes: {\n          Optional  (Any) Any  (str) *: {\n            Optional  (str) index: {\n              Optional  (Any) Any  (str) *: {\n                Optional  (str) weight: <class 'int'>,\n                Optional  (str) next_hop: <class 'str'>,\n                Optional  (str) path: <class 'str'>,\n                Optional  (str) status_codes: <class 'str'>,\n                Optional  (str) origin_codes: <class 'str'>,\n                Optional  (str) metric: <class 'int'>,\n                Optional  (str) localpref: <class 'int'>,\n                },\n              },\n            },\n          },\n        Optional  (str) vrf_route_identifier: <class 'str'>,\n        },\n      },\n    },\n  },\n}", "doc": " Parser for:\n        * 'show bgp {address_family} rd {rd}'\n        * 'show bgp {address_family} vrf {vrf}'\n    ", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_bgp.py#L631", "class": "ShowBgp", "module_name": "show_bgp"}}, "show spanning-tree vlan {vlan}": {"ios": {"uid": "show_spanning-tree_vlan_vlan", "schema": "{\nAny  (str) *: {\n  Any  (str) *: {\n    Any  (str) *: {\n      'interfaces': {\n        Any  (str) *: {\n          'cost': <class 'int'>,\n          Optional  (str) peer: <class 'str'>,\n          'port_num': <class 'int'>,\n          Optional  (str) bound: <class 'str'>,\n          'port_priority': <class 'int'>,\n          'type': <class 'str'>,\n          'role': <class 'str'>,\n          'port_state': <class 'str'>,\n          },\n        },\n      Any  (str) *: {\n        'max_age': <class 'int'>,\n        Optional  (str) interface: <class 'str'>,\n        'forward_delay': <class 'int'>,\n        Optional  (str) configured_bridge_priority: <class 'int'>,\n        Optional  (str) cost: <class 'int'>,\n        'priority': <class 'int'>,\n        'address': <class 'str'>,\n        Optional  (str) sys_id_ext: <class 'int'>,\n        'hello_time': <class 'int'>,\n        Optional  (str) aging_time: <class 'int'>,\n        Optional  (str) port: <class 'int'>,\n        },\n      },\n    },\n  },\n}", "doc": "Parser for show spanning-tree [mst|vlan <WORD>]", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_spanning_tree.py#L33", "class": "ShowSpanningTree", "module_name": "show_spanning_tree"}, "iosxe": {"uid": "show_spanning-tree_vlan_vlan", "schema": "{\nAny  (str) *: {\n  Any  (str) *: {\n    Any  (str) *: {\n      'interfaces': {\n        Any  (str) *: {\n          'cost': <class 'int'>,\n          Optional  (str) peer: <class 'str'>,\n          'port_num': <class 'int'>,\n          Optional  (str) bound: <class 'str'>,\n          'port_priority': <class 'int'>,\n          'type': <class 'str'>,\n          'role': <class 'str'>,\n          'port_state': <class 'str'>,\n          },\n        },\n      Any  (str) *: {\n        'max_age': <class 'int'>,\n        Optional  (str) interface: <class 'str'>,\n        'forward_delay': <class 'int'>,\n        Optional  (str) configured_bridge_priority: <class 'int'>,\n        Optional  (str) cost: <class 'int'>,\n        'priority': <class 'int'>,\n        'address': <class 'str'>,\n        Optional  (str) sys_id_ext: <class 'int'>,\n        'hello_time': <class 'int'>,\n        Optional  (str) aging_time: <class 'int'>,\n        Optional  (str) port: <class 'int'>,\n        },\n      },\n    },\n  },\n}", "doc": "Parser for show spanning-tree [mst|vlan <WORD>]", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_spanning_tree.py#L843", "class": "ShowSpanningTree", "module_name": "show_spanning_tree"}}, "show ip ospf mpls traffic-eng link": {"ios": {"uid": "show_ip_ospf_mpls_traffic-eng_link", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'address_family': {\n      Any  (str) *: {\n        'instance': {\n          Any  (str) *: {\n            'mpls': {\n              'te': {\n                'router_id': <class 'str'>,\n                },\n              },\n            'areas': {\n              Any  (str) *: {\n                'mpls': {\n                  'te': {\n                    Optional  (str) total_links: <class 'int'>,\n                    'enable': <class 'bool'>,\n                    Optional  (str) area_instance: <class 'int'>,\n                    Optional  (str) link_hash_bucket: {\n                      Any  (str) *: {\n                        'link_fragments': {\n                          Any  (str) *: {\n                            'te_admin_metric': <class 'int'>,\n                            'interface_address': <class 'str'>,\n                            'link_id': <class 'str'>,\n                            'network_type': <class 'str'>,\n                            'igp_admin_metric': <class 'int'>,\n                            'max_reservable_bandwidth': <class 'int'>,\n                            'max_bandwidth': <class 'int'>,\n                            'affinity_bit': <class 'str'>,\n                            'link_instance': <class 'int'>,\n                            'total_priority': <class 'int'>,\n                            Optional  (str) unreserved_bandwidths: {\n                              Any  (str) *: {\n                                'unreserved_bandwidth': <class 'int'>,\n                                'priority': <class 'int'>,\n                                },\n                              },\n                            },\n                          },\n                        },\n                      },\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "doc": " Parser for \"show ip ospf mpls traffic-eng link\" ", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_ospf.py#L105", "class": "ShowIpOspfMplsTrafficEngLink", "module_name": "show_ospf"}, "iosxe": {"uid": "show_ip_ospf_mpls_traffic-eng_link", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'address_family': {\n      Any  (str) *: {\n        'instance': {\n          Any  (str) *: {\n            'mpls': {\n              'te': {\n                'router_id': <class 'str'>,\n                },\n              },\n            'areas': {\n              Any  (str) *: {\n                'mpls': {\n                  'te': {\n                    Optional  (str) total_links: <class 'int'>,\n                    'enable': <class 'bool'>,\n                    Optional  (str) area_instance: <class 'int'>,\n                    Optional  (str) link_hash_bucket: {\n                      Any  (str) *: {\n                        'link_fragments': {\n                          Any  (str) *: {\n                            'te_admin_metric': <class 'int'>,\n                            'interface_address': <class 'str'>,\n                            'link_id': <class 'str'>,\n                            'network_type': <class 'str'>,\n                            'igp_admin_metric': <class 'int'>,\n                            'max_reservable_bandwidth': <class 'int'>,\n                            'max_bandwidth': <class 'int'>,\n                            'affinity_bit': <class 'str'>,\n                            'link_instance': <class 'int'>,\n                            'total_priority': <class 'int'>,\n                            Optional  (str) unreserved_bandwidths: {\n                              Any  (str) *: {\n                                'unreserved_bandwidth': <class 'int'>,\n                                'priority': <class 'int'>,\n                                },\n                              },\n                            },\n                          },\n                        },\n                      },\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "doc": " Parser for:\n        * 'show ip ospf mpls traffic-eng link'\n    ", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_ospf.py#L4858", "class": "ShowIpOspfMplsTrafficEngLink", "module_name": "show_ospf"}}, "show ipv6 mld vrf {vrf} interface": {"ios": {"uid": "show_ipv6_mld_vrf_vrf_interface", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    Optional  (str) active_groups: <class 'int'>,\n    'interface': {\n      Any  (str) *: {\n        Optional  (str) version: <class 'int'>,\n        Optional  (str) query_interval: <class 'int'>,\n        Optional  (str) querier_timeout: <class 'int'>,\n        Optional  (str) counters: {\n          'leaves': <class 'int'>,\n          'joins': <class 'int'>,\n          },\n        Optional  (str) query_max_response_time: <class 'int'>,\n        'enable': <class 'bool'>,\n        Optional  (str) last_member_query_interval: <class 'int'>,\n        'interface_status': <class 'str'>,\n        'oper_status': <class 'str'>,\n        Optional  (str) query_this_system: <class 'bool'>,\n        Optional  (str) max_groups: <class 'int'>,\n        Optional  (str) active_groups: <class 'int'>,\n        Optional  (str) interface_adress: <class 'str'>,\n        Optional  (str) group_policy: <class 'str'>,\n        Optional  (str) querier: <class 'str'>,\n        },\n      },\n    Optional  (str) max_groups: <class 'int'>,\n    },\n  },\n}", "doc": "Parser for:\n        show ipv6 mld interface\n        show ipv6 mld vrf <vrf> interface", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_mld.py#L18", "class": "ShowIpv6MldInterface", "module_name": "show_mld"}, "iosxe": {"uid": "show_ipv6_mld_vrf_vrf_interface", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    Optional  (str) active_groups: <class 'int'>,\n    'interface': {\n      Any  (str) *: {\n        Optional  (str) version: <class 'int'>,\n        Optional  (str) query_interval: <class 'int'>,\n        Optional  (str) querier_timeout: <class 'int'>,\n        Optional  (str) counters: {\n          'leaves': <class 'int'>,\n          'joins': <class 'int'>,\n          },\n        Optional  (str) query_max_response_time: <class 'int'>,\n        'enable': <class 'bool'>,\n        Optional  (str) last_member_query_interval: <class 'int'>,\n        'interface_status': <class 'str'>,\n        'oper_status': <class 'str'>,\n        Optional  (str) query_this_system: <class 'bool'>,\n        Optional  (str) max_groups: <class 'int'>,\n        Optional  (str) active_groups: <class 'int'>,\n        Optional  (str) interface_adress: <class 'str'>,\n        Optional  (str) group_policy: <class 'str'>,\n        Optional  (str) querier: <class 'str'>,\n        },\n      },\n    Optional  (str) max_groups: <class 'int'>,\n    },\n  },\n}", "doc": "Parser for:\n        show ipv6 mld interface\n        show ipv6 mld vrf <vrf> interface", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_mld.py#L60", "class": "ShowIpv6MldInterface", "module_name": "show_mld"}}, "show lisp all service {service} summary": {"iosxe": {"uid": "show_lisp_all_service_service_summary", "schema": "{\n'lisp_router_instances': {\n  Any  (str) *: {\n    'lisp_router_instance_id': <class 'int'>,\n    Optional  (str) service: {\n      Optional  (Any) Any  (str) *: {\n        'etr': {\n          'summary': {\n            'eid_tables_pending_map_cache_update_to_fib': <class 'int'>,\n            'total_eid_tables': <class 'int'>,\n            'total_db_entries_inactive': <class 'int'>,\n            'total_db_entries': <class 'int'>,\n            'total_map_cache_entries': <class 'int'>,\n            'eid_tables_incomplete_map_cache_entries': <class 'int'>,\n            'instance_count': <class 'int'>,\n            'eid_tables_inconsistent_locators': <class 'int'>,\n            },\n          },\n        Optional  (str) virtual_network_ids: {\n          Any  (str) *: {\n            'cache_size': <class 'int'>,\n            'db_no_route': <class 'int'>,\n            'incomplete': <class 'str'>,\n            'db_size': <class 'int'>,\n            'interface': <class 'str'>,\n            'cache_idle': <class 'str'>,\n            Optional  (str) vrf: <class 'str'>,\n            'lisp_role': {\n              Any  (str) *: {\n                'lisp_role_type': <class 'str'>,\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "doc": "Parser for \"show lisp all service <service> summary\"", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_lisp.py#L1994", "class": "ShowLispServiceSummary", "module_name": "show_lisp"}}, "show ip msdp policy statistics sa-policy {peer} {method} vrf {vrf}": {"nxos": {"uid": "show_ip_msdp_policy_statistics_sa-policy_peer_method_vrf_vrf", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'peer': {\n      Any  (str) *: {\n        Optional  (str) in: {\n          'total_reject_count': <class 'int'>,\n          Any  (str) *: {\n            Any  (str) *: {\n              Optional  (str) num_of_matches: <class 'int'>,\n              Optional  (str) num_of_comparison: <class 'int'>,\n              'match': <class 'str'>,\n              },\n            },\n          'total_accept_count': <class 'int'>,\n          },\n        Optional  (str) out: {\n          'total_reject_count': <class 'int'>,\n          Any  (str) *: {\n            Any  (str) *: {\n              Optional  (str) num_of_comparison: <class 'int'>,\n              Optional  (str) num_of_matches: <class 'int'>,\n              'match': <class 'str'>,\n              },\n            },\n          'total_accept_count': <class 'int'>,\n          },\n        },\n      },\n    },\n  },\n}", "doc": "Parser for :\n        show ip msdp policy statistics sa-policy <address> out", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_msdp.py#L675", "class": "ShowIpMsdpPolicyStatisticsSaPolicyOut", "module_name": "show_msdp"}}, "show ip ospf database network detail": {"nxos": {"uid": "show_ip_ospf_database_network_detail", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'address_family': {\n      Any  (str) *: {\n        'instance': {\n          Any  (str) *: {\n            Optional  (str) areas: {\n              Any  (str) *: {\n                'database': {\n                  'lsa_types': {\n                    Any  (str) *: {\n                      'lsa_type': <class 'int'>,\n                      'lsas': {\n                        Any  (str) *: {\n                          'ospfv2': {\n                            'header': {\n                              'age': <class 'int'>,\n                              'checksum': <class 'str'>,\n                              'option_desc': <class 'str'>,\n                              'adv_router': <class 'str'>,\n                              'seq_num': <class 'str'>,\n                              'length': <class 'int'>,\n                              Optional  (str) maxage: <class 'bool'>,\n                              'type': <class 'int'>,\n                              'lsa_id': <class 'str'>,\n                              'option': <class 'str'>,\n                              },\n                            'body': {\n                              'network': {\n                                'attached_routers': {\n                                  Any  (str) *: {\n                                    },\n                                  },\n                                'network_mask': <class 'str'>,\n                                },\n                              },\n                            },\n                          'lsa_id': <class 'str'>,\n                          'adv_router': <class 'str'>,\n                          },\n                        },\n                      },\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "doc": "Parser for:\n        show ip ospf database network detail\n        show ip ospf database network detail vrf <vrf>", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_ospf.py#L3316", "class": "ShowIpOspfDatabaseNetworkDetail", "module_name": "show_ospf"}}, "show ip pim route": {"nxos": {"uid": "show_ip_pim_route", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'address_family': {\n      Any  (str) *: {\n        Optional  (str) topology_tree_info: {\n          Any  (str) *: {\n            Optional  (str) is_rpt: <class 'bool'>,\n            Optional  (str) timeout_interval: <class 'int'>,\n            Optional  (str) rp_bit: <class 'bool'>,\n            Optional  (str) sgr_prune: <class 'str'>,\n            Optional  (str) oif_timeout: <class 'str'>,\n            Optional  (str) expiration: <class 'str'>,\n            Optional  (str) oif: <class 'str'>,\n            Optional  (str) incoming_interface: <class 'str'>,\n            Optional  (str) sgr_prune_count: <class 'int'>,\n            Optional  (str) immediate_timeout_count: <class 'int'>,\n            Optional  (str) immediate_count: <class 'int'>,\n            Optional  (str) mode: <class 'str'>,\n            Optional  (str) rp_address: <class 'str'>,\n            Optional  (str) oif_timeout_count: <class 'int'>,\n            Optional  (str) immediate_timeout: <class 'str'>,\n            Optional  (str) group: <class 'str'>,\n            Optional  (str) jp_holdtime_roundup: <class 'int'>,\n            Optional  (str) oif_count: <class 'int'>,\n            Optional  (str) source_address: <class 'str'>,\n            Optional  (str) immediate: <class 'str'>,\n            Optional  (str) rpf_neighbor: <class 'str'>,\n            },\n          },\n        },\n      },\n    },\n  },\n}", "doc": "Parser for:\n        show ip pim route\n        show ip pim route vrf <vrf>", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_pim.py#L2221", "class": "ShowIpPimRoute", "module_name": "show_pim"}}, "show ip pim rp mapping": {"ios": {"uid": "show_ip_pim_rp_mapping", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'address_family': {\n      Any  (str) *: {\n        'rp': {\n          'rp_list': {\n            Any  (str) *: {\n              Optional  (str) bsr_version: <class 'str'>,\n              Optional  (str) up_time: <class 'str'>,\n              Optional  (str) mode: <class 'str'>,\n              Optional  (str) address: <class 'str'>,\n              Optional  (str) expiration: <class 'str'>,\n              Optional  (str) info_source_address: <class 'str'>,\n              Optional  (str) info_source_type: <class 'str'>,\n              },\n            },\n          'rp_mappings': {\n            Any  (str) *: {\n              Optional  (str) protocol: <class 'str'>,\n              Optional  (str) hold_time: <class 'int'>,\n              Optional  (str) rp_address_host: <class 'str'>,\n              Optional  (str) group: <class 'str'>,\n              Optional  (str) up_time: <class 'str'>,\n              Optional  (str) expiration: <class 'str'>,\n              Optional  (str) rp_address: <class 'str'>,\n              Optional  (str) priority: <class 'int'>,\n              },\n            },\n          Optional  (str) bsr: {\n            'rp': {\n              Optional  (str) up_time: <class 'str'>,\n              Optional  (str) rp_address: <class 'str'>,\n              Optional  (str) group_policy: <class 'str'>,\n              },\n            },\n          Optional  (str) static_rp: {\n            Any  (str) *: {\n              Optional  (str) sm: {\n                Optional  (str) override: <class 'bool'>,\n                Optional  (str) policy_name: <class 'str'>,\n                },\n              Optional  (str) bidir: {\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "doc": " Parser for:\n         show ip pim rp mapping\n         show ip pim vrf <vrf_name> rp mapping", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_pim.py#L63", "class": "ShowIpPimRpMapping", "module_name": "show_pim"}, "iosxe": {"uid": "show_ip_pim_rp_mapping", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'address_family': {\n      Any  (str) *: {\n        'rp': {\n          'rp_list': {\n            Any  (str) *: {\n              Optional  (str) bsr_version: <class 'str'>,\n              Optional  (str) up_time: <class 'str'>,\n              Optional  (str) mode: <class 'str'>,\n              Optional  (str) address: <class 'str'>,\n              Optional  (str) expiration: <class 'str'>,\n              Optional  (str) info_source_address: <class 'str'>,\n              Optional  (str) info_source_type: <class 'str'>,\n              },\n            },\n          'rp_mappings': {\n            Any  (str) *: {\n              Optional  (str) protocol: <class 'str'>,\n              Optional  (str) hold_time: <class 'int'>,\n              Optional  (str) rp_address_host: <class 'str'>,\n              Optional  (str) group: <class 'str'>,\n              Optional  (str) up_time: <class 'str'>,\n              Optional  (str) expiration: <class 'str'>,\n              Optional  (str) rp_address: <class 'str'>,\n              Optional  (str) priority: <class 'int'>,\n              },\n            },\n          Optional  (str) bsr: {\n            'rp': {\n              Optional  (str) up_time: <class 'str'>,\n              Optional  (str) rp_address: <class 'str'>,\n              Optional  (str) group_policy: <class 'str'>,\n              },\n            },\n          Optional  (str) static_rp: {\n            Any  (str) *: {\n              Optional  (str) sm: {\n                Optional  (str) override: <class 'bool'>,\n                Optional  (str) policy_name: <class 'str'>,\n                },\n              Optional  (str) bidir: {\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "doc": null, "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_pim.py#L914", "class": "ShowIpPimRpMapping", "module_name": "show_pim"}}, "show hsrp all": {"nxos": {"uid": "show_hsrp_all", "schema": "{\nAny  (str) *: {\n  'interface': <class 'str'>,\n  'use_bia': <class 'bool'>,\n  'address_family': {\n    Any  (str) *: {\n      'version': {\n        Any  (str) *: {\n          'groups': {\n            Any  (str) *: {\n              Optional  (str) standby_ipv6_address: <class 'str'>,\n              Optional  (str) preempt_reload_delay: <class 'int'>,\n              Optional  (str) standby_mac_address: <class 'str'>,\n              Optional  (str) secondary_ipv4_addresses: {\n                Any  (str) *: {\n                  Optional  (str) address: <class 'str'>,\n                  },\n                },\n              Optional  (str) preempt_min_delay: <class 'int'>,\n              Optional  (str) preempt_sync_delay: <class 'int'>,\n              Optional  (str) standby_expire: <class 'float'>,\n              Optional  (str) link_local_ipv6_address: {\n                Optional  (str) address: <class 'str'>,\n                Optional  (str) auto_configure: <class 'bool'>,\n                },\n              'virtual_mac_address_status': <class 'str'>,\n              'virtual_mac_address': <class 'str'>,\n              'num_state_changes': <class 'int'>,\n              Optional  (str) global_ipv6_addresses: {\n                Any  (str) *: {\n                  'address': <class 'str'>,\n                  },\n                },\n              'standby_router': <class 'str'>,\n              Optional  (str) authentication: <class 'str'>,\n              Optional  (str) preempt: <class 'bool'>,\n              'active_router': <class 'str'>,\n              Optional  (str) session_name: <class 'str'>,\n              Optional  (str) active_priority: <class 'int'>,\n              Optional  (str) hsrp_router_state_reason: <class 'str'>,\n              'upper_fwd_threshold': <class 'int'>,\n              Optional  (str) standby_priority: <class 'int'>,\n              'group_number': <class 'int'>,\n              'lower_fwd_threshold': <class 'int'>,\n              Optional  (str) active_expire: <class 'float'>,\n              Optional  (str) active_mac_address: <class 'str'>,\n              Optional  (str) timers: {\n                Optional  (str) hold_sec: <class 'int'>,\n                Optional  (str) hello_msec: <class 'int'>,\n                Optional  (str) cfged_hello_unit: <class 'str'>,\n                Optional  (str) hello_sec: <class 'int'>,\n                Optional  (str) cfged_hello_interval: <class 'int'>,\n                Optional  (str) hold_msec_flag: <class 'bool'>,\n                Optional  (str) cfged_hold_unit: <class 'str'>,\n                Optional  (str) hold_msec: <class 'int'>,\n                Optional  (str) cfged_hold_interval: <class 'int'>,\n                Optional  (str) hello_msec_flag: <class 'bool'>,\n                },\n              Optional  (str) secondary_vips: <class 'list'>,\n              Optional  (str) tracked_objects: {\n                Any  (str) *: {\n                  Optional  (str) object_name: <class 'int'>,\n                  Optional  (str) status: <class 'str'>,\n                  Optional  (str) priority_decrement: <class 'int'>,\n                  },\n                },\n              Optional  (str) active_ip_address: <class 'str'>,\n              Optional  (str) active_ipv6_address: <class 'str'>,\n              Optional  (str) priority: <class 'int'>,\n              'last_state_change': <class 'str'>,\n              Optional  (str) primary_ipv4_address: {\n                Optional  (str) address: <class 'str'>,\n                Optional  (str) virtual_ip_learn: <class 'bool'>,\n                },\n              Optional  (str) configured_priority: <class 'int'>,\n              Optional  (str) hsrp_router_state: <class 'str'>,\n              Optional  (str) standby_ip_address: <class 'str'>,\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "doc": " Parser for \"'show hsrp all\" ", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_hsrp.py#L273", "class": "ShowHsrpAll", "module_name": "show_hsrp"}}, "show configuration system ntp | display set": {"junos": {"uid": "show_configuration_system_ntp___display_set", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'address': {\n      Any  (str) *: {\n        'isconfigured': {\n          Any  (str) *: {\n            'address': <class 'str'>,\n            'isconfigured': <class 'bool'>,\n            },\n          },\n        'type': {\n          Any  (str) *: {\n            'address': <class 'str'>,\n            'vrf': <class 'str'>,\n            'type': <class 'str'>,\n            },\n          },\n        },\n      },\n    },\n  },\n}", "doc": "Parser for: show configuration system ntp | display set ", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/junos/show_ntp.py#L319", "class": "ShowConfigurationSystemNtpSet", "module_name": "show_ntp"}}, "show ospf vrf all-inclusive database opaque-area": {"iosxr": {"uid": "show_ospf_vrf_all-inclusive_database_opaque-area", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'address_family': {\n      Any  (str) *: {\n        'instance': {\n          Any  (str) *: {\n            Optional  (str) areas: {\n              Any  (str) *: {\n                'database': {\n                  'lsa_types': {\n                    Any  (str) *: {\n                      'lsa_type': <class 'int'>,\n                      'lsas': {\n                        Any  (str) *: {\n                          'ospfv2': {\n                            'header': {\n                              'opaque_type': <class 'int'>,\n                              'seq_num': <class 'str'>,\n                              'opaque_id': <class 'int'>,\n                              'checksum': <class 'str'>,\n                              'type': <class 'int'>,\n                              Optional  (str) num_links: <class 'int'>,\n                              'option': <class 'str'>,\n                              'age': <class 'int'>,\n                              'option_desc': <class 'str'>,\n                              Optional  (str) fragment_number: <class 'int'>,\n                              'length': <class 'int'>,\n                              Optional  (str) mpls_te_router_id: <class 'str'>,\n                              'lsa_id': <class 'str'>,\n                              'adv_router': <class 'str'>,\n                              },\n                            'body': {\n                              'opaque': {\n                                Optional  (str) link_tlvs: {\n                                  Any  (str) *: {\n                                    'link_type': <class 'int'>,\n                                    Optional  (str) igp_metric: <class 'int'>,\n                                    Optional  (str) total_priority: <class 'int'>,\n                                    'max_reservable_bandwidth': <class 'int'>,\n                                    'max_bandwidth': <class 'int'>,\n                                    'admin_group': <class 'str'>,\n                                    Optional  (str) extended_admin_group: {\n                                      'length': <class 'int'>,\n                                      Optional  (str) groups: {\n                                        Any  (str) *: {\n                                          'value': <class 'int'>,\n                                          },\n                                        },\n                                      },\n                                    Optional  (str) local_if_ipv4_addrs: {\n                                      Any  (str) *: {\n                                        },\n                                      },\n                                    'te_metric': <class 'int'>,\n                                    'link_id': <class 'str'>,\n                                    Optional  (str) unknown_tlvs: {\n                                      Any  (str) *: {\n                                        'length': <class 'int'>,\n                                        'type': <class 'int'>,\n                                        'value': <class 'str'>,\n                                        },\n                                      },\n                                    Optional  (str) remote_if_ipv4_addrs: {\n                                      Any  (str) *: {\n                                        },\n                                      },\n                                    Optional  (str) unreserved_bandwidths: {\n                                      Any  (str) *: {\n                                        'unreserved_bandwidth': <class 'int'>,\n                                        'priority': <class 'int'>,\n                                        },\n                                      },\n                                    'link_name': <class 'str'>,\n                                    },\n                                  },\n                                },\n                              },\n                            },\n                          'lsa_id': <class 'str'>,\n                          'adv_router': <class 'str'>,\n                          },\n                        },\n                      },\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "doc": "\n    Parser for show ospf vrf all-inclusive database opaque-area\n    For checking any output with the parser ,below mandatory key(s) are needed and have to be in cli command.\n\n    - db_type\n\n    ", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_ospf.py#L3969", "class": "ShowOspfVrfAllInclusiveDatabaseOpaqueArea", "module_name": "show_ospf"}}, "show environment all | include Sensor": {"iosxe": {"asr1k": {"uid": "show_environment_all___include_Sensor", "schema": "{\n'sensor_list': {\n  Any  (str) *: {\n    'sensor': {\n      Any  (str) *: {\n        'state': <class 'str'>,\n        'location': <class 'str'>,\n        'reading': <class 'str'>,\n        },\n      },\n    },\n  },\n}", "doc": "Parser for show environment all | include Sensor |<WORD>", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/asr1k/show_platform.py#L103", "class": "ShowEnvironmentAllIncludeLocation", "module_name": "show_platform"}}}, "show vrf all interface": {"nxos": {"uid": "show_vrf_all_interface", "schema": "{\nAny  (str) *: {\n  'vrf_id': <class 'int'>,\n  'vrf': <class 'str'>,\n  'site_of_origin': <class 'str'>,\n  },\n}", "doc": "Parser for show vrf all interface", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_interface.py#L1584", "class": "ShowVrfAllInterface", "module_name": "show_interface"}}, "show interfaces terse | match {interface}": {"junos": {"uid": "show_interfaces_terse___match_interface", "schema": "{\nAny  (str) *: {\n  Optional  (str) protocol: {\n    Any  (str) *: {\n      Optional  (Any) Any  (str) *: {\n        Optional  (str) remote: <class 'str'>,\n        'local': <class 'str'>,\n        },\n      },\n    },\n  'oper_status': <class 'str'>,\n  Optional  (str) admin_state: <class 'str'>,\n  Optional  (str) link_state: <class 'str'>,\n  Optional  (str) phys_address: <class 'str'>,\n  'enabled': <class 'bool'>,\n  },\n}", "doc": "Parser for show interfaces terse [| match <interface>]", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/junos/show_interface.py#L46", "class": "ShowInterfacesTerse", "module_name": "show_interface"}}, "show inventory": {"ios": {"uid": "show_inventory", "schema": "{\nOptional  (str) main: {\n  Optional  (str) swstack: <class 'bool'>,\n  Optional  (str) chassis: {\n    Any  (str) *: {\n      Optional  (str) pid: <class 'str'>,\n      Optional  (str) name: <class 'str'>,\n      Optional  (str) vid: <class 'str'>,\n      Optional  (str) descr: <class 'str'>,\n      Optional  (str) sn: <class 'str'>,\n      },\n    },\n  },\n'slot': {\n  Any  (str) *: {\n    Optional  (str) rp: {\n      Any  (str) *: {\n        Optional  (str) subslot: {\n          Any  (str) *: {\n            Any  (str) *: {\n              Optional  (str) sn: <class 'str'>,\n              Optional  (str) descr: <class 'str'>,\n              Optional  (str) vid: <class 'str'>,\n              Optional  (str) pid: <class 'str'>,\n              Optional  (str) name: <class 'str'>,\n              },\n            },\n          },\n        Optional  (str) descr: <class 'str'>,\n        Optional  (str) swstack_power_sn: <class 'str'>,\n        Optional  (str) pid: <class 'str'>,\n        Optional  (str) vid: <class 'str'>,\n        Optional  (str) sn: <class 'str'>,\n        Optional  (str) name: <class 'str'>,\n        Optional  (str) swstack_power: <class 'str'>,\n        },\n      },\n    Optional  (str) other: {\n      Any  (str) *: {\n        Optional  (str) pid: <class 'str'>,\n        Optional  (str) name: <class 'str'>,\n        Optional  (str) vid: <class 'str'>,\n        Optional  (str) descr: <class 'str'>,\n        Optional  (str) sn: <class 'str'>,\n        },\n      },\n    Optional  (str) lc: {\n      Any  (str) *: {\n        Optional  (str) descr: <class 'str'>,\n        Optional  (str) pid: <class 'str'>,\n        Optional  (str) vid: <class 'str'>,\n        Optional  (str) subslot: {\n          Any  (str) *: {\n            Any  (str) *: {\n              Optional  (str) vid: <class 'str'>,\n              Optional  (str) descr: <class 'str'>,\n              Optional  (str) sn: <class 'str'>,\n              Optional  (str) pid: <class 'str'>,\n              Optional  (str) name: <class 'str'>,\n              },\n            },\n          },\n        Optional  (str) sn: <class 'str'>,\n        Optional  (str) name: <class 'str'>,\n        },\n      },\n    },\n  },\n}", "doc": "Parser for show Inventory\n    ", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_platform.py#L99", "class": "ShowInventory", "module_name": "show_platform"}, "nxos": {"uid": "show_inventory", "schema": "{\n'name': {\n  Any  (str) *: {\n    'description': <class 'str'>,\n    Optional  (str) vid: <class 'str'>,\n    Optional  (str) serial_number: <class 'str'>,\n    Optional  (str) pid: <class 'str'>,\n    'slot': <class 'str'>,\n    },\n  },\n}", "doc": "Parser for show inventory", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_platform.py#L366", "class": "ShowInventory", "module_name": "show_platform"}, "iosxr": {"uid": "show_inventory", "schema": "{\n'module_name': {\n  Any  (str) *: {\n    'pid': <class 'str'>,\n    'vid': <class 'str'>,\n    'descr': <class 'str'>,\n    'sn': <class 'str'>,\n    },\n  },\n}", "doc": "Parser for show inventory", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_platform.py#L701", "class": "ShowInventory", "module_name": "show_platform"}, "iosxe": {"uid": "show_inventory", "schema": "{\nOptional  (str) main: {\n  Optional  (str) swstack: <class 'bool'>,\n  Optional  (str) chassis: {\n    Any  (str) *: {\n      Optional  (str) pid: <class 'str'>,\n      Optional  (str) name: <class 'str'>,\n      Optional  (str) vid: <class 'str'>,\n      Optional  (str) descr: <class 'str'>,\n      Optional  (str) sn: <class 'str'>,\n      },\n    },\n  },\n'slot': {\n  Any  (str) *: {\n    Optional  (str) rp: {\n      Any  (str) *: {\n        Optional  (str) subslot: {\n          Any  (str) *: {\n            Any  (str) *: {\n              Optional  (str) sn: <class 'str'>,\n              Optional  (str) descr: <class 'str'>,\n              Optional  (str) vid: <class 'str'>,\n              Optional  (str) pid: <class 'str'>,\n              Optional  (str) name: <class 'str'>,\n              },\n            },\n          },\n        Optional  (str) descr: <class 'str'>,\n        Optional  (str) swstack_power_sn: <class 'str'>,\n        Optional  (str) pid: <class 'str'>,\n        Optional  (str) vid: <class 'str'>,\n        Optional  (str) sn: <class 'str'>,\n        Optional  (str) name: <class 'str'>,\n        Optional  (str) swstack_power: <class 'str'>,\n        },\n      },\n    Optional  (str) other: {\n      Any  (str) *: {\n        Optional  (str) pid: <class 'str'>,\n        Optional  (str) name: <class 'str'>,\n        Optional  (str) vid: <class 'str'>,\n        Optional  (str) descr: <class 'str'>,\n        Optional  (str) sn: <class 'str'>,\n        },\n      },\n    Optional  (str) lc: {\n      Any  (str) *: {\n        Optional  (str) descr: <class 'str'>,\n        Optional  (str) pid: <class 'str'>,\n        Optional  (str) vid: <class 'str'>,\n        Optional  (str) subslot: {\n          Any  (str) *: {\n            Any  (str) *: {\n              Optional  (str) vid: <class 'str'>,\n              Optional  (str) descr: <class 'str'>,\n              Optional  (str) sn: <class 'str'>,\n              Optional  (str) pid: <class 'str'>,\n              Optional  (str) name: <class 'str'>,\n              },\n            },\n          },\n        Optional  (str) sn: <class 'str'>,\n        Optional  (str) name: <class 'str'>,\n        },\n      },\n    },\n  },\n}", "doc": "Parser for show Inventory\n    parser class - implements detail parsing mechanisms for cli output.\n    ", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_platform.py#L958", "class": "ShowInventory", "module_name": "show_platform"}}, "show ip bgp {address_family} vrf {vrf} summary": {"iosxe": {"uid": "show_ip_bgp_address_family_vrf_vrf_summary", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    Optional  (str) neighbor: {\n      Any  (str) *: {\n        'address_family': {\n          Any  (str) *: {\n            Optional  (str) prefixes: {\n              'total_entries': <class 'int'>,\n              'memory_usage': <class 'int'>,\n              },\n            'msg_rcvd': <class 'int'>,\n            Optional  (str) path: {\n              'total_entries': <class 'int'>,\n              'memory_usage': <class 'int'>,\n              },\n            Optional  (str) cache_entries: {\n              Any  (str) *: {\n                'total_entries': <class 'int'>,\n                'memory_usage': <class 'int'>,\n                },\n              },\n            'input_queue': <class 'int'>,\n            'state_pfxrcd': <class 'str'>,\n            Optional  (str) entries: {\n              Any  (str) *: {\n                'total_entries': <class 'int'>,\n                'memory_usage': <class 'int'>,\n                },\n              },\n            Optional  (str) community_entries: {\n              'total_entries': <class 'int'>,\n              'memory_usage': <class 'int'>,\n              },\n            Optional  (str) attribute_entries: <class 'str'>,\n            'as': <class 'int'>,\n            Optional  (str) total_memory: <class 'int'>,\n            Optional  (str) activity_prefixes: <class 'str'>,\n            'tbl_ver': <class 'int'>,\n            Optional  (str) activity_paths: <class 'str'>,\n            Optional  (str) scan_interval: <class 'int'>,\n            'output_queue': <class 'int'>,\n            'msg_sent': <class 'int'>,\n            Optional  (str) route_identifier: <class 'str'>,\n            Optional  (str) local_as: <class 'int'>,\n            'up_down': <class 'str'>,\n            Optional  (str) bgp_table_version: <class 'int'>,\n            'version': <class 'int'>,\n            Optional  (str) routing_table_version: <class 'int'>,\n            },\n          },\n        },\n      },\n    },\n  },\n'bgp_id': <class 'int'>,\n}", "doc": " Parser for:\n        * 'show ip bgp summary'\n        * 'show ip bgp {address_family} summary'\n        * 'show ip bgp {address_family} vrf {vrf} summary'\n        * 'show ip bgp {address_family} rd {rd} summary'\n    ", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_bgp.py#L2132", "class": "ShowIpBgpSummary", "module_name": "show_bgp"}}, "show configuration lock": {"ios": {"uid": "show_configuration_lock", "schema": "{\nOptional  (str) parser_configure_lock: {\n  Optional  (str) owner_pid: {\n    Any  (str) *: {\n      Optional  (str) remote_ip_address: <class 'str'>,\n      Optional  (str) state: <class 'str'>,\n      Optional  (str) lock_active_time_in_sec: <class 'int'>,\n      Optional  (str) class: <class 'str'>,\n      Optional  (str) lock_expiration_timer_in_sec: <class 'int'>,\n      Optional  (str) count: <class 'int'>,\n      Optional  (str) pending_requests: <class 'int'>,\n      Optional  (str) user: <class 'str'>,\n      Optional  (str) user_debug_info: <class 'str'>,\n      Optional  (str) session_idle_state: <class 'str'>,\n      Optional  (str) num_of_exec_cmds_executed: <class 'int'>,\n      Optional  (str) config_wait_for_show_completion: <class 'str'>,\n      Optional  (str) num_of_exec_cmds_blocked: <class 'int'>,\n      Optional  (str) tty: <class 'int'>,\n      Optional  (str) type: <class 'str'>,\n      },\n    },\n  },\nOptional  (str) config_session_lock: {\n  Optional  (str) owner_pid: {\n    Any  (str) *: {\n      'tty_number': <class 'int'>,\n      'user_debug_info': <class 'str'>,\n      'tty_username': <class 'str'>,\n      'lock_active_time_in_sec': <class 'int'>,\n      },\n    },\n  },\n}", "doc": " Parser for show configuration lock ", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_config.py#L12", "class": "ShowConfigurationLock", "module_name": "show_config"}, "iosxe": {"uid": "show_configuration_lock", "schema": "{\nOptional  (str) parser_configure_lock: {\n  Optional  (str) owner_pid: {\n    Any  (str) *: {\n      Optional  (str) remote_ip_address: <class 'str'>,\n      Optional  (str) state: <class 'str'>,\n      Optional  (str) lock_active_time_in_sec: <class 'int'>,\n      Optional  (str) class: <class 'str'>,\n      Optional  (str) lock_expiration_timer_in_sec: <class 'int'>,\n      Optional  (str) count: <class 'int'>,\n      Optional  (str) pending_requests: <class 'int'>,\n      Optional  (str) user: <class 'str'>,\n      Optional  (str) user_debug_info: <class 'str'>,\n      Optional  (str) session_idle_state: <class 'str'>,\n      Optional  (str) num_of_exec_cmds_executed: <class 'int'>,\n      Optional  (str) config_wait_for_show_completion: <class 'str'>,\n      Optional  (str) num_of_exec_cmds_blocked: <class 'int'>,\n      Optional  (str) tty: <class 'int'>,\n      Optional  (str) type: <class 'str'>,\n      },\n    },\n  },\nOptional  (str) config_session_lock: {\n  Optional  (str) owner_pid: {\n    Any  (str) *: {\n      'tty_number': <class 'int'>,\n      'user_debug_info': <class 'str'>,\n      'tty_username': <class 'str'>,\n      'lock_active_time_in_sec': <class 'int'>,\n      },\n    },\n  },\n}", "doc": " Parser for show configuration lock", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_config.py#L58", "class": "ShowConfigurationLock", "module_name": "show_config"}}, "show vlan mtu": {"ios": {"uid": "show_vlan_mtu", "schema": "{\n'vlan_id': {\n  Any  (str) *: {\n    'mtu_mismatch': <class 'str'>,\n    'vlan_mtu': <class 'str'>,\n    'vlan_max_mtu': <class 'str'>,\n    'vlan_min_mtu': <class 'str'>,\n    },\n  },\n}", "doc": null, "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_vlan.py#L15", "class": "ShowVlanMtu", "module_name": "show_vlan"}, "iosxe": {"uid": "show_vlan_mtu", "schema": "{\n'vlan_id': {\n  Any  (str) *: {\n    'mtu_mismatch': <class 'str'>,\n    'vlan_mtu': <class 'str'>,\n    'vlan_max_mtu': <class 'str'>,\n    'vlan_min_mtu': <class 'str'>,\n    },\n  },\n}", "doc": "Parser for show vlan mtu", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_vlan.py#L273", "class": "ShowVlanMtu", "module_name": "show_vlan"}}, "show nve multisite dci-links": {"nxos": {"uid": "show_nve_multisite_dci-links", "schema": "{\n'multisite': {\n  Optional  (str) dci_links: {\n    Any  (str) *: {\n      'if_state': <class 'str'>,\n      'if_name': <class 'str'>,\n      },\n    },\n  },\n}", "doc": "parser for:\n        show nve multisite dci-links", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_vxlan.py#L604", "class": "ShowNveMultisiteDciLinks", "module_name": "show_vxlan"}}, "show mrib vrf {vrf} ipv6 route summary": {"iosxr": {"uid": "show_mrib_vrf_vrf_ipv6_route_summary", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'address_family': {\n      Any  (str) *: {\n        'no_g_routes': <class 'int'>,\n        'no_route_x_interfaces': <class 'int'>,\n        'no_s_g_routes': <class 'int'>,\n        'total_no_interfaces': <class 'int'>,\n        'no_group_ranges': <class 'int'>,\n        },\n      },\n    },\n  },\n}", "doc": "\n    Parser for show mrib vrf <vrf> <address-family> route summary\n    For checking any output with the parser, below mandatory keys have to be in cli command.\n    - vrf\n    - af (optional)\n    ", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_mrib.py#L267", "class": "ShowMribVrfRouteSummary", "module_name": "show_mrib"}}, "show mpls forwarding-table detail": {"iosxe": {"uid": "show_mpls_forwarding-table_detail", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'local_label': {\n      Any  (str) *: {\n        'outgoing_label_or_vc': {\n          Any  (str) *: {\n            'prefix_or_tunnel_id': {\n              Any  (str) *: {\n                Optional  (str) outgoing_interface: {\n                  Any  (str) *: {\n                    Optional  (str) lstack: <class 'str'>,\n                    Optional  (str) via: <class 'str'>,\n                    Optional  (str) broadcast: <class 'bool'>,\n                    'bytes_label_switched': <class 'int'>,\n                    Optional  (str) mru: <class 'int'>,\n                    Optional  (str) label_stack: <class 'str'>,\n                    Optional  (str) next_hop: <class 'str'>,\n                    Optional  (str) encaps: <class 'int'>,\n                    Optional  (str) vpn_route: <class 'str'>,\n                    Optional  (str) output_feature_configured: <class 'bool'>,\n                    Optional  (str) tsp_tunnel: <class 'bool'>,\n                    Optional  (str) mac: <class 'int'>,\n                    Optional  (str) load_sharing: {\n                      Optional  (str) slots: <class 'list'>,\n                      'method': <class 'str'>,\n                      },\n                    Optional  (str) macstr: <class 'str'>,\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "doc": "Parser for\n        show mpls forwarding-table\n        show mpls forwarding-table detail\n        show mpls forwarding-table vrf <vrf>\n        show mpls forwarding-table vrf <vrf> detail", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_mpls.py#L1794", "class": "ShowMplsForwardingTable", "module_name": "show_mpls"}}, "show ethernet tags": {"iosxr": {"uid": "show_ethernet_tags", "schema": "{\nAny  (str) *: {\n  Optional  (str) inner_vlan: <class 'str'>,\n  Optional  (str) status: <class 'str'>,\n  Optional  (str) xtra: <class 'str'>,\n  Optional  (str) mtu: <class 'int'>,\n  Optional  (str) outer_vlan: <class 'str'>,\n  Optional  (str) rewrite_num_of_tags_pop: <class 'int'>,\n  Optional  (str) vlan_id: <class 'str'>,\n  Optional  (str) rewrite_num_of_tags_push: <class 'int'>,\n  },\n}", "doc": "Parser for show ethernet tags", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_interface.py#L2158", "class": "ShowEthernetTags", "module_name": "show_interface"}}, "show archive config incremental-diffs {fileA}": {"ios": {"uid": "show_archive_config_incremental-diffs_fileA", "schema": "{\nOptional  (str) list_of_commands: <class 'list'>,\nOptional  (str) diff: <class 'list'>,\n}", "doc": " Parser for show archive config incremental-diffs <fileA>", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_archive.py#L24", "class": "ShowArchiveConfigIncrementalDiffs", "module_name": "show_archive"}, "iosxe": {"uid": "show_archive_config_incremental-diffs_fileA", "schema": "{\nOptional  (str) list_of_commands: <class 'list'>,\nOptional  (str) diff: <class 'list'>,\n}", "doc": " Parser for show archive config incremental-diffs <fileA>", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_archive.py#L214", "class": "ShowArchiveConfigIncrementalDiffs", "module_name": "show_archive"}}, "show switch detail": {"iosxe": {"uid": "show_switch_detail", "schema": "{\n'switch': {\n  'mac_address': <class 'str'>,\n  'mac_persistency_wait_time': <class 'str'>,\n  'stack': {\n    Any  (str) *: {\n      'state': <class 'str'>,\n      'ports': {\n        Any  (str) *: {\n          'stack_port_status': <class 'str'>,\n          'neighbors_num': <class 'int'>,\n          },\n        },\n      'hw_ver': <class 'str'>,\n      'priority': <class 'str'>,\n      'mac_address': <class 'str'>,\n      'role': <class 'str'>,\n      },\n    },\n  },\n}", "doc": "Parser for show switch detail.", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_platform.py#L1582", "class": "ShowSwitchDetail", "module_name": "show_platform"}}, "show l2route evpn ethernet-segment all": {"nxos": {"uid": "show_l2route_evpn_ethernet-segment_all", "schema": "{\n'evpn': {\n  'ethernet_segment': {\n    Any  (str) *: {\n      'int_ifhdl': <class 'str'>,\n      'prod_name': <class 'str'>,\n      'originating_rtr': <class 'str'>,\n      'client_nfn': <class 'int'>,\n      'ethernet_segment': <class 'str'>,\n      },\n    },\n  },\n}", "doc": "parser for:\n        show l2route evpn ethernet-segment all", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_vxlan.py#L975", "class": "ShowL2routeEvpnEternetSegmentAll", "module_name": "show_vxlan"}}, "show ip traffic": {"ios": {"uid": "show_ip_traffic", "schema": "{\n'icmp_statistics': {\n  Optional  (str) icmp_received_time_exceeded: <class 'int'>,\n  'icmp_sent_irdp_advertisements': <class 'int'>,\n  'icmp_received_irdp_advertisements': <class 'int'>,\n  Optional  (str) icmp_sent_info_reply: <class 'int'>,\n  Optional  (str) icmp_sent_timestamp_replies: <class 'int'>,\n  'icmp_sent_mask_requests': <class 'int'>,\n  'icmp_received_parameter': <class 'int'>,\n  'icmp_received_timestamp': <class 'int'>,\n  'icmp_sent_quench': <class 'int'>,\n  'icmp_received_mask_replies': <class 'int'>,\n  Optional  (str) icmp_sent_time_exceeded: <class 'int'>,\n  'icmp_received_redirects': <class 'int'>,\n  Optional  (str) icmp_received_info_replies: <class 'int'>,\n  'icmp_received_other': <class 'int'>,\n  'icmp_received_checksum_errors': <class 'int'>,\n  'icmp_received_mask_requests': <class 'int'>,\n  'icmp_received_format_errors': <class 'int'>,\n  'icmp_sent_redirects': <class 'int'>,\n  'icmp_sent_unreachable': <class 'int'>,\n  'icmp_sent_mask_replies': <class 'int'>,\n  'icmp_received_echo_reply': <class 'int'>,\n  'icmp_sent_irdp_solicitations': <class 'int'>,\n  'icmp_received_info_request': <class 'int'>,\n  'icmp_sent_echo_reply': <class 'int'>,\n  'icmp_sent_timestamp': <class 'int'>,\n  'icmp_received_unreachable': <class 'int'>,\n  'icmp_sent_parameter_problem': <class 'int'>,\n  'icmp_received_quench': <class 'int'>,\n  'icmp_received_echo': <class 'int'>,\n  'icmp_received_irdp_solicitations': <class 'int'>,\n  Optional  (str) icmp_received_timestamp_replies: <class 'int'>,\n  'icmp_sent_echo': <class 'int'>,\n  },\n'pimv2_statistics': {\n  'pimv2_total': <class 'str'>,\n  'pimv2_format_errors': <class 'int'>,\n  'pimv2_hellos': <class 'str'>,\n  'pimv2_candidate_rp_advs': <class 'str'>,\n  'pimv2_checksum_errors': <class 'int'>,\n  'pimv2_asserts': <class 'str'>,\n  'pimv2_grafts': <class 'str'>,\n  'pimv2_state_refresh': <class 'str'>,\n  'pimv2_bootstraps': <class 'str'>,\n  'pimv2_non_sm_group': <class 'int'>,\n  'pimv2_join_prunes': <class 'str'>,\n  Optional  (str) pimv2_queue_drops: <class 'int'>,\n  'pimv2_registers': <class 'str'>,\n  'pimv2_non_rp': <class 'int'>,\n  'pimv2_registers_stops': <class 'str'>,\n  },\n'udp_statistics': {\n  Optional  (str) udp_received_finput: <class 'int'>,\n  'udp_received_udp_checksum_errors': <class 'int'>,\n  'udp_sent_fwd_broadcasts': <class 'int'>,\n  'udp_received_total': <class 'int'>,\n  'udp_sent_total': <class 'int'>,\n  'udp_received_no_port': <class 'int'>,\n  },\n'tcp_statistics': {\n  'tcp_received_checksum_errors': <class 'int'>,\n  'tcp_received_total': <class 'int'>,\n  'tcp_sent_total': <class 'int'>,\n  'tcp_received_no_port': <class 'int'>,\n  },\n'bgp_statistics': {\n  'bgp_received_notifications': <class 'int'>,\n  'bgp_received_keepalives': <class 'int'>,\n  'bgp_received_updates': <class 'int'>,\n  'bgp_received_unrecognized': <class 'int'>,\n  'bgp_received_total': <class 'int'>,\n  'bgp_received_opens': <class 'int'>,\n  'bgp_received_route_refresh': <class 'int'>,\n  'bgp_sent_route_refresh': <class 'int'>,\n  'bgp_sent_opens': <class 'int'>,\n  'bgp_sent_updates': <class 'int'>,\n  'bgp_sent_notifications': <class 'int'>,\n  'bgp_sent_keepalives': <class 'int'>,\n  'bgp_sent_total': <class 'int'>,\n  },\n'eigrp_ipv4_statistics': {\n  'eigrp_ipv4_sent_total': <class 'int'>,\n  'eigrp_ipv4_received_total': <class 'int'>,\n  },\n'ospf_statistics': {\n  'ospf_received_lnk_st_acks': <class 'int'>,\n  'ospf_sent_lnk_st_updates': <class 'int'>,\n  'ospf_received_database_desc': <class 'int'>,\n  'ospf_received_total': <class 'int'>,\n  'ospf_received_hello': <class 'int'>,\n  'ospf_sent_hello': <class 'int'>,\n  'ospf_received_link_state_req': <class 'int'>,\n  'ospf_sent_lnk_st_acks': <class 'int'>,\n  'ospf_received_lnk_st_updates': <class 'int'>,\n  Optional  (str) ospf_traffic_cntrs_clear: <class 'str'>,\n  'ospf_sent_database_desc': <class 'int'>,\n  'ospf_sent_total': <class 'int'>,\n  'ospf_received_checksum_errors': <class 'int'>,\n  },\n'igmp_statistics': {\n  'igmp_host_queries': <class 'str'>,\n  'igmp_format_errors': <class 'str'>,\n  'igmp_pim': <class 'str'>,\n  'igmp_checksum_errors': <class 'str'>,\n  'igmp_dvmrp': <class 'str'>,\n  Optional  (str) igmp_queue_drops: <class 'int'>,\n  'igmp_host_leaves': <class 'str'>,\n  'igmp_total': <class 'str'>,\n  'igmp_host_reports': <class 'str'>,\n  },\n'arp_statistics': {\n  'arp_out_reverse': <class 'int'>,\n  'arp_in_replies': <class 'int'>,\n  'arp_out_replies': <class 'int'>,\n  'arp_out_proxy': <class 'int'>,\n  'arp_drops_input_full': <class 'int'>,\n  'arp_out_requests': <class 'int'>,\n  'arp_in_reverse': <class 'int'>,\n  'arp_in_other': <class 'int'>,\n  'arp_in_requests': <class 'int'>,\n  },\n'ip_statistics': {\n  'ip_frags_timeouts': <class 'int'>,\n  'ip_frags_no_reassembled': <class 'int'>,\n  'ip_rcvd_format_errors': <class 'int'>,\n  'ip_opts_record_route': <class 'int'>,\n  'ip_drop_encap_failed': <class 'int'>,\n  'ip_drop_unresolved': <class 'int'>,\n  'ip_opts_timestamp': <class 'int'>,\n  'ip_opts_end': <class 'int'>,\n  Optional  (str) ip_frags_fragments: <class 'int'>,\n  'ip_opts_extended_security': <class 'int'>,\n  'ip_rcvd_local_destination': <class 'int'>,\n  'ip_opts_cipso': <class 'int'>,\n  'ip_opts_basic_security': <class 'int'>,\n  'ip_rcvd_total': <class 'int'>,\n  'ip_opts_ump': <class 'int'>,\n  'ip_frags_reassembled': <class 'int'>,\n  'ip_drop_no_route': <class 'int'>,\n  'ip_bcast_received': <class 'int'>,\n  Optional  (str) ip_opts_ignored: <class 'int'>,\n  'ip_rcvd_unknwn_protocol': <class 'int'>,\n  'ip_bcast_sent': <class 'int'>,\n  'ip_rcvd_bad_hop': <class 'int'>,\n  'ip_mcast_sent': <class 'int'>,\n  Optional  (str) ip_frags_invalid_hole: <class 'int'>,\n  'ip_drop_unicast_rpf': <class 'int'>,\n  'ip_frags_no_fragmented': <class 'int'>,\n  'ip_opts_alert': <class 'int'>,\n  'ip_mcast_received': <class 'int'>,\n  Optional  (str) ip_drop_unsupp_address: <class 'int'>,\n  'ip_rcvd_checksum_errors': <class 'int'>,\n  'ip_rcvd_not_gateway': <class 'int'>,\n  'ip_drop_opts_denied': <class 'int'>,\n  'ip_frags_fragmented': <class 'int'>,\n  'ip_opts_loose_src_route': <class 'int'>,\n  'ip_rcvd_sec_failures': <class 'int'>,\n  Optional  (str) ip_drop_src_ip: <class 'int'>,\n  'ip_opts_other': <class 'int'>,\n  'ip_drop_forced_drop': <class 'int'>,\n  'ip_rcvd_with_optns': <class 'int'>,\n  'ip_opts_nop': <class 'int'>,\n  'ip_opts_strm_id': <class 'int'>,\n  'ip_opts_strct_src_route': <class 'int'>,\n  'ip_sent_forwarded': <class 'int'>,\n  'ip_sent_generated': <class 'int'>,\n  'ip_drop_no_adj': <class 'int'>,\n  'ip_rcvd_bad_optns': <class 'int'>,\n  },\n}", "doc": "Parser for: show ip traffic", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_arp.py#L55", "class": "ShowIpTraffic", "module_name": "show_arp"}, "iosxe": {"uid": "show_ip_traffic", "schema": "{\n'icmp_statistics': {\n  Optional  (str) icmp_received_time_exceeded: <class 'int'>,\n  'icmp_sent_irdp_advertisements': <class 'int'>,\n  'icmp_received_irdp_advertisements': <class 'int'>,\n  Optional  (str) icmp_sent_info_reply: <class 'int'>,\n  Optional  (str) icmp_sent_timestamp_replies: <class 'int'>,\n  'icmp_sent_mask_requests': <class 'int'>,\n  'icmp_received_parameter': <class 'int'>,\n  'icmp_received_timestamp': <class 'int'>,\n  'icmp_sent_quench': <class 'int'>,\n  'icmp_received_mask_replies': <class 'int'>,\n  Optional  (str) icmp_sent_time_exceeded: <class 'int'>,\n  'icmp_received_redirects': <class 'int'>,\n  Optional  (str) icmp_received_info_replies: <class 'int'>,\n  'icmp_received_other': <class 'int'>,\n  'icmp_received_checksum_errors': <class 'int'>,\n  'icmp_received_mask_requests': <class 'int'>,\n  'icmp_received_format_errors': <class 'int'>,\n  'icmp_sent_redirects': <class 'int'>,\n  'icmp_sent_unreachable': <class 'int'>,\n  'icmp_sent_mask_replies': <class 'int'>,\n  'icmp_received_echo_reply': <class 'int'>,\n  'icmp_sent_irdp_solicitations': <class 'int'>,\n  'icmp_received_info_request': <class 'int'>,\n  'icmp_sent_echo_reply': <class 'int'>,\n  'icmp_sent_timestamp': <class 'int'>,\n  'icmp_received_unreachable': <class 'int'>,\n  'icmp_sent_parameter_problem': <class 'int'>,\n  'icmp_received_quench': <class 'int'>,\n  'icmp_received_echo': <class 'int'>,\n  'icmp_received_irdp_solicitations': <class 'int'>,\n  Optional  (str) icmp_received_timestamp_replies: <class 'int'>,\n  'icmp_sent_echo': <class 'int'>,\n  },\n'pimv2_statistics': {\n  'pimv2_total': <class 'str'>,\n  'pimv2_format_errors': <class 'int'>,\n  'pimv2_hellos': <class 'str'>,\n  'pimv2_candidate_rp_advs': <class 'str'>,\n  'pimv2_checksum_errors': <class 'int'>,\n  'pimv2_asserts': <class 'str'>,\n  'pimv2_grafts': <class 'str'>,\n  'pimv2_state_refresh': <class 'str'>,\n  'pimv2_bootstraps': <class 'str'>,\n  'pimv2_non_sm_group': <class 'int'>,\n  'pimv2_join_prunes': <class 'str'>,\n  Optional  (str) pimv2_queue_drops: <class 'int'>,\n  'pimv2_registers': <class 'str'>,\n  'pimv2_non_rp': <class 'int'>,\n  'pimv2_registers_stops': <class 'str'>,\n  },\n'udp_statistics': {\n  Optional  (str) udp_received_finput: <class 'int'>,\n  'udp_received_udp_checksum_errors': <class 'int'>,\n  'udp_sent_fwd_broadcasts': <class 'int'>,\n  'udp_received_total': <class 'int'>,\n  'udp_sent_total': <class 'int'>,\n  'udp_received_no_port': <class 'int'>,\n  },\n'tcp_statistics': {\n  'tcp_received_checksum_errors': <class 'int'>,\n  'tcp_received_total': <class 'int'>,\n  'tcp_sent_total': <class 'int'>,\n  'tcp_received_no_port': <class 'int'>,\n  },\n'bgp_statistics': {\n  'bgp_received_notifications': <class 'int'>,\n  'bgp_received_keepalives': <class 'int'>,\n  'bgp_received_updates': <class 'int'>,\n  'bgp_received_unrecognized': <class 'int'>,\n  'bgp_received_total': <class 'int'>,\n  'bgp_received_opens': <class 'int'>,\n  'bgp_received_route_refresh': <class 'int'>,\n  'bgp_sent_route_refresh': <class 'int'>,\n  'bgp_sent_opens': <class 'int'>,\n  'bgp_sent_updates': <class 'int'>,\n  'bgp_sent_notifications': <class 'int'>,\n  'bgp_sent_keepalives': <class 'int'>,\n  'bgp_sent_total': <class 'int'>,\n  },\n'eigrp_ipv4_statistics': {\n  'eigrp_ipv4_sent_total': <class 'int'>,\n  'eigrp_ipv4_received_total': <class 'int'>,\n  },\n'ospf_statistics': {\n  'ospf_received_lnk_st_acks': <class 'int'>,\n  'ospf_sent_lnk_st_updates': <class 'int'>,\n  'ospf_received_database_desc': <class 'int'>,\n  'ospf_received_total': <class 'int'>,\n  'ospf_received_hello': <class 'int'>,\n  'ospf_sent_hello': <class 'int'>,\n  'ospf_received_link_state_req': <class 'int'>,\n  'ospf_sent_lnk_st_acks': <class 'int'>,\n  'ospf_received_lnk_st_updates': <class 'int'>,\n  Optional  (str) ospf_traffic_cntrs_clear: <class 'str'>,\n  'ospf_sent_database_desc': <class 'int'>,\n  'ospf_sent_total': <class 'int'>,\n  'ospf_received_checksum_errors': <class 'int'>,\n  },\n'igmp_statistics': {\n  'igmp_host_queries': <class 'str'>,\n  'igmp_format_errors': <class 'str'>,\n  'igmp_pim': <class 'str'>,\n  'igmp_checksum_errors': <class 'str'>,\n  'igmp_dvmrp': <class 'str'>,\n  Optional  (str) igmp_queue_drops: <class 'int'>,\n  'igmp_host_leaves': <class 'str'>,\n  'igmp_total': <class 'str'>,\n  'igmp_host_reports': <class 'str'>,\n  },\n'arp_statistics': {\n  'arp_out_reverse': <class 'int'>,\n  'arp_in_replies': <class 'int'>,\n  'arp_out_replies': <class 'int'>,\n  'arp_out_proxy': <class 'int'>,\n  'arp_drops_input_full': <class 'int'>,\n  'arp_out_requests': <class 'int'>,\n  'arp_in_reverse': <class 'int'>,\n  'arp_in_other': <class 'int'>,\n  'arp_in_requests': <class 'int'>,\n  },\n'ip_statistics': {\n  'ip_frags_timeouts': <class 'int'>,\n  'ip_frags_no_reassembled': <class 'int'>,\n  'ip_rcvd_format_errors': <class 'int'>,\n  'ip_opts_record_route': <class 'int'>,\n  'ip_drop_encap_failed': <class 'int'>,\n  'ip_drop_unresolved': <class 'int'>,\n  'ip_opts_timestamp': <class 'int'>,\n  'ip_opts_end': <class 'int'>,\n  Optional  (str) ip_frags_fragments: <class 'int'>,\n  'ip_opts_extended_security': <class 'int'>,\n  'ip_rcvd_local_destination': <class 'int'>,\n  'ip_opts_cipso': <class 'int'>,\n  'ip_opts_basic_security': <class 'int'>,\n  'ip_rcvd_total': <class 'int'>,\n  'ip_opts_ump': <class 'int'>,\n  'ip_frags_reassembled': <class 'int'>,\n  'ip_drop_no_route': <class 'int'>,\n  'ip_bcast_received': <class 'int'>,\n  Optional  (str) ip_opts_ignored: <class 'int'>,\n  'ip_rcvd_unknwn_protocol': <class 'int'>,\n  'ip_bcast_sent': <class 'int'>,\n  'ip_rcvd_bad_hop': <class 'int'>,\n  'ip_mcast_sent': <class 'int'>,\n  Optional  (str) ip_frags_invalid_hole: <class 'int'>,\n  'ip_drop_unicast_rpf': <class 'int'>,\n  'ip_frags_no_fragmented': <class 'int'>,\n  'ip_opts_alert': <class 'int'>,\n  'ip_mcast_received': <class 'int'>,\n  Optional  (str) ip_drop_unsupp_address: <class 'int'>,\n  'ip_rcvd_checksum_errors': <class 'int'>,\n  'ip_rcvd_not_gateway': <class 'int'>,\n  'ip_drop_opts_denied': <class 'int'>,\n  'ip_frags_fragmented': <class 'int'>,\n  'ip_opts_loose_src_route': <class 'int'>,\n  'ip_rcvd_sec_failures': <class 'int'>,\n  Optional  (str) ip_drop_src_ip: <class 'int'>,\n  'ip_opts_other': <class 'int'>,\n  'ip_drop_forced_drop': <class 'int'>,\n  'ip_rcvd_with_optns': <class 'int'>,\n  'ip_opts_nop': <class 'int'>,\n  'ip_opts_strm_id': <class 'int'>,\n  'ip_opts_strct_src_route': <class 'int'>,\n  'ip_sent_forwarded': <class 'int'>,\n  'ip_sent_generated': <class 'int'>,\n  'ip_drop_no_adj': <class 'int'>,\n  'ip_rcvd_bad_optns': <class 'int'>,\n  },\n}", "doc": "Parser for:\n        show ip traffic\n        parser class - implements detail parsing mechanisms for cli,xml and yang output.\n    ", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_arp.py#L340", "class": "ShowIpTraffic", "module_name": "show_arp"}}, "show bgp {address_family} all neighbors": {"ios": {"uid": "show_bgp_address_family_all_neighbors", "schema": "{\nOptional  (str) list_of_neighbors: <class 'list'>,\n'vrf': {\n  Any  (str) *: {\n    'neighbor': {\n      Any  (str) *: {\n        Optional  (str) bgp_event_timer: {\n          'starts': {\n            Any  (str) *: <class 'int'>,\n            },\n          'wakeups': {\n            Any  (str) *: <class 'int'>,\n            },\n          'next': {\n            Any  (str) *: <class 'str'>,\n            },\n          },\n        'address_family': {\n          Any  (str) *: {\n            Optional  (str) refresh_epoch: <class 'int'>,\n            Optional  (str) session_state: <class 'str'>,\n            Optional  (str) max_nlri: <class 'int'>,\n            Optional  (str) up_time: <class 'str'>,\n            Optional  (str) min_nlri: <class 'int'>,\n            Optional  (str) down_time: <class 'str'>,\n            Optional  (str) refresh_activity_counters: {\n              'sent': {\n                Any  (str) *: <class 'int'>,\n                },\n              'received': {\n                Any  (str) *: <class 'int'>,\n                },\n              },\n            Optional  (str) local_policy_denied_prefixes_counters: {\n              'inbound': {\n                Any  (str) *: Any  (str) *,\n                },\n              'outbound': {\n                Any  (str) *: Any  (str) *,\n                },\n              },\n            Optional  (str) last_detected_dynamic_slow_peer: <class 'str'>,\n            Optional  (str) last_read: <class 'str'>,\n            Optional  (str) dynamic_slow_peer_recovered: <class 'str'>,\n            Optional  (str) last_write: <class 'str'>,\n            Optional  (str) last_sent_refresh_start_of_rib: <class 'str'>,\n            Optional  (str) current_time: <class 'str'>,\n            Optional  (str) last_received_refresh_start_of_rib: <class 'str'>,\n            Optional  (str) bgp_table_version: <class 'int'>,\n            Optional  (str) last_sent_refresh_end_of_rib: <class 'str'>,\n            Optional  (str) neighbor_version: <class 'str'>,\n            Optional  (str) last_received_refresh_end_of_rib: <class 'str'>,\n            Optional  (str) output_queue_size: <class 'int'>,\n            Optional  (str) refresh_out: <class 'int'>,\n            Optional  (str) index: <class 'int'>,\n            Optional  (str) refresh_in: <class 'int'>,\n            Optional  (str) advertise_bit: <class 'int'>,\n            Optional  (str) route_reflector_client: <class 'bool'>,\n            Optional  (str) update_group_member: <class 'int'>,\n            Optional  (str) community_attribute_sent: <class 'bool'>,\n            Optional  (str) extended_community_attribute_sent: <class 'bool'>,\n            Optional  (str) prefix_activity_counters: {\n              'sent': {\n                Any  (str) *: Any  (str) *,\n                },\n              'received': {\n                Any  (str) *: Any  (str) *,\n                },\n              },\n            Optional  (str) suppress_ldp_signaling: <class 'bool'>,\n            Optional  (str) slow_peer_detection: <class 'bool'>,\n            Optional  (str) slow_peer_split_update_group_dynamic: <class 'bool'>,\n            },\n          },\n        'bgp_neighbor_counters': {\n          'messages': {\n            'sent': {\n              'notifications': <class 'int'>,\n              'route_refresh': <class 'int'>,\n              'total': <class 'int'>,\n              'opens': <class 'int'>,\n              'keepalives': <class 'int'>,\n              'updates': <class 'int'>,\n              },\n            'in_queue_depth': <class 'int'>,\n            'received': {\n              'notifications': <class 'int'>,\n              'route_refresh': <class 'int'>,\n              'total': <class 'int'>,\n              'opens': <class 'int'>,\n              'keepalives': <class 'int'>,\n              'updates': <class 'int'>,\n              },\n            'out_queue_depth': <class 'int'>,\n            },\n          },\n        'bgp_negotiated_keepalive_timers': {\n          'keepalive_interval': <class 'int'>,\n          'hold_time': <class 'int'>,\n          Optional  (str) min_holdtime: <class 'int'>,\n          },\n        'link': <class 'str'>,\n        'router_id': <class 'str'>,\n        Optional  (str) bgp_session_transport: {\n          Optional  (str) enqueued_packets: {\n            'mis_ordered_packet': <class 'int'>,\n            'input_packet': <class 'int'>,\n            'retransmit_packet': <class 'int'>,\n            },\n          Optional  (str) iss: <class 'int'>,\n          Optional  (str) snduna: <class 'int'>,\n          'connection': {\n            Optional  (str) reset_reason: <class 'str'>,\n            'dropped': <class 'int'>,\n            'established': <class 'int'>,\n            'last_reset': <class 'str'>,\n            },\n          Optional  (str) sndnxt: <class 'int'>,\n          Optional  (str) irs: <class 'int'>,\n          'address_tracking_status': <class 'str'>,\n          Optional  (str) sndwnd: <class 'int'>,\n          Optional  (str) snd_scale: <class 'int'>,\n          Optional  (str) maxrcvwnd: <class 'int'>,\n          Optional  (str) rcvwnd: <class 'int'>,\n          Optional  (str) rcv_scale: <class 'int'>,\n          Optional  (str) delrcvwnd: <class 'int'>,\n          Optional  (str) srtt: <class 'int'>,\n          'min_time_between_advertisement_runs': <class 'int'>,\n          Optional  (str) rtto: <class 'int'>,\n          Optional  (str) rtv: <class 'int'>,\n          Optional  (str) krtt: <class 'int'>,\n          Optional  (str) min_rtt: <class 'int'>,\n          Optional  (str) max_rtt: <class 'int'>,\n          Optional  (str) ack_hold: <class 'int'>,\n          Optional  (str) uptime: <class 'int'>,\n          Optional  (str) sent_idletime: <class 'int'>,\n          Optional  (str) receive_idletime: <class 'int'>,\n          Optional  (str) tcp_connection: <class 'bool'>,\n          Optional  (str) status_flags: <class 'str'>,\n          Optional  (str) option_flags: <class 'str'>,\n          Optional  (str) ip_precedence_value: <class 'int'>,\n          'tcp_path_mtu_discovery': <class 'str'>,\n          Optional  (str) transport: {\n            'local_port': <class 'str'>,\n            'local_host': <class 'str'>,\n            'foreign_port': <class 'str'>,\n            Optional  (str) mss: <class 'int'>,\n            'foreign_host': <class 'str'>,\n            },\n          Optional  (str) datagram: {\n            'datagram_sent': {\n              'second_congestion': <class 'int'>,\n              'with_data': <class 'int'>,\n              'retransmit': <class 'int'>,\n              'partialack': <class 'int'>,\n              'value': <class 'int'>,\n              'fastretransmit': <class 'int'>,\n              'total_data': <class 'int'>,\n              },\n            'datagram_received': {\n              'out_of_order': <class 'int'>,\n              'with_data': <class 'int'>,\n              'total_data': <class 'int'>,\n              'value': <class 'int'>,\n              },\n            },\n          Optional  (str) graceful_restart: <class 'str'>,\n          Optional  (str) packet_fast_path: <class 'int'>,\n          Optional  (str) gr_restart_time: <class 'int'>,\n          Optional  (str) packet_fast_processed: <class 'int'>,\n          Optional  (str) gr_stalepath_time: <class 'int'>,\n          Optional  (str) packet_slow_path: <class 'int'>,\n          Optional  (str) connection_state: <class 'str'>,\n          Optional  (str) fast_lock_acquisition_failures: <class 'int'>,\n          Optional  (str) io_status: <class 'int'>,\n          Optional  (str) lock_slow_path: <class 'int'>,\n          Optional  (str) unread_input_bytes: <class 'int'>,\n          Optional  (str) tcp_semaphore: <class 'str'>,\n          Optional  (str) ecn_connection: <class 'str'>,\n          Optional  (str) tcp_semaphore_status: <class 'str'>,\n          Optional  (str) minimum_incoming_ttl: <class 'int'>,\n          Optional  (str) sso: <class 'bool'>,\n          Optional  (str) outgoing_ttl: <class 'int'>,\n          Optional  (str) rcvnxt: <class 'int'>,\n          Optional  (str) connection_tableid: <class 'int'>,\n          'rib_route_ip': <class 'str'>,\n          Optional  (str) maximum_output_segment_queue_size: <class 'int'>,\n          },\n        'remote_as': <class 'int'>,\n        'bgp_version': <class 'int'>,\n        'session_state': <class 'str'>,\n        'shutdown': <class 'bool'>,\n        Optional  (str) local_as: <class 'int'>,\n        'bgp_negotiated_capabilities': {\n          'four_octets_asn': <class 'str'>,\n          Optional  (str) vpnv4_unicast: <class 'str'>,\n          Optional  (str) graceful_restart: <class 'str'>,\n          'route_refresh': <class 'str'>,\n          Optional  (str) vpnv6_unicast: <class 'str'>,\n          'stateful_switchover': <class 'str'>,\n          Optional  (str) ipv4_unicast: <class 'str'>,\n          Optional  (str) remote_restart_timer: <class 'int'>,\n          Optional  (str) ipv6_unicast: <class 'str'>,\n          Optional  (str) l2vpn_vpls: <class 'str'>,\n          Optional  (str) l2vpn_evpn: <class 'str'>,\n          Optional  (str) vpnv4_multicast: <class 'str'>,\n          Optional  (str) multisession: <class 'str'>,\n          Optional  (str) graceful_restart_af_advertised_by_peer: <class 'list'>,\n          Optional  (str) vpnv6_multicast: <class 'str'>,\n          'enhanced_refresh': <class 'str'>,\n          Optional  (str) mvpnv4_multicast: <class 'str'>,\n          Optional  (str) mvpnv6_multicast: <class 'str'>,\n          },\n        Optional  (str) description: <class 'str'>,\n        },\n      },\n    },\n  },\n}", "doc": "\n    Parser for show bgp all neighbors\n    ", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_bgp.py#L75", "class": "ShowBgpAllNeighbors", "module_name": "show_bgp"}, "iosxe": {"uid": "show_bgp_address_family_all_neighbors", "schema": "{\nOptional  (str) list_of_neighbors: <class 'list'>,\n'vrf': {\n  Any  (str) *: {\n    'neighbor': {\n      Any  (str) *: {\n        Optional  (str) bgp_event_timer: {\n          'starts': {\n            Any  (str) *: <class 'int'>,\n            },\n          'wakeups': {\n            Any  (str) *: <class 'int'>,\n            },\n          'next': {\n            Any  (str) *: <class 'str'>,\n            },\n          },\n        'address_family': {\n          Any  (str) *: {\n            Optional  (str) refresh_epoch: <class 'int'>,\n            Optional  (str) session_state: <class 'str'>,\n            Optional  (str) max_nlri: <class 'int'>,\n            Optional  (str) up_time: <class 'str'>,\n            Optional  (str) min_nlri: <class 'int'>,\n            Optional  (str) down_time: <class 'str'>,\n            Optional  (str) refresh_activity_counters: {\n              'sent': {\n                Any  (str) *: <class 'int'>,\n                },\n              'received': {\n                Any  (str) *: <class 'int'>,\n                },\n              },\n            Optional  (str) local_policy_denied_prefixes_counters: {\n              'inbound': {\n                Any  (str) *: Any  (str) *,\n                },\n              'outbound': {\n                Any  (str) *: Any  (str) *,\n                },\n              },\n            Optional  (str) last_detected_dynamic_slow_peer: <class 'str'>,\n            Optional  (str) last_read: <class 'str'>,\n            Optional  (str) dynamic_slow_peer_recovered: <class 'str'>,\n            Optional  (str) last_write: <class 'str'>,\n            Optional  (str) last_sent_refresh_start_of_rib: <class 'str'>,\n            Optional  (str) current_time: <class 'str'>,\n            Optional  (str) last_received_refresh_start_of_rib: <class 'str'>,\n            Optional  (str) bgp_table_version: <class 'int'>,\n            Optional  (str) last_sent_refresh_end_of_rib: <class 'str'>,\n            Optional  (str) neighbor_version: <class 'str'>,\n            Optional  (str) last_received_refresh_end_of_rib: <class 'str'>,\n            Optional  (str) output_queue_size: <class 'int'>,\n            Optional  (str) refresh_out: <class 'int'>,\n            Optional  (str) index: <class 'int'>,\n            Optional  (str) refresh_in: <class 'int'>,\n            Optional  (str) advertise_bit: <class 'int'>,\n            Optional  (str) route_reflector_client: <class 'bool'>,\n            Optional  (str) update_group_member: <class 'int'>,\n            Optional  (str) community_attribute_sent: <class 'bool'>,\n            Optional  (str) extended_community_attribute_sent: <class 'bool'>,\n            Optional  (str) prefix_activity_counters: {\n              'sent': {\n                Any  (str) *: Any  (str) *,\n                },\n              'received': {\n                Any  (str) *: Any  (str) *,\n                },\n              },\n            Optional  (str) suppress_ldp_signaling: <class 'bool'>,\n            Optional  (str) slow_peer_detection: <class 'bool'>,\n            Optional  (str) slow_peer_split_update_group_dynamic: <class 'bool'>,\n            },\n          },\n        'bgp_neighbor_counters': {\n          'messages': {\n            'sent': {\n              'notifications': <class 'int'>,\n              'route_refresh': <class 'int'>,\n              'total': <class 'int'>,\n              'opens': <class 'int'>,\n              'keepalives': <class 'int'>,\n              'updates': <class 'int'>,\n              },\n            'in_queue_depth': <class 'int'>,\n            'received': {\n              'notifications': <class 'int'>,\n              'route_refresh': <class 'int'>,\n              'total': <class 'int'>,\n              'opens': <class 'int'>,\n              'keepalives': <class 'int'>,\n              'updates': <class 'int'>,\n              },\n            'out_queue_depth': <class 'int'>,\n            },\n          },\n        'bgp_negotiated_keepalive_timers': {\n          'keepalive_interval': <class 'int'>,\n          'hold_time': <class 'int'>,\n          Optional  (str) min_holdtime: <class 'int'>,\n          },\n        'link': <class 'str'>,\n        'router_id': <class 'str'>,\n        Optional  (str) bgp_session_transport: {\n          Optional  (str) enqueued_packets: {\n            'mis_ordered_packet': <class 'int'>,\n            'input_packet': <class 'int'>,\n            'retransmit_packet': <class 'int'>,\n            },\n          Optional  (str) iss: <class 'int'>,\n          Optional  (str) snduna: <class 'int'>,\n          'connection': {\n            Optional  (str) reset_reason: <class 'str'>,\n            'dropped': <class 'int'>,\n            'established': <class 'int'>,\n            'last_reset': <class 'str'>,\n            },\n          Optional  (str) sndnxt: <class 'int'>,\n          Optional  (str) irs: <class 'int'>,\n          'address_tracking_status': <class 'str'>,\n          Optional  (str) sndwnd: <class 'int'>,\n          Optional  (str) snd_scale: <class 'int'>,\n          Optional  (str) maxrcvwnd: <class 'int'>,\n          Optional  (str) rcvwnd: <class 'int'>,\n          Optional  (str) rcv_scale: <class 'int'>,\n          Optional  (str) delrcvwnd: <class 'int'>,\n          Optional  (str) srtt: <class 'int'>,\n          'min_time_between_advertisement_runs': <class 'int'>,\n          Optional  (str) rtto: <class 'int'>,\n          Optional  (str) rtv: <class 'int'>,\n          Optional  (str) krtt: <class 'int'>,\n          Optional  (str) min_rtt: <class 'int'>,\n          Optional  (str) max_rtt: <class 'int'>,\n          Optional  (str) ack_hold: <class 'int'>,\n          Optional  (str) uptime: <class 'int'>,\n          Optional  (str) sent_idletime: <class 'int'>,\n          Optional  (str) receive_idletime: <class 'int'>,\n          Optional  (str) tcp_connection: <class 'bool'>,\n          Optional  (str) status_flags: <class 'str'>,\n          Optional  (str) option_flags: <class 'str'>,\n          Optional  (str) ip_precedence_value: <class 'int'>,\n          'tcp_path_mtu_discovery': <class 'str'>,\n          Optional  (str) transport: {\n            'local_port': <class 'str'>,\n            'local_host': <class 'str'>,\n            'foreign_port': <class 'str'>,\n            Optional  (str) mss: <class 'int'>,\n            'foreign_host': <class 'str'>,\n            },\n          Optional  (str) datagram: {\n            'datagram_sent': {\n              'second_congestion': <class 'int'>,\n              'with_data': <class 'int'>,\n              'retransmit': <class 'int'>,\n              'partialack': <class 'int'>,\n              'value': <class 'int'>,\n              'fastretransmit': <class 'int'>,\n              'total_data': <class 'int'>,\n              },\n            'datagram_received': {\n              'out_of_order': <class 'int'>,\n              'with_data': <class 'int'>,\n              'total_data': <class 'int'>,\n              'value': <class 'int'>,\n              },\n            },\n          Optional  (str) graceful_restart: <class 'str'>,\n          Optional  (str) packet_fast_path: <class 'int'>,\n          Optional  (str) gr_restart_time: <class 'int'>,\n          Optional  (str) packet_fast_processed: <class 'int'>,\n          Optional  (str) gr_stalepath_time: <class 'int'>,\n          Optional  (str) packet_slow_path: <class 'int'>,\n          Optional  (str) connection_state: <class 'str'>,\n          Optional  (str) fast_lock_acquisition_failures: <class 'int'>,\n          Optional  (str) io_status: <class 'int'>,\n          Optional  (str) lock_slow_path: <class 'int'>,\n          Optional  (str) unread_input_bytes: <class 'int'>,\n          Optional  (str) tcp_semaphore: <class 'str'>,\n          Optional  (str) ecn_connection: <class 'str'>,\n          Optional  (str) tcp_semaphore_status: <class 'str'>,\n          Optional  (str) minimum_incoming_ttl: <class 'int'>,\n          Optional  (str) sso: <class 'bool'>,\n          Optional  (str) outgoing_ttl: <class 'int'>,\n          Optional  (str) rcvnxt: <class 'int'>,\n          Optional  (str) connection_tableid: <class 'int'>,\n          'rib_route_ip': <class 'str'>,\n          Optional  (str) maximum_output_segment_queue_size: <class 'int'>,\n          },\n        'remote_as': <class 'int'>,\n        'bgp_version': <class 'int'>,\n        'session_state': <class 'str'>,\n        'shutdown': <class 'bool'>,\n        Optional  (str) local_as: <class 'int'>,\n        'bgp_negotiated_capabilities': {\n          'four_octets_asn': <class 'str'>,\n          Optional  (str) vpnv4_unicast: <class 'str'>,\n          Optional  (str) graceful_restart: <class 'str'>,\n          'route_refresh': <class 'str'>,\n          Optional  (str) vpnv6_unicast: <class 'str'>,\n          'stateful_switchover': <class 'str'>,\n          Optional  (str) ipv4_unicast: <class 'str'>,\n          Optional  (str) remote_restart_timer: <class 'int'>,\n          Optional  (str) ipv6_unicast: <class 'str'>,\n          Optional  (str) l2vpn_vpls: <class 'str'>,\n          Optional  (str) l2vpn_evpn: <class 'str'>,\n          Optional  (str) vpnv4_multicast: <class 'str'>,\n          Optional  (str) multisession: <class 'str'>,\n          Optional  (str) graceful_restart_af_advertised_by_peer: <class 'list'>,\n          Optional  (str) vpnv6_multicast: <class 'str'>,\n          'enhanced_refresh': <class 'str'>,\n          Optional  (str) mvpnv4_multicast: <class 'str'>,\n          Optional  (str) mvpnv6_multicast: <class 'str'>,\n          },\n        Optional  (str) description: <class 'str'>,\n        },\n      },\n    },\n  },\n}", "doc": " Parser for:\n        * 'show bgp all neighbors'\n        * 'show bgp all neighbors {neighbor}'\n        * 'show bgp {address_family} all neighbors'\n        * 'show bgp {address_family} all neighbors {neighbor}'\n    ", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_bgp.py#L3680", "class": "ShowBgpAllNeighbors", "module_name": "show_bgp"}}, "show vlan": {"ios": {"uid": "show_vlan", "schema": "{\n'vlans': {\n  Any  (str) *: {\n    Optional  (str) interfaces: <class 'list'>,\n    Optional  (str) trans1: <class 'int'>,\n    Optional  (str) remote_span_vlan: <class 'bool'>,\n    Optional  (str) trans2: <class 'int'>,\n    Optional  (str) type: <class 'str'>,\n    Optional  (str) said: <class 'int'>,\n    Optional  (str) mtu: <class 'int'>,\n    Optional  (str) parent: <class 'str'>,\n    Optional  (str) vlan_id: <class 'str'>,\n    Optional  (str) ring_no: <class 'str'>,\n    Optional  (str) bridge_no: <class 'str'>,\n    Optional  (str) name: <class 'str'>,\n    Optional  (str) stp: <class 'str'>,\n    Optional  (str) private_vlan: {\n      Optional  (str) type: <class 'str'>,\n      Optional  (str) primary: <class 'bool'>,\n      Optional  (str) ports: <class 'list'>,\n      Optional  (str) association: <class 'list'>,\n      },\n    Optional  (str) state: <class 'str'>,\n    Optional  (str) bridge_mode: <class 'str'>,\n    Optional  (str) shutdown: <class 'bool'>,\n    },\n  },\n}", "doc": null, "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_vlan.py#L12", "class": "ShowVlan", "module_name": "show_vlan"}, "nxos": {"uid": "show_vlan", "schema": "{\n'vlan_id': {\n  Any  (str) *: {\n    Optional  (str) private_vlan_type: <class 'str'>,\n    Optional  (str) ports: Or (<class 'str'>, None),\n    Optional  (str) private_secondary_vlan: <class 'str'>,\n    Optional  (str) stp: <class 'str'>,\n    'name': <class 'str'>,\n    Optional  (str) Trans1: <class 'str'>,\n    Optional  (str) Trans2: <class 'str'>,\n    Optional  (str) type: <class 'str'>,\n    'status': <class 'str'>,\n    Optional  (str) parent: <class 'str'>,\n    Optional  (str) said: <class 'str'>,\n    Optional  (str) BrdgMode: <class 'str'>,\n    Optional  (str) RingNo: <class 'str'>,\n    Optional  (str) mtu: <class 'str'>,\n    'vlan_type': <class 'str'>,\n    'vl_mode': <class 'str'>,\n    Optional  (str) BridgeNo: <class 'str'>,\n    Optional  (str) remote_span_vlan: <class 'bool'>,\n    },\n  },\n}", "doc": " parser class - implements detail parsing mechanisms for cli, xml, and\n    yang output.\n    ", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_vlan.py#L305", "class": "ShowVlanOld", "module_name": "show_vlan"}, "iosxe": {"uid": "show_vlan", "schema": "{\n'vlans': {\n  Any  (str) *: {\n    Optional  (str) interfaces: <class 'list'>,\n    Optional  (str) trans1: <class 'int'>,\n    Optional  (str) remote_span_vlan: <class 'bool'>,\n    Optional  (str) trans2: <class 'int'>,\n    Optional  (str) type: <class 'str'>,\n    Optional  (str) said: <class 'int'>,\n    Optional  (str) mtu: <class 'int'>,\n    Optional  (str) parent: <class 'str'>,\n    Optional  (str) vlan_id: <class 'str'>,\n    Optional  (str) ring_no: <class 'str'>,\n    Optional  (str) bridge_no: <class 'str'>,\n    Optional  (str) name: <class 'str'>,\n    Optional  (str) stp: <class 'str'>,\n    Optional  (str) private_vlan: {\n      Optional  (str) type: <class 'str'>,\n      Optional  (str) primary: <class 'bool'>,\n      Optional  (str) ports: <class 'list'>,\n      Optional  (str) association: <class 'list'>,\n      },\n    Optional  (str) state: <class 'str'>,\n    Optional  (str) bridge_mode: <class 'str'>,\n    Optional  (str) shutdown: <class 'bool'>,\n    },\n  },\n}", "doc": "Parser for show vlan", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_vlan.py#L68", "class": "ShowVlan", "module_name": "show_vlan"}}, "show bgp vrf {vrf} {address_family} policy statistics redistribute": {"nxos": {"uid": "show_bgp_vrf_vrf_address_family_policy_statistics_redistribute", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    Optional  (str) rpm_handle_count: <class 'int'>,\n    Optional  (str) route_map: {\n      Any  (str) *: {\n        Any  (str) *: {\n          'action': <class 'str'>,\n          'seq_num': <class 'int'>,\n          'total_accept_count': <class 'int'>,\n          Optional  (str) command: {\n            'command': <class 'str'>,\n            'compare_count': <class 'int'>,\n            'match_count': <class 'int'>,\n            },\n          'total_reject_count': <class 'int'>,\n          },\n        },\n      },\n    },\n  },\n}", "doc": "Parser for:\n        show bgp [vrf <vrf>] <address_family> policy statistics redistribute\n        parser class implements detail parsing mechanisms for cli,xml output", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_bgp.py#L8863", "class": "ShowBgpPolicyStatisticsRedistribute", "module_name": "show_bgp"}}, "show ip interface brief": {"ios": {"uid": "show_ip_interface_brief", "schema": "{\n'interface': {\n  Any  (str) *: {\n    Optional  (str) vlan_id: {\n      Optional  (Any) Any  (str) *: {\n        'ip_address': <class 'str'>,\n        Optional  (str) protocol: <class 'str'>,\n        Optional  (str) method: <class 'str'>,\n        Optional  (str) status: <class 'str'>,\n        Optional  (str) interface_is_ok: <class 'str'>,\n        },\n      },\n    Optional  (str) protocol: <class 'str'>,\n    Optional  (str) interface_is_ok: <class 'str'>,\n    Optional  (str) ip_address: <class 'str'>,\n    Optional  (str) method: <class 'str'>,\n    Optional  (str) status: <class 'str'>,\n    },\n  },\n}", "doc": "Parser for: show ip interface brief", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_interface.py#L43", "class": "ShowIpInterfaceBrief", "module_name": "show_interface"}, "nxos": {"uid": "show_ip_interface_brief", "schema": "{\n'interface': {\n  Any  (str) *: {\n    Optional  (str) ipaddress_extension: <class 'str'>,\n    Optional  (str) ip_address: <class 'str'>,\n    Optional  (str) interface_status: <class 'str'>,\n    Optional  (str) vlan_id: {\n      Optional  (Any) Any  (str) *: {\n        'ip_address': <class 'str'>,\n        'interface_status': <class 'str'>,\n        Optional  (str) ipaddress_extension: <class 'str'>,\n        },\n      },\n    },\n  },\n}", "doc": "Parser for show ip interface brief", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_interface.py#L2306", "class": "ShowIpInterfaceBrief", "module_name": "show_interface"}, "iosxr": {"uid": "show_ip_interface_brief", "schema": "{\n'interface': {\n  Any  (str) *: {\n    Optional  (str) protocol_status: <class 'str'>,\n    Optional  (str) vrf_name: <class 'str'>,\n    Optional  (str) interface_status: <class 'str'>,\n    Optional  (str) ip_address: <class 'str'>,\n    },\n  },\n}", "doc": "Parser for show ip interface brief | include Vlan", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_interface.py#L102", "class": "ShowIpInterfaceBriefPipeVlan", "module_name": "show_interface"}, "iosxe": {"uid": "show_ip_interface_brief", "schema": "{\n'interface': {\n  Any  (str) *: {\n    Optional  (str) vlan_id: {\n      Optional  (Any) Any  (str) *: {\n        'ip_address': <class 'str'>,\n        Optional  (str) protocol: <class 'str'>,\n        Optional  (str) method: <class 'str'>,\n        Optional  (str) status: <class 'str'>,\n        Optional  (str) interface_is_ok: <class 'str'>,\n        },\n      },\n    Optional  (str) protocol: <class 'str'>,\n    Optional  (str) interface_is_ok: <class 'str'>,\n    Optional  (str) ip_address: <class 'str'>,\n    Optional  (str) method: <class 'str'>,\n    Optional  (str) status: <class 'str'>,\n    },\n  },\n}", "doc": "Parser for:\n     show ip interface brief\n     parser class implements detail parsing mechanisms for cli and yang output.\n    ", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_interface.py#L858", "class": "ShowIpInterfaceBrief", "module_name": "show_interface"}}, "show ip ospf": {"ios": {"uid": "show_ip_ospf", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'address_family': {\n      Any  (str) *: {\n        'instance': {\n          Any  (str) *: {\n            Optional  (str) stub_router: {\n              Optional  (str) always: {\n                'summary_lsa': <class 'bool'>,\n                Optional  (str) summary_lsa_metric: <class 'int'>,\n                Optional  (str) external_lsa_metric: <class 'int'>,\n                'external_lsa': <class 'bool'>,\n                Optional  (str) state: <class 'str'>,\n                'always': <class 'bool'>,\n                'include_stub': <class 'bool'>,\n                },\n              Optional  (str) on_startup: {\n                'on_startup': <class 'int'>,\n                'summary_lsa': <class 'bool'>,\n                'external_lsa': <class 'bool'>,\n                'state': <class 'str'>,\n                'external_lsa_metric': <class 'int'>,\n                'include_stub': <class 'bool'>,\n                'summary_lsa_metric': <class 'int'>,\n                },\n              },\n            Optional  (str) interface_flood_pacing_timer: <class 'int'>,\n            Optional  (str) domain_id_value: <class 'str'>,\n            Optional  (str) start_time: <class 'str'>,\n            Optional  (str) nssa: <class 'bool'>,\n            'router_id': <class 'str'>,\n            Optional  (str) area_transit: <class 'bool'>,\n            Optional  (str) flags: {\n              Optional  (str) abr: <class 'bool'>,\n              Optional  (str) asbr: <class 'bool'>,\n              },\n            Optional  (str) external_flood_list_length: <class 'int'>,\n            Optional  (str) numbers: {\n              Optional  (str) external_lsa_checksum: <class 'str'>,\n              Optional  (str) opaque_as_lsa: <class 'int'>,\n              Optional  (str) opaque_as_lsa_checksum: <class 'str'>,\n              Optional  (str) dc_bitless: <class 'int'>,\n              Optional  (str) external_lsa: <class 'int'>,\n              Optional  (str) do_not_age: <class 'int'>,\n              },\n            Optional  (str) redistribution: {\n              Optional  (str) bgp: {\n                Optional  (str) subnets: <class 'str'>,\n                Optional  (str) nssa_only: <class 'str'>,\n                Optional  (str) metric: <class 'int'>,\n                'bgp_id': <class 'int'>,\n                },\n              Optional  (str) static: {\n                'enabled': <class 'bool'>,\n                Optional  (str) subnets: <class 'str'>,\n                Optional  (str) metric: <class 'int'>,\n                },\n              Optional  (str) isis: {\n                Optional  (str) metric: <class 'int'>,\n                Optional  (str) subnets: <class 'str'>,\n                'isis_pid': <class 'str'>,\n                },\n              Optional  (str) max_prefix: {\n                Optional  (str) warn_only: <class 'bool'>,\n                Optional  (str) num_of_prefix: <class 'int'>,\n                Optional  (str) prefix_thld: <class 'int'>,\n                },\n              Optional  (str) connected: {\n                'enabled': <class 'bool'>,\n                Optional  (str) subnets: <class 'str'>,\n                Optional  (str) metric: <class 'int'>,\n                },\n              },\n            Optional  (str) total_areas: <class 'int'>,\n            Optional  (str) spf_control: {\n              'throttle': {\n                'spf': {\n                  'maximum': <class 'int'>,\n                  'hold': <class 'int'>,\n                  'start': <class 'int'>,\n                  },\n                'lsa': {\n                  Optional  (str) maximum: <class 'int'>,\n                  Optional  (str) start: <class 'int'>,\n                  Optional  (str) arrival: <class 'int'>,\n                  Optional  (str) hold: <class 'int'>,\n                  },\n                },\n              Optional  (str) incremental_spf: <class 'bool'>,\n              },\n            Optional  (str) areas: {\n              Any  (str) *: {\n                'area_id': <class 'str'>,\n                'area_type': <class 'str'>,\n                Optional  (str) summary: <class 'bool'>,\n                Optional  (str) ranges: {\n                  Any  (str) *: {\n                    'prefix': <class 'str'>,\n                    Optional  (str) cost: <class 'int'>,\n                    'advertise': <class 'bool'>,\n                    },\n                  },\n                Optional  (str) statistics: {\n                  Optional  (str) area_scope_opaque_lsa_count: <class 'int'>,\n                  Optional  (str) area_scope_opaque_lsa_cksum_sum: <class 'str'>,\n                  Optional  (str) dcbitless_lsa_count: <class 'int'>,\n                  Optional  (str) indication_lsa_count: <class 'int'>,\n                  Optional  (str) spf_runs_count: <class 'int'>,\n                  Optional  (str) donotage_lsa_count: <class 'int'>,\n                  Optional  (str) flood_list_length: <class 'int'>,\n                  Optional  (str) interfaces_count: <class 'int'>,\n                  Optional  (str) spf_last_executed: <class 'str'>,\n                  Optional  (str) loopback_count: <class 'int'>,\n                  Optional  (str) area_scope_lsa_count: <class 'int'>,\n                  Optional  (str) area_scope_lsa_cksum_sum: <class 'str'>,\n                  },\n                Optional  (str) default_cost: <class 'int'>,\n                Optional  (str) rrr_enabled: <class 'bool'>,\n                Optional  (str) authentication: <class 'bool'>,\n                },\n              },\n            Optional  (str) opqaue_lsa: <class 'bool'>,\n            Optional  (str) total_normal_areas: <class 'int'>,\n            Optional  (str) auto_cost: {\n              'bandwidth_unit': <class 'str'>,\n              'reference_bandwidth': <class 'int'>,\n              'enable': <class 'bool'>,\n              },\n            'nsr': {\n              'enable': <class 'bool'>,\n              },\n            Optional  (str) total_stub_areas: <class 'int'>,\n            Optional  (str) total_nssa_areas: <class 'int'>,\n            Optional  (str) adjacency_stagger: {\n              'maximum_number': <class 'int'>,\n              Optional  (str) no_initial_limit: <class 'bool'>,\n              'initial_number': <class 'int'>,\n              },\n            Optional  (str) total_areas_transit_capable: <class 'int'>,\n            Optional  (str) lsa_group_pacing_timer: <class 'int'>,\n            Optional  (str) lls: <class 'bool'>,\n            'bfd': {\n              Optional  (str) strict_mode: <class 'bool'>,\n              'enable': <class 'bool'>,\n              },\n            Optional  (str) database_control: {\n              'max_lsa': <class 'int'>,\n              Optional  (str) max_lsa_reset_time: <class 'int'>,\n              Optional  (str) max_lsa_threshold_value: <class 'int'>,\n              Optional  (str) max_lsa_limit: <class 'int'>,\n              Optional  (str) max_lsa_current: <class 'int'>,\n              Optional  (str) max_lsa_ignore_count: <class 'int'>,\n              Optional  (str) max_lsa_warning_only: <class 'bool'>,\n              Optional  (str) max_lsa_current_count: <class 'int'>,\n              Optional  (str) max_lsa_ignore_time: <class 'int'>,\n              },\n            Optional  (str) retransmission_pacing_timer: <class 'int'>,\n            Optional  (str) graceful_restart: {\n              Any  (str) *: {\n                Optional  (str) restart_interval: <class 'int'>,\n                'type': <class 'str'>,\n                'enable': <class 'bool'>,\n                Optional  (str) helper_enable: <class 'bool'>,\n                },\n              },\n            Optional  (str) enable: <class 'bool'>,\n            Optional  (str) db_exchange_summary_list_optimization: <class 'bool'>,\n            Optional  (str) elapsed_time: <class 'str'>,\n            Optional  (str) event_log: {\n              'enable': <class 'bool'>,\n              Optional  (str) max_events: <class 'int'>,\n              Optional  (str) mode: <class 'str'>,\n              },\n            Optional  (str) domain_id_type: <class 'str'>,\n            },\n          },\n        },\n      },\n    },\n  },\n}", "doc": " Parser for \"show ip ospf\" ", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_ospf.py#L41", "class": "ShowIpOspf", "module_name": "show_ospf"}, "nxos": {"uid": "show_ip_ospf", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'address_family': {\n      Any  (str) *: {\n        'instance': {\n          Any  (str) *: {\n            Optional  (str) bfd: {\n              'enable': <class 'bool'>,\n              },\n            Optional  (str) enable: <class 'bool'>,\n            Optional  (str) nsr: {\n              'enable': <class 'bool'>,\n              },\n            'instance': <class 'int'>,\n            Optional  (str) spf_control: {\n              'throttle': {\n                'spf': {\n                  'maximum': <class 'int'>,\n                  'hold': <class 'int'>,\n                  'start': <class 'int'>,\n                  },\n                'lsa': {\n                  'hold': <class 'int'>,\n                  'start': <class 'int'>,\n                  'maximum': <class 'int'>,\n                  Optional  (str) numbers: {\n                    Optional  (str) external_lsas: {\n                      Optional  (str) total: <class 'int'>,\n                      Optional  (str) checksum: <class 'str'>,\n                      },\n                    Optional  (str) opaque_as_lsas: {\n                      Optional  (str) checksum: <class 'str'>,\n                      Optional  (str) total: <class 'int'>,\n                      },\n                    },\n                  Optional  (str) minimum: <class 'int'>,\n                  Optional  (str) group_pacing: <class 'int'>,\n                  },\n                },\n              'paths': <class 'int'>,\n              },\n            Optional  (str) stub_router: {\n              Optional  (str) on_startup: {\n                'on_startup': <class 'int'>,\n                Optional  (str) include_stub: <class 'bool'>,\n                Optional  (str) summary_lsa: <class 'bool'>,\n                Optional  (str) external_lsa: <class 'bool'>,\n                },\n              'always': {\n                Optional  (str) summary_lsa: <class 'bool'>,\n                'always': <class 'bool'>,\n                Optional  (str) external_lsa: <class 'bool'>,\n                Optional  (str) include_stub: <class 'bool'>,\n                },\n              },\n            Optional  (str) database_control: {\n              'max_lsa': <class 'int'>,\n              },\n            'router_id': <class 'str'>,\n            Optional  (str) auto_cost: {\n              'bandwidth_unit': <class 'str'>,\n              'reference_bandwidth': <class 'int'>,\n              'enable': <class 'bool'>,\n              },\n            Optional  (str) graceful_restart: {\n              Any  (str) *: {\n                'state': <class 'str'>,\n                'restart_interval': <class 'int'>,\n                'type': <class 'str'>,\n                'enable': <class 'bool'>,\n                'exist_status': <class 'str'>,\n                },\n              },\n            Optional  (str) numbers: {\n              'active_areas': {\n                'stub': <class 'int'>,\n                'nssa': <class 'int'>,\n                'normal': <class 'int'>,\n                'total': <class 'int'>,\n                },\n              'areas': {\n                'stub': <class 'int'>,\n                'nssa': <class 'int'>,\n                'normal': <class 'int'>,\n                'total': <class 'int'>,\n                },\n              },\n            Optional  (str) single_tos_routes_enable: <class 'bool'>,\n            Optional  (str) discard_route_internal: <class 'bool'>,\n            Optional  (str) opaque_lsa_enable: <class 'bool'>,\n            Optional  (str) areas: {\n              Any  (str) *: {\n                'area_type': <class 'str'>,\n                'area_id': <class 'str'>,\n                Optional  (str) numbers: {\n                  'loopback_interfaces': <class 'int'>,\n                  'passive_interfaces': <class 'int'>,\n                  'active_interfaces': <class 'int'>,\n                  'interfaces': <class 'int'>,\n                  },\n                Optional  (str) statistics: {\n                  Optional  (str) as_nssa_translator_event_count: <class 'int'>,\n                  'spf_runs_count': <class 'int'>,\n                  'spf_last_run_time': <class 'float'>,\n                  'area_scope_lsa_cksum_sum': <class 'str'>,\n                  'area_scope_lsa_count': <class 'int'>,\n                  },\n                Optional  (str) ranges: {\n                  Any  (str) *: {\n                    'cost': <class 'int'>,\n                    'prefix': <class 'str'>,\n                    'net': <class 'int'>,\n                    'advertise': <class 'bool'>,\n                    },\n                  },\n                Optional  (str) existed: <class 'str'>,\n                Optional  (str) authentication: <class 'str'>,\n                Optional  (str) default_cost: <class 'int'>,\n                },\n              },\n            Optional  (str) preference: {\n              'single_value': {\n                'all': <class 'int'>,\n                },\n              },\n            Optional  (str) discard_route_external: <class 'bool'>,\n            },\n          },\n        },\n      },\n    },\n  },\n}", "doc": "Parser for:\n        show ip ospf\n        show ip ospf vrf <vrf>", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_ospf.py#L168", "class": "ShowIpOspf", "module_name": "show_ospf"}, "iosxe": {"uid": "show_ip_ospf", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'address_family': {\n      Any  (str) *: {\n        'instance': {\n          Any  (str) *: {\n            Optional  (str) stub_router: {\n              Optional  (str) always: {\n                'summary_lsa': <class 'bool'>,\n                Optional  (str) summary_lsa_metric: <class 'int'>,\n                Optional  (str) external_lsa_metric: <class 'int'>,\n                'external_lsa': <class 'bool'>,\n                Optional  (str) state: <class 'str'>,\n                'always': <class 'bool'>,\n                'include_stub': <class 'bool'>,\n                },\n              Optional  (str) on_startup: {\n                'on_startup': <class 'int'>,\n                'summary_lsa': <class 'bool'>,\n                'external_lsa': <class 'bool'>,\n                'state': <class 'str'>,\n                'external_lsa_metric': <class 'int'>,\n                'include_stub': <class 'bool'>,\n                'summary_lsa_metric': <class 'int'>,\n                },\n              },\n            Optional  (str) interface_flood_pacing_timer: <class 'int'>,\n            Optional  (str) domain_id_value: <class 'str'>,\n            Optional  (str) start_time: <class 'str'>,\n            Optional  (str) nssa: <class 'bool'>,\n            'router_id': <class 'str'>,\n            Optional  (str) area_transit: <class 'bool'>,\n            Optional  (str) flags: {\n              Optional  (str) abr: <class 'bool'>,\n              Optional  (str) asbr: <class 'bool'>,\n              },\n            Optional  (str) external_flood_list_length: <class 'int'>,\n            Optional  (str) numbers: {\n              Optional  (str) external_lsa_checksum: <class 'str'>,\n              Optional  (str) opaque_as_lsa: <class 'int'>,\n              Optional  (str) opaque_as_lsa_checksum: <class 'str'>,\n              Optional  (str) dc_bitless: <class 'int'>,\n              Optional  (str) external_lsa: <class 'int'>,\n              Optional  (str) do_not_age: <class 'int'>,\n              },\n            Optional  (str) redistribution: {\n              Optional  (str) bgp: {\n                Optional  (str) subnets: <class 'str'>,\n                Optional  (str) nssa_only: <class 'str'>,\n                Optional  (str) metric: <class 'int'>,\n                'bgp_id': <class 'int'>,\n                },\n              Optional  (str) static: {\n                'enabled': <class 'bool'>,\n                Optional  (str) subnets: <class 'str'>,\n                Optional  (str) metric: <class 'int'>,\n                },\n              Optional  (str) isis: {\n                Optional  (str) metric: <class 'int'>,\n                Optional  (str) subnets: <class 'str'>,\n                'isis_pid': <class 'str'>,\n                },\n              Optional  (str) max_prefix: {\n                Optional  (str) warn_only: <class 'bool'>,\n                Optional  (str) num_of_prefix: <class 'int'>,\n                Optional  (str) prefix_thld: <class 'int'>,\n                },\n              Optional  (str) connected: {\n                'enabled': <class 'bool'>,\n                Optional  (str) subnets: <class 'str'>,\n                Optional  (str) metric: <class 'int'>,\n                },\n              },\n            Optional  (str) total_areas: <class 'int'>,\n            Optional  (str) spf_control: {\n              'throttle': {\n                'spf': {\n                  'maximum': <class 'int'>,\n                  'hold': <class 'int'>,\n                  'start': <class 'int'>,\n                  },\n                'lsa': {\n                  Optional  (str) maximum: <class 'int'>,\n                  Optional  (str) start: <class 'int'>,\n                  Optional  (str) arrival: <class 'int'>,\n                  Optional  (str) hold: <class 'int'>,\n                  },\n                },\n              Optional  (str) incremental_spf: <class 'bool'>,\n              },\n            Optional  (str) areas: {\n              Any  (str) *: {\n                'area_id': <class 'str'>,\n                'area_type': <class 'str'>,\n                Optional  (str) summary: <class 'bool'>,\n                Optional  (str) ranges: {\n                  Any  (str) *: {\n                    'prefix': <class 'str'>,\n                    Optional  (str) cost: <class 'int'>,\n                    'advertise': <class 'bool'>,\n                    },\n                  },\n                Optional  (str) statistics: {\n                  Optional  (str) area_scope_opaque_lsa_count: <class 'int'>,\n                  Optional  (str) area_scope_opaque_lsa_cksum_sum: <class 'str'>,\n                  Optional  (str) dcbitless_lsa_count: <class 'int'>,\n                  Optional  (str) indication_lsa_count: <class 'int'>,\n                  Optional  (str) spf_runs_count: <class 'int'>,\n                  Optional  (str) donotage_lsa_count: <class 'int'>,\n                  Optional  (str) flood_list_length: <class 'int'>,\n                  Optional  (str) interfaces_count: <class 'int'>,\n                  Optional  (str) spf_last_executed: <class 'str'>,\n                  Optional  (str) loopback_count: <class 'int'>,\n                  Optional  (str) area_scope_lsa_count: <class 'int'>,\n                  Optional  (str) area_scope_lsa_cksum_sum: <class 'str'>,\n                  },\n                Optional  (str) default_cost: <class 'int'>,\n                Optional  (str) rrr_enabled: <class 'bool'>,\n                Optional  (str) authentication: <class 'bool'>,\n                },\n              },\n            Optional  (str) opqaue_lsa: <class 'bool'>,\n            Optional  (str) total_normal_areas: <class 'int'>,\n            Optional  (str) auto_cost: {\n              'bandwidth_unit': <class 'str'>,\n              'reference_bandwidth': <class 'int'>,\n              'enable': <class 'bool'>,\n              },\n            'nsr': {\n              'enable': <class 'bool'>,\n              },\n            Optional  (str) total_stub_areas: <class 'int'>,\n            Optional  (str) total_nssa_areas: <class 'int'>,\n            Optional  (str) adjacency_stagger: {\n              'maximum_number': <class 'int'>,\n              Optional  (str) no_initial_limit: <class 'bool'>,\n              'initial_number': <class 'int'>,\n              },\n            Optional  (str) total_areas_transit_capable: <class 'int'>,\n            Optional  (str) lsa_group_pacing_timer: <class 'int'>,\n            Optional  (str) lls: <class 'bool'>,\n            'bfd': {\n              Optional  (str) strict_mode: <class 'bool'>,\n              'enable': <class 'bool'>,\n              },\n            Optional  (str) database_control: {\n              'max_lsa': <class 'int'>,\n              Optional  (str) max_lsa_reset_time: <class 'int'>,\n              Optional  (str) max_lsa_threshold_value: <class 'int'>,\n              Optional  (str) max_lsa_limit: <class 'int'>,\n              Optional  (str) max_lsa_current: <class 'int'>,\n              Optional  (str) max_lsa_ignore_count: <class 'int'>,\n              Optional  (str) max_lsa_warning_only: <class 'bool'>,\n              Optional  (str) max_lsa_current_count: <class 'int'>,\n              Optional  (str) max_lsa_ignore_time: <class 'int'>,\n              },\n            Optional  (str) retransmission_pacing_timer: <class 'int'>,\n            Optional  (str) graceful_restart: {\n              Any  (str) *: {\n                Optional  (str) restart_interval: <class 'int'>,\n                'type': <class 'str'>,\n                'enable': <class 'bool'>,\n                Optional  (str) helper_enable: <class 'bool'>,\n                },\n              },\n            Optional  (str) enable: <class 'bool'>,\n            Optional  (str) db_exchange_summary_list_optimization: <class 'bool'>,\n            Optional  (str) elapsed_time: <class 'str'>,\n            Optional  (str) event_log: {\n              'enable': <class 'bool'>,\n              Optional  (str) max_events: <class 'int'>,\n              Optional  (str) mode: <class 'str'>,\n              },\n            Optional  (str) domain_id_type: <class 'str'>,\n            },\n          },\n        },\n      },\n    },\n  },\n}", "doc": " Parser for:\n        * 'show ip ospf'\n    ", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_ospf.py#L212", "class": "ShowIpOspf", "module_name": "show_ospf"}}, "show ip igmp interface vrf {vrf}": {"nxos": {"uid": "show_ip_igmp_interface_vrf_vrf", "schema": "{\n'vrfs': {\n  Any  (str) *: {\n    Optional  (str) interface: {\n      Any  (str) *: {\n        Optional  (str) group_policy: <class 'str'>,\n        'link_status': <class 'str'>,\n        Optional  (str) max_groups: <class 'int'>,\n        Optional  (str) available_groups: <class 'int'>,\n        Optional  (str) startup_query: {\n          Optional  (str) interval: <class 'int'>,\n          Optional  (str) count: <class 'int'>,\n          Optional  (str) configured_interval: <class 'int'>,\n          },\n        Optional  (str) address: <class 'str'>,\n        Optional  (str) subnet: <class 'str'>,\n        'oper_status': <class 'str'>,\n        Optional  (str) last_member: {\n          Optional  (str) query_count: <class 'int'>,\n          Optional  (str) mrt: <class 'int'>,\n          },\n        Optional  (str) querier: <class 'str'>,\n        Optional  (str) configured_group_timeout: <class 'int'>,\n        Optional  (str) querier_version: <class 'int'>,\n        Optional  (str) group_timeout: <class 'int'>,\n        Optional  (str) expires: <class 'str'>,\n        Optional  (str) configured_querier_timeout: <class 'int'>,\n        Optional  (str) next_query_sent_in: <class 'str'>,\n        Optional  (str) querier_timeout: <class 'int'>,\n        Optional  (str) membership_count: <class 'int'>,\n        Optional  (str) unsolicited_report_interval: <class 'int'>,\n        Optional  (str) old_membership_count: <class 'int'>,\n        Optional  (str) configured_robustness_variable: <class 'int'>,\n        Optional  (str) version: <class 'int'>,\n        'enable': <class 'bool'>,\n        Optional  (str) robustness_variable: <class 'int'>,\n        Optional  (str) host_version: <class 'int'>,\n        Optional  (str) link_local_groups_reporting: <class 'bool'>,\n        Optional  (str) configured_query_interval: <class 'int'>,\n        Optional  (str) enable_refcount: <class 'int'>,\n        Optional  (str) query_interval: <class 'int'>,\n        Optional  (str) statistics: {\n          Optional  (str) errors: {\n            'router_alert_check': <class 'int'>,\n            },\n          Optional  (str) general: {\n            'sent': {\n              Optional  (str) v3_reports: <class 'int'>,\n              Optional  (str) v2_leaves: <class 'int'>,\n              Optional  (str) v2_queries: <class 'int'>,\n              Optional  (str) v3_queries: <class 'int'>,\n              Optional  (str) v2_reports: <class 'int'>,\n              },\n            'received': {\n              Optional  (str) v3_queries: <class 'int'>,\n              Optional  (str) v2_reports: <class 'int'>,\n              Optional  (str) v3_reports: <class 'int'>,\n              Optional  (str) v2_leaves: <class 'int'>,\n              Optional  (str) v2_queries: <class 'int'>,\n              },\n            },\n          },\n        Optional  (str) immediate_leave: <class 'bool'>,\n        Optional  (str) configured_query_max_response_time: <class 'int'>,\n        Optional  (str) pim_dr: <class 'bool'>,\n        Optional  (str) vrf_name: <class 'str'>,\n        Optional  (str) query_max_response_time: <class 'int'>,\n        Optional  (str) vpc_svi: <class 'bool'>,\n        Optional  (str) vrf_id: <class 'int'>,\n        },\n      },\n    'groups_count': <class 'int'>,\n    },\n  },\n}", "doc": "Parser for:\n            show ip igmp interface\n            show ip igmp interface vrf all\n            show ip igmp interface vrf <vrf>", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_igmp.py#L460", "class": "ShowIpIgmpInterface", "module_name": "show_igmp"}}, "show running-config {feature} | sec {vrf}": {"nxos": {"uid": "show_running-config_feature___sec_vrf", "schema": "{\nOptional  (str) vrf: {\n  Any  (str) *: {\n    Optional  (str) address_family: {\n      Any  (str) *: {\n        Optional  (str) rp: {\n          Optional  (str) bsr: {\n            Any  (str) *: {\n              Optional  (str) priority: <class 'int'>,\n              Optional  (str) interval: <class 'int'>,\n              Optional  (str) interface: <class 'str'>,\n              Optional  (str) route_map: <class 'str'>,\n              Optional  (str) policy: <class 'str'>,\n              Optional  (str) prefix_list: <class 'str'>,\n              Optional  (str) mode: <class 'str'>,\n              },\n            },\n          Optional  (str) autorp: {\n            Optional  (str) send_rp_discovery: {\n              Optional  (str) scope: <class 'int'>,\n              'interface': <class 'str'>,\n              },\n            Optional  (str) send_rp_announce: {\n              Optional  (str) scope: <class 'int'>,\n              Optional  (str) bidir: <class 'bool'>,\n              Optional  (str) group_list: <class 'str'>,\n              Optional  (str) route_map: <class 'str'>,\n              Optional  (str) interface: <class 'str'>,\n              Optional  (str) prefix_list: <class 'str'>,\n              Optional  (str) group: <class 'str'>,\n              Optional  (str) interval: <class 'int'>,\n              },\n            Optional  (str) listener: <class 'bool'>,\n            },\n          Optional  (str) static_rp: {\n            Any  (str) *: {\n              Optional  (str) bidir: <class 'bool'>,\n              Optional  (str) policy_name: <class 'str'>,\n              Optional  (str) route_map: <class 'str'>,\n              Optional  (str) override: <class 'bool'>,\n              Optional  (str) prefix_list: <class 'str'>,\n              Optional  (str) policy: <class 'int'>,\n              },\n            },\n          },\n        },\n      },\n    },\n  },\nOptional  (str) feature_pim6: <class 'bool'>,\nOptional  (str) feature_pim: <class 'bool'>,\n}", "doc": "Parser for show running-config pim", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_pim.py#L4188", "class": "ShowRunningConfigPim", "module_name": "show_pim"}}, "show bgp vrf all all": {"nxos": {"uid": "show_bgp_vrf_all_all", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'address_family': {\n      Any  (str) *: {\n        Optional  (str) v6_aggregate_address_ipv6_address: <class 'str'>,\n        Optional  (str) v6_aggregate_address_as_set: <class 'bool'>,\n        'local_router_id': <class 'str'>,\n        Optional  (str) v6_aggregate_address_summary_only: <class 'bool'>,\n        Optional  (str) route_distinguisher: <class 'str'>,\n        Optional  (str) prefixes: {\n          Any  (str) *: {\n            'index': {\n              Any  (str) *: {\n                Optional  (str) origin_codes: <class 'str'>,\n                Optional  (str) metric: <class 'int'>,\n                Optional  (str) localprf: <class 'int'>,\n                Optional  (str) path: <class 'str'>,\n                Optional  (str) weight: <class 'int'>,\n                Optional  (str) status_codes: <class 'str'>,\n                'next_hop': <class 'str'>,\n                Optional  (str) path_type: <class 'str'>,\n                },\n              },\n            },\n          },\n        Optional  (str) default_vrf: <class 'str'>,\n        Optional  (str) aggregate_address_ipv4_address: <class 'str'>,\n        'bgp_table_version': <class 'int'>,\n        Optional  (str) aggregate_address_ipv4_mask: <class 'str'>,\n        Optional  (str) aggregate_address_as_set: <class 'bool'>,\n        Optional  (str) aggregate_address_summary_only: <class 'bool'>,\n        },\n      },\n    },\n  },\n}", "doc": "Parser for show bgp vrf all all", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_bgp.py#L1689", "class": "ShowBgpVrfAllAll", "module_name": "show_bgp"}}, "show mpls ldp bindings": {"iosxe": {"uid": "show_mpls_ldp_bindings", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'lib_entry': {\n      Any  (str) *: {\n        Optional  (str) remote_binding: {\n          'label': {\n            Any  (str) *: {\n              'lsr_id': {\n                Any  (str) *: {\n                  'label_space_id': {\n                    Any  (str) *: {\n                      Optional  (str) checkpointed: <class 'bool'>,\n                      },\n                    },\n                  },\n                },\n              },\n            },\n          },\n        Optional  (str) checkpoint: <class 'str'>,\n        Optional  (str) label_binding: {\n          'label': {\n            Any  (str) *: {\n              Optional  (str) owner: <class 'str'>,\n              Optional  (str) advertised_to: <class 'list'>,\n              },\n            },\n          },\n        'rev': <class 'str'>,\n        },\n      },\n    },\n  },\n}", "doc": "\n       Parser for show mpls ldp bindings\n                  show mpls ldp bindings vrf <vrf>\n                  show mpls ldp bindings all\n                  show mpls ldp bindings all detail\n       ", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_mpls.py#L1073", "class": "ShowMplsLdpBindings", "module_name": "show_mpls"}}, "show mrib route summary": {"iosxr": {"uid": "show_mrib_route_summary", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'address_family': {\n      Any  (str) *: {\n        'no_g_routes': <class 'int'>,\n        'no_route_x_interfaces': <class 'int'>,\n        'no_s_g_routes': <class 'int'>,\n        'total_no_interfaces': <class 'int'>,\n        'no_group_ranges': <class 'int'>,\n        },\n      },\n    },\n  },\n}", "doc": "\n    Parser for show mrib vrf <vrf> <address-family> route summary\n    For checking any output with the parser, below mandatory keys have to be in cli command.\n    - vrf\n    - af (optional)\n    ", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_mrib.py#L267", "class": "ShowMribVrfRouteSummary", "module_name": "show_mrib"}}, "show platform hardware slot {slot} serdes statistics internal": {"ios": {"uid": "show_platform_hardware_slot_slot_serdes_statistics_internal", "schema": "{\n'link': {\n  Any  (str) *: {\n    Optional  (str) remote_rx_in_sync: <class 'bool'>,\n    Optional  (str) to: {\n      'pkts': {\n        Optional  (str) total: <class 'int'>,\n        Optional  (str) dropped: <class 'int'>,\n        Optional  (str) high: <class 'int'>,\n        Optional  (str) errored: <class 'int'>,\n        Optional  (str) low: <class 'int'>,\n        },\n      Optional  (str) bytes: {\n        Optional  (str) dropped: <class 'int'>,\n        Optional  (str) total: <class 'int'>,\n        Optional  (str) errored: <class 'int'>,\n        Optional  (str) low: <class 'int'>,\n        Optional  (str) high: <class 'int'>,\n        },\n      },\n    Optional  (str) from: {\n      Optional  (str) flow_ctrl_count: <class 'int'>,\n      'bytes': {\n        Optional  (str) errored: <class 'int'>,\n        Optional  (str) total: <class 'int'>,\n        Optional  (str) looped: <class 'int'>,\n        Optional  (str) high: <class 'int'>,\n        Optional  (str) bad: <class 'int'>,\n        Optional  (str) low: <class 'int'>,\n        Optional  (str) dropped: <class 'int'>,\n        },\n      'pkts': {\n        Optional  (str) high: <class 'int'>,\n        Optional  (str) bad: <class 'int'>,\n        Optional  (str) low: <class 'int'>,\n        Optional  (str) dropped: <class 'int'>,\n        Optional  (str) total: <class 'int'>,\n        Optional  (str) errored: <class 'int'>,\n        Optional  (str) looped: <class 'int'>,\n        },\n      Optional  (str) qstat_count: <class 'int'>,\n      },\n    Optional  (str) local_tx_in_sync: <class 'bool'>,\n    Optional  (str) errors: {\n      'tx_process': <class 'int'>,\n      'rx_parity': <class 'int'>,\n      'rx_statistics': <class 'int'>,\n      'rx_process': <class 'int'>,\n      'tx_schedule': <class 'int'>,\n      'rx_schedule': <class 'int'>,\n      'tx_statistics': <class 'int'>,\n      },\n    Optional  (str) local_rx_in_sync: <class 'bool'>,\n    Optional  (str) remote_tx_in_sync: <class 'bool'>,\n    },\n  },\nOptional  (str) serdes_exception_counts: {\n  Any  (str) *: {\n    Optional  (str) link: {\n      Any  (str) *: {\n        'msgEccError': <class 'int'>,\n        'msgTypeError': <class 'int'>,\n        'chicoEvent': <class 'int'>,\n        },\n      },\n    },\n  },\n}", "doc": "Parser for show platform hardware slot <x> serdes statistics internal", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_platform.py#L376", "class": "ShowPlatformHardwareSerdesInternal", "module_name": "show_platform"}, "iosxe": {"uid": "show_platform_hardware_slot_slot_serdes_statistics_internal", "schema": "{\n'link': {\n  Any  (str) *: {\n    Optional  (str) remote_rx_in_sync: <class 'bool'>,\n    Optional  (str) to: {\n      'pkts': {\n        Optional  (str) total: <class 'int'>,\n        Optional  (str) dropped: <class 'int'>,\n        Optional  (str) high: <class 'int'>,\n        Optional  (str) errored: <class 'int'>,\n        Optional  (str) low: <class 'int'>,\n        },\n      Optional  (str) bytes: {\n        Optional  (str) dropped: <class 'int'>,\n        Optional  (str) total: <class 'int'>,\n        Optional  (str) errored: <class 'int'>,\n        Optional  (str) low: <class 'int'>,\n        Optional  (str) high: <class 'int'>,\n        },\n      },\n    Optional  (str) from: {\n      Optional  (str) flow_ctrl_count: <class 'int'>,\n      'bytes': {\n        Optional  (str) errored: <class 'int'>,\n        Optional  (str) total: <class 'int'>,\n        Optional  (str) looped: <class 'int'>,\n        Optional  (str) high: <class 'int'>,\n        Optional  (str) bad: <class 'int'>,\n        Optional  (str) low: <class 'int'>,\n        Optional  (str) dropped: <class 'int'>,\n        },\n      'pkts': {\n        Optional  (str) high: <class 'int'>,\n        Optional  (str) bad: <class 'int'>,\n        Optional  (str) low: <class 'int'>,\n        Optional  (str) dropped: <class 'int'>,\n        Optional  (str) total: <class 'int'>,\n        Optional  (str) errored: <class 'int'>,\n        Optional  (str) looped: <class 'int'>,\n        },\n      Optional  (str) qstat_count: <class 'int'>,\n      },\n    Optional  (str) local_tx_in_sync: <class 'bool'>,\n    Optional  (str) errors: {\n      'tx_process': <class 'int'>,\n      'rx_parity': <class 'int'>,\n      'rx_statistics': <class 'int'>,\n      'rx_process': <class 'int'>,\n      'tx_schedule': <class 'int'>,\n      'rx_schedule': <class 'int'>,\n      'tx_statistics': <class 'int'>,\n      },\n    Optional  (str) local_rx_in_sync: <class 'bool'>,\n    Optional  (str) remote_tx_in_sync: <class 'bool'>,\n    },\n  },\nOptional  (str) serdes_exception_counts: {\n  Any  (str) *: {\n    Optional  (str) link: {\n      Any  (str) *: {\n        'msgEccError': <class 'int'>,\n        'msgTypeError': <class 'int'>,\n        'chicoEvent': <class 'int'>,\n        },\n      },\n    },\n  },\n}", "doc": "Parser for show platform hardware slot <x> serdes statistics internal", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_platform.py#L3558", "class": "ShowPlatformHardwareSerdesInternal", "module_name": "show_platform"}}, "show bgp all detail": {"ios": {"uid": "show_bgp_all_detail", "schema": "{\n'instance': {\n  'default': {\n    'vrf': {\n      Any  (str) *: {\n        'address_family': {\n          Any  (str) *: {\n            Optional  (str) route_distinguisher: <class 'str'>,\n            Optional  (str) prefixes: {\n              Any  (str) *: {\n                Optional  (str) table_version: <class 'str'>,\n                Optional  (str) available_path: <class 'str'>,\n                Optional  (str) index: {\n                  Any  (str) *: {\n                    Optional  (str) recipient_pathid: <class 'str'>,\n                    Optional  (str) transfer_pathid: <class 'str'>,\n                    Optional  (str) community: <class 'str'>,\n                    Optional  (str) agi_version: <class 'int'>,\n                    Optional  (str) next_hop: <class 'str'>,\n                    Optional  (str) ve_block_size: <class 'int'>,\n                    Optional  (str) next_hop_igp_metric: <class 'str'>,\n                    Optional  (str) local_vxlan_vtep: {\n                      Optional  (str) vtep_ip: <class 'str'>,\n                      Optional  (str) vrf: <class 'str'>,\n                      Optional  (str) encap: <class 'str'>,\n                      Optional  (str) vni: <class 'str'>,\n                      Optional  (str) local_router_mac: <class 'str'>,\n                      Optional  (str) bdi: <class 'str'>,\n                      },\n                    Optional  (str) label_base: <class 'int'>,\n                    Optional  (str) gateway: <class 'str'>,\n                    Optional  (str) cluster_list: <class 'str'>,\n                    Optional  (str) route_info: <class 'str'>,\n                    Optional  (str) next_hop_via: <class 'str'>,\n                    Optional  (str) update_group: Any  (str) *,\n                    Optional  (str) status_codes: <class 'str'>,\n                    Optional  (str) origin_codes: <class 'str'>,\n                    Optional  (str) metric: <class 'int'>,\n                    Optional  (str) inaccessible: <class 'bool'>,\n                    Optional  (str) localpref: <class 'int'>,\n                    Optional  (str) evpn: {\n                      Optional  (str) evpn_esi: <class 'str'>,\n                      Optional  (str) recursive_via_connected: <class 'bool'>,\n                      Optional  (str) local_vtep: <class 'str'>,\n                      Optional  (str) gateway_address: <class 'str'>,\n                      Optional  (str) ext_community: <class 'str'>,\n                      Optional  (str) label: <class 'int'>,\n                      Optional  (str) encap: <class 'str'>,\n                      Optional  (str) router_mac: <class 'str'>,\n                      },\n                    Optional  (str) weight: <class 'str'>,\n                    Optional  (str) originator: <class 'str'>,\n                    Optional  (str) refresh_epoch: <class 'int'>,\n                    },\n                  },\n                Optional  (str) best_path: <class 'str'>,\n                Optional  (str) paths: <class 'str'>,\n                },\n              },\n            Optional  (str) default_vrf: <class 'str'>,\n            },\n          },\n        },\n      },\n    },\n  },\n}", "doc": "Parser for show bgp all detail", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_bgp.py#L43", "class": "ShowBgpAllDetail", "module_name": "show_bgp"}, "iosxe": {"uid": "show_bgp_all_detail", "schema": "{\n'instance': {\n  'default': {\n    'vrf': {\n      Any  (str) *: {\n        'address_family': {\n          Any  (str) *: {\n            Optional  (str) route_distinguisher: <class 'str'>,\n            Optional  (str) prefixes: {\n              Any  (str) *: {\n                Optional  (str) table_version: <class 'str'>,\n                Optional  (str) available_path: <class 'str'>,\n                Optional  (str) index: {\n                  Any  (str) *: {\n                    Optional  (str) recipient_pathid: <class 'str'>,\n                    Optional  (str) transfer_pathid: <class 'str'>,\n                    Optional  (str) community: <class 'str'>,\n                    Optional  (str) agi_version: <class 'int'>,\n                    Optional  (str) next_hop: <class 'str'>,\n                    Optional  (str) ve_block_size: <class 'int'>,\n                    Optional  (str) next_hop_igp_metric: <class 'str'>,\n                    Optional  (str) local_vxlan_vtep: {\n                      Optional  (str) vtep_ip: <class 'str'>,\n                      Optional  (str) vrf: <class 'str'>,\n                      Optional  (str) encap: <class 'str'>,\n                      Optional  (str) vni: <class 'str'>,\n                      Optional  (str) local_router_mac: <class 'str'>,\n                      Optional  (str) bdi: <class 'str'>,\n                      },\n                    Optional  (str) label_base: <class 'int'>,\n                    Optional  (str) gateway: <class 'str'>,\n                    Optional  (str) cluster_list: <class 'str'>,\n                    Optional  (str) route_info: <class 'str'>,\n                    Optional  (str) next_hop_via: <class 'str'>,\n                    Optional  (str) update_group: Any  (str) *,\n                    Optional  (str) status_codes: <class 'str'>,\n                    Optional  (str) origin_codes: <class 'str'>,\n                    Optional  (str) metric: <class 'int'>,\n                    Optional  (str) inaccessible: <class 'bool'>,\n                    Optional  (str) localpref: <class 'int'>,\n                    Optional  (str) evpn: {\n                      Optional  (str) evpn_esi: <class 'str'>,\n                      Optional  (str) recursive_via_connected: <class 'bool'>,\n                      Optional  (str) local_vtep: <class 'str'>,\n                      Optional  (str) gateway_address: <class 'str'>,\n                      Optional  (str) ext_community: <class 'str'>,\n                      Optional  (str) label: <class 'int'>,\n                      Optional  (str) encap: <class 'str'>,\n                      Optional  (str) router_mac: <class 'str'>,\n                      },\n                    Optional  (str) weight: <class 'str'>,\n                    Optional  (str) originator: <class 'str'>,\n                    Optional  (str) refresh_epoch: <class 'int'>,\n                    },\n                  },\n                Optional  (str) best_path: <class 'str'>,\n                Optional  (str) paths: <class 'str'>,\n                },\n              },\n            Optional  (str) default_vrf: <class 'str'>,\n            },\n          },\n        },\n      },\n    },\n  },\n}", "doc": " Parser for:\n        * 'show bgp all detail'\n    ", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_bgp.py#L1461", "class": "ShowIpBgpAllDetail", "module_name": "show_bgp"}}, "show ip ospf database opaque-area detail vrf {vrf}": {"nxos": {"uid": "show_ip_ospf_database_opaque-area_detail_vrf_vrf", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'address_family': {\n      Any  (str) *: {\n        'instance': {\n          Any  (str) *: {\n            Optional  (str) areas: {\n              Any  (str) *: {\n                'database': {\n                  'lsa_types': {\n                    Any  (str) *: {\n                      'lsa_type': <class 'int'>,\n                      'lsas': {\n                        Any  (str) *: {\n                          'ospfv2': {\n                            'header': {\n                              'opaque_type': <class 'int'>,\n                              'seq_num': <class 'str'>,\n                              'opaque_id': <class 'int'>,\n                              'checksum': <class 'str'>,\n                              'type': <class 'int'>,\n                              'option': <class 'str'>,\n                              'age': <class 'int'>,\n                              Optional  (str) num_links: <class 'int'>,\n                              Optional  (str) maxage: <class 'bool'>,\n                              'option_desc': <class 'str'>,\n                              Optional  (str) mpls_te_router_id: <class 'str'>,\n                              'length': <class 'int'>,\n                              Optional  (str) fragment_number: <class 'int'>,\n                              'lsa_id': <class 'str'>,\n                              'adv_router': <class 'str'>,\n                              },\n                            'body': {\n                              'opaque': {\n                                Optional  (str) link_tlvs: {\n                                  Any  (str) *: {\n                                    'te_metric': <class 'int'>,\n                                    'link_type': <class 'int'>,\n                                    'link_id': <class 'str'>,\n                                    Optional  (str) local_if_ipv4_addrs: {\n                                      Any  (str) *: {\n                                        },\n                                      },\n                                    Optional  (str) unreserved_bandwidths: {\n                                      Any  (str) *: {\n                                        'unreserved_bandwidth': <class 'int'>,\n                                        'priority': <class 'int'>,\n                                        },\n                                      },\n                                    Optional  (str) unknown_tlvs: {\n                                      Any  (str) *: {\n                                        'length': <class 'int'>,\n                                        'type': <class 'int'>,\n                                        'value': <class 'str'>,\n                                        },\n                                      },\n                                    'max_reservable_bandwidth': <class 'int'>,\n                                    'max_bandwidth': <class 'int'>,\n                                    'admin_group': <class 'str'>,\n                                    'link_name': <class 'str'>,\n                                    Optional  (str) remote_if_ipv4_addrs: {\n                                      Any  (str) *: {\n                                        },\n                                      },\n                                    },\n                                  },\n                                },\n                              },\n                            },\n                          'lsa_id': <class 'str'>,\n                          'adv_router': <class 'str'>,\n                          },\n                        },\n                      },\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "doc": "Parser for:\n        show ip ospf database opaque-area detail\n        show ip ospf database opaque-area detail vrf <vrf>", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_ospf.py#L3604", "class": "ShowIpOspfDatabaseOpaqueAreaDetail", "module_name": "show_ospf"}}, "show ipv6 mld ssm-map {group}": {"ios": {"uid": "show_ipv6_mld_ssm-map_group", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'ssm_map': {\n      Any  (str) *: {\n        'group_address': <class 'str'>,\n        'group_mode_ssm': <class 'bool'>,\n        'database': <class 'str'>,\n        'source_addr': <class 'str'>,\n        },\n      },\n    },\n  },\n}", "doc": "Parser for:\n        show ipv6 mld ssm-map <group_address>\n        show ipv6 mld vrf <vrf> ssm-map <group_address>", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_mld.py#L30", "class": "ShowIpv6MldSsmMap", "module_name": "show_mld"}, "iosxe": {"uid": "show_ipv6_mld_ssm-map_group", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'ssm_map': {\n      Any  (str) *: {\n        'group_address': <class 'str'>,\n        'group_mode_ssm': <class 'bool'>,\n        'database': <class 'str'>,\n        'source_addr': <class 'str'>,\n        },\n      },\n    },\n  },\n}", "doc": "Parser for:\n        show ipv6 mld ssm-map <group_address>\n        show ipv6 mld vrf <vrf> ssm-map <group_address>", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_mld.py#L451", "class": "ShowIpv6MldSsmMap", "module_name": "show_mld"}}, "show l2route summary": {"nxos": {"uid": "show_l2route_summary", "schema": "{\n'summary': {\n  'total_memory': <class 'int'>,\n  Optional  (str) table_name: {\n    Any  (str) *: {\n      'producer_name': {\n        'total_obj': <class 'int'>,\n        Any  (str) *: {\n          'id': <class 'int'>,\n          'memory': <class 'int'>,\n          'objects': <class 'int'>,\n          'producer_name': <class 'str'>,\n          },\n        'total_mem': <class 'int'>,\n        },\n      },\n    },\n  'numof_converged_tables': <class 'int'>,\n  },\n}", "doc": "parser for:\n        show l2route summary", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_vxlan.py#L1423", "class": "ShowL2routeSummary", "module_name": "show_vxlan"}}, "show mpls ldp capabilities": {"iosxe": {"uid": "show_mpls_ldp_capabilities", "schema": "{\n'ldp_capabilities': {\n  Optional  (str) min_version: <class 'int'>,\n  Optional  (str) mldp_point_to_multipoint: <class 'str'>,\n  Optional  (str) iccp_type: <class 'str'>,\n  Optional  (str) mldp_multipoint_to_multipoint: <class 'str'>,\n  'typed_wildcard': <class 'str'>,\n  Optional  (str) maj_version: <class 'int'>,\n  'dynamic_anouncement': <class 'str'>,\n  },\n}", "doc": "\n       Parser for show mpls ldp capabilities\n                  show mpls ldp capabilities all\n       ", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_mpls.py#L1210", "class": "ShowMplsLdpCapabilities", "module_name": "show_mpls"}}, "show ip pim vrf {vrf} interface detail": {"ios": {"uid": "show_ip_pim_vrf_vrf_interface_detail", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'interfaces': {\n      Any  (str) *: {\n        'address_family': {\n          Any  (str) *: {\n            Optional  (str) sm: {\n              Optional  (str) passive: <class 'bool'>,\n              },\n            Optional  (str) neighbor_filter: <class 'str'>,\n            Optional  (str) dm: {\n              },\n            Optional  (str) dr_address: <class 'str'>,\n            Optional  (str) hello_interval: <class 'int'>,\n            Optional  (str) neighbor_count: <class 'int'>,\n            Optional  (str) hello_packets_in: <class 'int'>,\n            Optional  (str) jp_interval: <class 'int'>,\n            Optional  (str) hello_packets_out: <class 'int'>,\n            Optional  (str) state_refresh_processing: <class 'str'>,\n            Optional  (str) oper_status: <class 'str'>,\n            Optional  (str) state_refresh_origination: <class 'str'>,\n            Optional  (str) enable: <class 'bool'>,\n            Optional  (str) nbma_mode: <class 'str'>,\n            Optional  (str) address: <class 'list'>,\n            Optional  (str) atm_multipoint_signalling: <class 'str'>,\n            Optional  (str) bsr_border: <class 'bool'>,\n            Optional  (str) neighbors_rpf_proxy_capable: <class 'bool'>,\n            Optional  (str) none_dr_join: <class 'bool'>,\n            'bfd': {\n              Optional  (str) enable: <class 'bool'>,\n              },\n            Optional  (str) multicast: {\n              Optional  (str) ttl_threshold: <class 'int'>,\n              Optional  (str) packets_in: <class 'int'>,\n              Optional  (str) tag_switching: <class 'bool'>,\n              Optional  (str) packets_out: <class 'int'>,\n              Optional  (str) switching: <class 'str'>,\n              },\n            Optional  (str) pim_status: <class 'str'>,\n            Optional  (str) version: <class 'int'>,\n            Optional  (str) mode: <class 'str'>,\n            },\n          },\n        },\n      },\n    },\n  },\n}", "doc": " Parser for:\n        show ip pim Interface detail\n        show ip pim vrf <vrf_name> interface detail", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_pim.py#L70", "class": "ShowIpPimInterfaceDetail", "module_name": "show_pim"}, "iosxe": {"uid": "show_ip_pim_vrf_vrf_interface_detail", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'interfaces': {\n      Any  (str) *: {\n        'address_family': {\n          Any  (str) *: {\n            Optional  (str) sm: {\n              Optional  (str) passive: <class 'bool'>,\n              },\n            Optional  (str) neighbor_filter: <class 'str'>,\n            Optional  (str) dm: {\n              },\n            Optional  (str) dr_address: <class 'str'>,\n            Optional  (str) hello_interval: <class 'int'>,\n            Optional  (str) neighbor_count: <class 'int'>,\n            Optional  (str) hello_packets_in: <class 'int'>,\n            Optional  (str) jp_interval: <class 'int'>,\n            Optional  (str) hello_packets_out: <class 'int'>,\n            Optional  (str) state_refresh_processing: <class 'str'>,\n            Optional  (str) oper_status: <class 'str'>,\n            Optional  (str) state_refresh_origination: <class 'str'>,\n            Optional  (str) enable: <class 'bool'>,\n            Optional  (str) nbma_mode: <class 'str'>,\n            Optional  (str) address: <class 'list'>,\n            Optional  (str) atm_multipoint_signalling: <class 'str'>,\n            Optional  (str) bsr_border: <class 'bool'>,\n            Optional  (str) neighbors_rpf_proxy_capable: <class 'bool'>,\n            Optional  (str) none_dr_join: <class 'bool'>,\n            'bfd': {\n              Optional  (str) enable: <class 'bool'>,\n              },\n            Optional  (str) multicast: {\n              Optional  (str) ttl_threshold: <class 'int'>,\n              Optional  (str) packets_in: <class 'int'>,\n              Optional  (str) tag_switching: <class 'bool'>,\n              Optional  (str) packets_out: <class 'int'>,\n              Optional  (str) switching: <class 'str'>,\n              },\n            Optional  (str) pim_status: <class 'str'>,\n            Optional  (str) version: <class 'int'>,\n            Optional  (str) mode: <class 'str'>,\n            },\n          },\n        },\n      },\n    },\n  },\n}", "doc": null, "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_pim.py#L1326", "class": "ShowIpPimInterfaceDetail", "module_name": "show_pim"}}, "show bgp l2vpn evpn {mac} | grep -b {count1} -a {count2} \"best path\"": {"nxos": {"uid": "show_bgp_l2vpn_evpn_mac___grep_-b_count1_-a_count2_\"best_path\"", "schema": "{\n'mac_address': {\n  Any  (str) *: {\n    'next_hop': <class 'str'>,\n    'received_label': <class 'str'>,\n    },\n  },\n}", "doc": "Parser for show bgp l2vpn evpn <WORD> | be \"best path, in rib\" n <WORD>", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_bgp.py#L10911", "class": "ShowBgpL2vpnEvpnWord", "module_name": "show_bgp"}}, "show errdisable recovery": {"ios": {"uid": "show_errdisable_recovery", "schema": "{\n'timer_status': {\n  Any  (str) *: <class 'bool'>,\n  },\nOptional  (str) interfaces: {\n  Any  (str) *: {\n    'time_left': <class 'int'>,\n    'errdisable_reason': <class 'str'>,\n    'interface': <class 'str'>,\n    },\n  },\n'bpduguard_timeout_recovery': <class 'int'>,\n}", "doc": "Parser for show errdisable recovery", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_spanning_tree.py#L42", "class": "ShowErrdisableRecovery", "module_name": "show_spanning_tree"}, "iosxe": {"uid": "show_errdisable_recovery", "schema": "{\n'timer_status': {\n  Any  (str) *: <class 'bool'>,\n  },\nOptional  (str) interfaces: {\n  Any  (str) *: {\n    'time_left': <class 'int'>,\n    'errdisable_reason': <class 'str'>,\n    'interface': <class 'str'>,\n    },\n  },\n'bpduguard_timeout_recovery': <class 'int'>,\n}", "doc": "Parser for show errdisable recovery", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_spanning_tree.py#L752", "class": "ShowErrdisableRecovery", "module_name": "show_spanning_tree"}}, "show interface detail": {"iosxr": {"uid": "show_interface_detail", "schema": "{\nAny  (str) *: {\n  Optional  (str) auto_negotiate: <class 'bool'>,\n  Optional  (str) duplex_mode: <class 'str'>,\n  Optional  (str) location: <class 'str'>,\n  Optional  (str) medium: <class 'str'>,\n  Optional  (str) txload: <class 'str'>,\n  Optional  (str) encapsulations: {\n    Optional  (str) first_dot1q: <class 'str'>,\n    Optional  (str) second_dot1q: <class 'str'>,\n    Optional  (str) encapsulation: <class 'str'>,\n    },\n  Optional  (str) rxload: <class 'str'>,\n  Optional  (str) last_input: <class 'str'>,\n  Optional  (str) last_output: <class 'str'>,\n  Optional  (str) last_link_flapped: <class 'str'>,\n  Optional  (str) description: <class 'str'>,\n  Optional  (str) arp_type: <class 'str'>,\n  Optional  (str) arp_timeout: <class 'str'>,\n  Optional  (str) types: <class 'str'>,\n  Optional  (str) loopback_status: <class 'str'>,\n  Optional  (str) phys_address: <class 'str'>,\n  Optional  (str) reliability: <class 'str'>,\n  Optional  (str) port_speed: <class 'str'>,\n  Optional  (str) interface_state: <class 'int'>,\n  Optional  (str) mtu: <class 'int'>,\n  Optional  (str) ipv4: {\n    Any  (str) *: {\n      Optional  (str) ip: <class 'str'>,\n      Optional  (str) prefix_length: <class 'str'>,\n      },\n    },\n  Optional  (str) carrier_delay: <class 'str'>,\n  Optional  (str) line_protocol: <class 'str'>,\n  Optional  (str) oper_status: <class 'str'>,\n  Optional  (str) enabled: <class 'bool'>,\n  Optional  (str) flow_control: {\n    Optional  (str) flow_control_send: <class 'bool'>,\n    Optional  (str) flow_control_receive: <class 'bool'>,\n    },\n  Optional  (str) mac_address: <class 'str'>,\n  Optional  (str) counters: {\n    Optional  (str) in_frame: <class 'int'>,\n    Optional  (str) in_overrun: <class 'int'>,\n    Optional  (str) in_ignored: <class 'int'>,\n    Optional  (str) in_abort: <class 'int'>,\n    Optional  (str) out_pkts: <class 'int'>,\n    Optional  (str) out_octets: <class 'int'>,\n    Optional  (str) rate: {\n      Optional  (str) out_rate_pkts: <class 'int'>,\n      Optional  (str) in_rate_pkts: <class 'int'>,\n      Optional  (str) load_interval: <class 'int'>,\n      Optional  (str) out_rate: <class 'int'>,\n      Optional  (str) in_rate: <class 'int'>,\n      },\n    Optional  (str) out_discards: <class 'int'>,\n    Optional  (str) in_discards: <class 'int'>,\n    Optional  (str) out_broadcast_pkts: <class 'int'>,\n    Optional  (str) in_unknown_protos: <class 'int'>,\n    Optional  (str) out_multicast_pkts: <class 'int'>,\n    Optional  (str) in_octets: <class 'int'>,\n    Optional  (str) out_errors: <class 'int'>,\n    Optional  (str) in_pkts: <class 'int'>,\n    Optional  (str) out_underruns: <class 'int'>,\n    Optional  (str) in_multicast_pkts: <class 'int'>,\n    Optional  (str) out_applique: <class 'int'>,\n    Optional  (str) in_broadcast_pkts: <class 'int'>,\n    Optional  (str) out_resets: <class 'int'>,\n    Optional  (str) in_runts: <class 'int'>,\n    Optional  (str) out_buffer_failures: <class 'int'>,\n    Optional  (str) in_giants: <class 'int'>,\n    Optional  (str) out_buffer_swapped_out: <class 'int'>,\n    Optional  (str) in_throttles: <class 'int'>,\n    Optional  (str) last_clear: <class 'str'>,\n    Optional  (str) in_parity: <class 'int'>,\n    Optional  (str) carrier_transitions: <class 'int'>,\n    Optional  (str) in_frame_errors: <class 'int'>,\n    Optional  (str) in_crc_errors: <class 'int'>,\n    },\n  Optional  (str) bandwidth: <class 'int'>,\n  },\n}", "doc": "Parser for show interface detail", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_interface.py#L560", "class": "ShowInterfacesDetail", "module_name": "show_interface"}}, "show bgp vrf {vrf} {address_family} policy statistics neighbor {neighbor}": {"nxos": {"uid": "show_bgp_vrf_vrf_address_family_policy_statistics_neighbor_neighbor", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    Optional  (str) rpm_handle_count: <class 'int'>,\n    Optional  (str) route_map: {\n      Any  (str) *: {\n        Any  (str) *: {\n          'action': <class 'str'>,\n          'seq_num': <class 'int'>,\n          'total_accept_count': <class 'int'>,\n          Optional  (str) command: {\n            'command': <class 'str'>,\n            'compare_count': <class 'int'>,\n            'match_count': <class 'int'>,\n            },\n          'total_reject_count': <class 'int'>,\n          },\n        },\n      },\n    },\n  },\n}", "doc": "Parser for:\n        show bgp [vrf <vrf>] <address_family> policy statistics neighbor <neighbor>\n        parser class implements detail parsing mechanisms for cli,xml output", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_bgp.py#L8897", "class": "ShowBgpPolicyStatisticsNeighbor", "module_name": "show_bgp"}}, "show ipv6 static vrf {vrf} detail": {"ios": {"uid": "show_ipv6_static_vrf_vrf_detail", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    Optional  (str) address_family: {\n      Any  (str) *: {\n        Optional  (str) routes: {\n          Any  (str) *: {\n            Optional  (str) next_hop: {\n              Optional  (str) outgoing_interface: {\n                Any  (str) *: {\n                  Optional  (str) preference: <class 'int'>,\n                  Optional  (str) outgoing_interface: <class 'str'>,\n                  Optional  (str) tag: <class 'int'>,\n                  Optional  (str) active: <class 'bool'>,\n                  },\n                },\n              Optional  (str) next_hop_list: {\n                Any  (str) *: {\n                  Optional  (str) track: <class 'int'>,\n                  Optional  (str) next_hop: <class 'str'>,\n                  Optional  (str) index: <class 'int'>,\n                  Optional  (str) track_state: <class 'str'>,\n                  Optional  (str) active: <class 'bool'>,\n                  Optional  (str) outgoing_interface: <class 'str'>,\n                  Optional  (str) resolved_outgoing_interface: <class 'str'>,\n                  Optional  (str) resolved_paths_number: <class 'int'>,\n                  Optional  (str) rejected_by: <class 'str'>,\n                  Optional  (str) max_depth: <class 'int'>,\n                  Optional  (str) preference: <class 'int'>,\n                  Optional  (str) tag: <class 'int'>,\n                  },\n                },\n              },\n            Optional  (str) route: <class 'str'>,\n            },\n          },\n        },\n      },\n    },\n  },\n}", "doc": null, "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_static_routing.py#L12", "class": "ShowIpv6StaticDetail", "module_name": "show_static_routing"}, "iosxe": {"uid": "show_ipv6_static_vrf_vrf_detail", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    Optional  (str) address_family: {\n      Any  (str) *: {\n        Optional  (str) routes: {\n          Any  (str) *: {\n            Optional  (str) next_hop: {\n              Optional  (str) outgoing_interface: {\n                Any  (str) *: {\n                  Optional  (str) preference: <class 'int'>,\n                  Optional  (str) outgoing_interface: <class 'str'>,\n                  Optional  (str) tag: <class 'int'>,\n                  Optional  (str) active: <class 'bool'>,\n                  },\n                },\n              Optional  (str) next_hop_list: {\n                Any  (str) *: {\n                  Optional  (str) track: <class 'int'>,\n                  Optional  (str) next_hop: <class 'str'>,\n                  Optional  (str) index: <class 'int'>,\n                  Optional  (str) track_state: <class 'str'>,\n                  Optional  (str) active: <class 'bool'>,\n                  Optional  (str) outgoing_interface: <class 'str'>,\n                  Optional  (str) resolved_outgoing_interface: <class 'str'>,\n                  Optional  (str) resolved_paths_number: <class 'int'>,\n                  Optional  (str) rejected_by: <class 'str'>,\n                  Optional  (str) max_depth: <class 'int'>,\n                  Optional  (str) preference: <class 'int'>,\n                  Optional  (str) tag: <class 'int'>,\n                  },\n                },\n              },\n            Optional  (str) route: <class 'str'>,\n            },\n          },\n        },\n      },\n    },\n  },\n}", "doc": "Parser for:\n       show ipv6 static detail\n       show ipv6 static vrf <vrf> detail\n    ", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_static_routing.py#L237", "class": "ShowIpv6StaticDetail", "module_name": "show_static_routing"}}, "show ip ospf database opaque-area detail": {"nxos": {"uid": "show_ip_ospf_database_opaque-area_detail", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'address_family': {\n      Any  (str) *: {\n        'instance': {\n          Any  (str) *: {\n            Optional  (str) areas: {\n              Any  (str) *: {\n                'database': {\n                  'lsa_types': {\n                    Any  (str) *: {\n                      'lsa_type': <class 'int'>,\n                      'lsas': {\n                        Any  (str) *: {\n                          'ospfv2': {\n                            'header': {\n                              'opaque_type': <class 'int'>,\n                              'seq_num': <class 'str'>,\n                              'opaque_id': <class 'int'>,\n                              'checksum': <class 'str'>,\n                              'type': <class 'int'>,\n                              'option': <class 'str'>,\n                              'age': <class 'int'>,\n                              Optional  (str) num_links: <class 'int'>,\n                              Optional  (str) maxage: <class 'bool'>,\n                              'option_desc': <class 'str'>,\n                              Optional  (str) mpls_te_router_id: <class 'str'>,\n                              'length': <class 'int'>,\n                              Optional  (str) fragment_number: <class 'int'>,\n                              'lsa_id': <class 'str'>,\n                              'adv_router': <class 'str'>,\n                              },\n                            'body': {\n                              'opaque': {\n                                Optional  (str) link_tlvs: {\n                                  Any  (str) *: {\n                                    'te_metric': <class 'int'>,\n                                    'link_type': <class 'int'>,\n                                    'link_id': <class 'str'>,\n                                    Optional  (str) local_if_ipv4_addrs: {\n                                      Any  (str) *: {\n                                        },\n                                      },\n                                    Optional  (str) unreserved_bandwidths: {\n                                      Any  (str) *: {\n                                        'unreserved_bandwidth': <class 'int'>,\n                                        'priority': <class 'int'>,\n                                        },\n                                      },\n                                    Optional  (str) unknown_tlvs: {\n                                      Any  (str) *: {\n                                        'length': <class 'int'>,\n                                        'type': <class 'int'>,\n                                        'value': <class 'str'>,\n                                        },\n                                      },\n                                    'max_reservable_bandwidth': <class 'int'>,\n                                    'max_bandwidth': <class 'int'>,\n                                    'admin_group': <class 'str'>,\n                                    'link_name': <class 'str'>,\n                                    Optional  (str) remote_if_ipv4_addrs: {\n                                      Any  (str) *: {\n                                        },\n                                      },\n                                    },\n                                  },\n                                },\n                              },\n                            },\n                          'lsa_id': <class 'str'>,\n                          'adv_router': <class 'str'>,\n                          },\n                        },\n                      },\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "doc": "Parser for:\n        show ip ospf database opaque-area detail\n        show ip ospf database opaque-area detail vrf <vrf>", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_ospf.py#L3604", "class": "ShowIpOspfDatabaseOpaqueAreaDetail", "module_name": "show_ospf"}}, "show ipv6 mld groups": {"nxos": {"uid": "show_ipv6_mld_groups", "schema": "{\n'vrfs': {\n  Any  (str) *: {\n    'groups_count': <class 'int'>,\n    Optional  (str) interface: {\n      Any  (str) *: {\n        'group': {\n          Any  (str) *: {\n            Optional  (str) expire: <class 'str'>,\n            Optional  (str) type: <class 'str'>,\n            Optional  (str) up_time: <class 'str'>,\n            Optional  (str) source: {\n              Any  (str) *: {\n                'type': <class 'str'>,\n                'expire': <class 'str'>,\n                'last_reporter': <class 'str'>,\n                'up_time': <class 'str'>,\n                },\n              },\n            Optional  (str) last_reporter: <class 'str'>,\n            },\n          },\n        },\n      },\n    },\n  },\n}", "doc": "Parser for:\n        show ipv6 mld groups\n        show ipv6 mld groups vrf all\n        show ipv6 mld groups vrf <vrf>", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_mld.py#L467", "class": "ShowIpv6MldGroups", "module_name": "show_mld"}}, "show version": {"ios": {"uid": "show_version", "schema": "{\n'version': {\n  'system_image': <class 'str'>,\n  Optional  (str) license_level: <class 'str'>,\n  Optional  (str) uptime_this_cp: <class 'str'>,\n  Optional  (str) next_reload_license_level: <class 'str'>,\n  Optional  (str) chassis: <class 'str'>,\n  'platform': <class 'str'>,\n  Optional  (str) chassis_sn: <class 'str'>,\n  'uptime': <class 'str'>,\n  Optional  (str) rtr_type: <class 'str'>,\n  Optional  (str) disks: {\n    Any  (str) *: {\n      Optional  (str) type_of_disk: <class 'str'>,\n      Optional  (str) disk_size: <class 'str'>,\n      },\n    },\n  Optional  (str) next_config_register: <class 'str'>,\n  'curr_config_register': <class 'str'>,\n  Optional  (str) processor_type: <class 'str'>,\n  Optional  (str) main_mem: <class 'str'>,\n  'version': <class 'str'>,\n  'last_reload_reason': <class 'str'>,\n  Optional  (str) number_of_intfs: {\n    Any  (str) *: <class 'str'>,\n    },\n  'version_short': <class 'str'>,\n  'image_id': <class 'str'>,\n  'image_type': <class 'str'>,\n  Optional  (str) mem_size: {\n    Any  (str) *: <class 'str'>,\n    },\n  'rom': <class 'str'>,\n  Optional  (str) bootldr: <class 'str'>,\n  Optional  (str) switch_num: {\n    Any  (str) *: {\n      Optional  (str) mac_address: <class 'str'>,\n      Optional  (str) mb_assembly_num: <class 'str'>,\n      Optional  (str) sw_ver: <class 'str'>,\n      Optional  (str) mb_sn: <class 'str'>,\n      Optional  (str) uptime: <class 'str'>,\n      Optional  (str) model_rev_num: <class 'str'>,\n      Optional  (str) mb_rev_num: <class 'str'>,\n      Optional  (str) model_num: <class 'str'>,\n      Optional  (str) ports: <class 'str'>,\n      Optional  (str) system_sn: <class 'str'>,\n      Optional  (str) mode: <class 'str'>,\n      Optional  (str) model: <class 'str'>,\n      Optional  (str) active: <class 'bool'>,\n      Optional  (str) sw_image: <class 'str'>,\n      },\n    },\n  'os': <class 'str'>,\n  Optional  (str) system_restarted_at: <class 'str'>,\n  'hostname': <class 'str'>,\n  Optional  (str) license_type: <class 'str'>,\n  },\n}", "doc": "Parser for show version\n    ", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_platform.py#L52", "class": "ShowVersion", "module_name": "show_platform"}, "nxos": {"uid": "show_version", "schema": "{\n'platform': {\n  'hardware': {\n    Optional  (str) model: <class 'str'>,\n    Optional  (str) device_name: <class 'str'>,\n    Optional  (str) slots: <class 'str'>,\n    Optional  (str) bootflash: <class 'str'>,\n    Optional  (str) memory: <class 'str'>,\n    Optional  (str) slot0: <class 'str'>,\n    Optional  (str) cpu: Or (<class 'str'>, None),\n    Optional  (str) processor_board_id: <class 'str'>,\n    Optional  (str) chassis: <class 'str'>,\n    },\n  Optional  (str) os: <class 'str'>,\n  'software': {\n    Optional  (str) system_image_file: <class 'str'>,\n    Optional  (str) kickstart_compile_time: <class 'str'>,\n    Optional  (str) bios_version: <class 'str'>,\n    Optional  (str) system_compile_time: <class 'str'>,\n    Optional  (str) kickstart_image_file: <class 'str'>,\n    Optional  (str) system_version: <class 'str'>,\n    Optional  (str) kickstart_version: <class 'str'>,\n    Optional  (str) bios_compile_time: <class 'str'>,\n    },\n  'kernel_uptime': {\n    Optional  (str) minutes: <class 'int'>,\n    Optional  (str) hours: <class 'int'>,\n    Optional  (str) seconds: <class 'int'>,\n    Optional  (str) days: <class 'int'>,\n    },\n  Optional  (str) name: <class 'str'>,\n  Optional  (str) reason: <class 'str'>,\n  Optional  (str) system_version: <class 'str'>,\n  },\n}", "doc": "Parser for :\n        show version\n        parser class implements detail parsing mechanisms for cli, xml and yang output.\n    ", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_platform.py#L64", "class": "ShowVersion", "module_name": "show_platform"}, "iosxr": {"uid": "show_version", "schema": "{\nOptional  (str) processor_memory_bytes: <class 'str'>,\n'software_version': <class 'str'>,\nOptional  (str) chassis_detail: <class 'str'>,\n'uptime': <class 'str'>,\nOptional  (str) image: <class 'str'>,\n'device_family': <class 'str'>,\nOptional  (str) config_register: <class 'str'>,\nOptional  (str) rp_config_register: <class 'str'>,\n'operating_system': <class 'str'>,\nOptional  (str) processor: <class 'str'>,\nOptional  (str) main_mem: <class 'str'>,\n}", "doc": "Parser for show version", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_platform.py#L56", "class": "ShowVersion", "module_name": "show_platform"}, "iosxe": {"uid": "show_version", "schema": "{\n'version': {\n  'system_image': <class 'str'>,\n  Optional  (str) license_level: <class 'str'>,\n  Optional  (str) uptime_this_cp: <class 'str'>,\n  Optional  (str) next_reload_license_level: <class 'str'>,\n  Optional  (str) chassis: <class 'str'>,\n  'platform': <class 'str'>,\n  Optional  (str) chassis_sn: <class 'str'>,\n  'uptime': <class 'str'>,\n  Optional  (str) rtr_type: <class 'str'>,\n  Optional  (str) disks: {\n    Any  (str) *: {\n      Optional  (str) type_of_disk: <class 'str'>,\n      Optional  (str) disk_size: <class 'str'>,\n      },\n    },\n  Optional  (str) next_config_register: <class 'str'>,\n  'curr_config_register': <class 'str'>,\n  Optional  (str) processor_type: <class 'str'>,\n  Optional  (str) main_mem: <class 'str'>,\n  'version': <class 'str'>,\n  'last_reload_reason': <class 'str'>,\n  Optional  (str) number_of_intfs: {\n    Any  (str) *: <class 'str'>,\n    },\n  'version_short': <class 'str'>,\n  'image_id': <class 'str'>,\n  'image_type': <class 'str'>,\n  Optional  (str) mem_size: {\n    Any  (str) *: <class 'str'>,\n    },\n  'rom': <class 'str'>,\n  Optional  (str) bootldr: <class 'str'>,\n  Optional  (str) switch_num: {\n    Any  (str) *: {\n      Optional  (str) mac_address: <class 'str'>,\n      Optional  (str) mb_assembly_num: <class 'str'>,\n      Optional  (str) sw_ver: <class 'str'>,\n      Optional  (str) mb_sn: <class 'str'>,\n      Optional  (str) uptime: <class 'str'>,\n      Optional  (str) model_rev_num: <class 'str'>,\n      Optional  (str) mb_rev_num: <class 'str'>,\n      Optional  (str) model_num: <class 'str'>,\n      Optional  (str) ports: <class 'str'>,\n      Optional  (str) system_sn: <class 'str'>,\n      Optional  (str) mode: <class 'str'>,\n      Optional  (str) model: <class 'str'>,\n      Optional  (str) active: <class 'bool'>,\n      Optional  (str) sw_image: <class 'str'>,\n      },\n    },\n  'os': <class 'str'>,\n  Optional  (str) system_restarted_at: <class 'str'>,\n  'hostname': <class 'str'>,\n  Optional  (str) license_type: <class 'str'>,\n  },\n}", "doc": "Parser for show version\n    parser class - implements detail parsing mechanisms for cli output.\n    ", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_platform.py#L86", "class": "ShowVersion", "module_name": "show_platform"}}, "show placement program all": {"iosxr": {"uid": "show_placement_program_all", "schema": "{\n'program': {\n  Any  (str) *: {\n    'instance': {\n      Any  (str) *: {\n        'jid': <class 'str'>,\n        'standby': <class 'str'>,\n        'active': <class 'str'>,\n        'active_state': <class 'str'>,\n        'standby_state': <class 'str'>,\n        'group': <class 'str'>,\n        },\n      },\n    },\n  },\n}", "doc": "Parser for show placement program all", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_bgp.py#L183", "class": "ShowPlacementProgramAll", "module_name": "show_bgp"}}, "show ospf vrf all-inclusive database network": {"iosxr": {"uid": "show_ospf_vrf_all-inclusive_database_network", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'address_family': {\n      Any  (str) *: {\n        'instance': {\n          Any  (str) *: {\n            Optional  (str) areas: {\n              Any  (str) *: {\n                'database': {\n                  'lsa_types': {\n                    Any  (str) *: {\n                      'lsa_type': <class 'int'>,\n                      'lsas': {\n                        Any  (str) *: {\n                          'ospfv2': {\n                            'header': {\n                              'age': <class 'int'>,\n                              'option_desc': <class 'str'>,\n                              'adv_router': <class 'str'>,\n                              Optional  (str) routing_bit_enable: <class 'bool'>,\n                              'seq_num': <class 'str'>,\n                              'length': <class 'int'>,\n                              'checksum': <class 'str'>,\n                              'type': <class 'int'>,\n                              'lsa_id': <class 'str'>,\n                              'option': <class 'str'>,\n                              },\n                            'body': {\n                              'network': {\n                                'attached_routers': {\n                                  Any  (str) *: {\n                                    },\n                                  },\n                                'network_mask': <class 'str'>,\n                                },\n                              },\n                            },\n                          'lsa_id': <class 'str'>,\n                          'adv_router': <class 'str'>,\n                          },\n                        },\n                      },\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "doc": "\n    Parser for show ospf vrf all-inclusive database network\n    For checking any output with the parser ,below mandatory key(s) are needed and have to be in cli command.\n\n    - db_type\n    ", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_ospf.py#L3775", "class": "ShowOspfVrfAllInclusiveDatabaseNetwork", "module_name": "show_ospf"}}, "show bgp {address_family} policy statistics redistribute": {"nxos": {"uid": "show_bgp_address_family_policy_statistics_redistribute", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    Optional  (str) rpm_handle_count: <class 'int'>,\n    Optional  (str) route_map: {\n      Any  (str) *: {\n        Any  (str) *: {\n          'action': <class 'str'>,\n          'seq_num': <class 'int'>,\n          'total_accept_count': <class 'int'>,\n          Optional  (str) command: {\n            'command': <class 'str'>,\n            'compare_count': <class 'int'>,\n            'match_count': <class 'int'>,\n            },\n          'total_reject_count': <class 'int'>,\n          },\n        },\n      },\n    },\n  },\n}", "doc": "Parser for:\n        show bgp [vrf <vrf>] <address_family> policy statistics redistribute\n        parser class implements detail parsing mechanisms for cli,xml output", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_bgp.py#L8863", "class": "ShowBgpPolicyStatisticsRedistribute", "module_name": "show_bgp"}}, "show run key chain": {"iosxr": {"uid": "show_run_key_chain", "schema": "{\n'key_chains': {\n  Optional  (Any) Any  (str) *: {\n    Optional  (str) accept_tolerance: <class 'str'>,\n    Optional  (str) keys: {\n      Optional  (Any) Any  (str) *: {\n        Optional  (str) send_lifetime: <class 'str'>,\n        Optional  (str) cryptographic_algorithm: <class 'str'>,\n        Optional  (str) key_string: <class 'str'>,\n        Optional  (str) accept_lifetime: <class 'str'>,\n        },\n      },\n    },\n  },\n}", "doc": "Parser for show run key chain", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_run.py#L37", "class": "ShowRunKeyChain", "module_name": "show_run"}}, "show ipv6 pim bsr election": {"ios": {"uid": "show_ipv6_pim_bsr_election", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'address_family': {\n      Any  (str) *: {\n        'rp': {\n          'bsr': {\n            Optional  (str) bsr_candidate: {\n              Optional  (str) hash_mask_length: <class 'int'>,\n              Optional  (str) address: <class 'str'>,\n              Optional  (str) priority: <class 'int'>,\n              },\n            Optional  (str) bsr: {\n              Optional  (str) up_time: <class 'str'>,\n              Optional  (str) address: <class 'str'>,\n              Optional  (str) expires: <class 'str'>,\n              Optional  (str) hash_mask_length: <class 'int'>,\n              Optional  (str) rpf_interface: <class 'str'>,\n              Optional  (str) scope_range_list: <class 'str'>,\n              Optional  (str) rpf_address: <class 'str'>,\n              Optional  (str) priority: <class 'int'>,\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "doc": "Parser for:\n        show ipv6 pim bsr election\n        show ipv6 pim vrf <vrf> bsr election", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_pim.py#L37", "class": "ShowIpv6PimBsrElection", "module_name": "show_pim"}, "iosxe": {"uid": "show_ipv6_pim_bsr_election", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'address_family': {\n      Any  (str) *: {\n        'rp': {\n          'bsr': {\n            Optional  (str) bsr_candidate: {\n              Optional  (str) hash_mask_length: <class 'int'>,\n              Optional  (str) address: <class 'str'>,\n              Optional  (str) priority: <class 'int'>,\n              },\n            Optional  (str) bsr: {\n              Optional  (str) up_time: <class 'str'>,\n              Optional  (str) address: <class 'str'>,\n              Optional  (str) expires: <class 'str'>,\n              Optional  (str) hash_mask_length: <class 'int'>,\n              Optional  (str) rpf_interface: <class 'str'>,\n              Optional  (str) scope_range_list: <class 'str'>,\n              Optional  (str) rpf_address: <class 'str'>,\n              Optional  (str) priority: <class 'int'>,\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "doc": "Parser for:\n        show ipv6 pim bsr election\n        show ipv6 pim vrf <vrf> bsr election", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_pim.py#L167", "class": "ShowIpv6PimBsrElection", "module_name": "show_pim"}}, "show vrf detail": {"ios": {"uid": "show_vrf_detail", "schema": "{\nAny  (str) *: {\n  Optional  (str) route_distinguisher: <class 'str'>,\n  Optional  (str) flags: <class 'str'>,\n  Optional  (str) vpn_id: <class 'str'>,\n  Optional  (str) interfaces: <class 'list'>,\n  Optional  (str) vrf_id: <class 'int'>,\n  Optional  (str) address_family: {\n    Any  (str) *: {\n      Optional  (str) export_to_global: {\n        'export_to_global_map': <class 'str'>,\n        'prefix_limit': <class 'int'>,\n        },\n      Optional  (str) vrf_label: {\n        Optional  (str) distribution_protocol: <class 'str'>,\n        Optional  (str) allocation_mode: <class 'str'>,\n        },\n      Optional  (str) flags: <class 'str'>,\n      Optional  (str) routing_table_limit: {\n        'routing_table_limit_action': {\n          Optional  (str) enable_simple_alert: {\n            'simple_alert': <class 'bool'>,\n            },\n          Optional  (str) enable_alert_percent: {\n            'alert_percent_value': <class 'int'>,\n            },\n          Optional  (str) enable_alert_limit_number: {\n            'alert_limit_number': <class 'int'>,\n            },\n          },\n        Optional  (str) routing_table_limit_number: <class 'int'>,\n        },\n      'table_id': <class 'str'>,\n      Optional  (str) route_targets: {\n        Any  (str) *: {\n          'route_target': <class 'str'>,\n          'rt_type': <class 'str'>,\n          },\n        },\n      Optional  (str) import_from_global: {\n        'import_from_global_map': <class 'str'>,\n        'prefix_limit': <class 'int'>,\n        },\n      },\n    },\n  Optional  (str) interface: {\n    Any  (str) *: {\n      'vrf': <class 'str'>,\n      },\n    },\n  },\n}", "doc": "Parser for show vrf detail", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_vrf.py#L15", "class": "ShowVrfDetail", "module_name": "show_vrf"}, "iosxe": {"uid": "show_vrf_detail", "schema": "{\nAny  (str) *: {\n  Optional  (str) route_distinguisher: <class 'str'>,\n  Optional  (str) flags: <class 'str'>,\n  Optional  (str) vpn_id: <class 'str'>,\n  Optional  (str) interfaces: <class 'list'>,\n  Optional  (str) vrf_id: <class 'int'>,\n  Optional  (str) address_family: {\n    Any  (str) *: {\n      Optional  (str) export_to_global: {\n        'export_to_global_map': <class 'str'>,\n        'prefix_limit': <class 'int'>,\n        },\n      Optional  (str) vrf_label: {\n        Optional  (str) distribution_protocol: <class 'str'>,\n        Optional  (str) allocation_mode: <class 'str'>,\n        },\n      Optional  (str) flags: <class 'str'>,\n      Optional  (str) routing_table_limit: {\n        'routing_table_limit_action': {\n          Optional  (str) enable_simple_alert: {\n            'simple_alert': <class 'bool'>,\n            },\n          Optional  (str) enable_alert_percent: {\n            'alert_percent_value': <class 'int'>,\n            },\n          Optional  (str) enable_alert_limit_number: {\n            'alert_limit_number': <class 'int'>,\n            },\n          },\n        Optional  (str) routing_table_limit_number: <class 'int'>,\n        },\n      'table_id': <class 'str'>,\n      Optional  (str) route_targets: {\n        Any  (str) *: {\n          'route_target': <class 'str'>,\n          'rt_type': <class 'str'>,\n          },\n        },\n      Optional  (str) import_from_global: {\n        'import_from_global_map': <class 'str'>,\n        'prefix_limit': <class 'int'>,\n        },\n      },\n    },\n  Optional  (str) interface: {\n    Any  (str) *: {\n      'vrf': <class 'str'>,\n      },\n    },\n  },\n}", "doc": "Parser for show vrf detail", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_vrf.py#L72", "class": "ShowVrfDetail", "module_name": "show_vrf"}}, "show mpls interfaces vrf {vrf} ": {"iosxe": {"uid": "show_mpls_interfaces_vrf_vrf_", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'interfaces': {\n      Any  (str) *: {\n        Optional  (str) bgp: <class 'str'>,\n        Optional  (str) ip_labeling_enabled: {\n          Any  (str) *: {\n            'ldp': <class 'bool'>,\n            Optional  (str) interface_config: <class 'bool'>,\n            },\n          },\n        Optional  (str) lsp_tunnel_labeling_enabled: <class 'bool'>,\n        Optional  (str) tunnel: <class 'str'>,\n        Optional  (str) lp_frr_labeling_enabled: <class 'bool'>,\n        Optional  (str) mpls_operational: <class 'bool'>,\n        Optional  (str) bgp_labeling_enabled: <class 'bool'>,\n        Optional  (str) static: <class 'str'>,\n        Optional  (str) operational: <class 'str'>,\n        Optional  (str) mtu: <class 'int'>,\n        Optional  (str) type: <class 'str'>,\n        Optional  (str) session: <class 'str'>,\n        Optional  (str) ip: <class 'str'>,\n        },\n      },\n    },\n  },\n}", "doc": "Parser for\n        show mpls interfaces\n        show mpls interfaces all\n        show mpls interfaces vrf <vrf>\n        show mpls interfaces <interface>\n        show mpls interfaces <interface> detail\n        show mpls interfaces detail", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_mpls.py#L2049", "class": "ShowMplsInterface", "module_name": "show_mpls"}}, "show ip bgp {address_family} all summary": {"iosxe": {"uid": "show_ip_bgp_address_family_all_summary", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    Optional  (str) neighbor: {\n      Any  (str) *: {\n        'address_family': {\n          Any  (str) *: {\n            Optional  (str) prefixes: {\n              'total_entries': <class 'int'>,\n              'memory_usage': <class 'int'>,\n              },\n            'msg_rcvd': <class 'int'>,\n            Optional  (str) path: {\n              'total_entries': <class 'int'>,\n              'memory_usage': <class 'int'>,\n              },\n            Optional  (str) cache_entries: {\n              Any  (str) *: {\n                'total_entries': <class 'int'>,\n                'memory_usage': <class 'int'>,\n                },\n              },\n            'input_queue': <class 'int'>,\n            'state_pfxrcd': <class 'str'>,\n            Optional  (str) entries: {\n              Any  (str) *: {\n                'total_entries': <class 'int'>,\n                'memory_usage': <class 'int'>,\n                },\n              },\n            Optional  (str) community_entries: {\n              'total_entries': <class 'int'>,\n              'memory_usage': <class 'int'>,\n              },\n            Optional  (str) attribute_entries: <class 'str'>,\n            'as': <class 'int'>,\n            Optional  (str) total_memory: <class 'int'>,\n            Optional  (str) activity_prefixes: <class 'str'>,\n            'tbl_ver': <class 'int'>,\n            Optional  (str) activity_paths: <class 'str'>,\n            Optional  (str) scan_interval: <class 'int'>,\n            'output_queue': <class 'int'>,\n            'msg_sent': <class 'int'>,\n            Optional  (str) route_identifier: <class 'str'>,\n            Optional  (str) local_as: <class 'int'>,\n            'up_down': <class 'str'>,\n            Optional  (str) bgp_table_version: <class 'int'>,\n            'version': <class 'int'>,\n            Optional  (str) routing_table_version: <class 'int'>,\n            },\n          },\n        },\n      },\n    },\n  },\n'bgp_id': <class 'int'>,\n}", "doc": " Parser for:\n        * 'show ip bgp all summary'\n        * 'show ip bgp {address_family} all summary'\n    ", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_bgp.py#L2176", "class": "ShowIpBgpAllSummary", "module_name": "show_bgp"}}, "show mac address-table aging-time": {"iosxe": {"uid": "show_mac_address-table_aging-time", "schema": "{\n'mac_aging_time': <class 'int'>,\nOptional  (str) vlans: {\n  Any  (str) *: {\n    'vlan': Or (<class 'int'>, <class 'str'>),\n    'mac_aging_time': <class 'int'>,\n    },\n  },\n}", "doc": "Parser for show mac address-table aging-time", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_fdb.py#L125", "class": "ShowMacAddressTableAgingTime", "module_name": "show_fdb"}}, "show bgp vrf {vrf} all neighbors": {"nxos": {"uid": "show_bgp_vrf_vrf_all_neighbors", "schema": "{\n'neighbor': {\n  Any  (str) *: {\n    Optional  (str) up_time: <class 'str'>,\n    Optional  (str) graceful_restart: <class 'bool'>,\n    Optional  (str) peer_group: <class 'str'>,\n    Optional  (str) graceful_restart_helper_only: <class 'bool'>,\n    Optional  (str) suppress_four_byte_as_capability: <class 'bool'>,\n    Optional  (str) graceful_restart_restart_time: <class 'int'>,\n    Optional  (str) retry_time: <class 'str'>,\n    Optional  (str) address_family: {\n      Any  (str) *: {\n        Optional  (str) next_hop_self: <class 'bool'>,\n        Optional  (str) third_party_nexthop: <class 'bool'>,\n        Optional  (str) as_override_count: <class 'int'>,\n        Optional  (str) inherit_peer_policy: {\n          Any  (str) *: {\n            Optional  (str) inherit_peer_seq: <class 'int'>,\n            },\n          },\n        Optional  (str) as_override: <class 'bool'>,\n        Optional  (str) maximum_prefix_max_prefix_no: <class 'int'>,\n        Optional  (str) route_map_name_in: <class 'str'>,\n        Optional  (str) route_map_name_out: <class 'str'>,\n        Optional  (str) default_originate: <class 'bool'>,\n        Optional  (str) default_originate_route_map: <class 'str'>,\n        Optional  (str) route_reflector_client: <class 'bool'>,\n        Optional  (str) enabled: <class 'bool'>,\n        Optional  (str) graceful_restart: <class 'bool'>,\n        Optional  (str) bgp_table_version: <class 'int'>,\n        Optional  (str) ipv4_unicast_send_default_route: <class 'bool'>,\n        Optional  (str) session_state: <class 'str'>,\n        Optional  (str) ipv6_unicast_send_default_route: <class 'bool'>,\n        Optional  (str) state_reason: <class 'str'>,\n        Optional  (str) neighbor_version: <class 'int'>,\n        Optional  (str) send_community: <class 'str'>,\n        Optional  (str) soo: <class 'str'>,\n        Optional  (str) path: {\n          Optional  (str) accepted_paths: <class 'int'>,\n          Optional  (str) total_entries: <class 'int'>,\n          Optional  (str) memory_usage: <class 'int'>,\n          },\n        Optional  (str) soft_configuration: <class 'bool'>,\n        },\n      },\n    Optional  (str) graceful_restart_stalepath_time: <class 'int'>,\n    Optional  (str) update_source: <class 'str'>,\n    'remote_as': <class 'int'>,\n    Optional  (str) allow_own_as: <class 'int'>,\n    Optional  (str) bfd_live_detection: <class 'bool'>,\n    Optional  (str) send_community: <class 'str'>,\n    Optional  (str) bfd_enabled: <class 'bool'>,\n    Optional  (str) route_reflector_client: <class 'bool'>,\n    Optional  (str) bfd_state: <class 'str'>,\n    Optional  (str) nbr_local_as_cmd: <class 'str'>,\n    Optional  (str) last_read: <class 'str'>,\n    Optional  (str) holdtime: <class 'int'>,\n    Optional  (str) keepalive_interval: <class 'int'>,\n    Optional  (str) bgp_negotiated_capabilities: {\n      Optional  (str) vpnv4_unicast: <class 'str'>,\n      Optional  (str) multisession: <class 'str'>,\n      Optional  (str) vpnv6_unicast: <class 'str'>,\n      Optional  (str) dynamic_capability_old: <class 'str'>,\n      Optional  (str) stateful_switchover: <class 'str'>,\n      Optional  (str) ipv4_mvpn: <class 'str'>,\n      Optional  (str) dynamic_capability: <class 'str'>,\n      Optional  (str) route_refresh: <class 'str'>,\n      Optional  (str) graceful_restart: <class 'str'>,\n      Optional  (str) route_refresh_old: <class 'str'>,\n      Optional  (str) enhanced_refresh: <class 'str'>,\n      },\n    Optional  (str) bgp_negotiated_keepalive_timers: {\n      Optional  (str) keepalive_interval: <class 'int'>,\n      Optional  (str) keepalive_timer: <class 'str'>,\n      Optional  (str) hold_time: <class 'int'>,\n      Optional  (str) last_read: <class 'str'>,\n      Optional  (str) last_written: <class 'str'>,\n      },\n    Optional  (str) minimum_advertisement_interval: <class 'int'>,\n    Optional  (str) disable_connected_check: <class 'bool'>,\n    Optional  (str) inherit_peer_session: <class 'str'>,\n    Optional  (str) ebgp_multihop_max_hop: <class 'int'>,\n    Optional  (str) ebgp_multihop: <class 'bool'>,\n    Optional  (str) bgp_session_transport: {\n      Optional  (str) connection: {\n        Optional  (str) last_reset: <class 'str'>,\n        Optional  (str) dropped: <class 'int'>,\n        Optional  (str) reset_reason: <class 'str'>,\n        Optional  (str) reset_by: <class 'str'>,\n        Optional  (str) attempts: <class 'int'>,\n        Optional  (str) mode: <class 'str'>,\n        Optional  (str) established: <class 'int'>,\n        },\n      Optional  (str) transport: {\n        Optional  (str) foreign_port: <class 'str'>,\n        Optional  (str) foreign_host: <class 'str'>,\n        Optional  (str) fd: <class 'str'>,\n        Optional  (str) local_port: <class 'str'>,\n        Optional  (str) passive_mode: <class 'str'>,\n        Optional  (str) local_host: <class 'str'>,\n        },\n      },\n    Optional  (str) tcp_md5_auth: <class 'str'>,\n    Optional  (str) tcp_md5_auth_config: <class 'str'>,\n    Optional  (str) received_messages: <class 'int'>,\n    Optional  (str) local_as: <class 'str'>,\n    Optional  (str) received_notifications: <class 'int'>,\n    Optional  (str) graceful_restart_paramters: {\n      Optional  (str) stale_time_advertised_by_peer_seconds: <class 'int'>,\n      Optional  (str) restart_time_advertised_to_peer_seconds: <class 'int'>,\n      Optional  (str) address_families_advertised_to_peer: <class 'str'>,\n      Optional  (str) restart_time_advertised_by_peer_seconds: <class 'int'>,\n      Optional  (str) address_families_advertised_from_peer: <class 'str'>,\n      },\n    Optional  (str) received_bytes_queue: <class 'int'>,\n    Optional  (str) peer_fab_type: <class 'str'>,\n    Optional  (str) sent_messages: <class 'int'>,\n    Optional  (str) bgp_neighbor_counters: {\n      Optional  (str) messages: {\n        Optional  (str) sent: {\n          Any  (str) *: <class 'int'>,\n          },\n        Optional  (str) received: {\n          Any  (str) *: <class 'int'>,\n          },\n        },\n      },\n    Optional  (str) link: <class 'str'>,\n    Optional  (str) sent_notifications: <class 'int'>,\n    Optional  (str) peer_index: <class 'int'>,\n    Optional  (str) sent_bytes_queue: <class 'int'>,\n    Optional  (str) description: <class 'str'>,\n    Optional  (str) enabled: <class 'bool'>,\n    Optional  (str) bgp_version: <class 'int'>,\n    Optional  (str) remove_private_as: <class 'bool'>,\n    Optional  (str) router_id: <class 'str'>,\n    Optional  (str) nbr_ebgp_multihop: <class 'bool'>,\n    Optional  (str) session_state: <class 'str'>,\n    Optional  (str) nbr_ebgp_multihop_max_hop: <class 'int'>,\n    Optional  (str) state_reason: <class 'str'>,\n    Optional  (str) route_reflector_cluster_id: <class 'int'>,\n    Optional  (str) shutdown: <class 'bool'>,\n    },\n  },\n}", "doc": "Parser for:\n        show bgp vrf <vrf> all neighbors\n        parser class - implements detail parsing mechanisms for cli and yang output.\n        ", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_bgp.py#L2275", "class": "ShowBgpVrfAllNeighbors", "module_name": "show_bgp"}}, "show lldp": {"ios": {"uid": "show_lldp", "schema": "{\n'enabled': <class 'bool'>,\n'hello_timer': <class 'int'>,\n'hold_timer': <class 'int'>,\n'status': <class 'str'>,\n'reinit_timer': <class 'int'>,\n}", "doc": "Parser for show lldp", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_lldp.py#L17", "class": "ShowLldp", "module_name": "show_lldp"}, "iosxe": {"uid": "show_lldp", "schema": "{\n'enabled': <class 'bool'>,\n'hello_timer': <class 'int'>,\n'hold_timer': <class 'int'>,\n'status': <class 'str'>,\n'reinit_timer': <class 'int'>,\n}", "doc": "Parser for show lldp", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_lldp.py#L35", "class": "ShowLldp", "module_name": "show_lldp"}}, "show etherchannel summary": {"iosxe": {"uid": "show_etherchannel_summary", "schema": "{\nOptional  (str) interfaces: {\n  Any  (str) *: {\n    Optional  (str) protocol: <class 'str'>,\n    Optional  (str) activity: <class 'str'>,\n    Optional  (str) flags: <class 'str'>,\n    Optional  (str) port_channel: {\n      'port_channel_member': <class 'bool'>,\n      Optional  (str) port_channel_member_intfs: <class 'list'>,\n      },\n    Optional  (str) oper_status: <class 'str'>,\n    Optional  (str) name: <class 'str'>,\n    Optional  (str) members: {\n      Any  (str) *: {\n        'port_channel': {\n          'port_channel_member': <class 'bool'>,\n          Optional  (str) port_channel_int: <class 'str'>,\n          },\n        Optional  (str) flags: <class 'str'>,\n        Optional  (str) bundled: <class 'bool'>,\n        Optional  (str) interface: <class 'str'>,\n        },\n      },\n    Optional  (str) bundle_id: <class 'int'>,\n    },\n  },\nOptional  (str) number_of_lag_in_use: <class 'int'>,\nOptional  (str) number_of_aggregators: <class 'int'>,\n}", "doc": "Parser for :\n      show etherchannel summary", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_lag.py#L700", "class": "ShowEtherchannelSummary", "module_name": "show_lag"}}, "show interfaces {intf} accounting": {"ios": {"uid": "show_interfaces_intf_accounting", "schema": "{\nAny  (str) *: {\n  'accounting': {\n    Any  (str) *: {\n      'chars_in': <class 'int'>,\n      'pkts_out': <class 'int'>,\n      'pkts_in': <class 'int'>,\n      'chars_out': <class 'int'>,\n      },\n    },\n  },\n}", "doc": "Parser for:\n        show interfaces accounting\n        show interfaces <interface> accounting\n    ", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_interface.py#L68", "class": "ShowInterfacesAccounting", "module_name": "show_interface"}, "iosxr": {"uid": "show_interfaces_intf_accounting", "schema": "{\nAny  (str) *: {\n  'accounting': {\n    Any  (str) *: {\n      'chars_in': <class 'int'>,\n      'pkts_out': <class 'int'>,\n      'pkts_in': <class 'int'>,\n      'chars_out': <class 'int'>,\n      },\n    },\n  },\n}", "doc": "Parser for:\n        show interfaces accounting\n        show interfaces <interface> accounting\n    ", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_interface.py#L2251", "class": "ShowInterfacesAccounting", "module_name": "show_interface"}, "iosxe": {"uid": "show_interfaces_intf_accounting", "schema": "{\nAny  (str) *: {\n  'accounting': {\n    Any  (str) *: {\n      'chars_in': <class 'int'>,\n      'pkts_out': <class 'int'>,\n      'pkts_in': <class 'int'>,\n      'chars_out': <class 'int'>,\n      },\n    },\n  },\n}", "doc": "Parser for:\n        show interfaces accounting\n        show interfaces <interface> accounting\n    ", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_interface.py#L2737", "class": "ShowInterfacesAccounting", "module_name": "show_interface"}}, "show interfaces {interface}": {"ios": {"uid": "show_interfaces_interface", "schema": "{\nAny  (str) *: {\n  Optional  (str) phys_address: <class 'str'>,\n  Optional  (str) rxload: <class 'str'>,\n  Optional  (str) output_hang: <class 'str'>,\n  Optional  (str) delay: <class 'int'>,\n  Optional  (str) ipv4: {\n    Optional  (str) unnumbered: {\n      'interface_ref': <class 'str'>,\n      },\n    Any  (str) *: {\n      Optional  (str) ip: <class 'str'>,\n      Optional  (str) prefix_length: <class 'str'>,\n      Optional  (str) secondary: <class 'bool'>,\n      },\n    },\n  Optional  (str) media_type: <class 'str'>,\n  Optional  (str) counters: {\n    Optional  (str) out_buffer_failure: <class 'int'>,\n    Optional  (str) in_throttles: <class 'int'>,\n    Optional  (str) in_pkts: <class 'int'>,\n    Optional  (str) out_buffers_swapped: <class 'int'>,\n    Optional  (str) in_mac_pause_frames: <class 'int'>,\n    Optional  (str) in_frame: <class 'int'>,\n    Optional  (str) last_clear: <class 'str'>,\n    Optional  (str) out_pkts: <class 'int'>,\n    Optional  (str) in_runts: <class 'int'>,\n    Optional  (str) out_octets: <class 'int'>,\n    Optional  (str) out_babble: <class 'int'>,\n    Optional  (str) out_multicast_pkts: <class 'int'>,\n    Optional  (str) in_overrun: <class 'int'>,\n    Optional  (str) out_broadcast_pkts: <class 'int'>,\n    Optional  (str) in_ignored: <class 'int'>,\n    Optional  (str) in_multicast_pkts: <class 'int'>,\n    Optional  (str) out_errors: <class 'int'>,\n    Optional  (str) out_collision: <class 'int'>,\n    Optional  (str) in_broadcast_pkts: <class 'int'>,\n    Optional  (str) out_interface_resets: <class 'int'>,\n    Optional  (str) in_watchdog: <class 'int'>,\n    Optional  (str) out_unknown_protocl_drops: <class 'int'>,\n    Optional  (str) in_with_dribble: <class 'int'>,\n    Optional  (str) out_babbles: <class 'int'>,\n    Optional  (str) out_deferred: <class 'int'>,\n    Optional  (str) out_underruns: <class 'int'>,\n    Optional  (str) in_octets: <class 'int'>,\n    Optional  (str) out_late_collision: <class 'int'>,\n    Optional  (str) out_lost_carrier: <class 'int'>,\n    Optional  (str) in_crc_errors: <class 'int'>,\n    Optional  (str) rate: {\n      Optional  (str) in_rate: <class 'int'>,\n      Optional  (str) out_rate_pkts: <class 'int'>,\n      Optional  (str) load_interval: <class 'int'>,\n      Optional  (str) in_rate_pkts: <class 'int'>,\n      Optional  (str) out_rate_bps: <class 'int'>,\n      Optional  (str) in_rate_bps: <class 'int'>,\n      Optional  (str) out_rate: <class 'int'>,\n      Optional  (str) in_rate_pps: <class 'int'>,\n      Optional  (str) out_rate_pps: <class 'int'>,\n      },\n    Optional  (str) out_no_carrier: <class 'int'>,\n    Optional  (str) in_errors: <class 'int'>,\n    Optional  (str) in_abort: <class 'int'>,\n    Optional  (str) in_giants: <class 'int'>,\n    Optional  (str) out_mac_pause_frames: <class 'int'>,\n    Optional  (str) in_no_buffer: <class 'int'>,\n    },\n  Optional  (str) keepalive: <class 'int'>,\n  Optional  (str) port_channel: {\n    Optional  (str) port_channel_member_intfs: <class 'list'>,\n    Optional  (str) port_channel_int: <class 'str'>,\n    Optional  (str) port_channel_member: <class 'bool'>,\n    },\n  Optional  (str) connected: <class 'bool'>,\n  Optional  (str) link_state: <class 'str'>,\n  Optional  (str) medium: <class 'str'>,\n  'oper_status': <class 'str'>,\n  Optional  (str) reliability: <class 'str'>,\n  Optional  (str) port_speed: <class 'str'>,\n  'bandwidth': <class 'int'>,\n  'mtu': <class 'int'>,\n  Optional  (str) description: <class 'str'>,\n  Optional  (str) arp_type: <class 'str'>,\n  Optional  (str) link_type: <class 'str'>,\n  'enabled': <class 'bool'>,\n  Optional  (str) auto_negotiate: <class 'bool'>,\n  'type': <class 'str'>,\n  Optional  (str) line_protocol: <class 'str'>,\n  Optional  (str) arp_timeout: <class 'str'>,\n  Optional  (str) last_output: <class 'str'>,\n  Optional  (str) duplex_mode: <class 'str'>,\n  Optional  (str) queues: {\n    Optional  (str) input_queue_flushes: <class 'int'>,\n    Optional  (str) total_output_drop: <class 'int'>,\n    Optional  (str) output_queue_size: <class 'int'>,\n    Optional  (str) input_queue_size: <class 'int'>,\n    Optional  (str) input_queue_max: <class 'int'>,\n    Optional  (str) output_queue_max: <class 'int'>,\n    Optional  (str) input_queue_drops: <class 'int'>,\n    Optional  (str) queue_strategy: <class 'str'>,\n    },\n  Optional  (str) last_input: <class 'str'>,\n  Optional  (str) mac_address: <class 'str'>,\n  Optional  (str) encapsulations: {\n    Optional  (str) native_vlan: <class 'int'>,\n    Optional  (str) encapsulation: <class 'str'>,\n    Optional  (str) second_dot1q: <class 'str'>,\n    Optional  (str) first_dot1q: <class 'str'>,\n    },\n  Optional  (str) flow_control: {\n    Optional  (str) receive: <class 'bool'>,\n    Optional  (str) send: <class 'bool'>,\n    },\n  Optional  (str) txload: <class 'str'>,\n  },\n}", "doc": "parser for show interfaces", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_interface.py#L38", "class": "ShowInterfaces", "module_name": "show_interface"}, "iosxe": {"uid": "show_interfaces_interface", "schema": "{\nAny  (str) *: {\n  Optional  (str) phys_address: <class 'str'>,\n  Optional  (str) rxload: <class 'str'>,\n  Optional  (str) output_hang: <class 'str'>,\n  Optional  (str) delay: <class 'int'>,\n  Optional  (str) ipv4: {\n    Optional  (str) unnumbered: {\n      'interface_ref': <class 'str'>,\n      },\n    Any  (str) *: {\n      Optional  (str) ip: <class 'str'>,\n      Optional  (str) prefix_length: <class 'str'>,\n      Optional  (str) secondary: <class 'bool'>,\n      },\n    },\n  Optional  (str) media_type: <class 'str'>,\n  Optional  (str) counters: {\n    Optional  (str) out_buffer_failure: <class 'int'>,\n    Optional  (str) in_throttles: <class 'int'>,\n    Optional  (str) in_pkts: <class 'int'>,\n    Optional  (str) out_buffers_swapped: <class 'int'>,\n    Optional  (str) in_mac_pause_frames: <class 'int'>,\n    Optional  (str) in_frame: <class 'int'>,\n    Optional  (str) last_clear: <class 'str'>,\n    Optional  (str) out_pkts: <class 'int'>,\n    Optional  (str) in_runts: <class 'int'>,\n    Optional  (str) out_octets: <class 'int'>,\n    Optional  (str) out_babble: <class 'int'>,\n    Optional  (str) out_multicast_pkts: <class 'int'>,\n    Optional  (str) in_overrun: <class 'int'>,\n    Optional  (str) out_broadcast_pkts: <class 'int'>,\n    Optional  (str) in_ignored: <class 'int'>,\n    Optional  (str) in_multicast_pkts: <class 'int'>,\n    Optional  (str) out_errors: <class 'int'>,\n    Optional  (str) out_collision: <class 'int'>,\n    Optional  (str) in_broadcast_pkts: <class 'int'>,\n    Optional  (str) out_interface_resets: <class 'int'>,\n    Optional  (str) in_watchdog: <class 'int'>,\n    Optional  (str) out_unknown_protocl_drops: <class 'int'>,\n    Optional  (str) in_with_dribble: <class 'int'>,\n    Optional  (str) out_babbles: <class 'int'>,\n    Optional  (str) out_deferred: <class 'int'>,\n    Optional  (str) out_underruns: <class 'int'>,\n    Optional  (str) in_octets: <class 'int'>,\n    Optional  (str) out_late_collision: <class 'int'>,\n    Optional  (str) out_lost_carrier: <class 'int'>,\n    Optional  (str) in_crc_errors: <class 'int'>,\n    Optional  (str) rate: {\n      Optional  (str) in_rate: <class 'int'>,\n      Optional  (str) out_rate_pkts: <class 'int'>,\n      Optional  (str) load_interval: <class 'int'>,\n      Optional  (str) in_rate_pkts: <class 'int'>,\n      Optional  (str) out_rate_bps: <class 'int'>,\n      Optional  (str) in_rate_bps: <class 'int'>,\n      Optional  (str) out_rate: <class 'int'>,\n      Optional  (str) in_rate_pps: <class 'int'>,\n      Optional  (str) out_rate_pps: <class 'int'>,\n      },\n    Optional  (str) out_no_carrier: <class 'int'>,\n    Optional  (str) in_errors: <class 'int'>,\n    Optional  (str) in_abort: <class 'int'>,\n    Optional  (str) in_giants: <class 'int'>,\n    Optional  (str) out_mac_pause_frames: <class 'int'>,\n    Optional  (str) in_no_buffer: <class 'int'>,\n    },\n  Optional  (str) keepalive: <class 'int'>,\n  Optional  (str) port_channel: {\n    Optional  (str) port_channel_member_intfs: <class 'list'>,\n    Optional  (str) port_channel_int: <class 'str'>,\n    Optional  (str) port_channel_member: <class 'bool'>,\n    },\n  Optional  (str) connected: <class 'bool'>,\n  Optional  (str) link_state: <class 'str'>,\n  Optional  (str) medium: <class 'str'>,\n  'oper_status': <class 'str'>,\n  Optional  (str) reliability: <class 'str'>,\n  Optional  (str) port_speed: <class 'str'>,\n  'bandwidth': <class 'int'>,\n  'mtu': <class 'int'>,\n  Optional  (str) description: <class 'str'>,\n  Optional  (str) arp_type: <class 'str'>,\n  Optional  (str) link_type: <class 'str'>,\n  'enabled': <class 'bool'>,\n  Optional  (str) auto_negotiate: <class 'bool'>,\n  'type': <class 'str'>,\n  Optional  (str) line_protocol: <class 'str'>,\n  Optional  (str) arp_timeout: <class 'str'>,\n  Optional  (str) last_output: <class 'str'>,\n  Optional  (str) duplex_mode: <class 'str'>,\n  Optional  (str) queues: {\n    Optional  (str) input_queue_flushes: <class 'int'>,\n    Optional  (str) total_output_drop: <class 'int'>,\n    Optional  (str) output_queue_size: <class 'int'>,\n    Optional  (str) input_queue_size: <class 'int'>,\n    Optional  (str) input_queue_max: <class 'int'>,\n    Optional  (str) output_queue_max: <class 'int'>,\n    Optional  (str) input_queue_drops: <class 'int'>,\n    Optional  (str) queue_strategy: <class 'str'>,\n    },\n  Optional  (str) last_input: <class 'str'>,\n  Optional  (str) mac_address: <class 'str'>,\n  Optional  (str) encapsulations: {\n    Optional  (str) native_vlan: <class 'int'>,\n    Optional  (str) encapsulation: <class 'str'>,\n    Optional  (str) second_dot1q: <class 'str'>,\n    Optional  (str) first_dot1q: <class 'str'>,\n    },\n  Optional  (str) flow_control: {\n    Optional  (str) receive: <class 'bool'>,\n    Optional  (str) send: <class 'bool'>,\n    },\n  Optional  (str) txload: <class 'str'>,\n  },\n}", "doc": "parser for show interfaces\n                  show interfaces <interface>", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_interface.py#L173", "class": "ShowInterfaces", "module_name": "show_interface"}}, "show l2vpn vfi": {"ios": {"uid": "show_l2vpn_vfi", "schema": "{\n'vfi': {\n  Any  (str) *: {\n    'bd_vfi_name': <class 'str'>,\n    Optional  (str) vpls_id: <class 'str'>,\n    Optional  (str) bridge_group: <class 'str'>,\n    'vpn_id': <class 'int'>,\n    Optional  (str) type: <class 'str'>,\n    Optional  (str) ve_id: <class 'int'>,\n    'state': <class 'str'>,\n    Optional  (str) ve_range: <class 'int'>,\n    Optional  (str) rd: <class 'str'>,\n    Optional  (str) rt: <class 'list'>,\n    'bridge_domain': {\n      Any  (str) *: {\n        Optional  (str) attachment_circuits: {\n          Optional  (Any) Any  (str) *: {\n            'name': <class 'str'>,\n            },\n          },\n        Optional  (str) pseudo_port_interface: <class 'str'>,\n        'vfi': {\n          Any  (str) *: {\n            'pw_id': {\n              Any  (str) *: {\n                Optional  (str) ve_id: <class 'int'>,\n                Optional  (str) next_hop: <class 'str'>,\n                Optional  (str) vc_id: <class 'int'>,\n                Optional  (str) remote_label: <class 'int'>,\n                Optional  (str) split_horizon: <class 'bool'>,\n                Optional  (str) local_label: <class 'int'>,\n                Optional  (str) discovered_router_id: <class 'str'>,\n                },\n              },\n            },\n          },\n        },\n      },\n    'signaling': <class 'str'>,\n    },\n  },\n}", "doc": "Parser for show l2vpn vfi\n    ", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_l2vpn.py#L33", "class": "ShowL2vpnVfi", "module_name": "show_l2vpn"}, "iosxe": {"uid": "show_l2vpn_vfi", "schema": "{\n'vfi': {\n  Any  (str) *: {\n    'bd_vfi_name': <class 'str'>,\n    Optional  (str) vpls_id: <class 'str'>,\n    Optional  (str) bridge_group: <class 'str'>,\n    'vpn_id': <class 'int'>,\n    Optional  (str) type: <class 'str'>,\n    Optional  (str) ve_id: <class 'int'>,\n    'state': <class 'str'>,\n    Optional  (str) ve_range: <class 'int'>,\n    Optional  (str) rd: <class 'str'>,\n    Optional  (str) rt: <class 'list'>,\n    'bridge_domain': {\n      Any  (str) *: {\n        Optional  (str) attachment_circuits: {\n          Optional  (Any) Any  (str) *: {\n            'name': <class 'str'>,\n            },\n          },\n        Optional  (str) pseudo_port_interface: <class 'str'>,\n        'vfi': {\n          Any  (str) *: {\n            'pw_id': {\n              Any  (str) *: {\n                Optional  (str) ve_id: <class 'int'>,\n                Optional  (str) next_hop: <class 'str'>,\n                Optional  (str) vc_id: <class 'int'>,\n                Optional  (str) remote_label: <class 'int'>,\n                Optional  (str) split_horizon: <class 'bool'>,\n                Optional  (str) local_label: <class 'int'>,\n                Optional  (str) discovered_router_id: <class 'str'>,\n                },\n              },\n            },\n          },\n        },\n      },\n    'signaling': <class 'str'>,\n    },\n  },\n}", "doc": "Parser for show l2vpn vfi\n    ", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_l2vpn.py#L642", "class": "ShowL2vpnVfi", "module_name": "show_l2vpn"}}, "show ip mroute vrf all": {"nxos": {"uid": "show_ip_mroute_vrf_all", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'address_family': {\n      Any  (str) *: {\n        Optional  (str) multicast_group: {\n          Any  (str) *: {\n            Optional  (str) source_address: {\n              Any  (str) *: {\n                Optional  (str) uptime: <class 'str'>,\n                Optional  (str) outgoing_interface_list: {\n                  Any  (str) *: {\n                    Optional  (str) oil_uptime: <class 'str'>,\n                    Optional  (str) oil_flags: <class 'str'>,\n                    },\n                  },\n                Optional  (str) incoming_interface_list: {\n                  Any  (str) *: {\n                    Optional  (str) rpf_nbr: <class 'str'>,\n                    },\n                  },\n                Optional  (str) bidir: <class 'bool'>,\n                Optional  (str) flags: <class 'str'>,\n                Optional  (str) oil_count: <class 'int'>,\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "doc": "Parser for show ip mroute vrf all", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_mcast.py#L60", "class": "ShowIpMrouteVrfAll", "module_name": "show_mcast"}}, "show bgp peer-template": {"nxos": {"uid": "show_bgp_peer-template", "schema": "{\n'template': {\n  Any  (str) *: {\n    Optional  (str) source_interface: <class 'str'>,\n    Optional  (str) passive_only: <class 'bool'>,\n    Optional  (str) vrf: {\n      Any  (str) *: {\n        'inheriting_peer': {\n          Any  (str) *: {\n            'inheriting_peer': <class 'str'>,\n            },\n          },\n        },\n      },\n    Optional  (str) local_as_inactive: <class 'bool'>,\n    'address_family': {\n      Any  (str) *: {\n        Optional  (str) in_soft_reconfig_allowed: <class 'bool'>,\n        Optional  (str) peer_as_check_disabled: <class 'bool'>,\n        Optional  (str) send_community: <class 'bool'>,\n        Optional  (str) out_policy: {\n          Any  (str) *: {\n            'type': <class 'str'>,\n            'name': <class 'str'>,\n            },\n          },\n        Optional  (str) as_override: <class 'bool'>,\n        Optional  (str) send_ext_community: <class 'bool'>,\n        Optional  (str) allow_as_in: <class 'int'>,\n        Optional  (str) default_originate: <class 'bool'>,\n        Optional  (str) local_nexthop: <class 'str'>,\n        Optional  (str) third_party_nexthop: <class 'bool'>,\n        Optional  (str) rr_configured: <class 'bool'>,\n        Optional  (str) unsuppress_map: <class 'str'>,\n        Optional  (str) max_pfx: <class 'int'>,\n        Optional  (str) soo: <class 'str'>,\n        Optional  (str) condition_map: <class 'str'>,\n        Optional  (str) in_policy: {\n          Any  (str) *: {\n            'type': <class 'str'>,\n            'name': <class 'str'>,\n            },\n          },\n        Optional  (str) advertise_map: <class 'str'>,\n        Optional  (str) default_originate_route_map: <class 'str'>,\n        Optional  (str) weight: <class 'int'>,\n        Optional  (str) advertise_map_status: <class 'str'>,\n        },\n      },\n    Optional  (str) low_mem_exempt: <class 'bool'>,\n    Optional  (str) remove_private_as: <class 'bool'>,\n    Optional  (str) logging_neighbor_events: <class 'bool'>,\n    Optional  (str) external_bgp_peer_hops_limit: <class 'int'>,\n    },\n  },\n}", "doc": "Parser for:\n        show bgp peer-template\n    parser class implements detail parsing mechanisms for cli,xml output.", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_bgp.py#L7870", "class": "ShowBgpPeerTemplateCmd", "module_name": "show_bgp"}}, "show arp vrf {vrf} {intf_or_ip}": {"iosxe": {"uid": "show_arp_vrf_vrf_intf_or_ip", "schema": "{\n'interfaces': {\n  Any  (str) *: {\n    'ipv4': {\n      'neighbors': {\n        Any  (str) *: {\n          'ip': <class 'str'>,\n          'age': <class 'str'>,\n          'origin': <class 'str'>,\n          'protocol': <class 'str'>,\n          'type': <class 'str'>,\n          'link_layer_address': <class 'str'>,\n          },\n        },\n      },\n    },\n  },\n}", "doc": " Parser for show arp\n                  show arp <WROD>\n                  show arp vrf <vrf>\n                  show arp vrf <vrf> <WROD> ", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_arp.py#L57", "class": "ShowArp", "module_name": "show_arp"}}, "show ip ospf virtual-links vrf {vrf}": {"nxos": {"uid": "show_ip_ospf_virtual-links_vrf_vrf", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'address_family': {\n      Any  (str) *: {\n        'instance': {\n          Any  (str) *: {\n            'areas': {\n              Any  (str) *: {\n                'virtual_links': {\n                  Any  (str) *: {\n                    'cost': <class 'int'>,\n                    'retransmit_interval': <class 'int'>,\n                    'transit_area_id': <class 'str'>,\n                    'remote_addr': <class 'str'>,\n                    Optional  (str) wait_timer: <class 'int'>,\n                    'interface': <class 'str'>,\n                    'router_id': <class 'str'>,\n                    'statistics': {\n                      'link_scope_lsa_count': <class 'int'>,\n                      'link_scope_lsa_cksum_sum': <class 'int'>,\n                      },\n                    'state': <class 'str'>,\n                    Optional  (str) neighbors: {\n                      Any  (str) *: {\n                        'state': <class 'str'>,\n                        'hello_option': <class 'str'>,\n                        'dead_timer': <class 'str'>,\n                        'neighbor_router_id': <class 'str'>,\n                        'last_change': <class 'str'>,\n                        'address': <class 'str'>,\n                        'last_non_hello_received': <class 'str'>,\n                        'dbd_option': <class 'str'>,\n                        'statistics': {\n                          Optional  (str) nbr_retrans_qlen: <class 'str'>,\n                          'nbr_event_count': <class 'int'>,\n                          },\n                        },\n                      },\n                    'hello_interval': <class 'int'>,\n                    Optional  (str) hello_timer: <class 'str'>,\n                    Optional  (str) unnumbered_interface: <class 'str'>,\n                    'link_state': <class 'str'>,\n                    Optional  (str) unnumbered_ip_address: <class 'str'>,\n                    Optional  (str) nbr_total: <class 'int'>,\n                    'name': <class 'str'>,\n                    Optional  (str) nbr_flood: <class 'int'>,\n                    'transmit_delay': <class 'int'>,\n                    Optional  (str) nbr_adjs: <class 'int'>,\n                    'backbone_area_id': <class 'str'>,\n                    'interface_type': <class 'str'>,\n                    'dead_interval': <class 'int'>,\n                    'wait_interval': <class 'int'>,\n                    Optional  (str) authentication: {\n                      Optional  (str) key_id: <class 'str'>,\n                      Optional  (str) auth_trailer_key_chain: {\n                        'key_chain': <class 'str'>,\n                        Optional  (str) status: <class 'str'>,\n                        },\n                      Optional  (str) auth_trailer_key: {\n                        'crypto_algorithm': <class 'str'>,\n                        },\n                      },\n                    'index': <class 'int'>,\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "doc": "Parser for:\n        show ip ospf virtual-links\n        show ip ospf virtual-links vrf <vrf>", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_ospf.py#L1505", "class": "ShowIpOspfVirtualLinks", "module_name": "show_ospf"}}, "show ip ospf database summary detail": {"nxos": {"uid": "show_ip_ospf_database_summary_detail", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'address_family': {\n      Any  (str) *: {\n        'instance': {\n          Any  (str) *: {\n            Optional  (str) areas: {\n              Any  (str) *: {\n                'database': {\n                  'lsa_types': {\n                    Any  (str) *: {\n                      'lsa_type': <class 'int'>,\n                      'lsas': {\n                        Any  (str) *: {\n                          'ospfv2': {\n                            'header': {\n                              'age': <class 'int'>,\n                              'option_desc': <class 'str'>,\n                              'adv_router': <class 'str'>,\n                              'seq_num': <class 'str'>,\n                              'length': <class 'int'>,\n                              'checksum': <class 'str'>,\n                              'type': <class 'int'>,\n                              'lsa_id': <class 'str'>,\n                              'option': <class 'str'>,\n                              Optional  (str) maxage: <class 'bool'>,\n                              },\n                            'body': {\n                              'summary': {\n                                'topologies': {\n                                  Any  (str) *: {\n                                    'tos': <class 'int'>,\n                                    'metric': <class 'int'>,\n                                    'mt_id': <class 'int'>,\n                                    },\n                                  },\n                                'network_mask': <class 'str'>,\n                                },\n                              },\n                            },\n                          'lsa_id': <class 'str'>,\n                          'adv_router': <class 'str'>,\n                          },\n                        },\n                      },\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "doc": "Parser for:\n        show ip ospf database summary detail\n        show ip ospf database summary detail vrf <vrf>", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_ospf.py#L3401", "class": "ShowIpOspfDatabaseSummaryDetail", "module_name": "show_ospf"}}, "show bgp process vrf all": {"nxos": {"uid": "show_bgp_process_vrf_all", "schema": "{\nOptional  (str) bgp_asformat: <class 'str'>,\n'bytes_used_as_path_entries': <class 'int'>,\n'bgp_as_path_entries': <class 'int'>,\n'hwm_attr_entries': <class 'int'>,\nOptional  (str) bgp_isolate_mode: <class 'str'>,\n'bgp_memory_state': <class 'str'>,\n'bgp_pid': <class 'int'>,\nOptional  (str) bgp_performance_mode: <class 'str'>,\n'bytes_used': <class 'int'>,\n'num_attr_entries': <class 'int'>,\n'bgp_protocol_started_reason': <class 'str'>,\n'bgp_paths_per_hwm_attr': <class 'int'>,\nOptional  (str) bgp_mmode: <class 'str'>,\n'bgp_tag': <class 'str'>,\n'bgp_protocol_state': <class 'str'>,\n'hwm_entries_pending_delete': <class 'int'>,\n'entries_pending_delete': <class 'int'>,\nOptional  (str) segment_routing_global_block: <class 'str'>,\nOptional  (str) vrf: {\n  Any  (str) *: {\n    'vrf_id': <class 'str'>,\n    Optional  (str) topo_id: <class 'str'>,\n    Optional  (str) encap_type: <class 'str'>,\n    'num_pending_conf_peers': <class 'int'>,\n    Optional  (str) vtep_ip: <class 'str'>,\n    Optional  (str) vip_derived_mac: <class 'str'>,\n    Optional  (str) vtep_virtual_ip: <class 'str'>,\n    Optional  (str) vtep_vip_r: <class 'str'>,\n    Optional  (str) router_mac: <class 'str'>,\n    'num_conf_peers': <class 'int'>,\n    'num_established_peers': <class 'int'>,\n    Optional  (str) router_id: <class 'str'>,\n    Optional  (str) conf_router_id: <class 'str'>,\n    Optional  (str) confed_id: <class 'int'>,\n    Optional  (str) cluster_id: <class 'str'>,\n    Optional  (str) vrf_rd: <class 'str'>,\n    Optional  (str) vrf_evpn_rd: <class 'str'>,\n    Optional  (str) address_family: {\n      Any  (str) *: {\n        Optional  (str) table_state: <class 'str'>,\n        Optional  (str) mvpn_import_rt_list: <class 'str'>,\n        Optional  (str) enabled: <class 'bool'>,\n        Optional  (str) graceful_restart: <class 'bool'>,\n        Optional  (str) import_default_map: <class 'str'>,\n        Optional  (str) aggregate_label: <class 'str'>,\n        Optional  (str) advertise_inactive_routes: <class 'bool'>,\n        Optional  (str) ebgp_max_paths: <class 'int'>,\n        Optional  (str) next_hop_trigger_delay: {\n          'non_critical': <class 'int'>,\n          'critical': <class 'int'>,\n          },\n        Optional  (str) ibgp_max_paths: <class 'int'>,\n        Optional  (str) total_paths: <class 'int'>,\n        Optional  (str) import_default_prefix_limit: <class 'int'>,\n        Optional  (str) total_prefixes: <class 'int'>,\n        Optional  (str) route_reflector: <class 'bool'>,\n        Optional  (str) import_default_prefix_count: <class 'int'>,\n        Optional  (str) export_default_map: <class 'str'>,\n        Optional  (str) peers: {\n          Any  (str) *: {\n            'routes': <class 'int'>,\n            'active_peers': <class 'int'>,\n            'networks': <class 'int'>,\n            'paths': <class 'int'>,\n            'aggregates': <class 'int'>,\n            },\n          },\n        Optional  (str) export_default_prefix_limit: <class 'int'>,\n        Optional  (str) export_default_prefix_count: <class 'int'>,\n        Optional  (str) redistribution: {\n          Any  (str) *: {\n            Optional  (str) route_map: <class 'str'>,\n            },\n          },\n        Optional  (str) export_rt_list: <class 'str'>,\n        Optional  (str) label_mode: <class 'str'>,\n        Optional  (str) import_rt_list: <class 'str'>,\n        Optional  (str) evpn_export_rt_list: <class 'str'>,\n        Optional  (str) evpn_import_rt_list: <class 'str'>,\n        Optional  (str) mvpn_export_rt_list: <class 'str'>,\n        Optional  (str) table_id: <class 'str'>,\n        },\n      },\n    Optional  (str) graceful_restart: <class 'bool'>,\n    Optional  (str) graceful_restart_helper_only: <class 'bool'>,\n    Optional  (str) graceful_restart_restart_time: <class 'int'>,\n    Optional  (str) graceful_restart_stalepath_time: <class 'int'>,\n    'vrf_state': <class 'str'>,\n    Optional  (str) vnid: <class 'str'>,\n    },\n  },\n}", "doc": "Parser for:\n        show bgp process vrf all\n        parser class - implements detail parsing mechanisms for cli,xml and yang output.\n    ", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_bgp.py#L171", "class": "ShowBgpProcessVrfAll", "module_name": "show_bgp"}}, "show route ipv4": {"iosxr": {"uid": "show_route_ipv4", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    Optional  (str) address_family: {\n      Any  (str) *: {\n        Optional  (str) routes: {\n          Any  (str) *: {\n            Optional  (str) metric: <class 'int'>,\n            Optional  (str) route: <class 'str'>,\n            Optional  (str) source_protocol: <class 'str'>,\n            Optional  (str) source_protocol_codes: <class 'str'>,\n            Optional  (str) active: <class 'bool'>,\n            Optional  (str) route_preference: <class 'int'>,\n            Optional  (str) next_hop: {\n              Optional  (str) next_hop_list: {\n                Any  (str) *: {\n                  Optional  (str) index: <class 'int'>,\n                  Optional  (str) updated: <class 'str'>,\n                  Optional  (str) next_hop: <class 'str'>,\n                  Optional  (str) outgoing_interface: <class 'str'>,\n                  },\n                },\n              Optional  (str) outgoing_interface: {\n                Any  (str) *: {\n                  Optional  (str) outgoing_interface: <class 'str'>,\n                  Optional  (str) updated: <class 'str'>,\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "doc": "Parser for :\n       show route ipv4\n       show route vrf <vrf> ipv4", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_routing.py#L58", "class": "ShowRouteIpv4", "module_name": "show_routing"}}, "show ipv6 pim route vrf {vrf}": {"nxos": {"uid": "show_ipv6_pim_route_vrf_vrf", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'address_family': {\n      Any  (str) *: {\n        Optional  (str) topology_tree_info: {\n          Any  (str) *: {\n            Optional  (str) rpf_neighbor: <class 'str'>,\n            Optional  (str) jp_holdtime_roundup: <class 'int'>,\n            Optional  (str) oif: <class 'str'>,\n            Optional  (str) oif_count: <class 'int'>,\n            Optional  (str) oif_timeout_count: <class 'int'>,\n            Optional  (str) oif_timeout: <class 'str'>,\n            Optional  (str) immediate: <class 'str'>,\n            Optional  (str) immediate_count: <class 'int'>,\n            Optional  (str) immediate_timeout_count: <class 'int'>,\n            Optional  (str) immediate_timeout: <class 'str'>,\n            Optional  (str) group: <class 'str'>,\n            Optional  (str) timeout_interval: <class 'int'>,\n            Optional  (str) sgr_prune_count: <class 'int'>,\n            Optional  (str) source_address: <class 'str'>,\n            Optional  (str) sgr_prune: <class 'str'>,\n            Optional  (str) is_rpt: <class 'bool'>,\n            Optional  (str) route_fabric_owned: <class 'bool'>,\n            Optional  (str) rp_bit: <class 'bool'>,\n            Optional  (str) expiration: <class 'str'>,\n            Optional  (str) incoming_interface: <class 'str'>,\n            Optional  (str) mode: <class 'str'>,\n            Optional  (str) rp_address: <class 'str'>,\n            },\n          },\n        },\n      },\n    },\n  },\n}", "doc": "Parser for:\n        show ipv6 pim route\n        show ipv6 pim route vrf <vrf>", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_pim.py#L1772", "class": "ShowIpv6PimRoute", "module_name": "show_pim"}}, "show hsrp detail": {"iosxr": {"uid": "show_hsrp_detail", "schema": "{\nAny  (str) *: {\n  Optional  (str) delay: {\n    'minimum_delay': <class 'int'>,\n    'reload_delay': <class 'int'>,\n    },\n  Optional  (str) bfd: {\n    'enabled': <class 'bool'>,\n    'interval': <class 'int'>,\n    'detection_multiplier': <class 'int'>,\n    },\n  'address_family': {\n    Any  (str) *: {\n      'version': {\n        Any  (str) *: {\n          'groups': {\n            Any  (str) *: {\n              Optional  (str) active_router: <class 'str'>,\n              Optional  (str) standby_router: <class 'str'>,\n              Optional  (str) primary_ipv4_address: {\n                'address': <class 'str'>,\n                },\n              Optional  (str) active_ip_address: <class 'str'>,\n              Optional  (str) authentication: <class 'str'>,\n              Optional  (str) active_ipv6_address: <class 'str'>,\n              Optional  (str) active_mac_address: <class 'str'>,\n              Optional  (str) standby_ip_address: <class 'str'>,\n              Optional  (str) link_local_ipv6_address: {\n                Optional  (str) auto_configure: <class 'str'>,\n                Optional  (str) address: <class 'str'>,\n                },\n              Optional  (str) standby_ipv6_address: <class 'str'>,\n              'hsrp_router_state': <class 'str'>,\n              Optional  (str) standby_mac_address: <class 'str'>,\n              Optional  (str) standby_expire: <class 'str'>,\n              Optional  (str) num_of_slaves: <class 'int'>,\n              Optional  (str) standby_priority: <class 'int'>,\n              Optional  (str) active_state: <class 'str'>,\n              Optional  (str) bfd: {\n                'address': <class 'str'>,\n                Optional  (str) state: <class 'str'>,\n                'interface_name': <class 'str'>,\n                },\n              'timers': {\n                Optional  (str) cfgd_hold_msec: <class 'int'>,\n                Optional  (str) hold_sec: <class 'int'>,\n                'hello_msec_flag': <class 'bool'>,\n                'hold_msec': <class 'int'>,\n                'hold_msec_flag': <class 'bool'>,\n                Optional  (str) hello_sec: <class 'int'>,\n                'hello_msec': <class 'int'>,\n                Optional  (str) cfgd_hello_msec: <class 'int'>,\n                },\n              'group_number': <class 'int'>,\n              Optional  (str) standby_state: <class 'str'>,\n              Optional  (str) active_expire: <class 'str'>,\n              Optional  (str) statistics: {\n                Optional  (str) last_coup_sent: <class 'str'>,\n                Optional  (str) num_state_changes: <class 'int'>,\n                Optional  (str) last_resign_received: <class 'str'>,\n                Optional  (str) last_state_change: <class 'str'>,\n                Optional  (str) last_resign_sent: <class 'str'>,\n                Optional  (str) last_coup_received: <class 'str'>,\n                },\n              Optional  (str) tracked_interfaces: {\n                Any  (str) *: {\n                  'priority_decrement': <class 'int'>,\n                  'interface_name': <class 'str'>,\n                  },\n                },\n              Optional  (str) active_priority: <class 'int'>,\n              Optional  (str) preempt: <class 'bool'>,\n              Optional  (str) preempt_delay: <class 'int'>,\n              Optional  (str) tracked_objects: {\n                Any  (str) *: {\n                  'object_name': <class 'str'>,\n                  'priority_decrement': <class 'int'>,\n                  },\n                'num_tracked_objects_up': <class 'int'>,\n                'num_tracked_objects': <class 'int'>,\n                },\n              Optional  (str) session_name: <class 'str'>,\n              'priority': <class 'int'>,\n              Optional  (str) virtual_mac_address: <class 'str'>,\n              },\n            },\n          Optional  (str) slave_groups: {\n            Any  (str) *: {\n              Optional  (str) statistics: {\n                Optional  (str) last_state_change: <class 'str'>,\n                Optional  (str) last_resign_sent: <class 'str'>,\n                Optional  (str) last_coup_received: <class 'str'>,\n                Optional  (str) last_coup_sent: <class 'str'>,\n                Optional  (str) num_state_changes: <class 'int'>,\n                Optional  (str) last_resign_received: <class 'str'>,\n                },\n              'priority': <class 'int'>,\n              Optional  (str) preempt: <class 'bool'>,\n              Optional  (str) tracked_objects: {\n                'num_tracked_objects_up': <class 'int'>,\n                Any  (str) *: {\n                  'object_name': <class 'str'>,\n                  'priority_decrement': <class 'int'>,\n                  },\n                'num_tracked_objects': <class 'int'>,\n                },\n              Optional  (str) preempt_delay: <class 'int'>,\n              Optional  (str) session_name: <class 'str'>,\n              Optional  (str) virtual_mac_address: <class 'str'>,\n              Optional  (str) active_mac_address: <class 'str'>,\n              Optional  (str) active_router: <class 'str'>,\n              'hsrp_router_state': <class 'str'>,\n              Optional  (str) standby_router: <class 'str'>,\n              Optional  (str) timers: {\n                Optional  (str) cfgd_hello_msec: <class 'int'>,\n                Optional  (str) hello_sec: <class 'int'>,\n                'hello_msec_flag': <class 'bool'>,\n                'hold_msec': <class 'int'>,\n                'hold_msec_flag': <class 'bool'>,\n                'hello_msec': <class 'int'>,\n                Optional  (str) cfgd_hold_msec: <class 'int'>,\n                Optional  (str) hold_sec: <class 'int'>,\n                },\n              Optional  (str) active_ip_address: <class 'str'>,\n              Optional  (str) primary_ipv4_address: {\n                'address': <class 'str'>,\n                },\n              Optional  (str) active_ipv6_address: <class 'str'>,\n              Optional  (str) authentication: <class 'str'>,\n              'follow': <class 'str'>,\n              Optional  (str) standby_ip_address: <class 'str'>,\n              'group_number': <class 'int'>,\n              Optional  (str) standby_ipv6_address: <class 'str'>,\n              Optional  (str) link_local_ipv6_address: {\n                Optional  (str) address: <class 'str'>,\n                Optional  (str) auto_configure: <class 'str'>,\n                },\n              Optional  (str) active_priority: <class 'int'>,\n              Optional  (str) standby_priority: <class 'int'>,\n              Optional  (str) active_state: <class 'str'>,\n              Optional  (str) bfd: {\n                'address': <class 'str'>,\n                'interface_name': <class 'str'>,\n                },\n              Optional  (str) standby_state: <class 'str'>,\n              Optional  (str) active_expire: <class 'str'>,\n              Optional  (str) tracked_interfaces: {\n                Any  (str) *: {\n                  'priority_decrement': <class 'int'>,\n                  'interface_name': <class 'str'>,\n                  },\n                },\n              Optional  (str) standby_expire: <class 'str'>,\n              },\n            },\n          },\n        },\n      },\n    },\n  'interface': <class 'str'>,\n  Optional  (str) use_bia: <class 'bool'>,\n  'redirects_disable': <class 'bool'>,\n  },\n}", "doc": "Parser for show hsrp detail", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_hsrp.py#L386", "class": "ShowHsrpDetail", "module_name": "show_hsrp"}}, "show ip pim interface {interface} vrf {vrf}": {"nxos": {"uid": "show_ip_pim_interface_interface_vrf_vrf", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'interfaces': {\n      Any  (str) *: {\n        'address_family': {\n          Any  (str) *: {\n            Optional  (str) dr_delay: <class 'int'>,\n            Optional  (str) bsr_border: <class 'bool'>,\n            Optional  (str) genid: <class 'str'>,\n            Optional  (str) hello_md5_ah_authentication: <class 'str'>,\n            Optional  (str) neighbor_filter: <class 'str'>,\n            Optional  (str) jp_inbound_policy: <class 'str'>,\n            Optional  (str) oper_status: <class 'str'>,\n            Optional  (str) jp_outbound_policy: <class 'str'>,\n            Optional  (str) statistics: {\n              Optional  (str) general: {\n                Optional  (str) df_backoffs: <class 'str'>,\n                Optional  (str) grafts: <class 'str'>,\n                Optional  (str) df_passes: <class 'str'>,\n                Optional  (str) hellos: <class 'str'>,\n                Optional  (str) graft_acks: <class 'str'>,\n                Optional  (str) jps: <class 'str'>,\n                Optional  (str) df_offers: <class 'str'>,\n                Optional  (str) asserts: <class 'str'>,\n                Optional  (str) df_winners: <class 'str'>,\n                },\n              Optional  (str) errors: {\n                Optional  (str) invalid_packet_types: <class 'int'>,\n                Optional  (str) joins_received_with_no_rp: <class 'int'>,\n                Optional  (str) joins_received_with_ssm_groups: <class 'int'>,\n                Optional  (str) joins_received_with_wrong_rp: <class 'int'>,\n                Optional  (str) invalid_df_subtypes: <class 'int'>,\n                Optional  (str) authentication_failed: <class 'int'>,\n                Optional  (str) joins_received_with_bidir_groups: <class 'int'>,\n                Optional  (str) packet_length_errors: <class 'int'>,\n                Optional  (str) bad_version_packets: <class 'int'>,\n                Optional  (str) jps_filtered_by_outbound_policy: <class 'int'>,\n                Optional  (str) packets_from_self: <class 'int'>,\n                Optional  (str) jps_filtered_by_inbound_policy: <class 'int'>,\n                Optional  (str) packets_from_non_neighbors: <class 'int'>,\n                Optional  (str) packets_received_on_passiveinterface: <class 'int'>,\n                Optional  (str) jps_received_on_rpf_interface: <class 'int'>,\n                Optional  (str) checksum: <class 'int'>,\n                },\n              },\n            Optional  (str) jp_interval: <class 'int'>,\n            Optional  (str) link_status: <class 'str'>,\n            Optional  (str) jp_next_sending: <class 'int'>,\n            Optional  (str) admin_status: <class 'str'>,\n            Optional  (str) address: <class 'list'>,\n            Optional  (str) bfd: {\n              Optional  (str) enable: <class 'bool'>,\n              },\n            Optional  (str) ip_subnet: <class 'str'>,\n            Optional  (str) dr_address: <class 'str'>,\n            Optional  (str) sm: {\n              Optional  (str) passive: <class 'bool'>,\n              },\n            Optional  (str) dr_priority: <class 'int'>,\n            Optional  (str) vpc_svi: <class 'bool'>,\n            Optional  (str) configured_dr_priority: <class 'int'>,\n            Optional  (str) auto_enabled: <class 'bool'>,\n            Optional  (str) neighbor_count: <class 'int'>,\n            Optional  (str) hello_interval: <class 'int'>,\n            Optional  (str) hello_expiration: <class 'str'>,\n            Optional  (str) neighbor_holdtime: <class 'int'>,\n            },\n          },\n        },\n      },\n    },\n  },\n}", "doc": "Parser for:\n        show ip pim interface\n        show ip pim interface vrf <vrf>\n        show ip pim interface <interface>\n        show ip pim interface <interface> vrf <vrf>", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_pim.py#L3439", "class": "ShowIpPimInterface", "module_name": "show_pim"}}, "show bgp ipv4 mvpn sa-ad detail vrf {vrf}": {"nxos": {"uid": "show_bgp_ipv4_mvpn_sa-ad_detail_vrf_vrf", "schema": "{\n'instance': {\n  Any  (str) *: {\n    'vrf': {\n      Any  (str) *: {\n        'vrf_name_out': <class 'str'>,\n        'address_family': {\n          Any  (str) *: {\n            'af_name': <class 'str'>,\n            'rd': {\n              Any  (str) *: {\n                Optional  (str) rd_vrf: <class 'str'>,\n                Optional  (str) rd_val: <class 'str'>,\n                'prefix': {\n                  Any  (str) *: {\n                    'bestpathnr': <class 'int'>,\n                    Optional  (str) suppressed: <class 'bool'>,\n                    Optional  (str) totalpaths: <class 'int'>,\n                    Optional  (str) needsresync: <class 'bool'>,\n                    'nonipprefix': <class 'str'>,\n                    Optional  (str) mpath: <class 'str'>,\n                    Optional  (str) locked: <class 'bool'>,\n                    Optional  (str) on_newlist: <class 'bool'>,\n                    'path': {\n                      Any  (str) *: {\n                        Optional  (str) origin: <class 'str'>,\n                        Optional  (str) policyincomplete: <class 'bool'>,\n                        'localpref': <class 'int'>,\n                        Optional  (str) pathdeleted: <class 'bool'>,\n                        Optional  (str) pathstaled: <class 'bool'>,\n                        'pathvalid': <class 'bool'>,\n                        'pathtype': <class 'str'>,\n                        Optional  (str) pathhistory: <class 'bool'>,\n                        Optional  (str) pathovermaxaslimit: <class 'bool'>,\n                        Optional  (str) pathmultipath: <class 'bool'>,\n                        Optional  (str) pathnolabeledrnh: <class 'bool'>,\n                        Optional  (str) nexthop_status: <class 'str'>,\n                        'weight': <class 'int'>,\n                        'neighborid': <class 'str'>,\n                        Optional  (str) inlabel: <class 'int'>,\n                        Optional  (str) extcommunity: <class 'list'>,\n                        Optional  (str) advertisedto: <class 'list'>,\n                        Optional  (str) originatorid: <class 'str'>,\n                        Optional  (str) pathnr: <class 'int'>,\n                        Optional  (str) clusterlist: <class 'list'>,\n                        'nexthopmetric': <class 'int'>,\n                        'neighbor': <class 'str'>,\n                        'pathbest': <class 'bool'>,\n                        'ipnexthop': <class 'str'>,\n                        },\n                      },\n                    'prefixversion': <class 'int'>,\n                    Optional  (str) on_xmitlist: <class 'bool'>,\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "doc": "parser for:\n        show bgp ipv4 mvpn sa-ad detail\n        show bgp ipv4 mvpn sa-ad detail vrf <vrf>\n        show bgp ipv4 mvpn sa-ad detail vrf all", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_bgp.py#L11258", "class": "ShowBgpIpMvpnSaadDetail", "module_name": "show_bgp"}}, "show ipv6 pim route": {"nxos": {"uid": "show_ipv6_pim_route", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'address_family': {\n      Any  (str) *: {\n        Optional  (str) topology_tree_info: {\n          Any  (str) *: {\n            Optional  (str) rpf_neighbor: <class 'str'>,\n            Optional  (str) jp_holdtime_roundup: <class 'int'>,\n            Optional  (str) oif: <class 'str'>,\n            Optional  (str) oif_count: <class 'int'>,\n            Optional  (str) oif_timeout_count: <class 'int'>,\n            Optional  (str) oif_timeout: <class 'str'>,\n            Optional  (str) immediate: <class 'str'>,\n            Optional  (str) immediate_count: <class 'int'>,\n            Optional  (str) immediate_timeout_count: <class 'int'>,\n            Optional  (str) immediate_timeout: <class 'str'>,\n            Optional  (str) group: <class 'str'>,\n            Optional  (str) timeout_interval: <class 'int'>,\n            Optional  (str) sgr_prune_count: <class 'int'>,\n            Optional  (str) source_address: <class 'str'>,\n            Optional  (str) sgr_prune: <class 'str'>,\n            Optional  (str) is_rpt: <class 'bool'>,\n            Optional  (str) route_fabric_owned: <class 'bool'>,\n            Optional  (str) rp_bit: <class 'bool'>,\n            Optional  (str) expiration: <class 'str'>,\n            Optional  (str) incoming_interface: <class 'str'>,\n            Optional  (str) mode: <class 'str'>,\n            Optional  (str) rp_address: <class 'str'>,\n            },\n          },\n        },\n      },\n    },\n  },\n}", "doc": "Parser for:\n        show ipv6 pim route\n        show ipv6 pim route vrf <vrf>", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_pim.py#L1772", "class": "ShowIpv6PimRoute", "module_name": "show_pim"}}, "show bgp {address_family} all neighbors {neighbor} received-routes": {"ios": {"uid": "show_bgp_address_family_all_neighbors_neighbor_received-routes", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'neighbor': {\n      Any  (str) *: {\n        'address_family': {\n          Any  (str) *: {\n            Optional  (str) received_routes: {\n              Optional  (Any) Any  (str) *: {\n                Optional  (str) index: {\n                  Optional  (Any) Any  (str) *: {\n                    Optional  (str) next_hop: <class 'str'>,\n                    Optional  (str) weight: <class 'int'>,\n                    Optional  (str) status_codes: <class 'str'>,\n                    Optional  (str) path: <class 'str'>,\n                    Optional  (str) path_type: <class 'str'>,\n                    Optional  (str) origin_codes: <class 'str'>,\n                    Optional  (str) metric: <class 'int'>,\n                    Optional  (str) localprf: <class 'int'>,\n                    },\n                  },\n                },\n              },\n            Optional  (str) route_distinguisher: <class 'str'>,\n            Optional  (str) bgp_table_version: <class 'int'>,\n            Optional  (str) default_vrf: <class 'str'>,\n            Optional  (str) local_router_id: <class 'str'>,\n            },\n          },\n        },\n      },\n    },\n  },\n}", "doc": "\n    Parser for show bgp all neighbors <WORD> received-routes\n    executing 'show bgp all neighbors | i BGP neighbor' for finging vrf names\n    ", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_bgp.py#L82", "class": "ShowBgpAllNeighborsReceivedRoutes", "module_name": "show_bgp"}, "iosxe": {"uid": "show_bgp_address_family_all_neighbors_neighbor_received-routes", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'neighbor': {\n      Any  (str) *: {\n        'address_family': {\n          Any  (str) *: {\n            Optional  (str) received_routes: {\n              Optional  (Any) Any  (str) *: {\n                Optional  (str) index: {\n                  Optional  (Any) Any  (str) *: {\n                    Optional  (str) next_hop: <class 'str'>,\n                    Optional  (str) weight: <class 'int'>,\n                    Optional  (str) status_codes: <class 'str'>,\n                    Optional  (str) path: <class 'str'>,\n                    Optional  (str) path_type: <class 'str'>,\n                    Optional  (str) origin_codes: <class 'str'>,\n                    Optional  (str) metric: <class 'int'>,\n                    Optional  (str) localprf: <class 'int'>,\n                    },\n                  },\n                },\n              },\n            Optional  (str) route_distinguisher: <class 'str'>,\n            Optional  (str) bgp_table_version: <class 'int'>,\n            Optional  (str) default_vrf: <class 'str'>,\n            Optional  (str) local_router_id: <class 'str'>,\n            },\n          },\n        },\n      },\n    },\n  },\n}", "doc": " Parser for:\n        * 'show bgp all neighbors {neighbor} received-routes'\n        * 'show bgp {address_family} all neighbors {neighbor} received-routes'\n    ", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_bgp.py#L5055", "class": "ShowBgpAllNeighborsReceivedRoutes", "module_name": "show_bgp"}}, "show ip pim interface": {"ios": {"uid": "show_ip_pim_interface", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'interfaces': {\n      Any  (str) *: {\n        'address_family': {\n          Any  (str) *: {\n            Optional  (str) address: <class 'list'>,\n            Optional  (str) neighbor_count: <class 'int'>,\n            Optional  (str) version: <class 'int'>,\n            Optional  (str) dr_priority: <class 'int'>,\n            Optional  (str) mode: <class 'str'>,\n            Optional  (str) dr_address: <class 'str'>,\n            Optional  (str) hello_interval: <class 'int'>,\n            },\n          },\n        },\n      },\n    },\n  },\n}", "doc": "Parser for:\n            show ip pim interface\n            show ip pim vrf <vrf> interface", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_pim.py#L49", "class": "ShowIpPimInterface", "module_name": "show_pim"}, "nxos": {"uid": "show_ip_pim_interface", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'interfaces': {\n      Any  (str) *: {\n        'address_family': {\n          Any  (str) *: {\n            Optional  (str) dr_delay: <class 'int'>,\n            Optional  (str) bsr_border: <class 'bool'>,\n            Optional  (str) genid: <class 'str'>,\n            Optional  (str) hello_md5_ah_authentication: <class 'str'>,\n            Optional  (str) neighbor_filter: <class 'str'>,\n            Optional  (str) jp_inbound_policy: <class 'str'>,\n            Optional  (str) oper_status: <class 'str'>,\n            Optional  (str) jp_outbound_policy: <class 'str'>,\n            Optional  (str) statistics: {\n              Optional  (str) general: {\n                Optional  (str) df_backoffs: <class 'str'>,\n                Optional  (str) grafts: <class 'str'>,\n                Optional  (str) df_passes: <class 'str'>,\n                Optional  (str) hellos: <class 'str'>,\n                Optional  (str) graft_acks: <class 'str'>,\n                Optional  (str) jps: <class 'str'>,\n                Optional  (str) df_offers: <class 'str'>,\n                Optional  (str) asserts: <class 'str'>,\n                Optional  (str) df_winners: <class 'str'>,\n                },\n              Optional  (str) errors: {\n                Optional  (str) invalid_packet_types: <class 'int'>,\n                Optional  (str) joins_received_with_no_rp: <class 'int'>,\n                Optional  (str) joins_received_with_ssm_groups: <class 'int'>,\n                Optional  (str) joins_received_with_wrong_rp: <class 'int'>,\n                Optional  (str) invalid_df_subtypes: <class 'int'>,\n                Optional  (str) authentication_failed: <class 'int'>,\n                Optional  (str) joins_received_with_bidir_groups: <class 'int'>,\n                Optional  (str) packet_length_errors: <class 'int'>,\n                Optional  (str) bad_version_packets: <class 'int'>,\n                Optional  (str) jps_filtered_by_outbound_policy: <class 'int'>,\n                Optional  (str) packets_from_self: <class 'int'>,\n                Optional  (str) jps_filtered_by_inbound_policy: <class 'int'>,\n                Optional  (str) packets_from_non_neighbors: <class 'int'>,\n                Optional  (str) packets_received_on_passiveinterface: <class 'int'>,\n                Optional  (str) jps_received_on_rpf_interface: <class 'int'>,\n                Optional  (str) checksum: <class 'int'>,\n                },\n              },\n            Optional  (str) jp_interval: <class 'int'>,\n            Optional  (str) link_status: <class 'str'>,\n            Optional  (str) jp_next_sending: <class 'int'>,\n            Optional  (str) admin_status: <class 'str'>,\n            Optional  (str) address: <class 'list'>,\n            Optional  (str) bfd: {\n              Optional  (str) enable: <class 'bool'>,\n              },\n            Optional  (str) ip_subnet: <class 'str'>,\n            Optional  (str) dr_address: <class 'str'>,\n            Optional  (str) sm: {\n              Optional  (str) passive: <class 'bool'>,\n              },\n            Optional  (str) dr_priority: <class 'int'>,\n            Optional  (str) vpc_svi: <class 'bool'>,\n            Optional  (str) configured_dr_priority: <class 'int'>,\n            Optional  (str) auto_enabled: <class 'bool'>,\n            Optional  (str) neighbor_count: <class 'int'>,\n            Optional  (str) hello_interval: <class 'int'>,\n            Optional  (str) hello_expiration: <class 'str'>,\n            Optional  (str) neighbor_holdtime: <class 'int'>,\n            },\n          },\n        },\n      },\n    },\n  },\n}", "doc": "Parser for:\n        show ip pim interface\n        show ip pim interface vrf <vrf>\n        show ip pim interface <interface>\n        show ip pim interface <interface> vrf <vrf>", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_pim.py#L3439", "class": "ShowIpPimInterface", "module_name": "show_pim"}, "iosxe": {"uid": "show_ip_pim_interface", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'interfaces': {\n      Any  (str) *: {\n        'address_family': {\n          Any  (str) *: {\n            Optional  (str) address: <class 'list'>,\n            Optional  (str) neighbor_count: <class 'int'>,\n            Optional  (str) version: <class 'int'>,\n            Optional  (str) dr_priority: <class 'int'>,\n            Optional  (str) mode: <class 'str'>,\n            Optional  (str) dr_address: <class 'str'>,\n            Optional  (str) hello_interval: <class 'int'>,\n            },\n          },\n        },\n      },\n    },\n  },\n}", "doc": "Parser for:\n            show ip pim interface\n            show ip pim vrf <vrf> interface", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_pim.py#L484", "class": "ShowIpPimInterface", "module_name": "show_pim"}}, "show bgp all": {"ios": {"uid": "show_bgp_all", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'address_family': {\n      Any  (str) *: {\n        Optional  (str) pfx_limit: <class 'int'>,\n        Optional  (str) route_distinguisher: <class 'str'>,\n        Optional  (str) default_vrf: <class 'str'>,\n        Optional  (str) bgp_table_version: <class 'int'>,\n        Optional  (str) af_private_import_to_address_family: <class 'str'>,\n        Optional  (str) route_identifier: <class 'str'>,\n        Optional  (str) pfx_count: <class 'int'>,\n        Optional  (str) routes: {\n          Optional  (Any) Any  (str) *: {\n            Optional  (str) index: {\n              Optional  (Any) Any  (str) *: {\n                Optional  (str) weight: <class 'int'>,\n                Optional  (str) next_hop: <class 'str'>,\n                Optional  (str) path: <class 'str'>,\n                Optional  (str) status_codes: <class 'str'>,\n                Optional  (str) origin_codes: <class 'str'>,\n                Optional  (str) metric: <class 'int'>,\n                Optional  (str) localpref: <class 'int'>,\n                },\n              },\n            },\n          },\n        Optional  (str) vrf_route_identifier: <class 'str'>,\n        },\n      },\n    },\n  },\n}", "doc": "Parser for show bgp all", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_bgp.py#L112", "class": "ShowBgpAll", "module_name": "show_bgp"}, "iosxe": {"uid": "show_bgp_all", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'address_family': {\n      Any  (str) *: {\n        Optional  (str) pfx_limit: <class 'int'>,\n        Optional  (str) route_distinguisher: <class 'str'>,\n        Optional  (str) default_vrf: <class 'str'>,\n        Optional  (str) bgp_table_version: <class 'int'>,\n        Optional  (str) af_private_import_to_address_family: <class 'str'>,\n        Optional  (str) route_identifier: <class 'str'>,\n        Optional  (str) pfx_count: <class 'int'>,\n        Optional  (str) routes: {\n          Optional  (Any) Any  (str) *: {\n            Optional  (str) index: {\n              Optional  (Any) Any  (str) *: {\n                Optional  (str) weight: <class 'int'>,\n                Optional  (str) next_hop: <class 'str'>,\n                Optional  (str) path: <class 'str'>,\n                Optional  (str) status_codes: <class 'str'>,\n                Optional  (str) origin_codes: <class 'str'>,\n                Optional  (str) metric: <class 'int'>,\n                Optional  (str) localpref: <class 'int'>,\n                },\n              },\n            },\n          },\n        Optional  (str) vrf_route_identifier: <class 'str'>,\n        },\n      },\n    },\n  },\n}", "doc": " Parser for:\n        * 'show bgp all'\n        * 'show bgp {address_family} all'\n    ", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_bgp.py#L565", "class": "ShowBgpAll", "module_name": "show_bgp"}}, "show ipv6 pim neighbor": {"nxos": {"uid": "show_ipv6_pim_neighbor", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'interfaces': {\n      Any  (str) *: {\n        'address_family': {\n          Any  (str) *: {\n            'neighbors': {\n              Any  (str) *: {\n                Optional  (str) dr_priority: <class 'int'>,\n                Optional  (str) up_time: <class 'str'>,\n                Optional  (str) bfd_status: <class 'bool'>,\n                Optional  (str) interface: <class 'str'>,\n                Optional  (str) bidir_capable: <class 'bool'>,\n                Optional  (str) expiration: <class 'str'>,\n                },\n              Optional  (str) secondary_address: <class 'list'>,\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "doc": "Parser for:\n        show ipv6 pim neighbor\n        show ipv6 pim neighbor vrf <vrf>", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_pim.py#L2029", "class": "ShowIpv6PimNeighbor", "module_name": "show_pim"}}, "show mpls ldp neighbor vrf {vrf}": {"iosxe": {"uid": "show_mpls_ldp_neighbor_vrf_vrf", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'peers': {\n      Any  (str) *: {\n        'label_space_id': {\n          Any  (str) *: {\n            Optional  (str) nsr: <class 'str'>,\n            'msg_rcvd': <class 'int'>,\n            'downstream': <class 'bool'>,\n            'tcp_connection': <class 'str'>,\n            Optional  (str) capabilities: {\n              'sent': {\n                'mldp_point_to_multipoint': <class 'str'>,\n                'typed_wildcard': <class 'str'>,\n                'ICCP': {\n                  'maj_ver': <class 'int'>,\n                  'type': <class 'str'>,\n                  'min_ver': <class 'int'>,\n                  },\n                'dynamic_anouncement': <class 'str'>,\n                'mldp_multipoint_to_multipoint': <class 'str'>,\n                },\n              Optional  (str) received: {\n                Optional  (str) typed_wildcard: <class 'str'>,\n                Optional  (str) mldp_point_to_multipoint: <class 'str'>,\n                Optional  (str) ICCP: {\n                  'maj_ver': <class 'int'>,\n                  'type': <class 'str'>,\n                  'min_ver': <class 'int'>,\n                  },\n                Optional  (str) mldp_multipoint_to_multipoint: <class 'str'>,\n                Optional  (str) dynamic_anouncement: <class 'str'>,\n                },\n              },\n            'msg_sent': <class 'int'>,\n            Optional  (str) last_tib_rev_sent: <class 'int'>,\n            'state': <class 'str'>,\n            'uptime': <class 'str'>,\n            'address_bound': <class 'list'>,\n            'local_ldp_ident': <class 'str'>,\n            Optional  (str) password: <class 'str'>,\n            Optional  (str) peer_holdtime_ms: <class 'str'>,\n            Optional  (str) ka_interval_ms: <class 'str'>,\n            Optional  (str) peer_state: <class 'str'>,\n            'ldp_discovery_sources': {\n              'interface': {\n                Any  (str) *: {\n                  'ip_address': {\n                    Any  (str) *: {\n                      Optional  (str) holdtime_ms: <class 'int'>,\n                      Optional  (str) hello_interval_ms: <class 'int'>,\n                      },\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "doc": "Parser for show mpls ldp neighbor,\n                  show mpls ldp neighbor vrf <vrf>", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_mpls.py#L765", "class": "ShowMplsLdpNeighbor", "module_name": "show_mpls"}}, "show ip bgp {address_family} all neighbors": {"iosxe": {"uid": "show_ip_bgp_address_family_all_neighbors", "schema": "{\nOptional  (str) list_of_neighbors: <class 'list'>,\n'vrf': {\n  Any  (str) *: {\n    'neighbor': {\n      Any  (str) *: {\n        Optional  (str) bgp_event_timer: {\n          'starts': {\n            Any  (str) *: <class 'int'>,\n            },\n          'wakeups': {\n            Any  (str) *: <class 'int'>,\n            },\n          'next': {\n            Any  (str) *: <class 'str'>,\n            },\n          },\n        'address_family': {\n          Any  (str) *: {\n            Optional  (str) refresh_epoch: <class 'int'>,\n            Optional  (str) session_state: <class 'str'>,\n            Optional  (str) max_nlri: <class 'int'>,\n            Optional  (str) up_time: <class 'str'>,\n            Optional  (str) min_nlri: <class 'int'>,\n            Optional  (str) down_time: <class 'str'>,\n            Optional  (str) refresh_activity_counters: {\n              'sent': {\n                Any  (str) *: <class 'int'>,\n                },\n              'received': {\n                Any  (str) *: <class 'int'>,\n                },\n              },\n            Optional  (str) local_policy_denied_prefixes_counters: {\n              'inbound': {\n                Any  (str) *: Any  (str) *,\n                },\n              'outbound': {\n                Any  (str) *: Any  (str) *,\n                },\n              },\n            Optional  (str) last_detected_dynamic_slow_peer: <class 'str'>,\n            Optional  (str) last_read: <class 'str'>,\n            Optional  (str) dynamic_slow_peer_recovered: <class 'str'>,\n            Optional  (str) last_write: <class 'str'>,\n            Optional  (str) last_sent_refresh_start_of_rib: <class 'str'>,\n            Optional  (str) current_time: <class 'str'>,\n            Optional  (str) last_received_refresh_start_of_rib: <class 'str'>,\n            Optional  (str) bgp_table_version: <class 'int'>,\n            Optional  (str) last_sent_refresh_end_of_rib: <class 'str'>,\n            Optional  (str) neighbor_version: <class 'str'>,\n            Optional  (str) last_received_refresh_end_of_rib: <class 'str'>,\n            Optional  (str) output_queue_size: <class 'int'>,\n            Optional  (str) refresh_out: <class 'int'>,\n            Optional  (str) index: <class 'int'>,\n            Optional  (str) refresh_in: <class 'int'>,\n            Optional  (str) advertise_bit: <class 'int'>,\n            Optional  (str) route_reflector_client: <class 'bool'>,\n            Optional  (str) update_group_member: <class 'int'>,\n            Optional  (str) community_attribute_sent: <class 'bool'>,\n            Optional  (str) extended_community_attribute_sent: <class 'bool'>,\n            Optional  (str) prefix_activity_counters: {\n              'sent': {\n                Any  (str) *: Any  (str) *,\n                },\n              'received': {\n                Any  (str) *: Any  (str) *,\n                },\n              },\n            Optional  (str) suppress_ldp_signaling: <class 'bool'>,\n            Optional  (str) slow_peer_detection: <class 'bool'>,\n            Optional  (str) slow_peer_split_update_group_dynamic: <class 'bool'>,\n            },\n          },\n        'bgp_neighbor_counters': {\n          'messages': {\n            'sent': {\n              'notifications': <class 'int'>,\n              'route_refresh': <class 'int'>,\n              'total': <class 'int'>,\n              'opens': <class 'int'>,\n              'keepalives': <class 'int'>,\n              'updates': <class 'int'>,\n              },\n            'in_queue_depth': <class 'int'>,\n            'received': {\n              'notifications': <class 'int'>,\n              'route_refresh': <class 'int'>,\n              'total': <class 'int'>,\n              'opens': <class 'int'>,\n              'keepalives': <class 'int'>,\n              'updates': <class 'int'>,\n              },\n            'out_queue_depth': <class 'int'>,\n            },\n          },\n        'bgp_negotiated_keepalive_timers': {\n          'keepalive_interval': <class 'int'>,\n          'hold_time': <class 'int'>,\n          Optional  (str) min_holdtime: <class 'int'>,\n          },\n        'link': <class 'str'>,\n        'router_id': <class 'str'>,\n        Optional  (str) bgp_session_transport: {\n          Optional  (str) enqueued_packets: {\n            'mis_ordered_packet': <class 'int'>,\n            'input_packet': <class 'int'>,\n            'retransmit_packet': <class 'int'>,\n            },\n          Optional  (str) iss: <class 'int'>,\n          Optional  (str) snduna: <class 'int'>,\n          'connection': {\n            Optional  (str) reset_reason: <class 'str'>,\n            'dropped': <class 'int'>,\n            'established': <class 'int'>,\n            'last_reset': <class 'str'>,\n            },\n          Optional  (str) sndnxt: <class 'int'>,\n          Optional  (str) irs: <class 'int'>,\n          'address_tracking_status': <class 'str'>,\n          Optional  (str) sndwnd: <class 'int'>,\n          Optional  (str) snd_scale: <class 'int'>,\n          Optional  (str) maxrcvwnd: <class 'int'>,\n          Optional  (str) rcvwnd: <class 'int'>,\n          Optional  (str) rcv_scale: <class 'int'>,\n          Optional  (str) delrcvwnd: <class 'int'>,\n          Optional  (str) srtt: <class 'int'>,\n          'min_time_between_advertisement_runs': <class 'int'>,\n          Optional  (str) rtto: <class 'int'>,\n          Optional  (str) rtv: <class 'int'>,\n          Optional  (str) krtt: <class 'int'>,\n          Optional  (str) min_rtt: <class 'int'>,\n          Optional  (str) max_rtt: <class 'int'>,\n          Optional  (str) ack_hold: <class 'int'>,\n          Optional  (str) uptime: <class 'int'>,\n          Optional  (str) sent_idletime: <class 'int'>,\n          Optional  (str) receive_idletime: <class 'int'>,\n          Optional  (str) tcp_connection: <class 'bool'>,\n          Optional  (str) status_flags: <class 'str'>,\n          Optional  (str) option_flags: <class 'str'>,\n          Optional  (str) ip_precedence_value: <class 'int'>,\n          'tcp_path_mtu_discovery': <class 'str'>,\n          Optional  (str) transport: {\n            'local_port': <class 'str'>,\n            'local_host': <class 'str'>,\n            'foreign_port': <class 'str'>,\n            Optional  (str) mss: <class 'int'>,\n            'foreign_host': <class 'str'>,\n            },\n          Optional  (str) datagram: {\n            'datagram_sent': {\n              'second_congestion': <class 'int'>,\n              'with_data': <class 'int'>,\n              'retransmit': <class 'int'>,\n              'partialack': <class 'int'>,\n              'value': <class 'int'>,\n              'fastretransmit': <class 'int'>,\n              'total_data': <class 'int'>,\n              },\n            'datagram_received': {\n              'out_of_order': <class 'int'>,\n              'with_data': <class 'int'>,\n              'total_data': <class 'int'>,\n              'value': <class 'int'>,\n              },\n            },\n          Optional  (str) graceful_restart: <class 'str'>,\n          Optional  (str) packet_fast_path: <class 'int'>,\n          Optional  (str) gr_restart_time: <class 'int'>,\n          Optional  (str) packet_fast_processed: <class 'int'>,\n          Optional  (str) gr_stalepath_time: <class 'int'>,\n          Optional  (str) packet_slow_path: <class 'int'>,\n          Optional  (str) connection_state: <class 'str'>,\n          Optional  (str) fast_lock_acquisition_failures: <class 'int'>,\n          Optional  (str) io_status: <class 'int'>,\n          Optional  (str) lock_slow_path: <class 'int'>,\n          Optional  (str) unread_input_bytes: <class 'int'>,\n          Optional  (str) tcp_semaphore: <class 'str'>,\n          Optional  (str) ecn_connection: <class 'str'>,\n          Optional  (str) tcp_semaphore_status: <class 'str'>,\n          Optional  (str) minimum_incoming_ttl: <class 'int'>,\n          Optional  (str) sso: <class 'bool'>,\n          Optional  (str) outgoing_ttl: <class 'int'>,\n          Optional  (str) rcvnxt: <class 'int'>,\n          Optional  (str) connection_tableid: <class 'int'>,\n          'rib_route_ip': <class 'str'>,\n          Optional  (str) maximum_output_segment_queue_size: <class 'int'>,\n          },\n        'remote_as': <class 'int'>,\n        'bgp_version': <class 'int'>,\n        'session_state': <class 'str'>,\n        'shutdown': <class 'bool'>,\n        Optional  (str) local_as: <class 'int'>,\n        'bgp_negotiated_capabilities': {\n          'four_octets_asn': <class 'str'>,\n          Optional  (str) vpnv4_unicast: <class 'str'>,\n          Optional  (str) graceful_restart: <class 'str'>,\n          'route_refresh': <class 'str'>,\n          Optional  (str) vpnv6_unicast: <class 'str'>,\n          'stateful_switchover': <class 'str'>,\n          Optional  (str) ipv4_unicast: <class 'str'>,\n          Optional  (str) remote_restart_timer: <class 'int'>,\n          Optional  (str) ipv6_unicast: <class 'str'>,\n          Optional  (str) l2vpn_vpls: <class 'str'>,\n          Optional  (str) l2vpn_evpn: <class 'str'>,\n          Optional  (str) vpnv4_multicast: <class 'str'>,\n          Optional  (str) multisession: <class 'str'>,\n          Optional  (str) graceful_restart_af_advertised_by_peer: <class 'list'>,\n          Optional  (str) vpnv6_multicast: <class 'str'>,\n          'enhanced_refresh': <class 'str'>,\n          Optional  (str) mvpnv4_multicast: <class 'str'>,\n          Optional  (str) mvpnv6_multicast: <class 'str'>,\n          },\n        Optional  (str) description: <class 'str'>,\n        },\n      },\n    },\n  },\n}", "doc": " Parser for:\n        * 'show ip bgp all neighbors',\n        * 'show ip bgp all neighbors {neighbor}'\n        * 'show ip bgp {address_family} all neighbors'\n        * 'show ip bgp {address_family} all neighbors {neighbor}'\n    ", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_bgp.py#L3814", "class": "ShowIpBgpAllNeighbors", "module_name": "show_bgp"}}, "show ip igmp snooping vlan {vlan}": {"nxos": {"uid": "show_ip_igmp_snooping_vlan_vlan", "schema": "{\n'vlans': {\n  Any  (str) *: {\n    Optional  (str) switch_querier: <class 'str'>,\n    Optional  (str) group_address_for_proxy_leaves: <class 'str'>,\n    Optional  (str) v3_report_suppression: <class 'str'>,\n    Optional  (str) v2_fast_leave: <class 'str'>,\n    Optional  (str) link_local_groups_suppression: <class 'str'>,\n    Optional  (str) router_ports_count: <class 'int'>,\n    Optional  (str) report_flooding: <class 'str'>,\n    Optional  (str) groups_count: <class 'int'>,\n    Optional  (str) igmp_querier: {\n      Optional  (str) robustness: <class 'int'>,\n      Optional  (str) interval: <class 'int'>,\n      Optional  (str) address: <class 'str'>,\n      Optional  (str) last_member_query_interval: <class 'int'>,\n      Optional  (str) version: <class 'int'>,\n      },\n    Optional  (str) vlan_vpc_function: <class 'str'>,\n    Optional  (str) active_ports: <class 'list'>,\n    Optional  (str) ip_igmp_snooping: <class 'str'>,\n    Optional  (str) igmp_explicit_tracking: <class 'str'>,\n    Optional  (str) lookup_mode: <class 'str'>,\n    Optional  (str) report_flooding_interfaces: <class 'str'>,\n    Optional  (str) v1v2_report_suppression: <class 'str'>,\n    },\n  },\nOptional  (str) global_configuration: {\n  Optional  (str) v3_report_suppression: <class 'str'>,\n  Optional  (str) link_local_groups_suppression: <class 'str'>,\n  Optional  (str) v1v2_report_suppression: <class 'str'>,\n  Optional  (str) enabled: <class 'str'>,\n  Optional  (str) vpc_multicast_optimization: <class 'str'>,\n  },\n}", "doc": "Parser for show ip igmp snooping", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_igmp.py#L75", "class": "ShowIpIgmpSnooping", "module_name": "show_igmp"}}, "show archive config differences {fileA}": {"ios": {"uid": "show_archive_config_differences_fileA", "schema": "{\nOptional  (str) list_of_commands: <class 'list'>,\nOptional  (str) diff: <class 'list'>,\n}", "doc": " Parser for the following commands:\n        * show archive config differences\n        * show archive config differences {fileA} {fileB}\n        * show archive config differences {fileA}\n    ", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_archive.py#L16", "class": "ShowArchiveConfigDifferences", "module_name": "show_archive"}, "iosxe": {"uid": "show_archive_config_differences_fileA", "schema": "{\nOptional  (str) list_of_commands: <class 'list'>,\nOptional  (str) diff: <class 'list'>,\n}", "doc": " Parser for the following commands:\n        * show archive config differences\n        * show archive config differences {fileA} {fileB}\n        * show archive config differences {fileA}\n    ", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_archive.py#L115", "class": "ShowArchiveConfigDifferences", "module_name": "show_archive"}}, "show ipv6 access-list": {"ios": {"uid": "show_ipv6_access-list", "schema": "{\nAny  (str) *: {\n  'type': <class 'str'>,\n  'name': <class 'str'>,\n  Optional  (str) per_user: <class 'bool'>,\n  Optional  (str) aces: {\n    Any  (str) *: {\n      'matches': {\n        Optional  (str) l4: {\n          Any  (str) *: {\n            Optional  (str) window_size: <class 'int'>,\n            Optional  (str) urgent_pointer: <class 'int'>,\n            Optional  (str) data_offset: <class 'int'>,\n            Optional  (str) options: <class 'int'>,\n            Optional  (str) destination_port: {\n              Optional  (str) operator: {\n                'port': <class 'int'>,\n                'operator': <class 'str'>,\n                },\n              Optional  (str) range: {\n                'upper_port': <class 'int'>,\n                'lower_port': <class 'int'>,\n                },\n              },\n            Optional  (str) source_port: {\n              Optional  (str) operator: {\n                'port': <class 'str'>,\n                'operator': <class 'str'>,\n                },\n              Optional  (str) range: {\n                'upper_port': <class 'int'>,\n                'lower_port': <class 'int'>,\n                },\n              },\n            Optional  (str) code: <class 'int'>,\n            Optional  (str) flags: <class 'str'>,\n            Optional  (str) acknowledgement_number: <class 'int'>,\n            Optional  (str) reserved: <class 'int'>,\n            Optional  (str) type: <class 'int'>,\n            Optional  (str) options_name: <class 'str'>,\n            Optional  (str) established: <class 'bool'>,\n            },\n          },\n        Optional  (str) l2: {\n          'eth': {\n            'destination_mac_address': <class 'str'>,\n            Optional  (str) vlan: <class 'int'>,\n            Optional  (str) lsap: <class 'str'>,\n            Optional  (str) protocol_family: <class 'str'>,\n            Optional  (str) ether_type: <class 'str'>,\n            Optional  (str) cos: <class 'int'>,\n            'source_mac_address': <class 'str'>,\n            },\n          },\n        Optional  (str) l3: {\n          Any  (str) *: {\n            'protocol': <class 'str'>,\n            Optional  (str) ttl: <class 'int'>,\n            'destination_network': {\n              Any  (str) *: {\n                'destination_network': <class 'str'>,\n                },\n              },\n            Optional  (str) precedence: <class 'str'>,\n            Optional  (str) ttl_operator: <class 'str'>,\n            Optional  (str) dscp: <class 'str'>,\n            'source_network': {\n              Any  (str) *: {\n                'source_network': <class 'str'>,\n                },\n              },\n            Optional  (str) precedence_code: <class 'int'>,\n            },\n          },\n        },\n      Optional  (str) statistics: {\n        'matched_packets': <class 'int'>,\n        },\n      'name': <class 'str'>,\n      'actions': {\n        'forwarding': <class 'str'>,\n        Optional  (str) logging: <class 'str'>,\n        },\n      },\n    },\n  },\n}", "doc": "Parser for show access-lists\n                  show ip access-lists\n                  show ip access-lists <acl>\n                  show ipv6 access-lists\n                  show ipv6 access-lists <acl>", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_acl.py#L9", "class": "ShowAccessLists", "module_name": "show_acl"}, "iosxe": {"uid": "show_ipv6_access-list", "schema": "{\nAny  (str) *: {\n  'type': <class 'str'>,\n  'name': <class 'str'>,\n  Optional  (str) per_user: <class 'bool'>,\n  Optional  (str) aces: {\n    Any  (str) *: {\n      'matches': {\n        Optional  (str) l4: {\n          Any  (str) *: {\n            Optional  (str) window_size: <class 'int'>,\n            Optional  (str) urgent_pointer: <class 'int'>,\n            Optional  (str) data_offset: <class 'int'>,\n            Optional  (str) options: <class 'int'>,\n            Optional  (str) destination_port: {\n              Optional  (str) operator: {\n                'port': <class 'int'>,\n                'operator': <class 'str'>,\n                },\n              Optional  (str) range: {\n                'upper_port': <class 'int'>,\n                'lower_port': <class 'int'>,\n                },\n              },\n            Optional  (str) source_port: {\n              Optional  (str) operator: {\n                'port': <class 'str'>,\n                'operator': <class 'str'>,\n                },\n              Optional  (str) range: {\n                'upper_port': <class 'int'>,\n                'lower_port': <class 'int'>,\n                },\n              },\n            Optional  (str) code: <class 'int'>,\n            Optional  (str) flags: <class 'str'>,\n            Optional  (str) acknowledgement_number: <class 'int'>,\n            Optional  (str) reserved: <class 'int'>,\n            Optional  (str) type: <class 'int'>,\n            Optional  (str) options_name: <class 'str'>,\n            Optional  (str) established: <class 'bool'>,\n            },\n          },\n        Optional  (str) l2: {\n          'eth': {\n            'destination_mac_address': <class 'str'>,\n            Optional  (str) vlan: <class 'int'>,\n            Optional  (str) lsap: <class 'str'>,\n            Optional  (str) protocol_family: <class 'str'>,\n            Optional  (str) ether_type: <class 'str'>,\n            Optional  (str) cos: <class 'int'>,\n            'source_mac_address': <class 'str'>,\n            },\n          },\n        Optional  (str) l3: {\n          Any  (str) *: {\n            'protocol': <class 'str'>,\n            Optional  (str) ttl: <class 'int'>,\n            'destination_network': {\n              Any  (str) *: {\n                'destination_network': <class 'str'>,\n                },\n              },\n            Optional  (str) precedence: <class 'str'>,\n            Optional  (str) ttl_operator: <class 'str'>,\n            Optional  (str) dscp: <class 'str'>,\n            'source_network': {\n              Any  (str) *: {\n                'source_network': <class 'str'>,\n                },\n              },\n            Optional  (str) precedence_code: <class 'int'>,\n            },\n          },\n        },\n      Optional  (str) statistics: {\n        'matched_packets': <class 'int'>,\n        },\n      'name': <class 'str'>,\n      'actions': {\n        'forwarding': <class 'str'>,\n        Optional  (str) logging: <class 'str'>,\n        },\n      },\n    },\n  },\n}", "doc": "Parser for show access-lists\n                  show ip access-lists\n                  show ip access-lists <acl>\n                  show ipv6 access-lists\n                  show ipv6 access-lists <acl>", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_acl.py#L118", "class": "ShowAccessLists", "module_name": "show_acl"}}, "show bridge-domain": {"ios": {"uid": "show_bridge-domain", "schema": "{\nOptional  (str) lines_match_regexp: <class 'int'>,\nOptional  (str) bridge_domain: {\n  Any  (str) *: {\n    'state': <class 'str'>,\n    'mac_table': {\n      Any  (str) *: {\n        'mac_address': {\n          Any  (str) *: {\n            'mac_address': <class 'str'>,\n            'aed': <class 'int'>,\n            'policy': <class 'str'>,\n            'tag': <class 'str'>,\n            'age': <class 'int'>,\n            },\n          },\n        'pseudoport': <class 'str'>,\n        },\n      },\n    'bd_domain_id': <class 'int'>,\n    Any  (str) *: {\n      Any  (str) *: {\n        'num_of_ports': <class 'str'>,\n        'interfaces': <class 'list'>,\n        },\n      },\n    'mac_learning_state': <class 'str'>,\n    'aging_timer': <class 'int'>,\n    'number_of_ports_in_all': <class 'int'>,\n    'member_ports': <class 'list'>,\n    },\n  },\n}", "doc": "Parser for show bridge-domain\n                  show bridge-domain <WORD>\n                  show bridge-domain | count <WORD>\n    ", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_l2vpn.py#L80", "class": "ShowBridgeDomain", "module_name": "show_l2vpn"}, "iosxe": {"uid": "show_bridge-domain", "schema": "{\nOptional  (str) lines_match_regexp: <class 'int'>,\nOptional  (str) bridge_domain: {\n  Any  (str) *: {\n    'state': <class 'str'>,\n    'mac_table': {\n      Any  (str) *: {\n        'mac_address': {\n          Any  (str) *: {\n            'mac_address': <class 'str'>,\n            'aed': <class 'int'>,\n            'policy': <class 'str'>,\n            'tag': <class 'str'>,\n            'age': <class 'int'>,\n            },\n          },\n        'pseudoport': <class 'str'>,\n        },\n      },\n    'bd_domain_id': <class 'int'>,\n    Any  (str) *: {\n      Any  (str) *: {\n        'num_of_ports': <class 'str'>,\n        'interfaces': <class 'list'>,\n        },\n      },\n    'mac_learning_state': <class 'str'>,\n    'aging_timer': <class 'int'>,\n    'number_of_ports_in_all': <class 'int'>,\n    'member_ports': <class 'list'>,\n    },\n  },\n}", "doc": "Parser for show bridge-domain\n                  show bridge-domain <WORD>\n                  show bridge-domain | count <WORD>", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_l2vpn.py#L73", "class": "ShowBridgeDomain", "module_name": "show_l2vpn"}}, "show ip pim interface vrf {vrf}": {"nxos": {"uid": "show_ip_pim_interface_vrf_vrf", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'interfaces': {\n      Any  (str) *: {\n        'address_family': {\n          Any  (str) *: {\n            Optional  (str) dr_delay: <class 'int'>,\n            Optional  (str) bsr_border: <class 'bool'>,\n            Optional  (str) genid: <class 'str'>,\n            Optional  (str) hello_md5_ah_authentication: <class 'str'>,\n            Optional  (str) neighbor_filter: <class 'str'>,\n            Optional  (str) jp_inbound_policy: <class 'str'>,\n            Optional  (str) oper_status: <class 'str'>,\n            Optional  (str) jp_outbound_policy: <class 'str'>,\n            Optional  (str) statistics: {\n              Optional  (str) general: {\n                Optional  (str) df_backoffs: <class 'str'>,\n                Optional  (str) grafts: <class 'str'>,\n                Optional  (str) df_passes: <class 'str'>,\n                Optional  (str) hellos: <class 'str'>,\n                Optional  (str) graft_acks: <class 'str'>,\n                Optional  (str) jps: <class 'str'>,\n                Optional  (str) df_offers: <class 'str'>,\n                Optional  (str) asserts: <class 'str'>,\n                Optional  (str) df_winners: <class 'str'>,\n                },\n              Optional  (str) errors: {\n                Optional  (str) invalid_packet_types: <class 'int'>,\n                Optional  (str) joins_received_with_no_rp: <class 'int'>,\n                Optional  (str) joins_received_with_ssm_groups: <class 'int'>,\n                Optional  (str) joins_received_with_wrong_rp: <class 'int'>,\n                Optional  (str) invalid_df_subtypes: <class 'int'>,\n                Optional  (str) authentication_failed: <class 'int'>,\n                Optional  (str) joins_received_with_bidir_groups: <class 'int'>,\n                Optional  (str) packet_length_errors: <class 'int'>,\n                Optional  (str) bad_version_packets: <class 'int'>,\n                Optional  (str) jps_filtered_by_outbound_policy: <class 'int'>,\n                Optional  (str) packets_from_self: <class 'int'>,\n                Optional  (str) jps_filtered_by_inbound_policy: <class 'int'>,\n                Optional  (str) packets_from_non_neighbors: <class 'int'>,\n                Optional  (str) packets_received_on_passiveinterface: <class 'int'>,\n                Optional  (str) jps_received_on_rpf_interface: <class 'int'>,\n                Optional  (str) checksum: <class 'int'>,\n                },\n              },\n            Optional  (str) jp_interval: <class 'int'>,\n            Optional  (str) link_status: <class 'str'>,\n            Optional  (str) jp_next_sending: <class 'int'>,\n            Optional  (str) admin_status: <class 'str'>,\n            Optional  (str) address: <class 'list'>,\n            Optional  (str) bfd: {\n              Optional  (str) enable: <class 'bool'>,\n              },\n            Optional  (str) ip_subnet: <class 'str'>,\n            Optional  (str) dr_address: <class 'str'>,\n            Optional  (str) sm: {\n              Optional  (str) passive: <class 'bool'>,\n              },\n            Optional  (str) dr_priority: <class 'int'>,\n            Optional  (str) vpc_svi: <class 'bool'>,\n            Optional  (str) configured_dr_priority: <class 'int'>,\n            Optional  (str) auto_enabled: <class 'bool'>,\n            Optional  (str) neighbor_count: <class 'int'>,\n            Optional  (str) hello_interval: <class 'int'>,\n            Optional  (str) hello_expiration: <class 'str'>,\n            Optional  (str) neighbor_holdtime: <class 'int'>,\n            },\n          },\n        },\n      },\n    },\n  },\n}", "doc": "Parser for:\n        show ip pim interface\n        show ip pim interface vrf <vrf>\n        show ip pim interface <interface>\n        show ip pim interface <interface> vrf <vrf>", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_pim.py#L3439", "class": "ShowIpPimInterface", "module_name": "show_pim"}}, "show ethernet service instance summary": {"ios": {"uid": "show_ethernet_service_instance_summary", "schema": "{\nAny  (str) *: {\n  Any  (str) *: {\n    'bd_adm_do': <class 'int'>,\n    'admin_do': <class 'int'>,\n    'total': <class 'int'>,\n    'error_di': <class 'int'>,\n    'unknown': <class 'int'>,\n    'down': <class 'int'>,\n    'deleted': <class 'int'>,\n    'up': <class 'int'>,\n    },\n  },\n}", "doc": "Parser for show ethernet service instance summary\n    ", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_l2vpn.py#L61", "class": "ShowEthernetServiceInstanceSummary", "module_name": "show_l2vpn"}, "iosxe": {"uid": "show_ethernet_service_instance_summary", "schema": "{\nAny  (str) *: {\n  Any  (str) *: {\n    'bd_adm_do': <class 'int'>,\n    'admin_do': <class 'int'>,\n    'total': <class 'int'>,\n    'error_di': <class 'int'>,\n    'unknown': <class 'int'>,\n    'down': <class 'int'>,\n    'deleted': <class 'int'>,\n    'up': <class 'int'>,\n    },\n  },\n}", "doc": "Parser for show ethernet service instance summary\n    ", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_l2vpn.py#L531", "class": "ShowEthernetServiceInstanceSummary", "module_name": "show_l2vpn"}}, "show ipv6 pim bsr candidate-rp": {"ios": {"uid": "show_ipv6_pim_bsr_candidate-rp", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'address_family': {\n      Any  (str) *: {\n        'rp': {\n          'bsr': {\n            Optional  (str) rp_candidate_next_advertisement: <class 'str'>,\n            Any  (str) *: {\n              Optional  (str) scope: <class 'str'>,\n              Optional  (str) holdtime: <class 'int'>,\n              Optional  (str) priority: <class 'int'>,\n              Optional  (str) mode: <class 'str'>,\n              Optional  (str) address: <class 'str'>,\n              Optional  (str) interval: <class 'int'>,\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "doc": "Parser for:\n        show ipv6 pim bsr candidate-rp\n        show ipv6 pim vrf <vrf> bsr candidate-rp", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_pim.py#L43", "class": "ShowIpv6PimBsrCandidateRp", "module_name": "show_pim"}, "iosxe": {"uid": "show_ipv6_pim_bsr_candidate-rp", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'address_family': {\n      Any  (str) *: {\n        'rp': {\n          'bsr': {\n            Optional  (str) rp_candidate_next_advertisement: <class 'str'>,\n            Any  (str) *: {\n              Optional  (str) scope: <class 'str'>,\n              Optional  (str) holdtime: <class 'int'>,\n              Optional  (str) priority: <class 'int'>,\n              Optional  (str) mode: <class 'str'>,\n              Optional  (str) address: <class 'str'>,\n              Optional  (str) interval: <class 'int'>,\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "doc": "Parser for:\n        show ipv6 pim bsr candidate-rp\n        show ipv6 pim vrf <vrf> bsr candidate-rp", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_pim.py#L333", "class": "ShowIpv6PimBsrCandidateRp", "module_name": "show_pim"}}, "show mac address-table local vni {vni}": {"nxos": {"uid": "show_mac_address-table_local_vni_vni", "schema": "{\n'mac_address': {\n  Any  (str) *: {\n    'secure': <class 'str'>,\n    'ports': <class 'str'>,\n    'ntfy': <class 'str'>,\n    'mac_type': <class 'str'>,\n    'next_hop': <class 'str'>,\n    'mac_aging_time': <class 'str'>,\n    'evi': <class 'str'>,\n    'entry': <class 'str'>,\n    },\n  },\n}", "doc": "Parser for show mac address-table vni <WORD> | grep <WORD>", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_fdb.py#L38", "class": "ShowMacAddressTableVni", "module_name": "show_fdb"}}, "show ip msdp summary vrf {vrf}": {"nxos": {"uid": "show_ip_msdp_summary_vrf_vrf", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'originator_id': <class 'str'>,\n    'local_as': <class 'int'>,\n    Optional  (str) peer: {\n      Any  (str) *: {\n        'session_state': <class 'str'>,\n        'elapsed_time': <class 'str'>,\n        'address': <class 'str'>,\n        'peer_as': <class 'int'>,\n        'statistics': {\n          'last_message_received': <class 'str'>,\n          'num_of_sg_received': <class 'int'>,\n          },\n        },\n      },\n    'statistics': {\n      'num_of_configured_peers': <class 'int'>,\n      'num_of_established_peers': <class 'int'>,\n      'num_of_shutdown_peers': <class 'int'>,\n      },\n    },\n  },\n}", "doc": "Parser for :\n        show ip msdp summary\n        show ip msdp summary vrf all\n        show ip msdp summary vrf <vrf>", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_msdp.py#L722", "class": "ShowIpMsdpSummary", "module_name": "show_msdp"}}, "show static topology detail": {"iosxr": {"uid": "show_static_topology_detail", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    Optional  (str) address_family: {\n      Any  (str) *: {\n        Optional  (str) routes: {\n          Any  (str) *: {\n            Optional  (str) route: <class 'str'>,\n            Optional  (str) next_hop: {\n              Optional  (str) outgoing_interface: {\n                Any  (str) *: {\n                  Optional  (str) explicit_path: <class 'str'>,\n                  Optional  (str) tag: <class 'int'>,\n                  Optional  (str) preference: <class 'int'>,\n                  Optional  (str) outgoing_interface: <class 'str'>,\n                  Optional  (str) path_version: <class 'int'>,\n                  Optional  (str) active: <class 'bool'>,\n                  Optional  (str) path_status: <class 'str'>,\n                  Optional  (str) install_date: <class 'str'>,\n                  Optional  (str) metrics: <class 'int'>,\n                  Optional  (str) track: <class 'int'>,\n                  Optional  (str) configure_date: <class 'str'>,\n                  },\n                },\n              Optional  (str) next_hop_list: {\n                Any  (str) *: {\n                  Optional  (str) outgoing_interface: <class 'str'>,\n                  Optional  (str) preference: <class 'int'>,\n                  Optional  (str) install_date: <class 'str'>,\n                  Optional  (str) configure_date: <class 'str'>,\n                  Optional  (str) tag: <class 'int'>,\n                  Optional  (str) path_version: <class 'int'>,\n                  Optional  (str) path_status: <class 'str'>,\n                  Optional  (str) metrics: <class 'int'>,\n                  Optional  (str) index: <class 'int'>,\n                  Optional  (str) track: <class 'int'>,\n                  Optional  (str) active: <class 'bool'>,\n                  Optional  (str) explicit_path: <class 'str'>,\n                  Optional  (str) next_hop: <class 'str'>,\n                  },\n                },\n              },\n            },\n          },\n        Optional  (str) safi: <class 'str'>,\n        Optional  (str) table_id: <class 'str'>,\n        },\n      },\n    },\n  },\n}", "doc": "Parser for:\n       show static topology detail\n       show static vrf all topology detail\n       show static vrf <vrf> topology detail\n       show static vrf <vrf> ipv4 topology detail\n       show static ipv4 topology detail\n       show static ipv6 topology detail\n    ", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_static_routing.py#L77", "class": "ShowStaticTopologyDetail", "module_name": "show_static_routing"}}, "show ip static-route vrf {vrf}": {"nxos": {"uid": "show_ip_static-route_vrf_vrf", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    Optional  (str) address_family: {\n      Any  (str) *: {\n        Optional  (str) routes: {\n          Any  (str) *: {\n            Optional  (str) route: <class 'str'>,\n            Optional  (str) next_hop: {\n              Optional  (str) next_hop_list: {\n                Any  (str) *: {\n                  Optional  (str) index: <class 'int'>,\n                  Optional  (str) next_hop_netmask: <class 'str'>,\n                  Optional  (str) rnh_active: <class 'bool'>,\n                  Optional  (str) outgoing_interface: <class 'str'>,\n                  Optional  (str) next_hop: <class 'str'>,\n                  Optional  (str) active: <class 'bool'>,\n                  },\n                },\n              Optional  (str) outgoing_interface: {\n                Any  (str) *: {\n                  Optional  (str) rnh_active: <class 'bool'>,\n                  Optional  (str) active: <class 'bool'>,\n                  Optional  (str) outgoing_interface: <class 'str'>,\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "doc": "Parser for:\n       show ip static-route\n       show ip static-route vrf <vrf>\n       show ip static-route vrf all\n    ", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_static_routing.py#L52", "class": "ShowIpStaticRoute", "module_name": "show_static_routing"}}, "show lacp counters": {"iosxe": {"uid": "show_lacp_counters", "schema": "{\n'interfaces': {\n  Any  (str) *: {\n    'protocol': <class 'str'>,\n    'name': <class 'str'>,\n    'members': {\n      Any  (str) *: {\n        'interface': <class 'str'>,\n        'counters': {\n          'marker_in_pkts': <class 'int'>,\n          'marker_out_pkts': <class 'int'>,\n          'lacp_errors': <class 'int'>,\n          'lacp_out_pkts': <class 'int'>,\n          'lacp_in_pkts': <class 'int'>,\n          'marker_response_out_pkts': <class 'int'>,\n          'marker_response_in_pkts': <class 'int'>,\n          },\n        },\n      },\n    },\n  },\n}", "doc": "Parser for :\n      show lacp counters", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_lag.py#L115", "class": "ShowLacpCounters", "module_name": "show_lag"}}, "show ip pim df vrf {vrf}": {"nxos": {"uid": "show_ip_pim_df_vrf_vrf", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'address_family': {\n      Any  (str) *: {\n        Optional  (str) rp: {\n          Optional  (str) bidir: {\n            Optional  (str) interface_df_election: {\n              Optional  (Any) Any  (str) *: {\n                Optional  (str) is_rpf: <class 'bool'>,\n                Optional  (str) metric_pref: <class 'int'>,\n                Optional  (str) metric: <class 'int'>,\n                Optional  (str) group_range: <class 'str'>,\n                Optional  (str) interface_name: <class 'str'>,\n                Optional  (str) df_address: <class 'str'>,\n                Optional  (str) winner_metric: <class 'int'>,\n                Optional  (str) df_uptime: <class 'str'>,\n                Optional  (str) address: <class 'str'>,\n                Optional  (str) interface_state: <class 'str'>,\n                Optional  (str) winner_metric_pref: <class 'int'>,\n                Optional  (str) df_ordinal: <class 'int'>,\n                Optional  (str) df_bits: <class 'str'>,\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "doc": "Parser for:\n        show ip pim df\n        show ip pim df vrf <vrf>", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_pim.py#L1572", "class": "ShowIpPimDf", "module_name": "show_pim"}}, "show bgp all dampening flap-statistics": {"nxos": {"uid": "show_bgp_all_dampening_flap-statistics", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'address_family': {\n      Any  (str) *: {\n        Optional  (str) dampening_enabled: <class 'bool'>,\n        Optional  (str) history_paths: <class 'int'>,\n        Optional  (str) dampened_paths: <class 'int'>,\n        Optional  (str) network: {\n          Any  (str) *: {\n            'flaps': <class 'int'>,\n            'reuse_limit': <class 'int'>,\n            Optional  (str) pathtype: <class 'str'>,\n            'peer': <class 'str'>,\n            'duration': <class 'str'>,\n            Optional  (str) reuse_time: <class 'str'>,\n            'current_penalty': <class 'int'>,\n            Optional  (str) status: <class 'str'>,\n            'best': <class 'bool'>,\n            'suppress_limit': <class 'int'>,\n            },\n          },\n        Optional  (str) route_identifier: {\n          Any  (str) *: {\n            'dampening_enabled': <class 'bool'>,\n            Optional  (str) network: {\n              Any  (str) *: {\n                'flaps': <class 'int'>,\n                'reuse_limit': <class 'int'>,\n                'peer': <class 'str'>,\n                'duration': <class 'str'>,\n                Optional  (str) pathtype: <class 'str'>,\n                'current_penalty': <class 'int'>,\n                Optional  (str) reuse_time: <class 'str'>,\n                'best': <class 'bool'>,\n                'suppress_limit': <class 'int'>,\n                Optional  (str) status: <class 'str'>,\n                },\n              },\n            'history_paths': <class 'int'>,\n            'dampened_paths': <class 'int'>,\n            },\n          },\n        },\n      },\n    },\n  },\n}", "doc": "Parser for:\n        show bgp all dampening flap-statistics\n        parser class implements detail parsing mechanisms for cli,xml output.", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_bgp.py#L7188", "class": "ShowBgpAllDampeningFlapStatistics", "module_name": "show_bgp"}}, "show ipv6 access-list {acl}": {"ios": {"uid": "show_ipv6_access-list_acl", "schema": "{\nAny  (str) *: {\n  'type': <class 'str'>,\n  'name': <class 'str'>,\n  Optional  (str) per_user: <class 'bool'>,\n  Optional  (str) aces: {\n    Any  (str) *: {\n      'matches': {\n        Optional  (str) l4: {\n          Any  (str) *: {\n            Optional  (str) window_size: <class 'int'>,\n            Optional  (str) urgent_pointer: <class 'int'>,\n            Optional  (str) data_offset: <class 'int'>,\n            Optional  (str) options: <class 'int'>,\n            Optional  (str) destination_port: {\n              Optional  (str) operator: {\n                'port': <class 'int'>,\n                'operator': <class 'str'>,\n                },\n              Optional  (str) range: {\n                'upper_port': <class 'int'>,\n                'lower_port': <class 'int'>,\n                },\n              },\n            Optional  (str) source_port: {\n              Optional  (str) operator: {\n                'port': <class 'str'>,\n                'operator': <class 'str'>,\n                },\n              Optional  (str) range: {\n                'upper_port': <class 'int'>,\n                'lower_port': <class 'int'>,\n                },\n              },\n            Optional  (str) code: <class 'int'>,\n            Optional  (str) flags: <class 'str'>,\n            Optional  (str) acknowledgement_number: <class 'int'>,\n            Optional  (str) reserved: <class 'int'>,\n            Optional  (str) type: <class 'int'>,\n            Optional  (str) options_name: <class 'str'>,\n            Optional  (str) established: <class 'bool'>,\n            },\n          },\n        Optional  (str) l2: {\n          'eth': {\n            'destination_mac_address': <class 'str'>,\n            Optional  (str) vlan: <class 'int'>,\n            Optional  (str) lsap: <class 'str'>,\n            Optional  (str) protocol_family: <class 'str'>,\n            Optional  (str) ether_type: <class 'str'>,\n            Optional  (str) cos: <class 'int'>,\n            'source_mac_address': <class 'str'>,\n            },\n          },\n        Optional  (str) l3: {\n          Any  (str) *: {\n            'protocol': <class 'str'>,\n            Optional  (str) ttl: <class 'int'>,\n            'destination_network': {\n              Any  (str) *: {\n                'destination_network': <class 'str'>,\n                },\n              },\n            Optional  (str) precedence: <class 'str'>,\n            Optional  (str) ttl_operator: <class 'str'>,\n            Optional  (str) dscp: <class 'str'>,\n            'source_network': {\n              Any  (str) *: {\n                'source_network': <class 'str'>,\n                },\n              },\n            Optional  (str) precedence_code: <class 'int'>,\n            },\n          },\n        },\n      Optional  (str) statistics: {\n        'matched_packets': <class 'int'>,\n        },\n      'name': <class 'str'>,\n      'actions': {\n        'forwarding': <class 'str'>,\n        Optional  (str) logging: <class 'str'>,\n        },\n      },\n    },\n  },\n}", "doc": "Parser for show access-lists\n                  show ip access-lists\n                  show ip access-lists <acl>\n                  show ipv6 access-lists\n                  show ipv6 access-lists <acl>", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_acl.py#L9", "class": "ShowAccessLists", "module_name": "show_acl"}, "iosxe": {"uid": "show_ipv6_access-list_acl", "schema": "{\nAny  (str) *: {\n  'type': <class 'str'>,\n  'name': <class 'str'>,\n  Optional  (str) per_user: <class 'bool'>,\n  Optional  (str) aces: {\n    Any  (str) *: {\n      'matches': {\n        Optional  (str) l4: {\n          Any  (str) *: {\n            Optional  (str) window_size: <class 'int'>,\n            Optional  (str) urgent_pointer: <class 'int'>,\n            Optional  (str) data_offset: <class 'int'>,\n            Optional  (str) options: <class 'int'>,\n            Optional  (str) destination_port: {\n              Optional  (str) operator: {\n                'port': <class 'int'>,\n                'operator': <class 'str'>,\n                },\n              Optional  (str) range: {\n                'upper_port': <class 'int'>,\n                'lower_port': <class 'int'>,\n                },\n              },\n            Optional  (str) source_port: {\n              Optional  (str) operator: {\n                'port': <class 'str'>,\n                'operator': <class 'str'>,\n                },\n              Optional  (str) range: {\n                'upper_port': <class 'int'>,\n                'lower_port': <class 'int'>,\n                },\n              },\n            Optional  (str) code: <class 'int'>,\n            Optional  (str) flags: <class 'str'>,\n            Optional  (str) acknowledgement_number: <class 'int'>,\n            Optional  (str) reserved: <class 'int'>,\n            Optional  (str) type: <class 'int'>,\n            Optional  (str) options_name: <class 'str'>,\n            Optional  (str) established: <class 'bool'>,\n            },\n          },\n        Optional  (str) l2: {\n          'eth': {\n            'destination_mac_address': <class 'str'>,\n            Optional  (str) vlan: <class 'int'>,\n            Optional  (str) lsap: <class 'str'>,\n            Optional  (str) protocol_family: <class 'str'>,\n            Optional  (str) ether_type: <class 'str'>,\n            Optional  (str) cos: <class 'int'>,\n            'source_mac_address': <class 'str'>,\n            },\n          },\n        Optional  (str) l3: {\n          Any  (str) *: {\n            'protocol': <class 'str'>,\n            Optional  (str) ttl: <class 'int'>,\n            'destination_network': {\n              Any  (str) *: {\n                'destination_network': <class 'str'>,\n                },\n              },\n            Optional  (str) precedence: <class 'str'>,\n            Optional  (str) ttl_operator: <class 'str'>,\n            Optional  (str) dscp: <class 'str'>,\n            'source_network': {\n              Any  (str) *: {\n                'source_network': <class 'str'>,\n                },\n              },\n            Optional  (str) precedence_code: <class 'int'>,\n            },\n          },\n        },\n      Optional  (str) statistics: {\n        'matched_packets': <class 'int'>,\n        },\n      'name': <class 'str'>,\n      'actions': {\n        'forwarding': <class 'str'>,\n        Optional  (str) logging: <class 'str'>,\n        },\n      },\n    },\n  },\n}", "doc": "Parser for show access-lists\n                  show ip access-lists\n                  show ip access-lists <acl>\n                  show ipv6 access-lists\n                  show ipv6 access-lists <acl>", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_acl.py#L118", "class": "ShowAccessLists", "module_name": "show_acl"}}, "show vlan internal info": {"nxos": {"uid": "show_vlan_internal_info", "schema": "{\n'vlan_id': {\n  Any  (str) *: {\n    'vlan_configuration': <class 'bool'>,\n    },\n  },\n}", "doc": "Parser for show vlan internal info", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_vlan.py#L460", "class": "ShowVlanInternalInfo", "module_name": "show_vlan"}}, "show ip bgp all neighbors {neighbor} routes": {"iosxe": {"uid": "show_ip_bgp_all_neighbors_neighbor_routes", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'neighbor': {\n      Any  (str) *: {\n        'address_family': {\n          Any  (str) *: {\n            Optional  (str) local_router_id: <class 'str'>,\n            Optional  (str) routes: {\n              Optional  (Any) Any  (str) *: {\n                Optional  (str) index: {\n                  Optional  (Any) Any  (str) *: {\n                    Optional  (str) path_type: <class 'str'>,\n                    Optional  (str) origin_codes: <class 'str'>,\n                    Optional  (str) metric: <class 'int'>,\n                    Optional  (str) localprf: <class 'int'>,\n                    Optional  (str) next_hop: <class 'str'>,\n                    Optional  (str) weight: <class 'int'>,\n                    Optional  (str) status_codes: <class 'str'>,\n                    Optional  (str) path: <class 'str'>,\n                    },\n                  },\n                },\n              },\n            Optional  (str) route_distinguisher: <class 'str'>,\n            Optional  (str) bgp_table_version: <class 'int'>,\n            Optional  (str) default_vrf: <class 'str'>,\n            },\n          },\n        },\n      },\n    },\n  },\n}", "doc": " Parser for:\n        * 'show ip bgp all neighbors {neighbor} routes'\n        * 'show ip bgp {address_family} all neighbors {neighbor} routes'\n    ", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_bgp.py#L5764", "class": "ShowIpBgpAllNeighborsRoutes", "module_name": "show_bgp"}}, "show fabric multicast ipv4 sa-ad-route": {"nxos": {"uid": "show_fabric_multicast_ipv4_sa-ad-route", "schema": "{\n'multicast': {\n  'vrf': {\n    Any  (str) *: {\n      Optional  (str) address_family: {\n        Any  (str) *: {\n          'sa_ad_routes': {\n            'gaddr': {\n              Any  (str) *: {\n                'saddr': {\n                  Any  (str) *: {\n                    'src_len': <class 'int'>,\n                    'uptime': <class 'str'>,\n                    Optional  (str) interested_fabric_nodes: {\n                      Any  (str) *: {\n                        'uptime': <class 'str'>,\n                        },\n                      },\n                    },\n                  },\n                'grp_len': <class 'int'>,\n                },\n              },\n            },\n          },\n        },\n      'vnid': <class 'str'>,\n      },\n    },\n  },\n}", "doc": "parser for:\n        show fabric multicast ipv4 sa-ad-route\n        show fabric multicast ipv4 sa-ad-route vrf <vrf>\n        show fabric multicast ipv4 sa-ad-route vrf all", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_vxlan.py#L2020", "class": "ShowFabricMulticastIpSaAdRoute", "module_name": "show_vxlan"}}, "show ntp associations detail": {"ios": {"uid": "show_ntp_associations_detail", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'associations': {\n      'address': {\n        Any  (str) *: {\n          'local_mode': {\n            Any  (str) *: {\n              'isconfigured': {\n                Any  (str) *: {\n                  Optional  (str) maxpoll: <class 'int'>,\n                  'local_mode': <class 'str'>,\n                  'root_disp': <class 'str'>,\n                  'filtdelay': <class 'str'>,\n                  Optional  (str) port: <class 'str'>,\n                  'address': <class 'str'>,\n                  Optional  (str) unreach: <class 'str'>,\n                  'offset_msec': <class 'str'>,\n                  Optional  (str) master: <class 'bool'>,\n                  'filterror': <class 'str'>,\n                  Optional  (str) now: <class 'str'>,\n                  'delay_msec': <class 'str'>,\n                  Optional  (str) jitter_msec: <class 'str'>,\n                  'peer': {\n                    Any  (str) *: {\n                      'local_mode': {\n                        Any  (str) *: {\n                          'poll': <class 'int'>,\n                          'local_mode': <class 'str'>,\n                          },\n                        },\n                      },\n                    },\n                  'refid': <class 'str'>,\n                  Optional  (str) ip_type: <class 'str'>,\n                  'sync_dist': <class 'str'>,\n                  'valid': <class 'bool'>,\n                  Optional  (str) ntp_statistics: {\n                    Optional  (str) packet_sent_fail: <class 'int'>,\n                    'packet_dropped': <class 'int'>,\n                    'packet_received': <class 'int'>,\n                    'packet_sent': <class 'int'>,\n                    },\n                  'filtoffset': <class 'str'>,\n                  'root_delay_msec': <class 'str'>,\n                  Optional  (str) selected: <class 'bool'>,\n                  'dispersion': <class 'str'>,\n                  Optional  (str) unsynced: <class 'bool'>,\n                  Optional  (str) assoc_name: <class 'str'>,\n                  Optional  (str) assoc_id: <class 'int'>,\n                  'vrf': <class 'str'>,\n                  'originate_time': <class 'str'>,\n                  'sane': <class 'bool'>,\n                  'receive_time': <class 'str'>,\n                  'isconfigured': <class 'bool'>,\n                  'peer_interface': <class 'str'>,\n                  'stratum': <class 'int'>,\n                  'reach': <class 'str'>,\n                  'precision': <class 'str'>,\n                  'poll': <class 'str'>,\n                  Optional  (str) authenticated: <class 'bool'>,\n                  'input_time': <class 'str'>,\n                  Optional  (str) prefer: <class 'str'>,\n                  'version': <class 'int'>,\n                  'transmit_time': <class 'str'>,\n                  Optional  (str) minpoll: <class 'int'>,\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "doc": "Parser for show ntp associations detail", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_ntp.py#L253", "class": "ShowNtpAssociationsDetail", "module_name": "show_ntp"}, "iosxe": {"uid": "show_ntp_associations_detail", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'associations': {\n      'address': {\n        Any  (str) *: {\n          'local_mode': {\n            Any  (str) *: {\n              'isconfigured': {\n                Any  (str) *: {\n                  Optional  (str) maxpoll: <class 'int'>,\n                  'local_mode': <class 'str'>,\n                  'root_disp': <class 'str'>,\n                  'filtdelay': <class 'str'>,\n                  Optional  (str) port: <class 'str'>,\n                  'address': <class 'str'>,\n                  Optional  (str) unreach: <class 'str'>,\n                  'offset_msec': <class 'str'>,\n                  Optional  (str) master: <class 'bool'>,\n                  'filterror': <class 'str'>,\n                  Optional  (str) now: <class 'str'>,\n                  'delay_msec': <class 'str'>,\n                  Optional  (str) jitter_msec: <class 'str'>,\n                  'peer': {\n                    Any  (str) *: {\n                      'local_mode': {\n                        Any  (str) *: {\n                          'poll': <class 'int'>,\n                          'local_mode': <class 'str'>,\n                          },\n                        },\n                      },\n                    },\n                  'refid': <class 'str'>,\n                  Optional  (str) ip_type: <class 'str'>,\n                  'sync_dist': <class 'str'>,\n                  'valid': <class 'bool'>,\n                  Optional  (str) ntp_statistics: {\n                    Optional  (str) packet_sent_fail: <class 'int'>,\n                    'packet_dropped': <class 'int'>,\n                    'packet_received': <class 'int'>,\n                    'packet_sent': <class 'int'>,\n                    },\n                  'filtoffset': <class 'str'>,\n                  'root_delay_msec': <class 'str'>,\n                  Optional  (str) selected: <class 'bool'>,\n                  'dispersion': <class 'str'>,\n                  Optional  (str) unsynced: <class 'bool'>,\n                  Optional  (str) assoc_name: <class 'str'>,\n                  Optional  (str) assoc_id: <class 'int'>,\n                  'vrf': <class 'str'>,\n                  'originate_time': <class 'str'>,\n                  'sane': <class 'bool'>,\n                  'receive_time': <class 'str'>,\n                  'isconfigured': <class 'bool'>,\n                  'peer_interface': <class 'str'>,\n                  'stratum': <class 'int'>,\n                  'reach': <class 'str'>,\n                  'precision': <class 'str'>,\n                  'poll': <class 'str'>,\n                  Optional  (str) authenticated: <class 'bool'>,\n                  'input_time': <class 'str'>,\n                  Optional  (str) prefer: <class 'str'>,\n                  'version': <class 'int'>,\n                  'transmit_time': <class 'str'>,\n                  Optional  (str) minpoll: <class 'int'>,\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "doc": "Parser for show ntp associations detail", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_ntp.py#L488", "class": "ShowNtpAssociationsDetail", "module_name": "show_ntp"}}, "show mac address-table learning": {"iosxe": {"uid": "show_mac_address-table_learning", "schema": "{\n'vlans': {\n  Any  (str) *: {\n    'vlan': Or (<class 'int'>, <class 'str'>),\n    'mac_learning': <class 'bool'>,\n    },\n  },\n}", "doc": "Parser for show mac address-table learning", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_fdb.py#L180", "class": "ShowMacAddressTableLearning", "module_name": "show_fdb"}}, "show ip bgp {address_family} rd {rd} summary": {"iosxe": {"uid": "show_ip_bgp_address_family_rd_rd_summary", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    Optional  (str) neighbor: {\n      Any  (str) *: {\n        'address_family': {\n          Any  (str) *: {\n            Optional  (str) prefixes: {\n              'total_entries': <class 'int'>,\n              'memory_usage': <class 'int'>,\n              },\n            'msg_rcvd': <class 'int'>,\n            Optional  (str) path: {\n              'total_entries': <class 'int'>,\n              'memory_usage': <class 'int'>,\n              },\n            Optional  (str) cache_entries: {\n              Any  (str) *: {\n                'total_entries': <class 'int'>,\n                'memory_usage': <class 'int'>,\n                },\n              },\n            'input_queue': <class 'int'>,\n            'state_pfxrcd': <class 'str'>,\n            Optional  (str) entries: {\n              Any  (str) *: {\n                'total_entries': <class 'int'>,\n                'memory_usage': <class 'int'>,\n                },\n              },\n            Optional  (str) community_entries: {\n              'total_entries': <class 'int'>,\n              'memory_usage': <class 'int'>,\n              },\n            Optional  (str) attribute_entries: <class 'str'>,\n            'as': <class 'int'>,\n            Optional  (str) total_memory: <class 'int'>,\n            Optional  (str) activity_prefixes: <class 'str'>,\n            'tbl_ver': <class 'int'>,\n            Optional  (str) activity_paths: <class 'str'>,\n            Optional  (str) scan_interval: <class 'int'>,\n            'output_queue': <class 'int'>,\n            'msg_sent': <class 'int'>,\n            Optional  (str) route_identifier: <class 'str'>,\n            Optional  (str) local_as: <class 'int'>,\n            'up_down': <class 'str'>,\n            Optional  (str) bgp_table_version: <class 'int'>,\n            'version': <class 'int'>,\n            Optional  (str) routing_table_version: <class 'int'>,\n            },\n          },\n        },\n      },\n    },\n  },\n'bgp_id': <class 'int'>,\n}", "doc": " Parser for:\n        * 'show ip bgp summary'\n        * 'show ip bgp {address_family} summary'\n        * 'show ip bgp {address_family} vrf {vrf} summary'\n        * 'show ip bgp {address_family} rd {rd} summary'\n    ", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_bgp.py#L2132", "class": "ShowIpBgpSummary", "module_name": "show_bgp"}}, "show spanning-tree mst {mst}": {"ios": {"uid": "show_spanning-tree_mst_mst", "schema": "{\nAny  (str) *: {\n  Any  (str) *: {\n    Any  (str) *: {\n      'interfaces': {\n        Any  (str) *: {\n          'cost': <class 'int'>,\n          Optional  (str) peer: <class 'str'>,\n          'port_num': <class 'int'>,\n          Optional  (str) bound: <class 'str'>,\n          'port_priority': <class 'int'>,\n          'type': <class 'str'>,\n          'role': <class 'str'>,\n          'port_state': <class 'str'>,\n          },\n        },\n      Any  (str) *: {\n        'max_age': <class 'int'>,\n        Optional  (str) interface: <class 'str'>,\n        'forward_delay': <class 'int'>,\n        Optional  (str) configured_bridge_priority: <class 'int'>,\n        Optional  (str) cost: <class 'int'>,\n        'priority': <class 'int'>,\n        'address': <class 'str'>,\n        Optional  (str) sys_id_ext: <class 'int'>,\n        'hello_time': <class 'int'>,\n        Optional  (str) aging_time: <class 'int'>,\n        Optional  (str) port: <class 'int'>,\n        },\n      },\n    },\n  },\n}", "doc": "Parser for show spanning-tree [mst|vlan <WORD>]", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_spanning_tree.py#L33", "class": "ShowSpanningTree", "module_name": "show_spanning_tree"}, "iosxe": {"uid": "show_spanning-tree_mst_mst", "schema": "{\nAny  (str) *: {\n  Any  (str) *: {\n    Any  (str) *: {\n      'interfaces': {\n        Any  (str) *: {\n          'cost': <class 'int'>,\n          Optional  (str) peer: <class 'str'>,\n          'port_num': <class 'int'>,\n          Optional  (str) bound: <class 'str'>,\n          'port_priority': <class 'int'>,\n          'type': <class 'str'>,\n          'role': <class 'str'>,\n          'port_state': <class 'str'>,\n          },\n        },\n      Any  (str) *: {\n        'max_age': <class 'int'>,\n        Optional  (str) interface: <class 'str'>,\n        'forward_delay': <class 'int'>,\n        Optional  (str) configured_bridge_priority: <class 'int'>,\n        Optional  (str) cost: <class 'int'>,\n        'priority': <class 'int'>,\n        'address': <class 'str'>,\n        Optional  (str) sys_id_ext: <class 'int'>,\n        'hello_time': <class 'int'>,\n        Optional  (str) aging_time: <class 'int'>,\n        Optional  (str) port: <class 'int'>,\n        },\n      },\n    },\n  },\n}", "doc": "Parser for show spanning-tree [mst|vlan <WORD>]", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_spanning_tree.py#L843", "class": "ShowSpanningTree", "module_name": "show_spanning_tree"}}, "show ip igmp groups detail": {"ios": {"uid": "show_ip_igmp_groups_detail", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'interface': {\n      Any  (str) *: {\n        Optional  (str) static_group: {\n          Any  (str) *: {\n            'source': <class 'str'>,\n            Optional  (str) source_flags: <class 'str'>,\n            'up_time': <class 'str'>,\n            Optional  (str) flags: <class 'str'>,\n            Optional  (str) expire: <class 'str'>,\n            Optional  (str) v3_exp: <class 'str'>,\n            Optional  (str) csr_exp: <class 'str'>,\n            'group': <class 'str'>,\n            'last_reporter': <class 'str'>,\n            Optional  (str) forward: <class 'bool'>,\n            },\n          },\n        'group': {\n          Any  (str) *: {\n            'group_mode': <class 'str'>,\n            'up_time': <class 'str'>,\n            Optional  (str) flags: <class 'str'>,\n            Optional  (str) expire: <class 'str'>,\n            'last_reporter': <class 'str'>,\n            Optional  (str) source: {\n              Any  (str) *: {\n                'csr_exp': <class 'str'>,\n                'v3_exp': <class 'str'>,\n                'up_time': <class 'str'>,\n                Optional  (str) flags: <class 'str'>,\n                'forward': <class 'bool'>,\n                },\n              },\n            },\n          },\n        Optional  (str) join_group: {\n          Any  (str) *: {\n            'source': <class 'str'>,\n            'up_time': <class 'str'>,\n            Optional  (str) source_flags: <class 'str'>,\n            Optional  (str) expire: <class 'str'>,\n            Optional  (str) flags: <class 'str'>,\n            Optional  (str) v3_exp: <class 'str'>,\n            Optional  (str) forward: <class 'bool'>,\n            'group': <class 'str'>,\n            'last_reporter': <class 'str'>,\n            Optional  (str) csr_exp: <class 'str'>,\n            },\n          },\n        },\n      },\n    },\n  },\n}", "doc": "\n    Parser for 'show ip igmp groups detail'\n    Parser for 'show ip igmp vrf <WORD> groups detail'\n    ", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_igmp.py#L24", "class": "ShowIpIgmpGroupsDetail", "module_name": "show_igmp"}, "iosxe": {"uid": "show_ip_igmp_groups_detail", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'interface': {\n      Any  (str) *: {\n        Optional  (str) static_group: {\n          Any  (str) *: {\n            'source': <class 'str'>,\n            Optional  (str) source_flags: <class 'str'>,\n            'up_time': <class 'str'>,\n            Optional  (str) flags: <class 'str'>,\n            Optional  (str) expire: <class 'str'>,\n            Optional  (str) v3_exp: <class 'str'>,\n            Optional  (str) csr_exp: <class 'str'>,\n            'group': <class 'str'>,\n            'last_reporter': <class 'str'>,\n            Optional  (str) forward: <class 'bool'>,\n            },\n          },\n        'group': {\n          Any  (str) *: {\n            'group_mode': <class 'str'>,\n            'up_time': <class 'str'>,\n            Optional  (str) flags: <class 'str'>,\n            Optional  (str) expire: <class 'str'>,\n            'last_reporter': <class 'str'>,\n            Optional  (str) source: {\n              Any  (str) *: {\n                'csr_exp': <class 'str'>,\n                'v3_exp': <class 'str'>,\n                'up_time': <class 'str'>,\n                Optional  (str) flags: <class 'str'>,\n                'forward': <class 'bool'>,\n                },\n              },\n            },\n          },\n        Optional  (str) join_group: {\n          Any  (str) *: {\n            'source': <class 'str'>,\n            'up_time': <class 'str'>,\n            Optional  (str) source_flags: <class 'str'>,\n            Optional  (str) expire: <class 'str'>,\n            Optional  (str) flags: <class 'str'>,\n            Optional  (str) v3_exp: <class 'str'>,\n            Optional  (str) forward: <class 'bool'>,\n            'group': <class 'str'>,\n            'last_reporter': <class 'str'>,\n            Optional  (str) csr_exp: <class 'str'>,\n            },\n          },\n        },\n      },\n    },\n  },\n}", "doc": "\n    Parser for 'show ip igmp groups detail'\n    Parser for 'show ip igmp vrf <WORD> groups detail'\n    ", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_igmp.py#L403", "class": "ShowIpIgmpGroupsDetail", "module_name": "show_igmp"}}, "show interfaces accounting": {"ios": {"uid": "show_interfaces_accounting", "schema": "{\nAny  (str) *: {\n  'accounting': {\n    Any  (str) *: {\n      'chars_in': <class 'int'>,\n      'pkts_out': <class 'int'>,\n      'pkts_in': <class 'int'>,\n      'chars_out': <class 'int'>,\n      },\n    },\n  },\n}", "doc": "Parser for:\n        show interfaces accounting\n        show interfaces <interface> accounting\n    ", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_interface.py#L68", "class": "ShowInterfacesAccounting", "module_name": "show_interface"}, "iosxr": {"uid": "show_interfaces_accounting", "schema": "{\nAny  (str) *: {\n  'accounting': {\n    Any  (str) *: {\n      'chars_in': <class 'int'>,\n      'pkts_out': <class 'int'>,\n      'pkts_in': <class 'int'>,\n      'chars_out': <class 'int'>,\n      },\n    },\n  },\n}", "doc": "Parser for:\n        show interfaces accounting\n        show interfaces <interface> accounting\n    ", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_interface.py#L2251", "class": "ShowInterfacesAccounting", "module_name": "show_interface"}, "iosxe": {"uid": "show_interfaces_accounting", "schema": "{\nAny  (str) *: {\n  'accounting': {\n    Any  (str) *: {\n      'chars_in': <class 'int'>,\n      'pkts_out': <class 'int'>,\n      'pkts_in': <class 'int'>,\n      'chars_out': <class 'int'>,\n      },\n    },\n  },\n}", "doc": "Parser for:\n        show interfaces accounting\n        show interfaces <interface> accounting\n    ", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_interface.py#L2737", "class": "ShowInterfacesAccounting", "module_name": "show_interface"}}, "show arp {intf_or_ip}": {"iosxe": {"uid": "show_arp_intf_or_ip", "schema": "{\n'interfaces': {\n  Any  (str) *: {\n    'ipv4': {\n      'neighbors': {\n        Any  (str) *: {\n          'ip': <class 'str'>,\n          'age': <class 'str'>,\n          'origin': <class 'str'>,\n          'protocol': <class 'str'>,\n          'type': <class 'str'>,\n          'link_layer_address': <class 'str'>,\n          },\n        },\n      },\n    },\n  },\n}", "doc": " Parser for show arp\n                  show arp <WROD>\n                  show arp vrf <vrf>\n                  show arp vrf <vrf> <WROD> ", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_arp.py#L57", "class": "ShowArp", "module_name": "show_arp"}}, "show route {protocol}": {"ios": {"uid": "show_route_protocol", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    Optional  (str) address_family: {\n      Any  (str) *: {\n        'ip': {\n          Any  (str) *: {\n            Optional  (str) nexthop: {\n              Optional  (Any) Any  (str) *: {\n                Optional  (str) protocol: {\n                  Optional  (Any) Any  (str) *: {\n                    Optional  (str) candidate_default: <class 'bool'>,\n                    Optional  (str) metric: <class 'str'>,\n                    Optional  (str) route_table: <class 'str'>,\n                    Optional  (str) preference: <class 'str'>,\n                    Optional  (str) attribute: <class 'str'>,\n                    Optional  (str) uptime: <class 'str'>,\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "doc": "Parser for:\n        show ipv6 route bgp\n        show ipv6 route vrf <vrf> bgp", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_ip_route.py#L20", "class": "ShowIpv6Route", "module_name": "show_ip_route"}, "iosxe": {"uid": "show_route_protocol", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    Optional  (str) address_family: {\n      Any  (str) *: {\n        'ip': {\n          Any  (str) *: {\n            Optional  (str) nexthop: {\n              Optional  (Any) Any  (str) *: {\n                Optional  (str) protocol: {\n                  Optional  (Any) Any  (str) *: {\n                    Optional  (str) candidate_default: <class 'bool'>,\n                    Optional  (str) metric: <class 'str'>,\n                    Optional  (str) route_table: <class 'str'>,\n                    Optional  (str) preference: <class 'str'>,\n                    Optional  (str) attribute: <class 'str'>,\n                    Optional  (str) uptime: <class 'str'>,\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "doc": "Parser for:\n        show ipv6 route bgp\n        show ipv6 route vrf <vrf> bgp", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_ip_route.py#L244", "class": "ShowIpv6Route", "module_name": "show_ip_route"}}, "show bgp l2vpn evpn {mac} | be \"best path, in rib\" n {count2}": {"nxos": {"uid": "show_bgp_l2vpn_evpn_mac___be_\"best_path,_in_rib\"_n_count2", "schema": "{\n'mac_address': {\n  Any  (str) *: {\n    'next_hop': <class 'str'>,\n    'received_label': <class 'str'>,\n    },\n  },\n}", "doc": "Parser for show bgp l2vpn evpn <WORD> | be \"best path, in rib\" n <WORD>", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_bgp.py#L10911", "class": "ShowBgpL2vpnEvpnWord", "module_name": "show_bgp"}}, "show dot1x all count": {"ios": {"uid": "show_dot1x_all_count", "schema": "{\n'sessions': {\n  'authorized_clients': <class 'int'>,\n  'total': <class 'int'>,\n  'unauthorized_clients': <class 'int'>,\n  },\n}", "doc": "Parser for show dot1x all count", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_dot1x.py#L44", "class": "ShowDot1xAllCount", "module_name": "show_dot1x"}, "iosxe": {"uid": "show_dot1x_all_count", "schema": "{\n'sessions': {\n  'authorized_clients': <class 'int'>,\n  'total': <class 'int'>,\n  'unauthorized_clients': <class 'int'>,\n  },\n}", "doc": "Parser for show dot1x all count", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_dot1x.py#L450", "class": "ShowDot1xAllCount", "module_name": "show_dot1x"}}, "show mpls forwarding-table vrf {vrf}": {"iosxe": {"uid": "show_mpls_forwarding-table_vrf_vrf", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'local_label': {\n      Any  (str) *: {\n        'outgoing_label_or_vc': {\n          Any  (str) *: {\n            'prefix_or_tunnel_id': {\n              Any  (str) *: {\n                Optional  (str) outgoing_interface: {\n                  Any  (str) *: {\n                    Optional  (str) lstack: <class 'str'>,\n                    Optional  (str) via: <class 'str'>,\n                    Optional  (str) broadcast: <class 'bool'>,\n                    'bytes_label_switched': <class 'int'>,\n                    Optional  (str) mru: <class 'int'>,\n                    Optional  (str) label_stack: <class 'str'>,\n                    Optional  (str) next_hop: <class 'str'>,\n                    Optional  (str) encaps: <class 'int'>,\n                    Optional  (str) vpn_route: <class 'str'>,\n                    Optional  (str) output_feature_configured: <class 'bool'>,\n                    Optional  (str) tsp_tunnel: <class 'bool'>,\n                    Optional  (str) mac: <class 'int'>,\n                    Optional  (str) load_sharing: {\n                      Optional  (str) slots: <class 'list'>,\n                      'method': <class 'str'>,\n                      },\n                    Optional  (str) macstr: <class 'str'>,\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "doc": "Parser for\n        show mpls forwarding-table\n        show mpls forwarding-table detail\n        show mpls forwarding-table vrf <vrf>\n        show mpls forwarding-table vrf <vrf> detail", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_mpls.py#L1794", "class": "ShowMplsForwardingTable", "module_name": "show_mpls"}}, "show ip msdp sa-cache detail": {"nxos": {"uid": "show_ip_msdp_sa-cache_detail", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'sa_cache': {\n      Any  (str) *: {\n        'asn': <class 'int'>,\n        'up_time': <class 'str'>,\n        'peer_learned_from': <class 'str'>,\n        'origin_rp': {\n          Any  (str) *: {\n            'rp_address': <class 'str'>,\n            },\n          },\n        'group': <class 'str'>,\n        'expire': <class 'str'>,\n        'source_addr': <class 'str'>,\n        },\n      },\n    },\n  },\n}", "doc": "Parser for :\n       show ip msdp sa-cache detail vrf <vrf>", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_msdp.py#L429", "class": "ShowIpMsdpSaCacheDetailVrf", "module_name": "show_msdp"}}, "show interfaces trunk": {"iosxe": {"uid": "show_interfaces_trunk", "schema": "{\n'interface': {\n  Any  (str) *: {\n    'encapsulation': <class 'str'>,\n    'name': <class 'str'>,\n    'vlans_allowed_on_trunk': <class 'str'>,\n    'vlans_allowed_active_in_mgmt_domain': <class 'str'>,\n    'vlans_in_stp_forwarding_not_pruned': <class 'str'>,\n    'native_vlan': <class 'str'>,\n    'mode': <class 'str'>,\n    'status': <class 'str'>,\n    },\n  },\n}", "doc": "parser for show interfaces trunk", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_interface.py#L2601", "class": "ShowInterfacesTrunk", "module_name": "show_interface"}}, "show bgp {address_family} vrf {vrf} neighbors": {"iosxe": {"uid": "show_bgp_address_family_vrf_vrf_neighbors", "schema": "{\nOptional  (str) list_of_neighbors: <class 'list'>,\n'vrf': {\n  Any  (str) *: {\n    'neighbor': {\n      Any  (str) *: {\n        Optional  (str) bgp_event_timer: {\n          'starts': {\n            Any  (str) *: <class 'int'>,\n            },\n          'wakeups': {\n            Any  (str) *: <class 'int'>,\n            },\n          'next': {\n            Any  (str) *: <class 'str'>,\n            },\n          },\n        'address_family': {\n          Any  (str) *: {\n            Optional  (str) refresh_epoch: <class 'int'>,\n            Optional  (str) session_state: <class 'str'>,\n            Optional  (str) max_nlri: <class 'int'>,\n            Optional  (str) up_time: <class 'str'>,\n            Optional  (str) min_nlri: <class 'int'>,\n            Optional  (str) down_time: <class 'str'>,\n            Optional  (str) refresh_activity_counters: {\n              'sent': {\n                Any  (str) *: <class 'int'>,\n                },\n              'received': {\n                Any  (str) *: <class 'int'>,\n                },\n              },\n            Optional  (str) local_policy_denied_prefixes_counters: {\n              'inbound': {\n                Any  (str) *: Any  (str) *,\n                },\n              'outbound': {\n                Any  (str) *: Any  (str) *,\n                },\n              },\n            Optional  (str) last_detected_dynamic_slow_peer: <class 'str'>,\n            Optional  (str) last_read: <class 'str'>,\n            Optional  (str) dynamic_slow_peer_recovered: <class 'str'>,\n            Optional  (str) last_write: <class 'str'>,\n            Optional  (str) last_sent_refresh_start_of_rib: <class 'str'>,\n            Optional  (str) current_time: <class 'str'>,\n            Optional  (str) last_received_refresh_start_of_rib: <class 'str'>,\n            Optional  (str) bgp_table_version: <class 'int'>,\n            Optional  (str) last_sent_refresh_end_of_rib: <class 'str'>,\n            Optional  (str) neighbor_version: <class 'str'>,\n            Optional  (str) last_received_refresh_end_of_rib: <class 'str'>,\n            Optional  (str) output_queue_size: <class 'int'>,\n            Optional  (str) refresh_out: <class 'int'>,\n            Optional  (str) index: <class 'int'>,\n            Optional  (str) refresh_in: <class 'int'>,\n            Optional  (str) advertise_bit: <class 'int'>,\n            Optional  (str) route_reflector_client: <class 'bool'>,\n            Optional  (str) update_group_member: <class 'int'>,\n            Optional  (str) community_attribute_sent: <class 'bool'>,\n            Optional  (str) extended_community_attribute_sent: <class 'bool'>,\n            Optional  (str) prefix_activity_counters: {\n              'sent': {\n                Any  (str) *: Any  (str) *,\n                },\n              'received': {\n                Any  (str) *: Any  (str) *,\n                },\n              },\n            Optional  (str) suppress_ldp_signaling: <class 'bool'>,\n            Optional  (str) slow_peer_detection: <class 'bool'>,\n            Optional  (str) slow_peer_split_update_group_dynamic: <class 'bool'>,\n            },\n          },\n        'bgp_neighbor_counters': {\n          'messages': {\n            'sent': {\n              'notifications': <class 'int'>,\n              'route_refresh': <class 'int'>,\n              'total': <class 'int'>,\n              'opens': <class 'int'>,\n              'keepalives': <class 'int'>,\n              'updates': <class 'int'>,\n              },\n            'in_queue_depth': <class 'int'>,\n            'received': {\n              'notifications': <class 'int'>,\n              'route_refresh': <class 'int'>,\n              'total': <class 'int'>,\n              'opens': <class 'int'>,\n              'keepalives': <class 'int'>,\n              'updates': <class 'int'>,\n              },\n            'out_queue_depth': <class 'int'>,\n            },\n          },\n        'bgp_negotiated_keepalive_timers': {\n          'keepalive_interval': <class 'int'>,\n          'hold_time': <class 'int'>,\n          Optional  (str) min_holdtime: <class 'int'>,\n          },\n        'link': <class 'str'>,\n        'router_id': <class 'str'>,\n        Optional  (str) bgp_session_transport: {\n          Optional  (str) enqueued_packets: {\n            'mis_ordered_packet': <class 'int'>,\n            'input_packet': <class 'int'>,\n            'retransmit_packet': <class 'int'>,\n            },\n          Optional  (str) iss: <class 'int'>,\n          Optional  (str) snduna: <class 'int'>,\n          'connection': {\n            Optional  (str) reset_reason: <class 'str'>,\n            'dropped': <class 'int'>,\n            'established': <class 'int'>,\n            'last_reset': <class 'str'>,\n            },\n          Optional  (str) sndnxt: <class 'int'>,\n          Optional  (str) irs: <class 'int'>,\n          'address_tracking_status': <class 'str'>,\n          Optional  (str) sndwnd: <class 'int'>,\n          Optional  (str) snd_scale: <class 'int'>,\n          Optional  (str) maxrcvwnd: <class 'int'>,\n          Optional  (str) rcvwnd: <class 'int'>,\n          Optional  (str) rcv_scale: <class 'int'>,\n          Optional  (str) delrcvwnd: <class 'int'>,\n          Optional  (str) srtt: <class 'int'>,\n          'min_time_between_advertisement_runs': <class 'int'>,\n          Optional  (str) rtto: <class 'int'>,\n          Optional  (str) rtv: <class 'int'>,\n          Optional  (str) krtt: <class 'int'>,\n          Optional  (str) min_rtt: <class 'int'>,\n          Optional  (str) max_rtt: <class 'int'>,\n          Optional  (str) ack_hold: <class 'int'>,\n          Optional  (str) uptime: <class 'int'>,\n          Optional  (str) sent_idletime: <class 'int'>,\n          Optional  (str) receive_idletime: <class 'int'>,\n          Optional  (str) tcp_connection: <class 'bool'>,\n          Optional  (str) status_flags: <class 'str'>,\n          Optional  (str) option_flags: <class 'str'>,\n          Optional  (str) ip_precedence_value: <class 'int'>,\n          'tcp_path_mtu_discovery': <class 'str'>,\n          Optional  (str) transport: {\n            'local_port': <class 'str'>,\n            'local_host': <class 'str'>,\n            'foreign_port': <class 'str'>,\n            Optional  (str) mss: <class 'int'>,\n            'foreign_host': <class 'str'>,\n            },\n          Optional  (str) datagram: {\n            'datagram_sent': {\n              'second_congestion': <class 'int'>,\n              'with_data': <class 'int'>,\n              'retransmit': <class 'int'>,\n              'partialack': <class 'int'>,\n              'value': <class 'int'>,\n              'fastretransmit': <class 'int'>,\n              'total_data': <class 'int'>,\n              },\n            'datagram_received': {\n              'out_of_order': <class 'int'>,\n              'with_data': <class 'int'>,\n              'total_data': <class 'int'>,\n              'value': <class 'int'>,\n              },\n            },\n          Optional  (str) graceful_restart: <class 'str'>,\n          Optional  (str) packet_fast_path: <class 'int'>,\n          Optional  (str) gr_restart_time: <class 'int'>,\n          Optional  (str) packet_fast_processed: <class 'int'>,\n          Optional  (str) gr_stalepath_time: <class 'int'>,\n          Optional  (str) packet_slow_path: <class 'int'>,\n          Optional  (str) connection_state: <class 'str'>,\n          Optional  (str) fast_lock_acquisition_failures: <class 'int'>,\n          Optional  (str) io_status: <class 'int'>,\n          Optional  (str) lock_slow_path: <class 'int'>,\n          Optional  (str) unread_input_bytes: <class 'int'>,\n          Optional  (str) tcp_semaphore: <class 'str'>,\n          Optional  (str) ecn_connection: <class 'str'>,\n          Optional  (str) tcp_semaphore_status: <class 'str'>,\n          Optional  (str) minimum_incoming_ttl: <class 'int'>,\n          Optional  (str) sso: <class 'bool'>,\n          Optional  (str) outgoing_ttl: <class 'int'>,\n          Optional  (str) rcvnxt: <class 'int'>,\n          Optional  (str) connection_tableid: <class 'int'>,\n          'rib_route_ip': <class 'str'>,\n          Optional  (str) maximum_output_segment_queue_size: <class 'int'>,\n          },\n        'remote_as': <class 'int'>,\n        'bgp_version': <class 'int'>,\n        'session_state': <class 'str'>,\n        'shutdown': <class 'bool'>,\n        Optional  (str) local_as: <class 'int'>,\n        'bgp_negotiated_capabilities': {\n          'four_octets_asn': <class 'str'>,\n          Optional  (str) vpnv4_unicast: <class 'str'>,\n          Optional  (str) graceful_restart: <class 'str'>,\n          'route_refresh': <class 'str'>,\n          Optional  (str) vpnv6_unicast: <class 'str'>,\n          'stateful_switchover': <class 'str'>,\n          Optional  (str) ipv4_unicast: <class 'str'>,\n          Optional  (str) remote_restart_timer: <class 'int'>,\n          Optional  (str) ipv6_unicast: <class 'str'>,\n          Optional  (str) l2vpn_vpls: <class 'str'>,\n          Optional  (str) l2vpn_evpn: <class 'str'>,\n          Optional  (str) vpnv4_multicast: <class 'str'>,\n          Optional  (str) multisession: <class 'str'>,\n          Optional  (str) graceful_restart_af_advertised_by_peer: <class 'list'>,\n          Optional  (str) vpnv6_multicast: <class 'str'>,\n          'enhanced_refresh': <class 'str'>,\n          Optional  (str) mvpnv4_multicast: <class 'str'>,\n          Optional  (str) mvpnv6_multicast: <class 'str'>,\n          },\n        Optional  (str) description: <class 'str'>,\n        },\n      },\n    },\n  },\n}", "doc": " Parser for:\n        * 'show bgp neighbors'\n        * 'show bgp neighbors {neighbor}'\n        * 'show bgp {address_family} neighbors'\n        * 'show bgp {address_family} neighbors {neighbor}'\n        * 'show bgp {address_family} vrf {vrf} neighbors'\n        * 'show bgp {address_family} vrf {vrf} neighbors {neighbor}'\n    ", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_bgp.py#L3739", "class": "ShowBgpNeighbors", "module_name": "show_bgp"}}, "show running-config ntp": {"iosxr": {"uid": "show_running-config_ntp", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'address': {\n      Any  (str) *: {\n        'type': <class 'str'>,\n        },\n      },\n    'source': <class 'str'>,\n    },\n  },\n}", "doc": "Parser for: show running-config ntp", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_ntp.py#L506", "class": "ShowRunningConfigNtp", "module_name": "show_ntp"}}, "show ipv6 rip": {"iosxe": {"uid": "show_ipv6_rip", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'address_family': {\n      Any  (str) *: {\n        Optional  (str) split_horizon: <class 'bool'>,\n        Optional  (str) poison_reverse: <class 'bool'>,\n        'timers': {\n          Optional  (str) expire_time: <class 'int'>,\n          Optional  (str) holddown_interval: <class 'int'>,\n          Optional  (str) flush_interval: <class 'int'>,\n          Optional  (str) update_interval: <class 'int'>,\n          },\n        'originate_default_route': {\n          'enabled': <class 'bool'>,\n          },\n        Optional  (str) distance: <class 'int'>,\n        Optional  (str) redistribute: {\n          Any  (str) *: {\n            Optional  (str) metric: <class 'int'>,\n            Optional  (str) route_policy: <class 'str'>,\n            },\n          },\n        Optional  (str) maximum_paths: <class 'int'>,\n        Optional  (str) multicast_group: <class 'str'>,\n        Optional  (str) statistics: {\n          Optional  (str) periodic_updates: <class 'int'>,\n          Optional  (str) full_advertisement: <class 'int'>,\n          Optional  (str) delayed_events: <class 'int'>,\n          Optional  (str) trigger_updates: <class 'int'>,\n          },\n        Optional  (str) pid: <class 'int'>,\n        Optional  (str) port: <class 'int'>,\n        'interfaces': {\n          Any  (str) *: {\n            },\n          },\n        },\n      },\n    },\n  },\n}", "doc": "Parser for :\n           show ipv6 rip\n           show ipv6 rip vrf {vrf}", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_rip.py#L364", "class": "ShowIpv6Rip", "module_name": "show_rip"}}, "admin show diag chassis": {"iosxr": {"uid": "admin_show_diag_chassis", "schema": "{\n'pid': <class 'str'>,\n'num_line_cards': <class 'int'>,\n'sn': <class 'str'>,\n'top_assy_num': <class 'str'>,\n'device_series': <class 'int'>,\n'device_family': <class 'str'>,\n'chassis_feature': <class 'str'>,\n'vid': <class 'str'>,\n'rack_num': <class 'int'>,\n'desc': <class 'str'>,\n'clei': <class 'str'>,\n}", "doc": "Parser for admin show diag chassis", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_platform.py#L772", "class": "AdminShowDiagChassis", "module_name": "show_platform"}}, "show bgp l2vpn evpn vrf {vrf}": {"nxos": {"uid": "show_bgp_l2vpn_evpn_vrf_vrf", "schema": "{\n'instance': {\n  Any  (str) *: {\n    'vrf': {\n      Any  (str) *: {\n        'vrf_name_out': <class 'str'>,\n        'address_family': {\n          Any  (str) *: {\n            'router_id': <class 'str'>,\n            'table_version': <class 'str'>,\n            'af_name': <class 'str'>,\n            'rd': {\n              Any  (str) *: {\n                'prefix': {\n                  Any  (str) *: {\n                    'path': {\n                      Any  (str) *: {\n                        'origin': <class 'str'>,\n                        'pathnr': <class 'int'>,\n                        Optional  (str) bestcode: <class 'str'>,\n                        Optional  (str) statuscode: <class 'str'>,\n                        'localpref': <class 'str'>,\n                        'ipnexthop': <class 'str'>,\n                        Optional  (str) typecode: <class 'str'>,\n                        'weight': <class 'str'>,\n                        },\n                      },\n                    'nonipprefix': <class 'str'>,\n                    },\n                  },\n                Optional  (str) rd_vrf: <class 'str'>,\n                Optional  (str) rd_val: <class 'str'>,\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "doc": "Parser for:\n           show bgp l2vpn evpn\n           show bgp l2vpn evpn vrf <vrf>\n           show bgp l2vpn evpn vrf all", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_bgp.py#L11500", "class": "ShowBgpL2vpnEvpn", "module_name": "show_bgp"}}, "show service-group stats": {"ios": {"uid": "show_service-group_stats", "schema": "{\n'service_group_statistics': {\n  Any  (str) *: {\n    'members_left': <class 'int'>,\n    'members_joined': <class 'int'>,\n    'num_of_interfaces': <class 'int'>,\n    'num_of_members': {\n      <class 'int'>: {\n        Any  (str) *: <class 'int'>,\n        },\n      },\n    },\n  'global': {\n    'num_of_groups': <class 'int'>,\n    'num_of_members': <class 'int'>,\n    },\n  },\n}", "doc": "Parser for show service-group stats", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_service.py#L18", "class": "ShowServiceGroupStats", "module_name": "show_service"}, "iosxe": {"uid": "show_service-group_stats", "schema": "{\n'service_group_statistics': {\n  Any  (str) *: {\n    'members_left': <class 'int'>,\n    'members_joined': <class 'int'>,\n    'num_of_interfaces': <class 'int'>,\n    'num_of_members': {\n      <class 'int'>: {\n        Any  (str) *: <class 'int'>,\n        },\n      },\n    },\n  'global': {\n    'num_of_groups': <class 'int'>,\n    'num_of_members': <class 'int'>,\n    },\n  },\n}", "doc": " Parser for 'show service-group stats", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_service.py#L93", "class": "ShowServiceGroupStats", "module_name": "show_service"}}, "show pagp {channel_group} neighbor": {"iosxe": {"uid": "show_pagp_channel_group_neighbor", "schema": "{\n'interfaces': {\n  Any  (str) *: {\n    'protocol': <class 'str'>,\n    'name': <class 'str'>,\n    'members': {\n      Any  (str) *: {\n        'partner_port': <class 'str'>,\n        'age': <class 'int'>,\n        'partner_name': <class 'str'>,\n        'partner_id': <class 'str'>,\n        Optional  (str) activity: <class 'str'>,\n        'interface': <class 'str'>,\n        'group_cap': <class 'str'>,\n        'flags': <class 'str'>,\n        },\n      },\n    },\n  },\n}", "doc": "Parser for :\n      show pagp neighbor", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_lag.py#L495", "class": "ShowPagpNeighbor", "module_name": "show_lag"}}, "show switch": {"iosxe": {"uid": "show_switch", "schema": "{\n'switch': {\n  'mac_address': <class 'str'>,\n  'mac_persistency_wait_time': <class 'str'>,\n  'stack': {\n    Any  (str) *: {\n      'mac_address': <class 'str'>,\n      'state': <class 'str'>,\n      'hw_ver': <class 'str'>,\n      'role': <class 'str'>,\n      'priority': <class 'str'>,\n      },\n    },\n  },\n}", "doc": "Parser for show switch.", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_platform.py#L1686", "class": "ShowSwitch", "module_name": "show_platform"}}, "show bgp {address_family} labels": {"nxos": {"uid": "show_bgp_address_family_labels", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'address_family': {\n      Any  (str) *: {\n        Optional  (str) route_distinguisher: {\n          Any  (str) *: {\n            'prefix': {\n              Any  (str) *: {\n                'index': {\n                  Any  (str) *: {\n                    'best_path': <class 'bool'>,\n                    'nexthop': <class 'str'>,\n                    Optional  (str) best_code: <class 'str'>,\n                    Optional  (str) type_code: <class 'str'>,\n                    'out_label': <class 'str'>,\n                    Optional  (str) vpn: <class 'str'>,\n                    Optional  (str) type: <class 'str'>,\n                    Optional  (str) hold_down: <class 'str'>,\n                    'status': <class 'str'>,\n                    Optional  (str) status_code: <class 'str'>,\n                    'in_label': <class 'str'>,\n                    },\n                  },\n                },\n              },\n            Optional  (str) rd_vrf: <class 'str'>,\n            },\n          },\n        Optional  (str) prefix: {\n          Any  (str) *: {\n            'index': {\n              Any  (str) *: {\n                'best_path': <class 'bool'>,\n                'nexthop': <class 'str'>,\n                Optional  (str) type_code: <class 'str'>,\n                Optional  (str) type: <class 'str'>,\n                'in_label': <class 'str'>,\n                Optional  (str) vpn: <class 'str'>,\n                'out_label': <class 'str'>,\n                Optional  (str) hold_down: <class 'str'>,\n                Optional  (str) status_code: <class 'str'>,\n                'status': <class 'str'>,\n                Optional  (str) best_code: <class 'str'>,\n                },\n              },\n            },\n          },\n        'table_version': <class 'int'>,\n        'router_id': <class 'str'>,\n        },\n      },\n    },\n  },\n}", "doc": "Parser for:\n        show bgp <address_family> labels [vrf <WROD>]", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_bgp.py#L9387", "class": "ShowBgpLabels", "module_name": "show_bgp"}}, "show ipv6 mld interface": {"ios": {"uid": "show_ipv6_mld_interface", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    Optional  (str) active_groups: <class 'int'>,\n    'interface': {\n      Any  (str) *: {\n        Optional  (str) version: <class 'int'>,\n        Optional  (str) query_interval: <class 'int'>,\n        Optional  (str) querier_timeout: <class 'int'>,\n        Optional  (str) counters: {\n          'leaves': <class 'int'>,\n          'joins': <class 'int'>,\n          },\n        Optional  (str) query_max_response_time: <class 'int'>,\n        'enable': <class 'bool'>,\n        Optional  (str) last_member_query_interval: <class 'int'>,\n        'interface_status': <class 'str'>,\n        'oper_status': <class 'str'>,\n        Optional  (str) query_this_system: <class 'bool'>,\n        Optional  (str) max_groups: <class 'int'>,\n        Optional  (str) active_groups: <class 'int'>,\n        Optional  (str) interface_adress: <class 'str'>,\n        Optional  (str) group_policy: <class 'str'>,\n        Optional  (str) querier: <class 'str'>,\n        },\n      },\n    Optional  (str) max_groups: <class 'int'>,\n    },\n  },\n}", "doc": "Parser for:\n        show ipv6 mld interface\n        show ipv6 mld vrf <vrf> interface", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_mld.py#L18", "class": "ShowIpv6MldInterface", "module_name": "show_mld"}, "nxos": {"uid": "show_ipv6_mld_interface", "schema": "{\n'vrfs': {\n  Any  (str) *: {\n    Optional  (str) interface: {\n      Any  (str) *: {\n        Optional  (str) query_max_response_time: <class 'int'>,\n        'link_status': <class 'str'>,\n        'enable': <class 'bool'>,\n        Optional  (str) max_groups: <class 'int'>,\n        Optional  (str) available_groups: <class 'int'>,\n        Optional  (str) group_policy: <class 'str'>,\n        Optional  (str) startup_query: {\n          Optional  (str) interval: <class 'int'>,\n          Optional  (str) count: <class 'int'>,\n          Optional  (str) configured_interval: <class 'int'>,\n          },\n        'oper_status': <class 'str'>,\n        Optional  (str) configured_query_max_response_time: <class 'int'>,\n        Optional  (str) statistics: {\n          'sent': {\n            Any  (str) *: <class 'int'>,\n            },\n          'received': {\n            Any  (str) *: <class 'int'>,\n            },\n          },\n        Optional  (str) ipv6: {\n          Any  (str) *: {\n            'ip': <class 'str'>,\n            'prefix_length': <class 'str'>,\n            'status': <class 'str'>,\n            },\n          },\n        Optional  (str) last_member: {\n          Optional  (str) query_count: <class 'int'>,\n          Optional  (str) mrt: <class 'int'>,\n          },\n        Optional  (str) group_timeout: <class 'int'>,\n        Optional  (str) link_local: {\n          'address': <class 'str'>,\n          'status': <class 'str'>,\n          Optional  (str) ipv6_address: <class 'str'>,\n          },\n        Optional  (str) configured_group_timeout: <class 'int'>,\n        Optional  (str) querier: <class 'str'>,\n        Optional  (str) querier_timeout: <class 'int'>,\n        Optional  (str) querier_version: <class 'int'>,\n        Optional  (str) configured_querier_timeout: <class 'int'>,\n        Optional  (str) next_query_sent_in: <class 'str'>,\n        Optional  (str) unsolicited_report_interval: <class 'int'>,\n        Optional  (str) membership_count: <class 'int'>,\n        Optional  (str) robustness_variable: <class 'int'>,\n        Optional  (str) version: <class 'int'>,\n        Optional  (str) configured_robustness_variable: <class 'int'>,\n        Optional  (str) host_version: <class 'int'>,\n        Optional  (str) link_local_groups_reporting: <class 'bool'>,\n        Optional  (str) query_interval: <class 'int'>,\n        Optional  (str) immediate_leave: <class 'bool'>,\n        Optional  (str) configured_query_interval: <class 'int'>,\n        Optional  (str) enable_refcount: <class 'int'>,\n        },\n      },\n    },\n  },\n}", "doc": "Parser for:\n        show ipv6 mld interface\n        show ipv6 mld interface vrf all\n        show ipv6 mld interface vrf <vrf>", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_mld.py#L104", "class": "ShowIpv6MldInterface", "module_name": "show_mld"}, "iosxe": {"uid": "show_ipv6_mld_interface", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    Optional  (str) active_groups: <class 'int'>,\n    'interface': {\n      Any  (str) *: {\n        Optional  (str) version: <class 'int'>,\n        Optional  (str) query_interval: <class 'int'>,\n        Optional  (str) querier_timeout: <class 'int'>,\n        Optional  (str) counters: {\n          'leaves': <class 'int'>,\n          'joins': <class 'int'>,\n          },\n        Optional  (str) query_max_response_time: <class 'int'>,\n        'enable': <class 'bool'>,\n        Optional  (str) last_member_query_interval: <class 'int'>,\n        'interface_status': <class 'str'>,\n        'oper_status': <class 'str'>,\n        Optional  (str) query_this_system: <class 'bool'>,\n        Optional  (str) max_groups: <class 'int'>,\n        Optional  (str) active_groups: <class 'int'>,\n        Optional  (str) interface_adress: <class 'str'>,\n        Optional  (str) group_policy: <class 'str'>,\n        Optional  (str) querier: <class 'str'>,\n        },\n      },\n    Optional  (str) max_groups: <class 'int'>,\n    },\n  },\n}", "doc": "Parser for:\n        show ipv6 mld interface\n        show ipv6 mld vrf <vrf> interface", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_mld.py#L60", "class": "ShowIpv6MldInterface", "module_name": "show_mld"}}, "show ip ospf mpls ldp interface": {"ios": {"uid": "show_ip_ospf_mpls_ldp_interface", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'address_family': {\n      Any  (str) *: {\n        'instance': {\n          Any  (str) *: {\n            'mpls': {\n              'ldp': {\n                'autoconfig': <class 'bool'>,\n                'autoconfig_area_id': <class 'str'>,\n                },\n              },\n            'areas': {\n              Any  (str) *: {\n                'interfaces': {\n                  Any  (str) *: {\n                    'mpls': {\n                      'ldp': {\n                        'holddown_timer': <class 'bool'>,\n                        'state': <class 'str'>,\n                        'autoconfig': <class 'bool'>,\n                        'autoconfig_area_id': <class 'str'>,\n                        'igp_sync': <class 'bool'>,\n                        },\n                      },\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "doc": " Parser for \"show ip ospf mpls ldp interface\" ", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_ospf.py#L99", "class": "ShowIpOspfMplsLdpInterface", "module_name": "show_ospf"}, "nxos": {"uid": "show_ip_ospf_mpls_ldp_interface", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'address_family': {\n      Any  (str) *: {\n        'instance': {\n          Any  (str) *: {\n            'areas': {\n              Any  (str) *: {\n                Optional  (str) virtual_links: {\n                  Any  (str) *: {\n                    'state': <class 'str'>,\n                    'area': <class 'str'>,\n                    'mpls': {\n                      'ldp': {\n                        Optional  (str) achieved: <class 'bool'>,\n                        'autoconfig': <class 'bool'>,\n                        'autoconfig_area_id': <class 'str'>,\n                        Optional  (str) required: <class 'bool'>,\n                        'igp_sync': <class 'bool'>,\n                        },\n                      },\n                    'name': <class 'str'>,\n                    'interface_type': <class 'str'>,\n                    },\n                  },\n                Optional  (str) interfaces: {\n                  Any  (str) *: {\n                    'state': <class 'str'>,\n                    'area': <class 'str'>,\n                    'mpls': {\n                      'ldp': {\n                        'autoconfig': <class 'bool'>,\n                        'autoconfig_area_id': <class 'str'>,\n                        Optional  (str) achieved: <class 'bool'>,\n                        'igp_sync': <class 'bool'>,\n                        Optional  (str) required: <class 'bool'>,\n                        },\n                      },\n                    'name': <class 'str'>,\n                    'interface_type': <class 'str'>,\n                    },\n                  },\n                'mpls': {\n                  'ldp': {\n                    'autoconfig': <class 'bool'>,\n                    'autoconfig_area_id': <class 'str'>,\n                    Optional  (str) achieved: <class 'bool'>,\n                    Optional  (str) required: <class 'bool'>,\n                    'igp_sync': <class 'bool'>,\n                    },\n                  },\n                Optional  (str) sham_links: {\n                  Any  (str) *: {\n                    'state': <class 'str'>,\n                    'area': <class 'str'>,\n                    'mpls': {\n                      'ldp': {\n                        'autoconfig': <class 'bool'>,\n                        'autoconfig_area_id': <class 'str'>,\n                        Optional  (str) required: <class 'bool'>,\n                        'igp_sync': <class 'bool'>,\n                        Optional  (str) achieved: <class 'bool'>,\n                        },\n                      },\n                    'name': <class 'str'>,\n                    'interface_type': <class 'str'>,\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "doc": "Parser for:\n        show ip ospf mpls ldp interface\n        show ip ospf mpls ldp interface vrf <vrf>", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_ospf.py#L814", "class": "ShowIpOspfMplsLdpInterface", "module_name": "show_ospf"}, "iosxe": {"uid": "show_ip_ospf_mpls_ldp_interface", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'address_family': {\n      Any  (str) *: {\n        'instance': {\n          Any  (str) *: {\n            'mpls': {\n              'ldp': {\n                'autoconfig': <class 'bool'>,\n                'autoconfig_area_id': <class 'str'>,\n                },\n              },\n            'areas': {\n              Any  (str) *: {\n                'interfaces': {\n                  Any  (str) *: {\n                    'mpls': {\n                      'ldp': {\n                        'holddown_timer': <class 'bool'>,\n                        'state': <class 'str'>,\n                        'autoconfig': <class 'bool'>,\n                        'autoconfig_area_id': <class 'str'>,\n                        'igp_sync': <class 'bool'>,\n                        },\n                      },\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "doc": " Parser for:\n        * 'show ip ospf mpls ldp interface'\n    ", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_ospf.py#L4610", "class": "ShowIpOspfMplsLdpInterface", "module_name": "show_ospf"}}, "show line": {"iosxe": {"uid": "show_line", "schema": "{\n'tty': {\n  Any  (str) *: {\n    'noise': <class 'int'>,\n    'roty': <class 'str'>,\n    Optional  (str) tx: <class 'int'>,\n    'type': <class 'str'>,\n    'acci': <class 'str'>,\n    Optional  (str) rx: <class 'int'>,\n    'modem': <class 'str'>,\n    'uses': <class 'int'>,\n    'int': <class 'str'>,\n    'active': <class 'bool'>,\n    'acco': <class 'str'>,\n    'a': <class 'str'>,\n    'overruns': <class 'str'>,\n    },\n  },\n}", "doc": "Parser for show line", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_session.py#L39", "class": "ShowLine", "module_name": "show_session"}}, "show ethernet trunk detail": {"iosxr": {"uid": "show_ethernet_trunk_detail", "schema": "{\n'interface': {\n  Any  (str) *: {\n    Optional  (str) dot1q_tunneling_ethertype: <class 'str'>,\n    },\n  },\n}", "doc": "Parser for show ethernet trunk detail\n    parser class - implements detail parsing mechanisms for cli output.\n    ", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_ethernet.py#L167", "class": "ShowEthernetTrunkDetail", "module_name": "show_ethernet"}}, "show lacp neighbor": {"iosxe": {"uid": "show_lacp_neighbor", "schema": "{\n'interfaces': {\n  Any  (str) *: {\n    'protocol': <class 'str'>,\n    'name': <class 'str'>,\n    'members': {\n      Any  (str) *: {\n        'age': <class 'int'>,\n        'partner_id': <class 'str'>,\n        'port_num': <class 'int'>,\n        'oper_key': <class 'int'>,\n        'lacp_port_priority': <class 'int'>,\n        'admin_key': <class 'int'>,\n        'interface': <class 'str'>,\n        'port_state': <class 'int'>,\n        'activity': <class 'str'>,\n        'flags': <class 'str'>,\n        },\n      },\n    },\n  },\n}", "doc": "Parser for :\n      show lacp neighbor", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_lag.py#L312", "class": "ShowLacpNeighbor", "module_name": "show_lag"}}, "show controllers fia diagshell {diagshell_unit} \"l2 show\" location {location}": {"iosxr": {"uid": "show_controllers_fia_diagshell_diagshell_unit_\"l2_show\"_location_location", "schema": null, "doc": "Parser class for show controllers fia diagshell 0 'l2 show' ", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_controllers.py#L18", "class": "ShowControllersFiaDiagshellL2show", "module_name": "show_controllers"}}, "show archive config differences {fileA} {fileB}": {"ios": {"uid": "show_archive_config_differences_fileA_fileB", "schema": "{\nOptional  (str) list_of_commands: <class 'list'>,\nOptional  (str) diff: <class 'list'>,\n}", "doc": " Parser for the following commands:\n        * show archive config differences\n        * show archive config differences {fileA} {fileB}\n        * show archive config differences {fileA}\n    ", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_archive.py#L16", "class": "ShowArchiveConfigDifferences", "module_name": "show_archive"}, "iosxe": {"uid": "show_archive_config_differences_fileA_fileB", "schema": "{\nOptional  (str) list_of_commands: <class 'list'>,\nOptional  (str) diff: <class 'list'>,\n}", "doc": " Parser for the following commands:\n        * show archive config differences\n        * show archive config differences {fileA} {fileB}\n        * show archive config differences {fileA}\n    ", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_archive.py#L115", "class": "ShowArchiveConfigDifferences", "module_name": "show_archive"}}, "show bgp {address_family} policy statistics neighbor {neighbor}": {"nxos": {"uid": "show_bgp_address_family_policy_statistics_neighbor_neighbor", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    Optional  (str) rpm_handle_count: <class 'int'>,\n    Optional  (str) route_map: {\n      Any  (str) *: {\n        Any  (str) *: {\n          'action': <class 'str'>,\n          'seq_num': <class 'int'>,\n          'total_accept_count': <class 'int'>,\n          Optional  (str) command: {\n            'command': <class 'str'>,\n            'compare_count': <class 'int'>,\n            'match_count': <class 'int'>,\n            },\n          'total_reject_count': <class 'int'>,\n          },\n        },\n      },\n    },\n  },\n}", "doc": "Parser for:\n        show bgp [vrf <vrf>] <address_family> policy statistics neighbor <neighbor>\n        parser class implements detail parsing mechanisms for cli,xml output", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_bgp.py#L8897", "class": "ShowBgpPolicyStatisticsNeighbor", "module_name": "show_bgp"}}, "show system internal sysmgr service name {process}": {"nxos": {"uid": "show_system_internal_sysmgr_service_name_process", "schema": "{\n'instance': {\n  Any  (str) *: {\n    'tag': {\n      Any  (str) *: {\n        Optional  (str) reboot_state: <class 'str'>,\n        Optional  (str) pid: <class 'int'>,\n        Optional  (str) previous_pid: <class 'int'>,\n        'plugin_id': <class 'str'>,\n        Optional  (str) last_restart_date: <class 'str'>,\n        'internal_id': <class 'int'>,\n        'state': <class 'str'>,\n        Optional  (str) sap: <class 'int'>,\n        'process_name': <class 'str'>,\n        Optional  (str) last_terminate_reason: <class 'str'>,\n        Optional  (str) restart_count: <class 'int'>,\n        'state_start_date': <class 'str'>,\n        'uuid': <class 'str'>,\n        },\n      },\n    },\n  },\n}", "doc": "Parser for show system internal sysmgr service name <process>", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_system.py#L44", "class": "ShowSystemInternalSysmgrServiceName", "module_name": "show_system"}}, "show dot1x all details": {"ios": {"uid": "show_dot1x_all_details", "schema": "{\nOptional  (str) interfaces: {\n  Any  (str) *: {\n    Optional  (str) authenticator: {\n      'eap': {\n        'profile': <class 'str'>,\n        },\n      },\n    Optional  (str) credentials: <class 'str'>,\n    Optional  (str) supplicant: {\n      'eap': {\n        'profile': <class 'str'>,\n        },\n      },\n    Optional  (str) port_control: <class 'str'>,\n    Optional  (str) control_direction: <class 'str'>,\n    'interface': <class 'str'>,\n    Optional  (str) host_mode: <class 'str'>,\n    'pae': <class 'str'>,\n    Optional  (str) re_authentication: <class 'bool'>,\n    Optional  (str) clients: {\n      Any  (str) *: {\n        'eap_method': <class 'str'>,\n        Optional  (str) session: {\n          Any  (str) *: {\n            'auth_sm_state': <class 'str'>,\n            'auth_bend_sm_state': <class 'str'>,\n            'session_id': <class 'str'>,\n            },\n          },\n        'client': <class 'str'>,\n        },\n      },\n    Optional  (str) max_reauth_req: <class 'int'>,\n    Optional  (str) max_req: <class 'int'>,\n    Optional  (str) max_start: <class 'int'>,\n    Optional  (str) timeout: {\n      Optional  (str) supp_timeout: <class 'int'>,\n      Optional  (str) ratelimit_period: <class 'int'>,\n      Optional  (str) quiet_period: <class 'int'>,\n      Optional  (str) start_period: <class 'int'>,\n      Optional  (str) tx_period: <class 'int'>,\n      Optional  (str) re_auth_period: <class 'int'>,\n      Optional  (str) auth_period: <class 'int'>,\n      Optional  (str) server_timeout: <class 'int'>,\n      Optional  (str) held_period: <class 'int'>,\n      },\n    },\n  },\n'version': <class 'int'>,\n'system_auth_control': <class 'bool'>,\n}", "doc": "Parser for show dot1x all details", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_dot1x.py#L30", "class": "ShowDot1xAllDetail", "module_name": "show_dot1x"}, "iosxe": {"uid": "show_dot1x_all_details", "schema": "{\nOptional  (str) interfaces: {\n  Any  (str) *: {\n    Optional  (str) authenticator: {\n      'eap': {\n        'profile': <class 'str'>,\n        },\n      },\n    Optional  (str) credentials: <class 'str'>,\n    Optional  (str) supplicant: {\n      'eap': {\n        'profile': <class 'str'>,\n        },\n      },\n    Optional  (str) port_control: <class 'str'>,\n    Optional  (str) control_direction: <class 'str'>,\n    'interface': <class 'str'>,\n    Optional  (str) host_mode: <class 'str'>,\n    'pae': <class 'str'>,\n    Optional  (str) re_authentication: <class 'bool'>,\n    Optional  (str) clients: {\n      Any  (str) *: {\n        'eap_method': <class 'str'>,\n        Optional  (str) session: {\n          Any  (str) *: {\n            'auth_sm_state': <class 'str'>,\n            'auth_bend_sm_state': <class 'str'>,\n            'session_id': <class 'str'>,\n            },\n          },\n        'client': <class 'str'>,\n        },\n      },\n    Optional  (str) max_reauth_req: <class 'int'>,\n    Optional  (str) max_req: <class 'int'>,\n    Optional  (str) max_start: <class 'int'>,\n    Optional  (str) timeout: {\n      Optional  (str) supp_timeout: <class 'int'>,\n      Optional  (str) ratelimit_period: <class 'int'>,\n      Optional  (str) quiet_period: <class 'int'>,\n      Optional  (str) start_period: <class 'int'>,\n      Optional  (str) tx_period: <class 'int'>,\n      Optional  (str) re_auth_period: <class 'int'>,\n      Optional  (str) auth_period: <class 'int'>,\n      Optional  (str) server_timeout: <class 'int'>,\n      Optional  (str) held_period: <class 'int'>,\n      },\n    },\n  },\n'version': <class 'int'>,\n'system_auth_control': <class 'bool'>,\n}", "doc": "Parser for show dot1x all details", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_dot1x.py#L83", "class": "ShowDot1xAllDetail", "module_name": "show_dot1x"}}, "show platform hardware slot {slot} plim statistics": {"ios": {"uid": "show_platform_hardware_slot_slot_plim_statistics", "schema": "{\nOptional  (str) slot: {\n  Any  (str) *: {\n    'subslot': {\n      Any  (str) *: {\n        'transmitted': {\n          Optional  (str) spi4_interrupt_counters: {\n            'frame_error': <class 'int'>,\n            'fifo_over_flow': <class 'int'>,\n            'dip2_error': <class 'int'>,\n            'out_of_frame': <class 'int'>,\n            },\n          Optional  (str) ipc_pkts: <class 'int'>,\n          Optional  (str) bytes: <class 'int'>,\n          Optional  (str) ipc_bytes: <class 'int'>,\n          Optional  (str) ipc_err: <class 'int'>,\n          Optional  (str) pkts: <class 'int'>,\n          },\n        'received': {\n          Optional  (str) bytes: <class 'int'>,\n          Optional  (str) ipc_bytes: <class 'int'>,\n          Optional  (str) ipc_err: <class 'int'>,\n          Optional  (str) pkts: <class 'int'>,\n          Optional  (str) spi4_interrupt_counters: {\n            'sequence_error': <class 'int'>,\n            'burst_error': <class 'int'>,\n            'dip4_error': <class 'int'>,\n            'packet_gap_error': <class 'int'>,\n            'control_word_error': <class 'int'>,\n            'disabled': <class 'int'>,\n            'loss_of_sync': <class 'int'>,\n            'eop_abort': <class 'int'>,\n            'out_of_frame': <class 'int'>,\n            },\n          Optional  (str) ipc_pkts: <class 'int'>,\n          },\n        'name': <class 'str'>,\n        'status': <class 'str'>,\n        },\n      },\n    },\n  },\nOptional  (str) port: {\n  Any  (str) *: {\n    'transmitted': {\n      'low_priority': {\n        'dropped_bytes': <class 'int'>,\n        'bytes': <class 'int'>,\n        'pkts': <class 'int'>,\n        'dropped_pkts': <class 'int'>,\n        },\n      'high_priority': {\n        'dropped_bytes': <class 'int'>,\n        'bytes': <class 'int'>,\n        'pkts': <class 'int'>,\n        'dropped_pkts': <class 'int'>,\n        },\n      },\n    'received': {\n      'low_priority': {\n        'dropped_pkts': <class 'int'>,\n        'errored_bytes': <class 'int'>,\n        'pkts': <class 'int'>,\n        'errored_pkts': <class 'int'>,\n        'bytes': <class 'int'>,\n        'dropped_bytes': <class 'int'>,\n        },\n      'high_priority': {\n        'dropped_pkts': <class 'int'>,\n        'errored_bytes': <class 'int'>,\n        'pkts': <class 'int'>,\n        'errored_pkts': <class 'int'>,\n        'bytes': <class 'int'>,\n        'dropped_bytes': <class 'int'>,\n        },\n      },\n    },\n  },\n}", "doc": "Parser for show platform hardware port <x/x/x> plim statistics\n                  show platform hardware slot <x> plim statistics\n                  show platform hardware slot <x> plim statistics internal\n                  show platform hardware subslot <x/x> plim statistics", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_platform.py#L351", "class": "ShowPlatformHardwarePlim", "module_name": "show_platform"}, "iosxe": {"uid": "show_platform_hardware_slot_slot_plim_statistics", "schema": "{\nOptional  (str) slot: {\n  Any  (str) *: {\n    'subslot': {\n      Any  (str) *: {\n        'transmitted': {\n          Optional  (str) spi4_interrupt_counters: {\n            'frame_error': <class 'int'>,\n            'fifo_over_flow': <class 'int'>,\n            'dip2_error': <class 'int'>,\n            'out_of_frame': <class 'int'>,\n            },\n          Optional  (str) ipc_pkts: <class 'int'>,\n          Optional  (str) bytes: <class 'int'>,\n          Optional  (str) ipc_bytes: <class 'int'>,\n          Optional  (str) ipc_err: <class 'int'>,\n          Optional  (str) pkts: <class 'int'>,\n          },\n        'received': {\n          Optional  (str) bytes: <class 'int'>,\n          Optional  (str) ipc_bytes: <class 'int'>,\n          Optional  (str) ipc_err: <class 'int'>,\n          Optional  (str) pkts: <class 'int'>,\n          Optional  (str) spi4_interrupt_counters: {\n            'sequence_error': <class 'int'>,\n            'burst_error': <class 'int'>,\n            'dip4_error': <class 'int'>,\n            'packet_gap_error': <class 'int'>,\n            'control_word_error': <class 'int'>,\n            'disabled': <class 'int'>,\n            'loss_of_sync': <class 'int'>,\n            'eop_abort': <class 'int'>,\n            'out_of_frame': <class 'int'>,\n            },\n          Optional  (str) ipc_pkts: <class 'int'>,\n          },\n        'name': <class 'str'>,\n        'status': <class 'str'>,\n        },\n      },\n    },\n  },\nOptional  (str) port: {\n  Any  (str) *: {\n    'transmitted': {\n      'low_priority': {\n        'dropped_bytes': <class 'int'>,\n        'bytes': <class 'int'>,\n        'pkts': <class 'int'>,\n        'dropped_pkts': <class 'int'>,\n        },\n      'high_priority': {\n        'dropped_bytes': <class 'int'>,\n        'bytes': <class 'int'>,\n        'pkts': <class 'int'>,\n        'dropped_pkts': <class 'int'>,\n        },\n      },\n    'received': {\n      'low_priority': {\n        'dropped_pkts': <class 'int'>,\n        'errored_bytes': <class 'int'>,\n        'pkts': <class 'int'>,\n        'errored_pkts': <class 'int'>,\n        'bytes': <class 'int'>,\n        'dropped_bytes': <class 'int'>,\n        },\n      'high_priority': {\n        'dropped_pkts': <class 'int'>,\n        'errored_bytes': <class 'int'>,\n        'pkts': <class 'int'>,\n        'errored_pkts': <class 'int'>,\n        'bytes': <class 'int'>,\n        'dropped_bytes': <class 'int'>,\n        },\n      },\n    },\n  },\n}", "doc": "Parser for show platform hardware port <x/x/x> plim statistics\n                  show platform hardware slot <x> plim statistics\n                  show platform hardware slot <x> plim statistics internal\n                  show platform hardware subslot <x/x> plim statistics", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_platform.py#L2892", "class": "ShowPlatformHardwarePlim", "module_name": "show_platform"}}, "show lisp platform": {"iosxe": {"uid": "show_lisp_platform", "schema": "{\n'parallel_lisp_instance_limit': <class 'int'>,\n'current_config_style': <class 'str'>,\n'rloc_forwarding_support': {\n  'local': {\n    'ipv4': <class 'str'>,\n    'mac': <class 'str'>,\n    'ipv6': <class 'str'>,\n    },\n  'remote': {\n    'ipv4': <class 'str'>,\n    'mac': <class 'str'>,\n    'ipv6': <class 'str'>,\n    },\n  },\n'latest_supported_config_style': <class 'str'>,\n}", "doc": " Parser for \"show lisp platform\" ", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_lisp.py#L164", "class": "ShowLispPlatform", "module_name": "show_lisp"}}, "show interfaces {interface} counters": {"iosxe": {"uid": "show_interfaces_interface_counters", "schema": "{\n'interface': {\n  Any  (str) *: {\n    Any  (str) *: {\n      'name': <class 'str'>,\n      'octets': <class 'int'>,\n      'mcast_pkts': <class 'int'>,\n      'ucast_pkts': <class 'int'>,\n      'bcast_pkts': <class 'int'>,\n      },\n    },\n  },\n}", "doc": "parser for show interfaces <WORD> counters", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_interface.py#L2677", "class": "ShowInterfacesCounters", "module_name": "show_interface"}}, "show ipv6 pim vrf {vrf} interface": {"ios": {"uid": "show_ipv6_pim_vrf_vrf_interface", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'interface': {\n      Any  (str) *: {\n        'neighbor_count': <class 'int'>,\n        Optional  (str) address: <class 'list'>,\n        'dr_priority': <class 'int'>,\n        'hello_interval': <class 'int'>,\n        'pim_enabled': <class 'bool'>,\n        Optional  (str) dr_address: <class 'str'>,\n        },\n      },\n    },\n  },\n}", "doc": "Parser for:\n        show ipv6 pim interface\n        show ipv6 pim vrf <vrf> interface", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_pim.py#L31", "class": "ShowIpv6PimInterface", "module_name": "show_pim"}, "iosxe": {"uid": "show_ipv6_pim_vrf_vrf_interface", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'interface': {\n      Any  (str) *: {\n        'neighbor_count': <class 'int'>,\n        Optional  (str) address: <class 'list'>,\n        'dr_priority': <class 'int'>,\n        'hello_interval': <class 'int'>,\n        'pim_enabled': <class 'bool'>,\n        Optional  (str) dr_address: <class 'str'>,\n        },\n      },\n    },\n  },\n}", "doc": "Parser for:\n        show ipv6 pim interface\n        show ipv6 pim vrf <vrf> interface", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_pim.py#L48", "class": "ShowIpv6PimInterface", "module_name": "show_pim"}}, "show bgp instance all {vrf_type} all {af_type} process detail": {"iosxr": {"uid": "show_bgp_instance_all_vrf_type_all_af_type_process_detail", "schema": "{\n'instance': {\n  Any  (str) *: {\n    Optional  (str) vrf: {\n      Any  (str) *: {\n        Optional  (str) default_value_for_bmp_buffer_size: <class 'int'>,\n        Optional  (str) bestpath_cost_community_ignore: <class 'bool'>,\n        Optional  (str) current_limit_for_bmp_buffer_size: <class 'int'>,\n        Optional  (str) address_family: {\n          Any  (str) *: {\n            Optional  (str) table_bit_field_size: <class 'str'>,\n            Optional  (str) total_prefixes_scanned: <class 'str'>,\n            Optional  (str) chunk_elememt_size: <class 'str'>,\n            Optional  (str) prefix_scanned_per_segment: <class 'str'>,\n            Optional  (str) enabled: <class 'bool'>,\n            Optional  (str) num_of_scan_segments: <class 'str'>,\n            Optional  (str) graceful_restart: <class 'bool'>,\n            Optional  (str) nexthop_resolution_minimum_prefix_length: <class 'str'>,\n            Optional  (str) remote_local: {\n              Any  (str) *: {\n                Optional  (str) allocated: <class 'int'>,\n                Optional  (str) freed: <class 'int'>,\n                },\n              },\n            Optional  (str) advertise_inactive_routes: <class 'bool'>,\n            Optional  (str) main_table_version: <class 'str'>,\n            Optional  (str) ebgp_max_paths: <class 'int'>,\n            Optional  (str) table_version_synced_to_rib: <class 'str'>,\n            Optional  (str) ibgp_max_paths: <class 'int'>,\n            Optional  (str) table_version_acked_by_rib: <class 'str'>,\n            Optional  (str) total_paths: <class 'int'>,\n            Optional  (str) rib_has_not_converged: <class 'str'>,\n            Optional  (str) total_prefixes: <class 'int'>,\n            Optional  (str) rib_table_prefix_limit_reached: <class 'str'>,\n            Optional  (str) rib_table_prefix_limit_ver: <class 'str'>,\n            Optional  (str) permanent_network: <class 'str'>,\n            Optional  (str) current_vrf: <class 'str'>,\n            Optional  (str) dampening: <class 'bool'>,\n            Optional  (str) table_state: <class 'str'>,\n            Optional  (str) client_to_client_reflection: <class 'bool'>,\n            Optional  (str) state: <class 'str'>,\n            Optional  (str) dynamic_med: <class 'bool'>,\n            Optional  (str) prefixes_path: {\n              Any  (str) *: {\n                Optional  (str) number: <class 'int'>,\n                Optional  (str) mem_used: <class 'int'>,\n                },\n              },\n            Optional  (str) bgp_table_version: <class 'str'>,\n            Optional  (str) dynamic_med_int: <class 'str'>,\n            Optional  (str) thread: {\n              Any  (str) *: {\n                Optional  (str) triggers: {\n                  Any  (str) *: {\n                    Optional  (str) trig_tid: <class 'int'>,\n                    Optional  (str) ver: <class 'int'>,\n                    Optional  (str) tbl_ver: <class 'int'>,\n                    },\n                  },\n                },\n              },\n            Optional  (str) attribute_download: <class 'str'>,\n            Optional  (str) dynamic_med_timer: <class 'str'>,\n            Optional  (str) label_retention_timer_value: <class 'str'>,\n            Optional  (str) dynamic_med_periodic_timer: <class 'str'>,\n            Optional  (str) soft_reconfig_entries: <class 'str'>,\n            Optional  (str) scan_interval: <class 'str'>,\n            },\n          },\n        Optional  (str) current_utilization_of_bmp_buffer_limit: <class 'int'>,\n        Optional  (str) graceful_restart_restart_time: <class 'int'>,\n        Optional  (str) pool: {\n          Any  (str) *: {\n            Optional  (str) alloc: <class 'int'>,\n            Optional  (str) free: <class 'int'>,\n            },\n          },\n        Optional  (str) enforce_first_as: <class 'bool'>,\n        Optional  (str) log_neighbor_changes: <class 'bool'>,\n        Optional  (str) default_local_preference: <class 'int'>,\n        Optional  (str) graceful_restart_helper_only: <class 'bool'>,\n        Optional  (str) default_keepalive: <class 'int'>,\n        Optional  (str) non_stop_routing: <class 'bool'>,\n        Optional  (str) message_logging_pool_summary: {\n          Any  (str) *: {\n            Optional  (str) free: <class 'int'>,\n            Optional  (str) alloc: <class 'int'>,\n            },\n          },\n        Optional  (str) graceful_restart_stalepath_time: <class 'int'>,\n        Optional  (str) update_delay: <class 'int'>,\n        Optional  (str) graceful_restart: <class 'bool'>,\n        Optional  (str) log_neighbor_changes: <class 'bool'>,\n        Optional  (str) generic_scan_interval: <class 'int'>,\n        Optional  (str) operation_mode: <class 'str'>,\n        Optional  (str) bgp_speaker_process: <class 'int'>,\n        Optional  (str) route_distinguisher: <class 'str'>,\n        Optional  (str) node: <class 'str'>,\n        Optional  (str) router_id: <class 'str'>,\n        Optional  (str) bmp_pool_summary: {\n          Any  (str) *: {\n            Optional  (str) alloc: <class 'int'>,\n            Optional  (str) free: <class 'int'>,\n            },\n          },\n        Optional  (str) restart_count: <class 'int'>,\n        Optional  (str) as_system_number_format: <class 'str'>,\n        Optional  (str) sent_updates: <class 'int'>,\n        Optional  (str) as_number: <class 'int'>,\n        Optional  (str) vrf_info: {\n          Any  (str) *: {\n            Optional  (str) total: <class 'int'>,\n            Optional  (str) nbrs_estab: <class 'int'>,\n            Optional  (str) cfg: <class 'int'>,\n            },\n          },\n        Optional  (str) received_updates: <class 'int'>,\n        Optional  (str) default_cluster_id: <class 'str'>,\n        Optional  (str) bestpath_med_missing_at_worst: <class 'bool'>,\n        Optional  (str) sent_notifications: <class 'int'>,\n        Optional  (str) active_cluster_id: <class 'str'>,\n        Optional  (str) received_notifications: <class 'int'>,\n        Optional  (str) fast_external_fallover: <class 'bool'>,\n        Optional  (str) always_compare_med: <class 'bool'>,\n        Optional  (str) platform_rlimit_max: <class 'int'>,\n        Optional  (str) att: {\n          Any  (str) *: {\n            Optional  (str) number: <class 'int'>,\n            Optional  (str) memory_used: <class 'int'>,\n            },\n          },\n        Optional  (str) bestpath_compare_routerid: <class 'bool'>,\n        Optional  (str) max_limit_for_bmp_buffer_size: <class 'int'>,\n        },\n      },\n    },\n  },\n}", "doc": "Parser for:\n        show bgp instance all all all process detail\n        show bgp instance all vrf all process detail\n        show bgp instance all vrf all ipv4 unicast process detail\n        show bgp instance all vrf all ipv6 unicast process detail\n        parser class - implements detail parsing mechanisms for cli, yang output.\n        If there is output args in cli ,need to have below key(s) that are mandatory and used in this parser.\n\n        - vrf_type\n\n    ", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_bgp.py#L985", "class": "ShowBgpInstanceProcessDetail", "module_name": "show_bgp"}}, "show fabric multicast ipv4 l2-mroute vni {vni}": {"nxos": {"uid": "show_fabric_multicast_ipv4_l2-mroute_vni_vni", "schema": "{\n'multicast': {\n  'l2_mroute': {\n    'vni': {\n      Any  (str) *: {\n        Optional  (str) fabric_l2_mroutes: {\n          'gaddr': {\n            Any  (str) *: {\n              'saddr': {\n                Any  (str) *: {\n                  'interested_fabric_nodes': {\n                    Any  (str) *: {\n                      'node': <class 'str'>,\n                      },\n                    },\n                  },\n                },\n              },\n            },\n          },\n        'vnid': <class 'str'>,\n        },\n      },\n    },\n  },\n}", "doc": "parser for:\n        show fabric multicast ipv4 l2-mroute\n        show fabric multicast ipv4 l2-mroute vni <vni>\n        show fabric multicast ipv4 l2-mroute vni all", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_vxlan.py#L2138", "class": "ShowFabricMulticastIpL2Mroute", "module_name": "show_vxlan"}}, "show ip bgp {address_family} all neighbors {neighbor} advertised-routes": {"iosxe": {"uid": "show_ip_bgp_address_family_all_neighbors_neighbor_advertised-routes", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'neighbor': {\n      Any  (str) *: {\n        'address_family': {\n          Any  (str) *: {\n            Optional  (str) route_distinguisher: <class 'str'>,\n            Optional  (str) bgp_table_version: <class 'int'>,\n            Optional  (str) default_vrf: <class 'str'>,\n            Optional  (str) local_router_id: <class 'str'>,\n            Optional  (str) advertised: {\n              Optional  (Any) Any  (str) *: {\n                Optional  (str) index: {\n                  Optional  (Any) Any  (str) *: {\n                    Optional  (str) origin_codes: <class 'str'>,\n                    Optional  (str) metric: <class 'int'>,\n                    Optional  (str) localprf: <class 'int'>,\n                    Optional  (str) next_hop: <class 'str'>,\n                    Optional  (str) weight: <class 'int'>,\n                    Optional  (str) status_codes: <class 'str'>,\n                    Optional  (str) path: <class 'str'>,\n                    Optional  (str) path_type: <class 'str'>,\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "doc": " Parser for:\n        * 'show ip bgp all neighbors {neighbor} advertised-routes'\n        * 'show ip bgp {address_family} all neighbors {neighbor} advertised-routes'\n    ", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_bgp.py#L4520", "class": "ShowIpBgpAllNeighborsAdvertisedRoutes", "module_name": "show_bgp"}}, "show issu state detail": {"iosxe": {"uid": "show_issu_state_detail", "schema": "{\n'slot': {\n  Any  (str) *: {\n    'issu_in_progress': <class 'bool'>,\n    Optional  (str) rollback_reason: <class 'str'>,\n    Optional  (str) loadversion_time: <class 'str'>,\n    Optional  (str) original_rollback_image: <class 'str'>,\n    Optional  (str) running_image: <class 'str'>,\n    Optional  (str) operating_mode: <class 'str'>,\n    Optional  (str) runversion_executed: <class 'bool'>,\n    Optional  (str) terminal_state_reached: <class 'bool'>,\n    Optional  (str) context: <class 'str'>,\n    Optional  (str) last_operation: <class 'str'>,\n    Optional  (str) rollback_state: <class 'str'>,\n    Optional  (str) rollback_time: <class 'str'>,\n    },\n  },\n}", "doc": "Parser for show issu state detail", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_issu.py#L49", "class": "ShowIssuStateDetail", "module_name": "show_issu"}}, "show lldp interface {interface}": {"ios": {"uid": "show_lldp_interface_interface", "schema": "{\n'interfaces': {\n  Any  (str) *: {\n    'rx': <class 'str'>,\n    'rx_state': <class 'str'>,\n    'tx': <class 'str'>,\n    'tx_state': <class 'str'>,\n    },\n  },\n}", "doc": "Parser for show lldp interface [<WORD>]", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_lldp.py#L33", "class": "ShowLldpInterface", "module_name": "show_lldp"}, "iosxe": {"uid": "show_lldp_interface_interface", "schema": "{\n'interfaces': {\n  Any  (str) *: {\n    'rx': <class 'str'>,\n    'rx_state': <class 'str'>,\n    'tx': <class 'str'>,\n    'tx_state': <class 'str'>,\n    },\n  },\n}", "doc": "Parser for show lldp interface [<WORD>]", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_lldp.py#L418", "class": "ShowLldpInterface", "module_name": "show_lldp"}}, "show ip ospf neighbor detail": {"ios": {"uid": "show_ip_ospf_neighbor_detail", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'address_family': {\n      Any  (str) *: {\n        'instance': {\n          Any  (str) *: {\n            'areas': {\n              Any  (str) *: {\n                Optional  (str) virtual_links: {\n                  Any  (str) *: {\n                    'neighbors': {\n                      Any  (str) *: {\n                        Optional  (str) first: <class 'str'>,\n                        'dr_ip_addr': <class 'str'>,\n                        Optional  (str) interface_id: <class 'str'>,\n                        'priority': <class 'int'>,\n                        Optional  (str) ls_ack_list: <class 'str'>,\n                        'address': <class 'str'>,\n                        Optional  (str) next: <class 'str'>,\n                        'interface': <class 'str'>,\n                        'bdr_ip_addr': <class 'str'>,\n                        'state': <class 'str'>,\n                        Optional  (str) dbd_options: <class 'str'>,\n                        Optional  (str) hello_options: <class 'str'>,\n                        Optional  (str) statistics: {\n                          Optional  (str) total_retransmission: <class 'int'>,\n                          Optional  (str) last_retrans_scan_length: <class 'int'>,\n                          Optional  (str) last_retrans_max_scan_length: <class 'int'>,\n                          Optional  (str) nbr_event_count: <class 'int'>,\n                          Optional  (str) last_retrans_scan_time_msec: <class 'int'>,\n                          Optional  (str) nbr_retrans_qlen: <class 'int'>,\n                          Optional  (str) last_retrans_max_scan_time_msec: <class 'int'>,\n                          },\n                        'neighbor_router_id': <class 'str'>,\n                        Optional  (str) uptime: <class 'str'>,\n                        Optional  (str) index: <class 'str'>,\n                        Optional  (str) dead_timer: <class 'str'>,\n                        },\n                      },\n                    },\n                  },\n                Optional  (str) interfaces: {\n                  Any  (str) *: {\n                    'neighbors': {\n                      Any  (str) *: {\n                        'dr_ip_addr': <class 'str'>,\n                        Optional  (str) dbd_options: <class 'str'>,\n                        Optional  (str) dead_timer: <class 'str'>,\n                        'priority': <class 'int'>,\n                        'address': <class 'str'>,\n                        Optional  (str) uptime: <class 'str'>,\n                        'interface': <class 'str'>,\n                        Optional  (str) index: <class 'str'>,\n                        'bdr_ip_addr': <class 'str'>,\n                        'state': <class 'str'>,\n                        Optional  (str) statistics: {\n                          Optional  (str) total_retransmission: <class 'int'>,\n                          Optional  (str) last_retrans_scan_length: <class 'int'>,\n                          Optional  (str) last_retrans_max_scan_length: <class 'int'>,\n                          Optional  (str) nbr_event_count: <class 'int'>,\n                          Optional  (str) last_retrans_scan_time_msec: <class 'int'>,\n                          Optional  (str) nbr_retrans_qlen: <class 'int'>,\n                          Optional  (str) last_retrans_max_scan_time_msec: <class 'int'>,\n                          },\n                        Optional  (str) next: <class 'str'>,\n                        'neighbor_router_id': <class 'str'>,\n                        Optional  (str) interface_id: <class 'str'>,\n                        Optional  (str) first: <class 'str'>,\n                        Optional  (str) ls_ack_list: <class 'str'>,\n                        Optional  (str) hello_options: <class 'str'>,\n                        },\n                      },\n                    },\n                  },\n                Optional  (str) sham_links: {\n                  Any  (str) *: {\n                    'neighbors': {\n                      Any  (str) *: {\n                        'dr_ip_addr': <class 'str'>,\n                        Optional  (str) dead_timer: <class 'str'>,\n                        Optional  (str) hello_options: <class 'str'>,\n                        'priority': <class 'int'>,\n                        Optional  (str) interface_id: <class 'str'>,\n                        'address': <class 'str'>,\n                        'interface': <class 'str'>,\n                        'bdr_ip_addr': <class 'str'>,\n                        Optional  (str) uptime: <class 'str'>,\n                        'state': <class 'str'>,\n                        Optional  (str) dbd_options: <class 'str'>,\n                        Optional  (str) index: <class 'str'>,\n                        Optional  (str) statistics: {\n                          Optional  (str) last_retrans_max_scan_length: <class 'int'>,\n                          Optional  (str) nbr_event_count: <class 'int'>,\n                          Optional  (str) last_retrans_scan_time_msec: <class 'int'>,\n                          Optional  (str) nbr_retrans_qlen: <class 'int'>,\n                          Optional  (str) last_retrans_max_scan_time_msec: <class 'int'>,\n                          Optional  (str) total_retransmission: <class 'int'>,\n                          Optional  (str) last_retrans_scan_length: <class 'int'>,\n                          },\n                        'neighbor_router_id': <class 'str'>,\n                        Optional  (str) first: <class 'str'>,\n                        Optional  (str) next: <class 'str'>,\n                        Optional  (str) ls_ack_list: <class 'str'>,\n                        },\n                      },\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "doc": " Parser for \"show ip ospf neighbor detail\" ", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_ospf.py#L67", "class": "ShowIpOspfNeighborDetail", "module_name": "show_ospf"}, "iosxe": {"uid": "show_ip_ospf_neighbor_detail", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'address_family': {\n      Any  (str) *: {\n        'instance': {\n          Any  (str) *: {\n            'areas': {\n              Any  (str) *: {\n                Optional  (str) virtual_links: {\n                  Any  (str) *: {\n                    'neighbors': {\n                      Any  (str) *: {\n                        Optional  (str) first: <class 'str'>,\n                        'dr_ip_addr': <class 'str'>,\n                        Optional  (str) interface_id: <class 'str'>,\n                        'priority': <class 'int'>,\n                        Optional  (str) ls_ack_list: <class 'str'>,\n                        'address': <class 'str'>,\n                        Optional  (str) next: <class 'str'>,\n                        'interface': <class 'str'>,\n                        'bdr_ip_addr': <class 'str'>,\n                        'state': <class 'str'>,\n                        Optional  (str) dbd_options: <class 'str'>,\n                        Optional  (str) hello_options: <class 'str'>,\n                        Optional  (str) statistics: {\n                          Optional  (str) total_retransmission: <class 'int'>,\n                          Optional  (str) last_retrans_scan_length: <class 'int'>,\n                          Optional  (str) last_retrans_max_scan_length: <class 'int'>,\n                          Optional  (str) nbr_event_count: <class 'int'>,\n                          Optional  (str) last_retrans_scan_time_msec: <class 'int'>,\n                          Optional  (str) nbr_retrans_qlen: <class 'int'>,\n                          Optional  (str) last_retrans_max_scan_time_msec: <class 'int'>,\n                          },\n                        'neighbor_router_id': <class 'str'>,\n                        Optional  (str) uptime: <class 'str'>,\n                        Optional  (str) index: <class 'str'>,\n                        Optional  (str) dead_timer: <class 'str'>,\n                        },\n                      },\n                    },\n                  },\n                Optional  (str) interfaces: {\n                  Any  (str) *: {\n                    'neighbors': {\n                      Any  (str) *: {\n                        'dr_ip_addr': <class 'str'>,\n                        Optional  (str) dbd_options: <class 'str'>,\n                        Optional  (str) dead_timer: <class 'str'>,\n                        'priority': <class 'int'>,\n                        'address': <class 'str'>,\n                        Optional  (str) uptime: <class 'str'>,\n                        'interface': <class 'str'>,\n                        Optional  (str) index: <class 'str'>,\n                        'bdr_ip_addr': <class 'str'>,\n                        'state': <class 'str'>,\n                        Optional  (str) statistics: {\n                          Optional  (str) total_retransmission: <class 'int'>,\n                          Optional  (str) last_retrans_scan_length: <class 'int'>,\n                          Optional  (str) last_retrans_max_scan_length: <class 'int'>,\n                          Optional  (str) nbr_event_count: <class 'int'>,\n                          Optional  (str) last_retrans_scan_time_msec: <class 'int'>,\n                          Optional  (str) nbr_retrans_qlen: <class 'int'>,\n                          Optional  (str) last_retrans_max_scan_time_msec: <class 'int'>,\n                          },\n                        Optional  (str) next: <class 'str'>,\n                        'neighbor_router_id': <class 'str'>,\n                        Optional  (str) interface_id: <class 'str'>,\n                        Optional  (str) first: <class 'str'>,\n                        Optional  (str) ls_ack_list: <class 'str'>,\n                        Optional  (str) hello_options: <class 'str'>,\n                        },\n                      },\n                    },\n                  },\n                Optional  (str) sham_links: {\n                  Any  (str) *: {\n                    'neighbors': {\n                      Any  (str) *: {\n                        'dr_ip_addr': <class 'str'>,\n                        Optional  (str) dead_timer: <class 'str'>,\n                        Optional  (str) hello_options: <class 'str'>,\n                        'priority': <class 'int'>,\n                        Optional  (str) interface_id: <class 'str'>,\n                        'address': <class 'str'>,\n                        'interface': <class 'str'>,\n                        'bdr_ip_addr': <class 'str'>,\n                        Optional  (str) uptime: <class 'str'>,\n                        'state': <class 'str'>,\n                        Optional  (str) dbd_options: <class 'str'>,\n                        Optional  (str) index: <class 'str'>,\n                        Optional  (str) statistics: {\n                          Optional  (str) last_retrans_max_scan_length: <class 'int'>,\n                          Optional  (str) nbr_event_count: <class 'int'>,\n                          Optional  (str) last_retrans_scan_time_msec: <class 'int'>,\n                          Optional  (str) nbr_retrans_qlen: <class 'int'>,\n                          Optional  (str) last_retrans_max_scan_time_msec: <class 'int'>,\n                          Optional  (str) total_retransmission: <class 'int'>,\n                          Optional  (str) last_retrans_scan_length: <class 'int'>,\n                          },\n                        'neighbor_router_id': <class 'str'>,\n                        Optional  (str) first: <class 'str'>,\n                        Optional  (str) next: <class 'str'>,\n                        Optional  (str) ls_ack_list: <class 'str'>,\n                        },\n                      },\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "doc": " Parser for:\n        * 'show ip ospf neighbor detail'\n    ", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_ospf.py#L2772", "class": "ShowIpOspfNeighborDetail", "module_name": "show_ospf"}}, "show running-config {feature} | sec {vrf} | inc {pip_str}": {"nxos": {"uid": "show_running-config_feature___sec_vrf___inc_pip_str", "schema": "{\nOptional  (str) vrf: {\n  Any  (str) *: {\n    Optional  (str) address_family: {\n      Any  (str) *: {\n        Optional  (str) rp: {\n          Optional  (str) bsr: {\n            Any  (str) *: {\n              Optional  (str) priority: <class 'int'>,\n              Optional  (str) interval: <class 'int'>,\n              Optional  (str) interface: <class 'str'>,\n              Optional  (str) route_map: <class 'str'>,\n              Optional  (str) policy: <class 'str'>,\n              Optional  (str) prefix_list: <class 'str'>,\n              Optional  (str) mode: <class 'str'>,\n              },\n            },\n          Optional  (str) autorp: {\n            Optional  (str) send_rp_discovery: {\n              Optional  (str) scope: <class 'int'>,\n              'interface': <class 'str'>,\n              },\n            Optional  (str) send_rp_announce: {\n              Optional  (str) scope: <class 'int'>,\n              Optional  (str) bidir: <class 'bool'>,\n              Optional  (str) group_list: <class 'str'>,\n              Optional  (str) route_map: <class 'str'>,\n              Optional  (str) interface: <class 'str'>,\n              Optional  (str) prefix_list: <class 'str'>,\n              Optional  (str) group: <class 'str'>,\n              Optional  (str) interval: <class 'int'>,\n              },\n            Optional  (str) listener: <class 'bool'>,\n            },\n          Optional  (str) static_rp: {\n            Any  (str) *: {\n              Optional  (str) bidir: <class 'bool'>,\n              Optional  (str) policy_name: <class 'str'>,\n              Optional  (str) route_map: <class 'str'>,\n              Optional  (str) override: <class 'bool'>,\n              Optional  (str) prefix_list: <class 'str'>,\n              Optional  (str) policy: <class 'int'>,\n              },\n            },\n          },\n        },\n      },\n    },\n  },\nOptional  (str) feature_pim6: <class 'bool'>,\nOptional  (str) feature_pim: <class 'bool'>,\n}", "doc": "Parser for show running-config pim", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_pim.py#L4188", "class": "ShowRunningConfigPim", "module_name": "show_pim"}}, "show nve ethernet-segment": {"nxos": {"uid": "show_nve_ethernet-segment", "schema": "{\n'nve': {\n  Any  (str) *: {\n    'ethernet_segment': {\n      'esi': {\n        Any  (str) *: {\n          'nve_if_name': <class 'str'>,\n          'es_state': <class 'str'>,\n          'if_name': <class 'str'>,\n          'nve_state': <class 'str'>,\n          Optional  (str) df_vlans: <class 'str'>,\n          'cc_timer_left': <class 'str'>,\n          Optional  (str) local_ordinal: <class 'int'>,\n          'po_state': <class 'str'>,\n          Optional  (str) df_list: <class 'str'>,\n          'ead_evi_rt_timer_age': <class 'str'>,\n          'host_reach_mode': <class 'str'>,\n          'ead_rt_added': <class 'bool'>,\n          'num_es_mem': <class 'int'>,\n          'cc_failed_vlans': <class 'str'>,\n          'active_vlans': <class 'str'>,\n          'esi': <class 'str'>,\n          'config_status': <class 'str'>,\n          'active_vnis': <class 'str'>,\n          'df_timer_st': <class 'str'>,\n          'es_rt_added': <class 'bool'>,\n          },\n        },\n      },\n    },\n  },\n}", "doc": "parser for:\n        show nve ethernet-segment", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_vxlan.py#L746", "class": "ShowNveEthernetSegment", "module_name": "show_vxlan"}}, "show lisp all instance-id {instance_id} dynamic-eid detail": {"iosxe": {"uid": "show_lisp_all_instance-id_instance_id_dynamic-eid_detail", "schema": "{\n'lisp_router_instances': {\n  Any  (str) *: {\n    Optional  (str) service: {\n      Any  (str) *: {\n        'etr': {\n          'local_eids': {\n            Any  (str) *: {\n              'dynamic_eids': {\n                Any  (str) *: {\n                  'dynamic_eid_name': <class 'str'>,\n                  Optional  (str) site_based_multicast_map_notify_group: <class 'str'>,\n                  Optional  (str) weight: <class 'int'>,\n                  Optional  (str) proxy_reply: <class 'bool'>,\n                  Optional  (str) registration_interval: <class 'int'>,\n                  Optional  (str) global_map_server: <class 'bool'>,\n                  Optional  (str) registering_more_specific: <class 'bool'>,\n                  Optional  (str) eid_address: {\n                    Optional  (str) address_type: <class 'str'>,\n                    Optional  (str) virtual_network_id: <class 'str'>,\n                    },\n                  Optional  (str) num_of_roaming_dynamic_eid: <class 'int'>,\n                  Optional  (str) loopback_address: <class 'str'>,\n                  Optional  (str) priority: <class 'int'>,\n                  'id': <class 'str'>,\n                  'rlocs': <class 'str'>,\n                  Optional  (str) mapping_servers: {\n                    Any  (str) *: {\n                      Optional  (str) proxy_reply: <class 'bool'>,\n                      },\n                    },\n                  Optional  (str) record_ttl: <class 'int'>,\n                  Optional  (str) last_dynamic_eid: {\n                    Any  (str) *: {\n                      'last_dynamic_eid_discovery_elaps_time': <class 'str'>,\n                      'eids': {\n                        Any  (str) *: {\n                          'discovered_by': <class 'str'>,\n                          'interface': <class 'str'>,\n                          'uptime': <class 'str'>,\n                          'last_activity': <class 'str'>,\n                          },\n                        },\n                      },\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "doc": " Parser for \"show lisp all instance-id <instance_id> dynamic-eid detail\"", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_lisp.py#L465", "class": "ShowLispDynamicEidDetail", "module_name": "show_lisp"}}, "show nve vni summary": {"nxos": {"uid": "show_nve_vni_summary", "schema": "{\n'vni': {\n  'summary': {\n    'cp_vni_up': <class 'int'>,\n    'cp_vni_down': <class 'int'>,\n    'cp_vni_count': <class 'int'>,\n    'dp_vni_count': <class 'int'>,\n    'dp_vni_up': <class 'int'>,\n    'dp_vni_down': <class 'int'>,\n    },\n  },\n}", "doc": "Parser for :\n       show nve vni summary", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_vxlan.py#L121", "class": "ShowNveVniSummary", "module_name": "show_vxlan"}}, "show ip static-route multicast vrf all": {"nxos": {"uid": "show_ip_static-route_multicast_vrf_all", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'address_family': {\n      Any  (str) *: {\n        'mroute': {\n          Any  (str) *: {\n            'path': {\n              Any  (str) *: {\n                Optional  (str) vrf_id: <class 'str'>,\n                Optional  (str) interface_name: <class 'str'>,\n                Optional  (str) urib: <class 'bool'>,\n                'neighbor_address': <class 'str'>,\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "doc": "Parser for show ip static-route multicast vrf all", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_mcast.py#L437", "class": "ShowIpStaticRouteMulticast", "module_name": "show_mcast"}}, "show bgp {address_family} all summary": {"ios": {"uid": "show_bgp_address_family_all_summary", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    Optional  (str) neighbor: {\n      Any  (str) *: {\n        'address_family': {\n          Any  (str) *: {\n            Optional  (str) prefixes: {\n              'total_entries': <class 'int'>,\n              'memory_usage': <class 'int'>,\n              },\n            'msg_rcvd': <class 'int'>,\n            Optional  (str) path: {\n              'total_entries': <class 'int'>,\n              'memory_usage': <class 'int'>,\n              },\n            Optional  (str) cache_entries: {\n              Any  (str) *: {\n                'total_entries': <class 'int'>,\n                'memory_usage': <class 'int'>,\n                },\n              },\n            'input_queue': <class 'int'>,\n            'state_pfxrcd': <class 'str'>,\n            Optional  (str) entries: {\n              Any  (str) *: {\n                'total_entries': <class 'int'>,\n                'memory_usage': <class 'int'>,\n                },\n              },\n            Optional  (str) community_entries: {\n              'total_entries': <class 'int'>,\n              'memory_usage': <class 'int'>,\n              },\n            Optional  (str) attribute_entries: <class 'str'>,\n            'as': <class 'int'>,\n            Optional  (str) total_memory: <class 'int'>,\n            Optional  (str) activity_prefixes: <class 'str'>,\n            'tbl_ver': <class 'int'>,\n            Optional  (str) activity_paths: <class 'str'>,\n            Optional  (str) scan_interval: <class 'int'>,\n            'output_queue': <class 'int'>,\n            'msg_sent': <class 'int'>,\n            Optional  (str) route_identifier: <class 'str'>,\n            Optional  (str) local_as: <class 'int'>,\n            'up_down': <class 'str'>,\n            Optional  (str) bgp_table_version: <class 'int'>,\n            'version': <class 'int'>,\n            Optional  (str) routing_table_version: <class 'int'>,\n            },\n          },\n        },\n      },\n    },\n  },\n'bgp_id': <class 'int'>,\n}", "doc": "\n    Parser for show bgp All Summary\n    ", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_bgp.py#L60", "class": "ShowBgpAllSummary", "module_name": "show_bgp"}, "iosxe": {"uid": "show_bgp_address_family_all_summary", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    Optional  (str) neighbor: {\n      Any  (str) *: {\n        'address_family': {\n          Any  (str) *: {\n            Optional  (str) prefixes: {\n              'total_entries': <class 'int'>,\n              'memory_usage': <class 'int'>,\n              },\n            'msg_rcvd': <class 'int'>,\n            Optional  (str) path: {\n              'total_entries': <class 'int'>,\n              'memory_usage': <class 'int'>,\n              },\n            Optional  (str) cache_entries: {\n              Any  (str) *: {\n                'total_entries': <class 'int'>,\n                'memory_usage': <class 'int'>,\n                },\n              },\n            'input_queue': <class 'int'>,\n            'state_pfxrcd': <class 'str'>,\n            Optional  (str) entries: {\n              Any  (str) *: {\n                'total_entries': <class 'int'>,\n                'memory_usage': <class 'int'>,\n                },\n              },\n            Optional  (str) community_entries: {\n              'total_entries': <class 'int'>,\n              'memory_usage': <class 'int'>,\n              },\n            Optional  (str) attribute_entries: <class 'str'>,\n            'as': <class 'int'>,\n            Optional  (str) total_memory: <class 'int'>,\n            Optional  (str) activity_prefixes: <class 'str'>,\n            'tbl_ver': <class 'int'>,\n            Optional  (str) activity_paths: <class 'str'>,\n            Optional  (str) scan_interval: <class 'int'>,\n            'output_queue': <class 'int'>,\n            'msg_sent': <class 'int'>,\n            Optional  (str) route_identifier: <class 'str'>,\n            Optional  (str) local_as: <class 'int'>,\n            'up_down': <class 'str'>,\n            Optional  (str) bgp_table_version: <class 'int'>,\n            'version': <class 'int'>,\n            Optional  (str) routing_table_version: <class 'int'>,\n            },\n          },\n        },\n      },\n    },\n  },\n'bgp_id': <class 'int'>,\n}", "doc": " Parser for:\n        * 'show bgp all summary'\n        * 'show bgp {address_family} all summary'\n    ", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_bgp.py#L2098", "class": "ShowBgpAllSummary", "module_name": "show_bgp"}}, "show ipv6 protocols vrf {vrf} | sec rip": {"iosxe": {"uid": "show_ipv6_protocols_vrf_vrf___sec_rip", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'address_family': {\n      Any  (str) *: {\n        Optional  (str) instance: {\n          Any  (str) *: {\n            Optional  (str) redistribute: {\n              Any  (str) *: {\n                Optional  (str) route_policy: <class 'str'>,\n                Optional  (str) metric: <class 'int'>,\n                },\n              },\n            Optional  (str) interfaces: {\n              Any  (str) *: {\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "doc": "Parser for :\n           show ipv6 protocols | sec rip\n           show ipv6 protocols vrf {vrf} | sec rip\n           ", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_protocols.py#L1128", "class": "ShowIpv6ProtocolsSectionRip", "module_name": "show_protocols"}}, "show ip bgp neighbors {neighbor} received-routes": {"iosxe": {"uid": "show_ip_bgp_neighbors_neighbor_received-routes", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'neighbor': {\n      Any  (str) *: {\n        'address_family': {\n          Any  (str) *: {\n            Optional  (str) received_routes: {\n              Optional  (Any) Any  (str) *: {\n                Optional  (str) index: {\n                  Optional  (Any) Any  (str) *: {\n                    Optional  (str) next_hop: <class 'str'>,\n                    Optional  (str) weight: <class 'int'>,\n                    Optional  (str) status_codes: <class 'str'>,\n                    Optional  (str) path: <class 'str'>,\n                    Optional  (str) path_type: <class 'str'>,\n                    Optional  (str) origin_codes: <class 'str'>,\n                    Optional  (str) metric: <class 'int'>,\n                    Optional  (str) localprf: <class 'int'>,\n                    },\n                  },\n                },\n              },\n            Optional  (str) route_distinguisher: <class 'str'>,\n            Optional  (str) bgp_table_version: <class 'int'>,\n            Optional  (str) default_vrf: <class 'str'>,\n            Optional  (str) local_router_id: <class 'str'>,\n            },\n          },\n        },\n      },\n    },\n  },\n}", "doc": " Parser for:\n        * 'show ip bgp neighbors {neighbor} received-routes'\n        * 'show ip bgp {address_family} neighbors {neighbor} received-routes'\n    ", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_bgp.py#L5160", "class": "ShowIpBgpNeighborsReceivedRoutes", "module_name": "show_bgp"}}, "show memory statistics": {"ios": {"uid": "show_memory_statistics", "schema": "{\nOptional  (str) tracekey: <class 'str'>,\n'name': {\n  Any  (str) *: {\n    'largest': <class 'int'>,\n    'used': <class 'int'>,\n    'head': <class 'str'>,\n    'lowest': <class 'int'>,\n    'total': <class 'int'>,\n    'free': <class 'int'>,\n    },\n  },\n}", "doc": "Parser for show memory statistics", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_memory.py#L7", "class": "ShowMemoryStatistics", "module_name": "show_memory"}, "iosxe": {"uid": "show_memory_statistics", "schema": "{\nOptional  (str) tracekey: <class 'str'>,\n'name': {\n  Any  (str) *: {\n    'largest': <class 'int'>,\n    'used': <class 'int'>,\n    'head': <class 'str'>,\n    'lowest': <class 'int'>,\n    'total': <class 'int'>,\n    'free': <class 'int'>,\n    },\n  },\n}", "doc": "Parser for show memory statistics", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_memory.py#L35", "class": "ShowMemoryStatistics", "module_name": "show_memory"}}, "show checkpoint summary": {"nxos": {"uid": "show_checkpoint_summary", "schema": "{\n'checkpoint': {\n  Any  (str) *: {\n    'description': <class 'str'>,\n    'created_time': <class 'str'>,\n    'created_by': <class 'str'>,\n    'size': <class 'int'>,\n    },\n  },\n}", "doc": "Parser for show checkpoint summary", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_checkpoint.py#L30", "class": "ShowCheckpointSummary", "module_name": "show_checkpoint"}}, "show ip arp vrf {vrf}": {"ios": {"uid": "show_ip_arp_vrf_vrf", "schema": "{\n'interfaces': {\n  Any  (str) *: {\n    'ipv4': {\n      'neighbors': {\n        Any  (str) *: {\n          'ip': <class 'str'>,\n          'age': <class 'str'>,\n          'origin': <class 'str'>,\n          'protocol': <class 'str'>,\n          'type': <class 'str'>,\n          'link_layer_address': <class 'str'>,\n          },\n        },\n      },\n    },\n  },\n}", "doc": " Parser for show arp\n                  show ip arp <WROD>\n                  show ip arp vrf <vrf>\n                  show ip arp vrf <vrf> <WROD> ", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_arp.py#L27", "class": "ShowIpArp", "module_name": "show_arp"}}, "show ip igmp local-groups vrf {vrf}": {"nxos": {"uid": "show_ip_igmp_local-groups_vrf_vrf", "schema": "{\n'vrfs': {\n  Any  (str) *: {\n    Optional  (str) interface: {\n      Any  (str) *: {\n        Optional  (str) static_group: {\n          Any  (str) *: {\n            'source': <class 'str'>,\n            'group': <class 'str'>,\n            },\n          },\n        Optional  (str) join_group: {\n          Any  (str) *: {\n            'source': <class 'str'>,\n            'group': <class 'str'>,\n            },\n          },\n        'group': {\n          Any  (str) *: {\n            Optional  (str) type: <class 'str'>,\n            Optional  (str) source: {\n              Any  (str) *: {\n                'type': <class 'str'>,\n                'last_reporter': <class 'str'>,\n                },\n              },\n            Optional  (str) last_reporter: <class 'str'>,\n            },\n          },\n        },\n      },\n    },\n  },\n}", "doc": "Parser for:\n        show ip igmp local-groups\n        show ip igmp local-groups vrf all\n        show ip igmp local-groups vrf <vrf>", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_igmp.py#L1026", "class": "ShowIpIgmpLocalGroups", "module_name": "show_igmp"}}, "show {ip} route vrf {vrf} {protocol}": {"ios": {"uid": "show_ip_route_vrf_vrf_protocol", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    Optional  (str) address_family: {\n      Any  (str) *: {\n        'ip': {\n          Any  (str) *: {\n            Optional  (str) nexthop: {\n              Optional  (Any) Any  (str) *: {\n                Optional  (str) protocol: {\n                  Optional  (Any) Any  (str) *: {\n                    Optional  (str) candidate_default: <class 'bool'>,\n                    Optional  (str) metric: <class 'str'>,\n                    Optional  (str) route_table: <class 'str'>,\n                    Optional  (str) preference: <class 'str'>,\n                    Optional  (str) attribute: <class 'str'>,\n                    Optional  (str) uptime: <class 'str'>,\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "doc": "Parser for:\n        show ipv6 route bgp\n        show ipv6 route vrf <vrf> bgp", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_ip_route.py#L20", "class": "ShowIpv6Route", "module_name": "show_ip_route"}, "iosxe": {"uid": "show_ip_route_vrf_vrf_protocol", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    Optional  (str) address_family: {\n      Any  (str) *: {\n        'ip': {\n          Any  (str) *: {\n            Optional  (str) nexthop: {\n              Optional  (Any) Any  (str) *: {\n                Optional  (str) protocol: {\n                  Optional  (Any) Any  (str) *: {\n                    Optional  (str) candidate_default: <class 'bool'>,\n                    Optional  (str) metric: <class 'str'>,\n                    Optional  (str) route_table: <class 'str'>,\n                    Optional  (str) preference: <class 'str'>,\n                    Optional  (str) attribute: <class 'str'>,\n                    Optional  (str) uptime: <class 'str'>,\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "doc": "Parser for:\n        show ipv6 route bgp\n        show ipv6 route vrf <vrf> bgp", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_ip_route.py#L244", "class": "ShowIpv6Route", "module_name": "show_ip_route"}}, "show ipv6 neighbor detail vrf {vrf}": {"nxos": {"uid": "show_ipv6_neighbor_detail_vrf_vrf", "schema": "{\n'interfaces': {\n  Any  (str) *: {\n    'neighbors': {\n      Any  (str) *: {\n        'ip': <class 'str'>,\n        'age': <class 'str'>,\n        'origin': <class 'str'>,\n        Optional  (str) byte_count: <class 'int'>,\n        Optional  (str) preference: <class 'int'>,\n        Optional  (str) best: <class 'str'>,\n        Optional  (str) packet_count: <class 'int'>,\n        Optional  (str) throttled: <class 'str'>,\n        'link_layer_address': <class 'str'>,\n        Optional  (str) physical_interface: <class 'str'>,\n        },\n      },\n    'interface': <class 'str'>,\n    },\n  },\n}", "doc": "Parser for :\n        show ipv6 neighbor detail\n        show ipv6 neighbor detail vrf all\n        show ipv6 neighbor detail vrf <vrf>", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_nd.py#L60", "class": "ShowIpv6NeighborDetail", "module_name": "show_nd"}}, "show ospf mpls traffic-eng link": {"iosxr": {"uid": "show_ospf_mpls_traffic-eng_link", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'address_family': {\n      Any  (str) *: {\n        'instance': {\n          Any  (str) *: {\n            'mpls': {\n              'te': {\n                'router_id': <class 'str'>,\n                },\n              },\n            'areas': {\n              Any  (str) *: {\n                'mpls': {\n                  'te': {\n                    Optional  (str) area_instance: <class 'int'>,\n                    Optional  (str) total_links: <class 'int'>,\n                    'enable': <class 'bool'>,\n                    Optional  (str) link_fragments: {\n                      Any  (str) *: {\n                        'interface_address': <class 'str'>,\n                        'total_priority': <class 'int'>,\n                        'network_type': <class 'str'>,\n                        'extended_admin_groups': {\n                          Any  (str) *: {\n                            'value': <class 'int'>,\n                            },\n                          },\n                        'link_instance': <class 'int'>,\n                        'unreserved_bandwidths': {\n                          Any  (str) *: {\n                            'unreserved_bandwidth': <class 'int'>,\n                            'priority': <class 'int'>,\n                            },\n                          },\n                        'te_admin_metric': <class 'int'>,\n                        'link_id': <class 'str'>,\n                        'maximum_reservable_bandwidth': <class 'int'>,\n                        'total_extended_admin_group': <class 'int'>,\n                        'out_interface_id': <class 'int'>,\n                        'maximum_bandwidth': <class 'int'>,\n                        'affinity_bit': <class 'int'>,\n                        },\n                      },\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "doc": "Parser for show ospf mpls traffic-eng link", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_ospf.py#L2538", "class": "ShowOspfMplsTrafficEngLink", "module_name": "show_ospf"}}, "show mpls ldp parameters": {"iosxe": {"uid": "show_mpls_ldp_parameters", "schema": "{\n'discovery_targeted_hello': {\n  'holdtime': <class 'int'>,\n  'interval': <class 'int'>,\n  },\n'session_hold_time': <class 'int'>,\n'ldp_featureset_manager': {\n  Any  (str) *: {\n    'ldp_features': <class 'list'>,\n    },\n  },\n'discovery_hello': {\n  'holdtime': <class 'int'>,\n  'interval': <class 'int'>,\n  },\n'ldp_nsr': <class 'str'>,\n'ldp_loop_detection': <class 'str'>,\n'downstream_on_demand_max_hop_count': <class 'int'>,\n'version': <class 'int'>,\n'ldp_backoff': {\n  'maximum': <class 'int'>,\n  'initial': <class 'int'>,\n  },\n'keep_alive_interval': <class 'int'>,\n'ldp_for_targeted_sessions': <class 'bool'>,\n}", "doc": "Parser for show mpls ldp parameters", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_mpls.py#L74", "class": "ShowMplsLdpParameters", "module_name": "show_mpls"}}, "show interface brief": {"nxos": {"uid": "show_interface_brief", "schema": "{\n'interface': {\n  Optional  (str) loopback: {\n    Any  (str) *: {\n      Optional  (str) status: <class 'str'>,\n      Optional  (str) description: <class 'str'>,\n      },\n    },\n  Optional  (str) port: {\n    Any  (str) *: {\n      Optional  (str) vrf: <class 'str'>,\n      Optional  (str) speed: <class 'str'>,\n      Optional  (str) status: <class 'str'>,\n      Optional  (str) mtu: <class 'str'>,\n      Optional  (str) ip_address: <class 'str'>,\n      },\n    },\n  Optional  (str) port_channel: {\n    Any  (str) *: {\n      Optional  (str) mode: <class 'str'>,\n      Optional  (str) status: <class 'str'>,\n      Optional  (str) speed: <class 'str'>,\n      Optional  (str) vlan: <class 'str'>,\n      Optional  (str) reason: <class 'str'>,\n      Optional  (str) type: <class 'str'>,\n      Optional  (str) protocol: <class 'str'>,\n      },\n    },\n  'ethernet': {\n    Any  (str) *: {\n      'vlan': <class 'str'>,\n      'port_ch': <class 'str'>,\n      'reason': <class 'str'>,\n      'speed': <class 'str'>,\n      'type': <class 'str'>,\n      'mode': <class 'str'>,\n      'status': <class 'str'>,\n      },\n    },\n  },\n}", "doc": "Parser for show interface brief", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_interface.py#L2448", "class": "ShowInterfaceBrief", "module_name": "show_interface"}, "iosxr": {"uid": "show_interface_brief", "schema": "{\n'interface': {\n  Optional  (str) port: {\n    Any  (str) *: {\n      Optional  (str) status: <class 'str'>,\n      Optional  (str) bw: <class 'int'>,\n      Optional  (str) ip_address: <class 'str'>,\n      Optional  (str) speed: <class 'str'>,\n      Optional  (str) encap_type: <class 'str'>,\n      Optional  (str) vrf: <class 'str'>,\n      Optional  (str) mtu: <class 'str'>,\n      },\n    },\n  Optional  (str) ethernet: {\n    Any  (str) *: {\n      Optional  (str) speed: <class 'str'>,\n      Optional  (str) vlan: <class 'str'>,\n      Optional  (str) reason: <class 'str'>,\n      Optional  (str) port_ch: <class 'str'>,\n      Optional  (str) encap_type: <class 'str'>,\n      Optional  (str) type: <class 'str'>,\n      Optional  (str) mtu: <class 'str'>,\n      Optional  (str) mode: <class 'str'>,\n      Optional  (str) bw: <class 'int'>,\n      'status': <class 'str'>,\n      },\n    },\n  Optional  (str) port_channel: {\n    Any  (str) *: {\n      Optional  (str) encap_type: <class 'str'>,\n      Optional  (str) mode: <class 'str'>,\n      Optional  (str) mtu: <class 'str'>,\n      Optional  (str) status: <class 'str'>,\n      Optional  (str) bw: <class 'int'>,\n      Optional  (str) speed: <class 'str'>,\n      Optional  (str) protocol: <class 'str'>,\n      Optional  (str) vlan: <class 'str'>,\n      Optional  (str) reason: <class 'str'>,\n      Optional  (str) type: <class 'str'>,\n      },\n    },\n  Optional  (str) loopback: {\n    Any  (str) *: {\n      Optional  (str) description: <class 'str'>,\n      Optional  (str) encap_type: <class 'str'>,\n      Optional  (str) bw: <class 'int'>,\n      Optional  (str) mtu: <class 'str'>,\n      Optional  (str) status: <class 'str'>,\n      },\n    },\n  },\n}", "doc": "Parser for show interface brief", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_interface.py#L283", "class": "ShowInterfaceBrief", "module_name": "show_interface"}}, "show bgp {address_family} vrf {vrf} summary": {"iosxe": {"uid": "show_bgp_address_family_vrf_vrf_summary", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    Optional  (str) neighbor: {\n      Any  (str) *: {\n        'address_family': {\n          Any  (str) *: {\n            Optional  (str) prefixes: {\n              'total_entries': <class 'int'>,\n              'memory_usage': <class 'int'>,\n              },\n            'msg_rcvd': <class 'int'>,\n            Optional  (str) path: {\n              'total_entries': <class 'int'>,\n              'memory_usage': <class 'int'>,\n              },\n            Optional  (str) cache_entries: {\n              Any  (str) *: {\n                'total_entries': <class 'int'>,\n                'memory_usage': <class 'int'>,\n                },\n              },\n            'input_queue': <class 'int'>,\n            'state_pfxrcd': <class 'str'>,\n            Optional  (str) entries: {\n              Any  (str) *: {\n                'total_entries': <class 'int'>,\n                'memory_usage': <class 'int'>,\n                },\n              },\n            Optional  (str) community_entries: {\n              'total_entries': <class 'int'>,\n              'memory_usage': <class 'int'>,\n              },\n            Optional  (str) attribute_entries: <class 'str'>,\n            'as': <class 'int'>,\n            Optional  (str) total_memory: <class 'int'>,\n            Optional  (str) activity_prefixes: <class 'str'>,\n            'tbl_ver': <class 'int'>,\n            Optional  (str) activity_paths: <class 'str'>,\n            Optional  (str) scan_interval: <class 'int'>,\n            'output_queue': <class 'int'>,\n            'msg_sent': <class 'int'>,\n            Optional  (str) route_identifier: <class 'str'>,\n            Optional  (str) local_as: <class 'int'>,\n            'up_down': <class 'str'>,\n            Optional  (str) bgp_table_version: <class 'int'>,\n            'version': <class 'int'>,\n            Optional  (str) routing_table_version: <class 'int'>,\n            },\n          },\n        },\n      },\n    },\n  },\n'bgp_id': <class 'int'>,\n}", "doc": " Parser for:\n        * 'show bgp summary'\n        * 'show bgp {address_family} summary'\n        * 'show bgp {address_family} vrf {vrf} summary'\n        * 'show bgp {address_family} rd {rd} summary'\n    ", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_bgp.py#L2054", "class": "ShowBgpSummary", "module_name": "show_bgp"}}, "show static vrf {vrf} topology detail": {"iosxr": {"uid": "show_static_vrf_vrf_topology_detail", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    Optional  (str) address_family: {\n      Any  (str) *: {\n        Optional  (str) routes: {\n          Any  (str) *: {\n            Optional  (str) route: <class 'str'>,\n            Optional  (str) next_hop: {\n              Optional  (str) outgoing_interface: {\n                Any  (str) *: {\n                  Optional  (str) explicit_path: <class 'str'>,\n                  Optional  (str) tag: <class 'int'>,\n                  Optional  (str) preference: <class 'int'>,\n                  Optional  (str) outgoing_interface: <class 'str'>,\n                  Optional  (str) path_version: <class 'int'>,\n                  Optional  (str) active: <class 'bool'>,\n                  Optional  (str) path_status: <class 'str'>,\n                  Optional  (str) install_date: <class 'str'>,\n                  Optional  (str) metrics: <class 'int'>,\n                  Optional  (str) track: <class 'int'>,\n                  Optional  (str) configure_date: <class 'str'>,\n                  },\n                },\n              Optional  (str) next_hop_list: {\n                Any  (str) *: {\n                  Optional  (str) outgoing_interface: <class 'str'>,\n                  Optional  (str) preference: <class 'int'>,\n                  Optional  (str) install_date: <class 'str'>,\n                  Optional  (str) configure_date: <class 'str'>,\n                  Optional  (str) tag: <class 'int'>,\n                  Optional  (str) path_version: <class 'int'>,\n                  Optional  (str) path_status: <class 'str'>,\n                  Optional  (str) metrics: <class 'int'>,\n                  Optional  (str) index: <class 'int'>,\n                  Optional  (str) track: <class 'int'>,\n                  Optional  (str) active: <class 'bool'>,\n                  Optional  (str) explicit_path: <class 'str'>,\n                  Optional  (str) next_hop: <class 'str'>,\n                  },\n                },\n              },\n            },\n          },\n        Optional  (str) safi: <class 'str'>,\n        Optional  (str) table_id: <class 'str'>,\n        },\n      },\n    },\n  },\n}", "doc": "Parser for:\n       show static topology detail\n       show static vrf all topology detail\n       show static vrf <vrf> topology detail\n       show static vrf <vrf> ipv4 topology detail\n       show static ipv4 topology detail\n       show static ipv6 topology detail\n    ", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_static_routing.py#L77", "class": "ShowStaticTopologyDetail", "module_name": "show_static_routing"}}, "show ip ospf traffic": {"iosxe": {"uid": "show_ip_ospf_traffic", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'address_family': {\n      Any  (str) *: {\n        'instance': {\n          Any  (str) *: {\n            'ospf_queue_statistics': {\n              'max_size': {\n                'ls_ack': {\n                  'inputq': <class 'int'>,\n                  'updateq': <class 'int'>,\n                  'outputq': <class 'int'>,\n                  },\n                'total': {\n                  'inputq': <class 'int'>,\n                  'updateq': <class 'int'>,\n                  'outputq': <class 'int'>,\n                  },\n                'invalid': {\n                  'inputq': <class 'int'>,\n                  'updateq': <class 'int'>,\n                  'outputq': <class 'int'>,\n                  },\n                'db_des': {\n                  'inputq': <class 'int'>,\n                  'updateq': <class 'int'>,\n                  'outputq': <class 'int'>,\n                  },\n                'hello': {\n                  'inputq': <class 'int'>,\n                  'updateq': <class 'int'>,\n                  'outputq': <class 'int'>,\n                  },\n                'ls_req': {\n                  'inputq': <class 'int'>,\n                  'updateq': <class 'int'>,\n                  'outputq': <class 'int'>,\n                  },\n                'ls_upd': {\n                  'inputq': <class 'int'>,\n                  'updateq': <class 'int'>,\n                  'outputq': <class 'int'>,\n                  },\n                },\n              'current_size': {\n                'ls_ack': {\n                  'inputq': <class 'int'>,\n                  'updateq': <class 'int'>,\n                  'outputq': <class 'int'>,\n                  },\n                'total': {\n                  'inputq': <class 'int'>,\n                  'updateq': <class 'int'>,\n                  'outputq': <class 'int'>,\n                  },\n                'invalid': {\n                  'inputq': <class 'int'>,\n                  'updateq': <class 'int'>,\n                  'outputq': <class 'int'>,\n                  },\n                'db_des': {\n                  'inputq': <class 'int'>,\n                  'updateq': <class 'int'>,\n                  'outputq': <class 'int'>,\n                  },\n                'hello': {\n                  'inputq': <class 'int'>,\n                  'updateq': <class 'int'>,\n                  'outputq': <class 'int'>,\n                  },\n                'ls_req': {\n                  'inputq': <class 'int'>,\n                  'updateq': <class 'int'>,\n                  'outputq': <class 'int'>,\n                  },\n                'ls_upd': {\n                  'inputq': <class 'int'>,\n                  'updateq': <class 'int'>,\n                  'outputq': <class 'int'>,\n                  },\n                },\n              'limit': {\n                'inputq': <class 'int'>,\n                'updateq': <class 'int'>,\n                'outputq': <class 'int'>,\n                },\n              'drops': {\n                'inputq': <class 'int'>,\n                'updateq': <class 'int'>,\n                'outputq': <class 'int'>,\n                },\n              'max_delay_msec': {\n                'inputq': <class 'int'>,\n                'updateq': <class 'int'>,\n                'outputq': <class 'int'>,\n                },\n              },\n            'summary_traffic_statistics': {\n              'ospf_packets_received_sent': {\n                'type': {\n                  Any  (str) *: {\n                    'bytes': <class 'int'>,\n                    'packets': <class 'int'>,\n                    },\n                  },\n                },\n              'ospf_header_errors': {\n                'adjacency_throttle': <class 'int'>,\n                'instance_id': <class 'int'>,\n                'test_discard': <class 'int'>,\n                'lls': <class 'int'>,\n                'nbr_ignored': <class 'int'>,\n                'ttl_check_fail': <class 'int'>,\n                'unknown_neighbor': <class 'int'>,\n                'checksum': <class 'int'>,\n                'area_mismatch': <class 'int'>,\n                'duplicate_id': <class 'int'>,\n                'auth_type': <class 'int'>,\n                'bad_source': <class 'int'>,\n                'mtu_mismatch': <class 'int'>,\n                'authentication': <class 'int'>,\n                'self_originated': <class 'int'>,\n                'hello': <class 'int'>,\n                'length': <class 'int'>,\n                'no_virtual_link': <class 'int'>,\n                'bfd': <class 'int'>,\n                'version': <class 'int'>,\n                'no_sham_link': <class 'int'>,\n                },\n              'ospf_lsa_errors': {\n                'length': <class 'int'>,\n                'checksum': <class 'int'>,\n                'type': <class 'int'>,\n                'data': <class 'int'>,\n                },\n              },\n            'router_id': <class 'str'>,\n            'interface_statistics': {\n              'interfaces': {\n                Any  (str) *: {\n                  'ospf_packets_received_sent': {\n                    'type': {\n                      Any  (str) *: {\n                        'bytes': <class 'int'>,\n                        'packets': <class 'int'>,\n                        },\n                      },\n                    },\n                  'last_clear_traffic_counters': <class 'str'>,\n                  'ospf_header_errors': {\n                    'adjacency_throttle': <class 'int'>,\n                    'instance_id': <class 'int'>,\n                    'test_discard': <class 'int'>,\n                    'lls': <class 'int'>,\n                    'nbr_ignored': <class 'int'>,\n                    'ttl_check_fail': <class 'int'>,\n                    'unknown_neighbor': <class 'int'>,\n                    'checksum': <class 'int'>,\n                    'area_mismatch': <class 'int'>,\n                    'duplicate_id': <class 'int'>,\n                    'auth_type': <class 'int'>,\n                    'bad_source': <class 'int'>,\n                    'mtu_mismatch': <class 'int'>,\n                    'authentication': <class 'int'>,\n                    'self_originated': <class 'int'>,\n                    'hello': <class 'int'>,\n                    'length': <class 'int'>,\n                    'no_virtual_link': <class 'int'>,\n                    'bfd': <class 'int'>,\n                    'version': <class 'int'>,\n                    'no_sham_link': <class 'int'>,\n                    },\n                  'ospf_lsa_errors': {\n                    'length': <class 'int'>,\n                    'checksum': <class 'int'>,\n                    'type': <class 'int'>,\n                    'data': <class 'int'>,\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n'ospf_statistics': {\n  'sent': {\n    'link_state_updates': <class 'int'>,\n    'database_desc': <class 'int'>,\n    'total': <class 'int'>,\n    'hello': <class 'int'>,\n    'link_state_req': <class 'int'>,\n    'link_state_acks': <class 'int'>,\n    },\n  'last_clear_traffic_counters': <class 'str'>,\n  'rcvd': {\n    'checksum_errors': <class 'int'>,\n    'link_state_updates': <class 'int'>,\n    'database_desc': <class 'int'>,\n    'total': <class 'int'>,\n    'hello': <class 'int'>,\n    'link_state_req': <class 'int'>,\n    'link_state_acks': <class 'int'>,\n    },\n  },\n}", "doc": " Parser for:\n        * \"show ip ospf traffic\"\n    ", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_ospf.py#L5549", "class": "ShowIpOspfTraffic", "module_name": "show_ospf"}}, "show policy-map interface": {"iosxe": {"uid": "show_policy-map_interface", "schema": "{\n}", "doc": " Parser for\n        * 'show policy-map interface {interface} class {class_name}'\n        * 'show policy-map interface {interface}'\n        * 'show policy-map interface'\n    ", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_policy_map.py#L440", "class": "ShowPolicyMapInterface", "module_name": "show_policy_map"}}, "show bgp ipv4 mvpn route-type {route_type} vrf {vrf}": {"nxos": {"uid": "show_bgp_ipv4_mvpn_route-type_route_type_vrf_vrf", "schema": "{\n'instance': {\n  Any  (str) *: {\n    'vrf': {\n      Any  (str) *: {\n        'vrf_name_out': <class 'str'>,\n        'address_family': {\n          Any  (str) *: {\n            'router_id': <class 'str'>,\n            'table_version': <class 'str'>,\n            'af_name': <class 'str'>,\n            'rd': {\n              Any  (str) *: {\n                'prefix': {\n                  Any  (str) *: {\n                    'path': {\n                      Any  (str) *: {\n                        'origin': <class 'str'>,\n                        'pathnr': <class 'int'>,\n                        Optional  (str) bestcode: <class 'str'>,\n                        Optional  (str) statuscode: <class 'str'>,\n                        'localpref': <class 'str'>,\n                        'ipnexthop': <class 'str'>,\n                        Optional  (str) typecode: <class 'str'>,\n                        'weight': <class 'str'>,\n                        },\n                      },\n                    'nonipprefix': <class 'str'>,\n                    },\n                  },\n                Optional  (str) rd_vrf: <class 'str'>,\n                Optional  (str) rd_val: <class 'str'>,\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "doc": "Parser for:\n               show bgp ipv4 mvpn\n               show bgp ipv4 mvpn route-type <route_type>\n               show bgp ipv4 mvpn route-type <route_type> vrf <vrf>\n               show bgp ipv4 mvpn route-type <route_type> vrf all", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_bgp.py#L11020", "class": "ShowBgpIpMvpnRouteType", "module_name": "show_bgp"}}, "show ip access-lists {acl}": {"ios": {"uid": "show_ip_access-lists_acl", "schema": "{\nAny  (str) *: {\n  'type': <class 'str'>,\n  'name': <class 'str'>,\n  Optional  (str) per_user: <class 'bool'>,\n  Optional  (str) aces: {\n    Any  (str) *: {\n      'matches': {\n        Optional  (str) l4: {\n          Any  (str) *: {\n            Optional  (str) window_size: <class 'int'>,\n            Optional  (str) urgent_pointer: <class 'int'>,\n            Optional  (str) data_offset: <class 'int'>,\n            Optional  (str) options: <class 'int'>,\n            Optional  (str) destination_port: {\n              Optional  (str) operator: {\n                'port': <class 'int'>,\n                'operator': <class 'str'>,\n                },\n              Optional  (str) range: {\n                'upper_port': <class 'int'>,\n                'lower_port': <class 'int'>,\n                },\n              },\n            Optional  (str) source_port: {\n              Optional  (str) operator: {\n                'port': <class 'str'>,\n                'operator': <class 'str'>,\n                },\n              Optional  (str) range: {\n                'upper_port': <class 'int'>,\n                'lower_port': <class 'int'>,\n                },\n              },\n            Optional  (str) code: <class 'int'>,\n            Optional  (str) flags: <class 'str'>,\n            Optional  (str) acknowledgement_number: <class 'int'>,\n            Optional  (str) reserved: <class 'int'>,\n            Optional  (str) type: <class 'int'>,\n            Optional  (str) options_name: <class 'str'>,\n            Optional  (str) established: <class 'bool'>,\n            },\n          },\n        Optional  (str) l2: {\n          'eth': {\n            'destination_mac_address': <class 'str'>,\n            Optional  (str) vlan: <class 'int'>,\n            Optional  (str) lsap: <class 'str'>,\n            Optional  (str) protocol_family: <class 'str'>,\n            Optional  (str) ether_type: <class 'str'>,\n            Optional  (str) cos: <class 'int'>,\n            'source_mac_address': <class 'str'>,\n            },\n          },\n        Optional  (str) l3: {\n          Any  (str) *: {\n            'protocol': <class 'str'>,\n            Optional  (str) ttl: <class 'int'>,\n            'destination_network': {\n              Any  (str) *: {\n                'destination_network': <class 'str'>,\n                },\n              },\n            Optional  (str) precedence: <class 'str'>,\n            Optional  (str) ttl_operator: <class 'str'>,\n            Optional  (str) dscp: <class 'str'>,\n            'source_network': {\n              Any  (str) *: {\n                'source_network': <class 'str'>,\n                },\n              },\n            Optional  (str) precedence_code: <class 'int'>,\n            },\n          },\n        },\n      Optional  (str) statistics: {\n        'matched_packets': <class 'int'>,\n        },\n      'name': <class 'str'>,\n      'actions': {\n        'forwarding': <class 'str'>,\n        Optional  (str) logging: <class 'str'>,\n        },\n      },\n    },\n  },\n}", "doc": "Parser for show access-lists\n                  show ip access-lists\n                  show ip access-lists <acl>\n                  show ipv6 access-lists\n                  show ipv6 access-lists <acl>", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_acl.py#L9", "class": "ShowAccessLists", "module_name": "show_acl"}, "iosxe": {"uid": "show_ip_access-lists_acl", "schema": "{\nAny  (str) *: {\n  'type': <class 'str'>,\n  'name': <class 'str'>,\n  Optional  (str) per_user: <class 'bool'>,\n  Optional  (str) aces: {\n    Any  (str) *: {\n      'matches': {\n        Optional  (str) l4: {\n          Any  (str) *: {\n            Optional  (str) window_size: <class 'int'>,\n            Optional  (str) urgent_pointer: <class 'int'>,\n            Optional  (str) data_offset: <class 'int'>,\n            Optional  (str) options: <class 'int'>,\n            Optional  (str) destination_port: {\n              Optional  (str) operator: {\n                'port': <class 'int'>,\n                'operator': <class 'str'>,\n                },\n              Optional  (str) range: {\n                'upper_port': <class 'int'>,\n                'lower_port': <class 'int'>,\n                },\n              },\n            Optional  (str) source_port: {\n              Optional  (str) operator: {\n                'port': <class 'str'>,\n                'operator': <class 'str'>,\n                },\n              Optional  (str) range: {\n                'upper_port': <class 'int'>,\n                'lower_port': <class 'int'>,\n                },\n              },\n            Optional  (str) code: <class 'int'>,\n            Optional  (str) flags: <class 'str'>,\n            Optional  (str) acknowledgement_number: <class 'int'>,\n            Optional  (str) reserved: <class 'int'>,\n            Optional  (str) type: <class 'int'>,\n            Optional  (str) options_name: <class 'str'>,\n            Optional  (str) established: <class 'bool'>,\n            },\n          },\n        Optional  (str) l2: {\n          'eth': {\n            'destination_mac_address': <class 'str'>,\n            Optional  (str) vlan: <class 'int'>,\n            Optional  (str) lsap: <class 'str'>,\n            Optional  (str) protocol_family: <class 'str'>,\n            Optional  (str) ether_type: <class 'str'>,\n            Optional  (str) cos: <class 'int'>,\n            'source_mac_address': <class 'str'>,\n            },\n          },\n        Optional  (str) l3: {\n          Any  (str) *: {\n            'protocol': <class 'str'>,\n            Optional  (str) ttl: <class 'int'>,\n            'destination_network': {\n              Any  (str) *: {\n                'destination_network': <class 'str'>,\n                },\n              },\n            Optional  (str) precedence: <class 'str'>,\n            Optional  (str) ttl_operator: <class 'str'>,\n            Optional  (str) dscp: <class 'str'>,\n            'source_network': {\n              Any  (str) *: {\n                'source_network': <class 'str'>,\n                },\n              },\n            Optional  (str) precedence_code: <class 'int'>,\n            },\n          },\n        },\n      Optional  (str) statistics: {\n        'matched_packets': <class 'int'>,\n        },\n      'name': <class 'str'>,\n      'actions': {\n        'forwarding': <class 'str'>,\n        Optional  (str) logging: <class 'str'>,\n        },\n      },\n    },\n  },\n}", "doc": "Parser for show access-lists\n                  show ip access-lists\n                  show ip access-lists <acl>\n                  show ipv6 access-lists\n                  show ipv6 access-lists <acl>", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_acl.py#L118", "class": "ShowAccessLists", "module_name": "show_acl"}}, "show mpls ldp neighbor": {"iosxe": {"uid": "show_mpls_ldp_neighbor", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'peers': {\n      Any  (str) *: {\n        'label_space_id': {\n          Any  (str) *: {\n            Optional  (str) nsr: <class 'str'>,\n            'msg_rcvd': <class 'int'>,\n            'downstream': <class 'bool'>,\n            'tcp_connection': <class 'str'>,\n            Optional  (str) capabilities: {\n              'sent': {\n                'mldp_point_to_multipoint': <class 'str'>,\n                'typed_wildcard': <class 'str'>,\n                'ICCP': {\n                  'maj_ver': <class 'int'>,\n                  'type': <class 'str'>,\n                  'min_ver': <class 'int'>,\n                  },\n                'dynamic_anouncement': <class 'str'>,\n                'mldp_multipoint_to_multipoint': <class 'str'>,\n                },\n              Optional  (str) received: {\n                Optional  (str) typed_wildcard: <class 'str'>,\n                Optional  (str) mldp_point_to_multipoint: <class 'str'>,\n                Optional  (str) ICCP: {\n                  'maj_ver': <class 'int'>,\n                  'type': <class 'str'>,\n                  'min_ver': <class 'int'>,\n                  },\n                Optional  (str) mldp_multipoint_to_multipoint: <class 'str'>,\n                Optional  (str) dynamic_anouncement: <class 'str'>,\n                },\n              },\n            'msg_sent': <class 'int'>,\n            Optional  (str) last_tib_rev_sent: <class 'int'>,\n            'state': <class 'str'>,\n            'uptime': <class 'str'>,\n            'address_bound': <class 'list'>,\n            'local_ldp_ident': <class 'str'>,\n            Optional  (str) password: <class 'str'>,\n            Optional  (str) peer_holdtime_ms: <class 'str'>,\n            Optional  (str) ka_interval_ms: <class 'str'>,\n            Optional  (str) peer_state: <class 'str'>,\n            'ldp_discovery_sources': {\n              'interface': {\n                Any  (str) *: {\n                  'ip_address': {\n                    Any  (str) *: {\n                      Optional  (str) holdtime_ms: <class 'int'>,\n                      Optional  (str) hello_interval_ms: <class 'int'>,\n                      },\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "doc": "Parser for show mpls ldp neighbor,\n                  show mpls ldp neighbor vrf <vrf>", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_mpls.py#L765", "class": "ShowMplsLdpNeighbor", "module_name": "show_mpls"}}, "show ipv6 pim interface": {"ios": {"uid": "show_ipv6_pim_interface", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'interface': {\n      Any  (str) *: {\n        'neighbor_count': <class 'int'>,\n        Optional  (str) address: <class 'list'>,\n        'dr_priority': <class 'int'>,\n        'hello_interval': <class 'int'>,\n        'pim_enabled': <class 'bool'>,\n        Optional  (str) dr_address: <class 'str'>,\n        },\n      },\n    },\n  },\n}", "doc": "Parser for:\n        show ipv6 pim interface\n        show ipv6 pim vrf <vrf> interface", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_pim.py#L31", "class": "ShowIpv6PimInterface", "module_name": "show_pim"}, "nxos": {"uid": "show_ipv6_pim_interface", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'interfaces': {\n      Any  (str) *: {\n        'address_family': {\n          Any  (str) *: {\n            Optional  (str) dr_address: <class 'str'>,\n            Optional  (str) sm: {\n              Optional  (str) passive: <class 'bool'>,\n              },\n            Optional  (str) dr_priority: <class 'int'>,\n            Optional  (str) vpc_svi: <class 'bool'>,\n            Optional  (str) configured_dr_priority: <class 'int'>,\n            Optional  (str) auto_enabled: <class 'bool'>,\n            Optional  (str) neighbor_count: <class 'int'>,\n            Optional  (str) hello_interval: <class 'int'>,\n            Optional  (str) hello_expiration: <class 'str'>,\n            Optional  (str) neighbor_holdtime: <class 'int'>,\n            Optional  (str) dr_delay: <class 'int'>,\n            Optional  (str) bsr_border: <class 'bool'>,\n            Optional  (str) genid: <class 'str'>,\n            Optional  (str) hello_md5_ah_authentication: <class 'str'>,\n            Optional  (str) neighbor_filter: <class 'str'>,\n            Optional  (str) jp_inbound_policy: <class 'str'>,\n            Optional  (str) jp_outbound_policy: <class 'str'>,\n            Optional  (str) jp_interval: <class 'int'>,\n            Optional  (str) oper_status: <class 'str'>,\n            Optional  (str) statistics: {\n              Optional  (str) general: {\n                Optional  (str) graft_acks: <class 'str'>,\n                Optional  (str) hellos: <class 'str'>,\n                Optional  (str) df_offers: <class 'str'>,\n                Optional  (str) jps: <class 'str'>,\n                Optional  (str) df_winners: <class 'str'>,\n                Optional  (str) asserts: <class 'str'>,\n                Optional  (str) df_backoffs: <class 'str'>,\n                Optional  (str) grafts: <class 'str'>,\n                Optional  (str) df_passes: <class 'str'>,\n                },\n              Optional  (str) errors: {\n                Optional  (str) joins_received_with_wrong_rp: <class 'int'>,\n                Optional  (str) jps_filtered_by_inbound_policy: <class 'int'>,\n                Optional  (str) authentication_failed: <class 'int'>,\n                Optional  (str) packets_received_on_passiveinterface: <class 'int'>,\n                Optional  (str) joins_received_with_bidir_groups: <class 'int'>,\n                Optional  (str) packet_length_errors: <class 'int'>,\n                Optional  (str) bad_version_packets: <class 'int'>,\n                Optional  (str) joins_received_with_no_rp: <class 'int'>,\n                Optional  (str) jps_filtered_by_outbound_policy: <class 'int'>,\n                Optional  (str) packets_from_self: <class 'int'>,\n                Optional  (str) packets_from_non_neighbors: <class 'int'>,\n                Optional  (str) checksum: <class 'int'>,\n                Optional  (str) jps_received_on_rpf_interface: <class 'int'>,\n                Optional  (str) invalid_packet_types: <class 'int'>,\n                Optional  (str) invalid_df_subtypes: <class 'int'>,\n                Optional  (str) joins_received_with_ssm_groups: <class 'int'>,\n                },\n              Optional  (str) last_reset: <class 'str'>,\n              },\n            Optional  (str) jp_next_sending: <class 'int'>,\n            Optional  (str) link_status: <class 'str'>,\n            Optional  (str) admin_status: <class 'str'>,\n            Optional  (str) bfd: {\n              Optional  (str) enable: <class 'bool'>,\n              },\n            Optional  (str) address: <class 'list'>,\n            },\n          },\n        },\n      },\n    },\n  },\n}", "doc": "Parser for:\n        show ipv6 pim interface vrf <vrf>\n        show ipv6 pim interface\n        show ipv6 pim interface <interface>\n        show ipv6 pim interface <interface> vrf <vrf>", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_pim.py#L95", "class": "ShowIpv6PimInterface", "module_name": "show_pim"}, "iosxe": {"uid": "show_ipv6_pim_interface", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'interface': {\n      Any  (str) *: {\n        'neighbor_count': <class 'int'>,\n        Optional  (str) address: <class 'list'>,\n        'dr_priority': <class 'int'>,\n        'hello_interval': <class 'int'>,\n        'pim_enabled': <class 'bool'>,\n        Optional  (str) dr_address: <class 'str'>,\n        },\n      },\n    },\n  },\n}", "doc": "Parser for:\n        show ipv6 pim interface\n        show ipv6 pim vrf <vrf> interface", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_pim.py#L48", "class": "ShowIpv6PimInterface", "module_name": "show_pim"}}, "show mpls ldp igp sync": {"iosxe": {"uid": "show_mpls_ldp_igp_sync", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'interface': {\n      Any  (str) *: {\n        'ldp': {\n          'configured': <class 'bool'>,\n          'igp_synchronization_enabled': <class 'bool'>,\n          },\n        Optional  (str) peer_ldp_ident: <class 'str'>,\n        Optional  (str) sync: {\n          Optional  (str) delay_time: <class 'int'>,\n          'status': {\n            'peer_reachable': <class 'bool'>,\n            Optional  (str) enabled: <class 'bool'>,\n            'sync_achieved': <class 'bool'>,\n            },\n          Optional  (str) left_time: <class 'int'>,\n          },\n        Optional  (str) igp: {\n          'holddown_time': <class 'str'>,\n          'enabled': <class 'str'>,\n          },\n        },\n      },\n    },\n  },\n}", "doc": "\n        Parser for show mpls ldp igp sync\n                   show mpls ldp igp sync all\n                   show mpls ldp igp sync interface <interface>\n                   show mpls ldp igp sync vrf <vrf>\n       ", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_mpls.py#L1611", "class": "ShowMplsLdpIgpSync", "module_name": "show_mpls"}}, "show ospf vrf all-inclusive virtual-links": {"iosxr": {"uid": "show_ospf_vrf_all-inclusive_virtual-links", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'address_family': {\n      Any  (str) *: {\n        'instance': {\n          Any  (str) *: {\n            'areas': {\n              Any  (str) *: {\n                'virtual_links': {\n                  Any  (str) *: {\n                    'dead_interval': <class 'int'>,\n                    'transit_area_id': <class 'str'>,\n                    'name': <class 'str'>,\n                    Optional  (str) donotage_lsa: <class 'str'>,\n                    'wait_interval': <class 'int'>,\n                    'state': <class 'str'>,\n                    'transmit_delay': <class 'int'>,\n                    'router_id': <class 'str'>,\n                    Optional  (str) authentication: {\n                      'auth_trailer_key': {\n                        Optional  (str) youngest_key_id: <class 'int'>,\n                        'crypto_algorithm': <class 'str'>,\n                        },\n                      },\n                    'cost': <class 'int'>,\n                    Optional  (str) nsf: {\n                      'enable': <class 'bool'>,\n                      'last_restart': <class 'str'>,\n                      },\n                    Optional  (str) hello_timer: <class 'str'>,\n                    'demand_circuit': <class 'bool'>,\n                    'hello_interval': <class 'int'>,\n                    Optional  (str) interface: <class 'str'>,\n                    'link_state': <class 'str'>,\n                    'retransmit_interval': <class 'int'>,\n                    Optional  (str) dcbitless_lsa_count: <class 'int'>,\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "doc": "Parser for show ospf vrf all-inclusive virtual-links", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_ospf.py#L2462", "class": "ShowOspfVrfAllInclusiveVirtualLinks", "module_name": "show_ospf"}}, "show running-config {feature}": {"nxos": {"uid": "show_running-config_feature", "schema": "{\nOptional  (str) vrf: {\n  Any  (str) *: {\n    Optional  (str) address_family: {\n      Any  (str) *: {\n        Optional  (str) rp: {\n          Optional  (str) bsr: {\n            Any  (str) *: {\n              Optional  (str) priority: <class 'int'>,\n              Optional  (str) interval: <class 'int'>,\n              Optional  (str) interface: <class 'str'>,\n              Optional  (str) route_map: <class 'str'>,\n              Optional  (str) policy: <class 'str'>,\n              Optional  (str) prefix_list: <class 'str'>,\n              Optional  (str) mode: <class 'str'>,\n              },\n            },\n          Optional  (str) autorp: {\n            Optional  (str) send_rp_discovery: {\n              Optional  (str) scope: <class 'int'>,\n              'interface': <class 'str'>,\n              },\n            Optional  (str) send_rp_announce: {\n              Optional  (str) scope: <class 'int'>,\n              Optional  (str) bidir: <class 'bool'>,\n              Optional  (str) group_list: <class 'str'>,\n              Optional  (str) route_map: <class 'str'>,\n              Optional  (str) interface: <class 'str'>,\n              Optional  (str) prefix_list: <class 'str'>,\n              Optional  (str) group: <class 'str'>,\n              Optional  (str) interval: <class 'int'>,\n              },\n            Optional  (str) listener: <class 'bool'>,\n            },\n          Optional  (str) static_rp: {\n            Any  (str) *: {\n              Optional  (str) bidir: <class 'bool'>,\n              Optional  (str) policy_name: <class 'str'>,\n              Optional  (str) route_map: <class 'str'>,\n              Optional  (str) override: <class 'bool'>,\n              Optional  (str) prefix_list: <class 'str'>,\n              Optional  (str) policy: <class 'int'>,\n              },\n            },\n          },\n        },\n      },\n    },\n  },\nOptional  (str) feature_pim6: <class 'bool'>,\nOptional  (str) feature_pim: <class 'bool'>,\n}", "doc": "Parser for show running-config pim", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_pim.py#L4188", "class": "ShowRunningConfigPim", "module_name": "show_pim"}}, "show bgp {address_family} neighbors {neighbor} received-routes": {"iosxe": {"uid": "show_bgp_address_family_neighbors_neighbor_received-routes", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'neighbor': {\n      Any  (str) *: {\n        'address_family': {\n          Any  (str) *: {\n            Optional  (str) received_routes: {\n              Optional  (Any) Any  (str) *: {\n                Optional  (str) index: {\n                  Optional  (Any) Any  (str) *: {\n                    Optional  (str) next_hop: <class 'str'>,\n                    Optional  (str) weight: <class 'int'>,\n                    Optional  (str) status_codes: <class 'str'>,\n                    Optional  (str) path: <class 'str'>,\n                    Optional  (str) path_type: <class 'str'>,\n                    Optional  (str) origin_codes: <class 'str'>,\n                    Optional  (str) metric: <class 'int'>,\n                    Optional  (str) localprf: <class 'int'>,\n                    },\n                  },\n                },\n              },\n            Optional  (str) route_distinguisher: <class 'str'>,\n            Optional  (str) bgp_table_version: <class 'int'>,\n            Optional  (str) default_vrf: <class 'str'>,\n            Optional  (str) local_router_id: <class 'str'>,\n            },\n          },\n        },\n      },\n    },\n  },\n}", "doc": " Parser for:\n        * 'show bgp {address_family} neighbors {neighbor} received-routes'\n        * 'show bgp neighbors {neighbor} received-routes'\n    ", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_bgp.py#L5090", "class": "ShowBgpNeighborsReceivedRoutes", "module_name": "show_bgp"}}, "show mpls ldp igp sync vrf {vrf}": {"iosxe": {"uid": "show_mpls_ldp_igp_sync_vrf_vrf", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'interface': {\n      Any  (str) *: {\n        'ldp': {\n          'configured': <class 'bool'>,\n          'igp_synchronization_enabled': <class 'bool'>,\n          },\n        Optional  (str) peer_ldp_ident: <class 'str'>,\n        Optional  (str) sync: {\n          Optional  (str) delay_time: <class 'int'>,\n          'status': {\n            'peer_reachable': <class 'bool'>,\n            Optional  (str) enabled: <class 'bool'>,\n            'sync_achieved': <class 'bool'>,\n            },\n          Optional  (str) left_time: <class 'int'>,\n          },\n        Optional  (str) igp: {\n          'holddown_time': <class 'str'>,\n          'enabled': <class 'str'>,\n          },\n        },\n      },\n    },\n  },\n}", "doc": "\n        Parser for show mpls ldp igp sync\n                   show mpls ldp igp sync all\n                   show mpls ldp igp sync interface <interface>\n                   show mpls ldp igp sync vrf <vrf>\n       ", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_mpls.py#L1611", "class": "ShowMplsLdpIgpSync", "module_name": "show_mpls"}}, "show ip route vrf {vrf} {route}": {"ios": {"uid": "show_ip_route_vrf_vrf_route", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    Optional  (str) address_family: {\n      Any  (str) *: {\n        Optional  (str) routes: {\n          Any  (str) *: {\n            Optional  (str) source_protocol: <class 'str'>,\n            Optional  (str) redist_via: <class 'str'>,\n            Optional  (str) source_protocol_codes: <class 'str'>,\n            Optional  (str) mask: <class 'str'>,\n            Optional  (str) next_hop: {\n              Optional  (str) outgoing_interface: {\n                Any  (str) *: {\n                  Optional  (str) updated: <class 'str'>,\n                  Optional  (str) outgoing_interface: <class 'str'>,\n                  },\n                },\n              Optional  (str) next_hop_list: {\n                Any  (str) *: {\n                  Optional  (str) age: <class 'str'>,\n                  Optional  (str) from: <class 'str'>,\n                  Optional  (str) total_delay: <class 'str'>,\n                  Optional  (str) metric: <class 'str'>,\n                  Optional  (str) share_count: <class 'str'>,\n                  Optional  (str) index: <class 'int'>,\n                  Optional  (str) loading: <class 'str'>,\n                  Optional  (str) hops: <class 'str'>,\n                  Optional  (str) minimum_mtu: <class 'str'>,\n                  Optional  (str) next_hop: <class 'str'>,\n                  Optional  (str) outgoing_interface: <class 'str'>,\n                  Optional  (str) minimum_bandwidth: <class 'str'>,\n                  Optional  (str) reliability: <class 'str'>,\n                  Optional  (str) updated: <class 'str'>,\n                  },\n                },\n              },\n            Optional  (str) known_via: <class 'str'>,\n            Optional  (str) update: {\n              'age': <class 'str'>,\n              'interface': <class 'str'>,\n              'from': <class 'str'>,\n              },\n            Optional  (str) distance: <class 'int'>,\n            Optional  (str) route: <class 'str'>,\n            Optional  (str) type: <class 'str'>,\n            Optional  (str) net: <class 'str'>,\n            Optional  (str) active: <class 'bool'>,\n            Optional  (str) route_preference: <class 'int'>,\n            Optional  (str) redist_via_tag: <class 'str'>,\n            Optional  (str) metric: <class 'int'>,\n            },\n          },\n        },\n      },\n    },\n  },\n}", "doc": "Parser for :\n       show ip route\n       show ip route vrf <vrf>\n       show ip route <route>\n       show ip route vrf <vrf> <route>", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_routing.py#L10", "class": "ShowIpRoute", "module_name": "show_routing"}, "iosxe": {"uid": "show_ip_route_vrf_vrf_route", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    Optional  (str) address_family: {\n      Any  (str) *: {\n        Optional  (str) routes: {\n          Any  (str) *: {\n            Optional  (str) source_protocol: <class 'str'>,\n            Optional  (str) redist_via: <class 'str'>,\n            Optional  (str) source_protocol_codes: <class 'str'>,\n            Optional  (str) mask: <class 'str'>,\n            Optional  (str) next_hop: {\n              Optional  (str) outgoing_interface: {\n                Any  (str) *: {\n                  Optional  (str) updated: <class 'str'>,\n                  Optional  (str) outgoing_interface: <class 'str'>,\n                  },\n                },\n              Optional  (str) next_hop_list: {\n                Any  (str) *: {\n                  Optional  (str) age: <class 'str'>,\n                  Optional  (str) from: <class 'str'>,\n                  Optional  (str) total_delay: <class 'str'>,\n                  Optional  (str) metric: <class 'str'>,\n                  Optional  (str) share_count: <class 'str'>,\n                  Optional  (str) index: <class 'int'>,\n                  Optional  (str) loading: <class 'str'>,\n                  Optional  (str) hops: <class 'str'>,\n                  Optional  (str) minimum_mtu: <class 'str'>,\n                  Optional  (str) next_hop: <class 'str'>,\n                  Optional  (str) outgoing_interface: <class 'str'>,\n                  Optional  (str) minimum_bandwidth: <class 'str'>,\n                  Optional  (str) reliability: <class 'str'>,\n                  Optional  (str) updated: <class 'str'>,\n                  },\n                },\n              },\n            Optional  (str) known_via: <class 'str'>,\n            Optional  (str) update: {\n              'age': <class 'str'>,\n              'interface': <class 'str'>,\n              'from': <class 'str'>,\n              },\n            Optional  (str) distance: <class 'int'>,\n            Optional  (str) route: <class 'str'>,\n            Optional  (str) type: <class 'str'>,\n            Optional  (str) net: <class 'str'>,\n            Optional  (str) active: <class 'bool'>,\n            Optional  (str) route_preference: <class 'int'>,\n            Optional  (str) redist_via_tag: <class 'str'>,\n            Optional  (str) metric: <class 'int'>,\n            },\n          },\n        },\n      },\n    },\n  },\n}", "doc": "Parser for :\n       show ip route\n       show ip route vrf <vrf>", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_routing.py#L80", "class": "ShowIpRoute", "module_name": "show_routing"}}, "show running-config nv overlay": {"nxos": {"uid": "show_running-config_nv_overlay", "schema": "{\nOptional  (str) multisite: {\n  Optional  (str) fabric_links: {\n    Any  (str) *: {\n      'if_state': <class 'str'>,\n      'if_name': <class 'str'>,\n      },\n    },\n  Optional  (str) dci_links: {\n    Any  (str) *: {\n      'if_state': <class 'str'>,\n      'if_name': <class 'str'>,\n      },\n    },\n  },\nOptional  (str) enabled_nv_overlay: <class 'bool'>,\nOptional  (str) evpn_multisite_border_gateway: <class 'int'>,\nOptional  (str) multisite_convergence_time: <class 'int'>,\nAny  (str) *: {\n  Optional  (str) if_state: <class 'str'>,\n  Optional  (str) host_reachability_protocol: <class 'str'>,\n  Optional  (str) adv_vmac: <class 'bool'>,\n  Optional  (str) vni: {\n    Any  (str) *: {\n      Optional  (str) multisite_ingress_replication: <class 'bool'>,\n      Optional  (str) vni: <class 'int'>,\n      Optional  (str) mcast_group: <class 'str'>,\n      Optional  (str) associated_vrf: <class 'bool'>,\n      },\n    },\n  Optional  (str) source_if: <class 'str'>,\n  Optional  (str) nve_name: <class 'str'>,\n  Optional  (str) multisite_bgw_if: <class 'str'>,\n  },\n}", "doc": "parser for:\n        show running-config nv overlay", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_vxlan.py#L1620", "class": "ShowRunningConfigNvOverlay", "module_name": "show_vxlan"}}, "show mpls ldp neighbor vrf {vrf} detail": {"iosxe": {"uid": "show_mpls_ldp_neighbor_vrf_vrf_detail", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'peers': {\n      Any  (str) *: {\n        'label_space_id': {\n          Any  (str) *: {\n            Optional  (str) nsr: <class 'str'>,\n            'msg_rcvd': <class 'int'>,\n            'downstream': <class 'bool'>,\n            'tcp_connection': <class 'str'>,\n            Optional  (str) capabilities: {\n              'sent': {\n                'mldp_point_to_multipoint': <class 'str'>,\n                'typed_wildcard': <class 'str'>,\n                'ICCP': {\n                  'maj_ver': <class 'int'>,\n                  'type': <class 'str'>,\n                  'min_ver': <class 'int'>,\n                  },\n                'dynamic_anouncement': <class 'str'>,\n                'mldp_multipoint_to_multipoint': <class 'str'>,\n                },\n              Optional  (str) received: {\n                Optional  (str) typed_wildcard: <class 'str'>,\n                Optional  (str) mldp_point_to_multipoint: <class 'str'>,\n                Optional  (str) ICCP: {\n                  'maj_ver': <class 'int'>,\n                  'type': <class 'str'>,\n                  'min_ver': <class 'int'>,\n                  },\n                Optional  (str) mldp_multipoint_to_multipoint: <class 'str'>,\n                Optional  (str) dynamic_anouncement: <class 'str'>,\n                },\n              },\n            'msg_sent': <class 'int'>,\n            Optional  (str) last_tib_rev_sent: <class 'int'>,\n            'state': <class 'str'>,\n            'uptime': <class 'str'>,\n            'address_bound': <class 'list'>,\n            'local_ldp_ident': <class 'str'>,\n            Optional  (str) password: <class 'str'>,\n            Optional  (str) peer_holdtime_ms: <class 'str'>,\n            Optional  (str) ka_interval_ms: <class 'str'>,\n            Optional  (str) peer_state: <class 'str'>,\n            'ldp_discovery_sources': {\n              'interface': {\n                Any  (str) *: {\n                  'ip_address': {\n                    Any  (str) *: {\n                      Optional  (str) holdtime_ms: <class 'int'>,\n                      Optional  (str) hello_interval_ms: <class 'int'>,\n                      },\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "doc": "Parser for show mpls ldp neighbor detail,\n                  show mpls ldp neighbor vrf <vrf> detail", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_mpls.py#L1021", "class": "ShowMplsLdpNeighborDetail", "module_name": "show_mpls"}}, "show bgp {address_family} neighbors": {"iosxe": {"uid": "show_bgp_address_family_neighbors", "schema": "{\nOptional  (str) list_of_neighbors: <class 'list'>,\n'vrf': {\n  Any  (str) *: {\n    'neighbor': {\n      Any  (str) *: {\n        Optional  (str) bgp_event_timer: {\n          'starts': {\n            Any  (str) *: <class 'int'>,\n            },\n          'wakeups': {\n            Any  (str) *: <class 'int'>,\n            },\n          'next': {\n            Any  (str) *: <class 'str'>,\n            },\n          },\n        'address_family': {\n          Any  (str) *: {\n            Optional  (str) refresh_epoch: <class 'int'>,\n            Optional  (str) session_state: <class 'str'>,\n            Optional  (str) max_nlri: <class 'int'>,\n            Optional  (str) up_time: <class 'str'>,\n            Optional  (str) min_nlri: <class 'int'>,\n            Optional  (str) down_time: <class 'str'>,\n            Optional  (str) refresh_activity_counters: {\n              'sent': {\n                Any  (str) *: <class 'int'>,\n                },\n              'received': {\n                Any  (str) *: <class 'int'>,\n                },\n              },\n            Optional  (str) local_policy_denied_prefixes_counters: {\n              'inbound': {\n                Any  (str) *: Any  (str) *,\n                },\n              'outbound': {\n                Any  (str) *: Any  (str) *,\n                },\n              },\n            Optional  (str) last_detected_dynamic_slow_peer: <class 'str'>,\n            Optional  (str) last_read: <class 'str'>,\n            Optional  (str) dynamic_slow_peer_recovered: <class 'str'>,\n            Optional  (str) last_write: <class 'str'>,\n            Optional  (str) last_sent_refresh_start_of_rib: <class 'str'>,\n            Optional  (str) current_time: <class 'str'>,\n            Optional  (str) last_received_refresh_start_of_rib: <class 'str'>,\n            Optional  (str) bgp_table_version: <class 'int'>,\n            Optional  (str) last_sent_refresh_end_of_rib: <class 'str'>,\n            Optional  (str) neighbor_version: <class 'str'>,\n            Optional  (str) last_received_refresh_end_of_rib: <class 'str'>,\n            Optional  (str) output_queue_size: <class 'int'>,\n            Optional  (str) refresh_out: <class 'int'>,\n            Optional  (str) index: <class 'int'>,\n            Optional  (str) refresh_in: <class 'int'>,\n            Optional  (str) advertise_bit: <class 'int'>,\n            Optional  (str) route_reflector_client: <class 'bool'>,\n            Optional  (str) update_group_member: <class 'int'>,\n            Optional  (str) community_attribute_sent: <class 'bool'>,\n            Optional  (str) extended_community_attribute_sent: <class 'bool'>,\n            Optional  (str) prefix_activity_counters: {\n              'sent': {\n                Any  (str) *: Any  (str) *,\n                },\n              'received': {\n                Any  (str) *: Any  (str) *,\n                },\n              },\n            Optional  (str) suppress_ldp_signaling: <class 'bool'>,\n            Optional  (str) slow_peer_detection: <class 'bool'>,\n            Optional  (str) slow_peer_split_update_group_dynamic: <class 'bool'>,\n            },\n          },\n        'bgp_neighbor_counters': {\n          'messages': {\n            'sent': {\n              'notifications': <class 'int'>,\n              'route_refresh': <class 'int'>,\n              'total': <class 'int'>,\n              'opens': <class 'int'>,\n              'keepalives': <class 'int'>,\n              'updates': <class 'int'>,\n              },\n            'in_queue_depth': <class 'int'>,\n            'received': {\n              'notifications': <class 'int'>,\n              'route_refresh': <class 'int'>,\n              'total': <class 'int'>,\n              'opens': <class 'int'>,\n              'keepalives': <class 'int'>,\n              'updates': <class 'int'>,\n              },\n            'out_queue_depth': <class 'int'>,\n            },\n          },\n        'bgp_negotiated_keepalive_timers': {\n          'keepalive_interval': <class 'int'>,\n          'hold_time': <class 'int'>,\n          Optional  (str) min_holdtime: <class 'int'>,\n          },\n        'link': <class 'str'>,\n        'router_id': <class 'str'>,\n        Optional  (str) bgp_session_transport: {\n          Optional  (str) enqueued_packets: {\n            'mis_ordered_packet': <class 'int'>,\n            'input_packet': <class 'int'>,\n            'retransmit_packet': <class 'int'>,\n            },\n          Optional  (str) iss: <class 'int'>,\n          Optional  (str) snduna: <class 'int'>,\n          'connection': {\n            Optional  (str) reset_reason: <class 'str'>,\n            'dropped': <class 'int'>,\n            'established': <class 'int'>,\n            'last_reset': <class 'str'>,\n            },\n          Optional  (str) sndnxt: <class 'int'>,\n          Optional  (str) irs: <class 'int'>,\n          'address_tracking_status': <class 'str'>,\n          Optional  (str) sndwnd: <class 'int'>,\n          Optional  (str) snd_scale: <class 'int'>,\n          Optional  (str) maxrcvwnd: <class 'int'>,\n          Optional  (str) rcvwnd: <class 'int'>,\n          Optional  (str) rcv_scale: <class 'int'>,\n          Optional  (str) delrcvwnd: <class 'int'>,\n          Optional  (str) srtt: <class 'int'>,\n          'min_time_between_advertisement_runs': <class 'int'>,\n          Optional  (str) rtto: <class 'int'>,\n          Optional  (str) rtv: <class 'int'>,\n          Optional  (str) krtt: <class 'int'>,\n          Optional  (str) min_rtt: <class 'int'>,\n          Optional  (str) max_rtt: <class 'int'>,\n          Optional  (str) ack_hold: <class 'int'>,\n          Optional  (str) uptime: <class 'int'>,\n          Optional  (str) sent_idletime: <class 'int'>,\n          Optional  (str) receive_idletime: <class 'int'>,\n          Optional  (str) tcp_connection: <class 'bool'>,\n          Optional  (str) status_flags: <class 'str'>,\n          Optional  (str) option_flags: <class 'str'>,\n          Optional  (str) ip_precedence_value: <class 'int'>,\n          'tcp_path_mtu_discovery': <class 'str'>,\n          Optional  (str) transport: {\n            'local_port': <class 'str'>,\n            'local_host': <class 'str'>,\n            'foreign_port': <class 'str'>,\n            Optional  (str) mss: <class 'int'>,\n            'foreign_host': <class 'str'>,\n            },\n          Optional  (str) datagram: {\n            'datagram_sent': {\n              'second_congestion': <class 'int'>,\n              'with_data': <class 'int'>,\n              'retransmit': <class 'int'>,\n              'partialack': <class 'int'>,\n              'value': <class 'int'>,\n              'fastretransmit': <class 'int'>,\n              'total_data': <class 'int'>,\n              },\n            'datagram_received': {\n              'out_of_order': <class 'int'>,\n              'with_data': <class 'int'>,\n              'total_data': <class 'int'>,\n              'value': <class 'int'>,\n              },\n            },\n          Optional  (str) graceful_restart: <class 'str'>,\n          Optional  (str) packet_fast_path: <class 'int'>,\n          Optional  (str) gr_restart_time: <class 'int'>,\n          Optional  (str) packet_fast_processed: <class 'int'>,\n          Optional  (str) gr_stalepath_time: <class 'int'>,\n          Optional  (str) packet_slow_path: <class 'int'>,\n          Optional  (str) connection_state: <class 'str'>,\n          Optional  (str) fast_lock_acquisition_failures: <class 'int'>,\n          Optional  (str) io_status: <class 'int'>,\n          Optional  (str) lock_slow_path: <class 'int'>,\n          Optional  (str) unread_input_bytes: <class 'int'>,\n          Optional  (str) tcp_semaphore: <class 'str'>,\n          Optional  (str) ecn_connection: <class 'str'>,\n          Optional  (str) tcp_semaphore_status: <class 'str'>,\n          Optional  (str) minimum_incoming_ttl: <class 'int'>,\n          Optional  (str) sso: <class 'bool'>,\n          Optional  (str) outgoing_ttl: <class 'int'>,\n          Optional  (str) rcvnxt: <class 'int'>,\n          Optional  (str) connection_tableid: <class 'int'>,\n          'rib_route_ip': <class 'str'>,\n          Optional  (str) maximum_output_segment_queue_size: <class 'int'>,\n          },\n        'remote_as': <class 'int'>,\n        'bgp_version': <class 'int'>,\n        'session_state': <class 'str'>,\n        'shutdown': <class 'bool'>,\n        Optional  (str) local_as: <class 'int'>,\n        'bgp_negotiated_capabilities': {\n          'four_octets_asn': <class 'str'>,\n          Optional  (str) vpnv4_unicast: <class 'str'>,\n          Optional  (str) graceful_restart: <class 'str'>,\n          'route_refresh': <class 'str'>,\n          Optional  (str) vpnv6_unicast: <class 'str'>,\n          'stateful_switchover': <class 'str'>,\n          Optional  (str) ipv4_unicast: <class 'str'>,\n          Optional  (str) remote_restart_timer: <class 'int'>,\n          Optional  (str) ipv6_unicast: <class 'str'>,\n          Optional  (str) l2vpn_vpls: <class 'str'>,\n          Optional  (str) l2vpn_evpn: <class 'str'>,\n          Optional  (str) vpnv4_multicast: <class 'str'>,\n          Optional  (str) multisession: <class 'str'>,\n          Optional  (str) graceful_restart_af_advertised_by_peer: <class 'list'>,\n          Optional  (str) vpnv6_multicast: <class 'str'>,\n          'enhanced_refresh': <class 'str'>,\n          Optional  (str) mvpnv4_multicast: <class 'str'>,\n          Optional  (str) mvpnv6_multicast: <class 'str'>,\n          },\n        Optional  (str) description: <class 'str'>,\n        },\n      },\n    },\n  },\n}", "doc": " Parser for:\n        * 'show bgp neighbors'\n        * 'show bgp neighbors {neighbor}'\n        * 'show bgp {address_family} neighbors'\n        * 'show bgp {address_family} neighbors {neighbor}'\n        * 'show bgp {address_family} vrf {vrf} neighbors'\n        * 'show bgp {address_family} vrf {vrf} neighbors {neighbor}'\n    ", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_bgp.py#L3739", "class": "ShowBgpNeighbors", "module_name": "show_bgp"}}, "show bgp vrf {vrf} all neighbors {neighbor} advertised-routes": {"nxos": {"uid": "show_bgp_vrf_vrf_all_neighbors_neighbor_advertised-routes", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'neighbor': {\n      Any  (str) *: {\n        'address_family': {\n          Any  (str) *: {\n            Optional  (str) route_distinguisher: <class 'str'>,\n            Optional  (str) default_vrf: <class 'str'>,\n            Optional  (str) local_router_id: <class 'str'>,\n            Optional  (str) bgp_table_version: <class 'int'>,\n            Optional  (str) advertised: {\n              Optional  (Any) Any  (str) *: {\n                Optional  (str) index: {\n                  Optional  (Any) Any  (str) *: {\n                    Optional  (str) next_hop: <class 'str'>,\n                    Optional  (str) weight: <class 'int'>,\n                    Optional  (str) status_codes: <class 'str'>,\n                    Optional  (str) path: <class 'str'>,\n                    Optional  (str) path_type: <class 'str'>,\n                    Optional  (str) origin_codes: <class 'str'>,\n                    Optional  (str) metric: <class 'int'>,\n                    Optional  (str) locprf: <class 'int'>,\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "doc": "Parser for show bgp vrf <vrf> all neighbors <neighbor> advertised-routes", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_bgp.py#L4432", "class": "ShowBgpVrfAllNeighborsAdvertisedRoutes", "module_name": "show_bgp"}}, "show ip pim vrf {vrf} detail": {"nxos": {"uid": "show_ip_pim_vrf_vrf_detail", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'address_family': {\n      Any  (str) *: {\n        Optional  (str) vxlan_vni_id: <class 'int'>,\n        Optional  (str) shared_tree_ranges: <class 'str'>,\n        Optional  (str) register_rate_limit: <class 'str'>,\n        Optional  (str) pre_build_spt: <class 'str'>,\n        Optional  (str) bfd: {\n          Optional  (str) enable: <class 'bool'>,\n          },\n        Optional  (str) state_limit: <class 'str'>,\n        Optional  (str) interface_count: <class 'int'>,\n        Optional  (str) sm: {\n          Optional  (str) asm: {\n            Optional  (str) register_source_address: <class 'str'>,\n            Optional  (str) register_source: <class 'str'>,\n            Optional  (str) sg_expiry_timer: {\n              Optional  (str) sg_expiry_timer: <class 'int'>,\n              Optional  (str) config_version: <class 'int'>,\n              Optional  (str) sg_list: <class 'str'>,\n              Optional  (str) active_version: <class 'int'>,\n              Optional  (str) infinity: <class 'bool'>,\n              Optional  (str) sg_expiry_timer_configured: <class 'bool'>,\n              },\n            },\n          },\n        Optional  (str) vrf_id: <class 'int'>,\n        Optional  (str) table_id: <class 'str'>,\n        Optional  (str) cli_vrf_done: <class 'bool'>,\n        Optional  (str) mvpn: {\n          Optional  (str) enable: <class 'bool'>,\n          },\n        Optional  (str) cibtype_auto_enabled: <class 'bool'>,\n        },\n      },\n    },\n  },\n}", "doc": "Parser for:\n        show ip pim vrf detail\n        show ip pim vrf <vrf> detail", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_pim.py#L2746", "class": "ShowIpPimVrfDetail", "module_name": "show_pim"}}, "show ip msdp sa-cache detail vrf {vrf}": {"nxos": {"uid": "show_ip_msdp_sa-cache_detail_vrf_vrf", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'sa_cache': {\n      Any  (str) *: {\n        'asn': <class 'int'>,\n        'up_time': <class 'str'>,\n        'peer_learned_from': <class 'str'>,\n        'origin_rp': {\n          Any  (str) *: {\n            'rp_address': <class 'str'>,\n            },\n          },\n        'group': <class 'str'>,\n        'expire': <class 'str'>,\n        'source_addr': <class 'str'>,\n        },\n      },\n    },\n  },\n}", "doc": "Parser for :\n       show ip msdp sa-cache detail vrf <vrf>", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_msdp.py#L429", "class": "ShowIpMsdpSaCacheDetailVrf", "module_name": "show_msdp"}}, "show mpls interfaces detail": {"iosxe": {"uid": "show_mpls_interfaces_detail", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'interfaces': {\n      Any  (str) *: {\n        Optional  (str) bgp: <class 'str'>,\n        Optional  (str) ip_labeling_enabled: {\n          Any  (str) *: {\n            'ldp': <class 'bool'>,\n            Optional  (str) interface_config: <class 'bool'>,\n            },\n          },\n        Optional  (str) lsp_tunnel_labeling_enabled: <class 'bool'>,\n        Optional  (str) tunnel: <class 'str'>,\n        Optional  (str) lp_frr_labeling_enabled: <class 'bool'>,\n        Optional  (str) mpls_operational: <class 'bool'>,\n        Optional  (str) bgp_labeling_enabled: <class 'bool'>,\n        Optional  (str) static: <class 'str'>,\n        Optional  (str) operational: <class 'str'>,\n        Optional  (str) mtu: <class 'int'>,\n        Optional  (str) type: <class 'str'>,\n        Optional  (str) session: <class 'str'>,\n        Optional  (str) ip: <class 'str'>,\n        },\n      },\n    },\n  },\n}", "doc": "Parser for\n        show mpls interfaces\n        show mpls interfaces all\n        show mpls interfaces vrf <vrf>\n        show mpls interfaces <interface>\n        show mpls interfaces <interface> detail\n        show mpls interfaces detail", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_mpls.py#L2049", "class": "ShowMplsInterface", "module_name": "show_mpls"}}, "show archive config differences": {"ios": {"uid": "show_archive_config_differences", "schema": "{\nOptional  (str) list_of_commands: <class 'list'>,\nOptional  (str) diff: <class 'list'>,\n}", "doc": " Parser for the following commands:\n        * show archive config differences\n        * show archive config differences {fileA} {fileB}\n        * show archive config differences {fileA}\n    ", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_archive.py#L16", "class": "ShowArchiveConfigDifferences", "module_name": "show_archive"}, "iosxe": {"uid": "show_archive_config_differences", "schema": "{\nOptional  (str) list_of_commands: <class 'list'>,\nOptional  (str) diff: <class 'list'>,\n}", "doc": " Parser for the following commands:\n        * show archive config differences\n        * show archive config differences {fileA} {fileB}\n        * show archive config differences {fileA}\n    ", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_archive.py#L115", "class": "ShowArchiveConfigDifferences", "module_name": "show_archive"}}, "show ipv6 rip vrf {vrf}": {"iosxe": {"uid": "show_ipv6_rip_vrf_vrf", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'address_family': {\n      Any  (str) *: {\n        Optional  (str) split_horizon: <class 'bool'>,\n        Optional  (str) poison_reverse: <class 'bool'>,\n        'timers': {\n          Optional  (str) expire_time: <class 'int'>,\n          Optional  (str) holddown_interval: <class 'int'>,\n          Optional  (str) flush_interval: <class 'int'>,\n          Optional  (str) update_interval: <class 'int'>,\n          },\n        'originate_default_route': {\n          'enabled': <class 'bool'>,\n          },\n        Optional  (str) distance: <class 'int'>,\n        Optional  (str) redistribute: {\n          Any  (str) *: {\n            Optional  (str) metric: <class 'int'>,\n            Optional  (str) route_policy: <class 'str'>,\n            },\n          },\n        Optional  (str) maximum_paths: <class 'int'>,\n        Optional  (str) multicast_group: <class 'str'>,\n        Optional  (str) statistics: {\n          Optional  (str) periodic_updates: <class 'int'>,\n          Optional  (str) full_advertisement: <class 'int'>,\n          Optional  (str) delayed_events: <class 'int'>,\n          Optional  (str) trigger_updates: <class 'int'>,\n          },\n        Optional  (str) pid: <class 'int'>,\n        Optional  (str) port: <class 'int'>,\n        'interfaces': {\n          Any  (str) *: {\n            },\n          },\n        },\n      },\n    },\n  },\n}", "doc": "Parser for :\n           show ipv6 rip\n           show ipv6 rip vrf {vrf}", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_rip.py#L364", "class": "ShowIpv6Rip", "module_name": "show_rip"}}, "show ipv6 vrf all interface": {"iosxr": {"uid": "show_ipv6_vrf_all_interface", "schema": "{\nAny  (str) *: {\n  'vrf_id': <class 'str'>,\n  'enabled': <class 'bool'>,\n  'oper_status': <class 'str'>,\n  Optional  (str) ipv6: {\n    Any  (str) *: {\n      Optional  (str) ipv6_prefix_length: <class 'str'>,\n      Optional  (str) ipv6_status: <class 'str'>,\n      Optional  (str) ipv6_route_tag: <class 'str'>,\n      Optional  (str) ipv6: <class 'str'>,\n      Optional  (str) ipv6_eui64: <class 'bool'>,\n      Optional  (str) ipv6_subnet: <class 'str'>,\n      },\n    Optional  (str) in_access_list: <class 'str'>,\n    Optional  (str) ipv6_link_local: <class 'str'>,\n    Optional  (str) ipv6_link_local_state: <class 'str'>,\n    Optional  (str) incomplete_protocol_adj: <class 'str'>,\n    Optional  (str) table_id: <class 'str'>,\n    Optional  (str) ipv6_group_address: <class 'str'>,\n    Optional  (str) dropped_protocol_req: <class 'str'>,\n    Optional  (str) ipv6_groups: <class 'list'>,\n    Optional  (str) complete_glean_adj: <class 'str'>,\n    Optional  (str) ipv6_mtu: <class 'str'>,\n    Optional  (str) ipv6_mtu_available: <class 'str'>,\n    Optional  (str) incomplete_glean_adj: <class 'str'>,\n    Optional  (str) icmp_redirects: <class 'str'>,\n    Optional  (str) complete_protocol_adj: <class 'str'>,\n    Optional  (str) icmp_unreachables: <class 'str'>,\n    Optional  (str) dropped_glean_req: <class 'str'>,\n    Optional  (str) nd_dad: <class 'str'>,\n    Optional  (str) dad_attempts: <class 'str'>,\n    Optional  (str) nd_reachable_time: <class 'str'>,\n    Optional  (str) nd_cache_limit: <class 'str'>,\n    Optional  (str) nd_adv_retrans_int: <class 'str'>,\n    Optional  (str) in_common_access_list: <class 'str'>,\n    Optional  (str) nd_adv_duration: <class 'str'>,\n    Optional  (str) nd_router_adv: <class 'str'>,\n    Optional  (str) stateless_autoconfig: <class 'bool'>,\n    Optional  (str) out_access_list: <class 'str'>,\n    },\n  'int_status': <class 'str'>,\n  'vrf': <class 'str'>,\n  'ipv6_enabled': <class 'bool'>,\n  },\n}", "doc": "Parser for show ipv6 vrf all interface", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_interface.py#L1640", "class": "ShowIpv6VrfAllInterface", "module_name": "show_interface"}}, "show ip bgp {address_family} vrf {vrf} neighbors": {"iosxe": {"uid": "show_ip_bgp_address_family_vrf_vrf_neighbors", "schema": "{\nOptional  (str) list_of_neighbors: <class 'list'>,\n'vrf': {\n  Any  (str) *: {\n    'neighbor': {\n      Any  (str) *: {\n        Optional  (str) bgp_event_timer: {\n          'starts': {\n            Any  (str) *: <class 'int'>,\n            },\n          'wakeups': {\n            Any  (str) *: <class 'int'>,\n            },\n          'next': {\n            Any  (str) *: <class 'str'>,\n            },\n          },\n        'address_family': {\n          Any  (str) *: {\n            Optional  (str) refresh_epoch: <class 'int'>,\n            Optional  (str) session_state: <class 'str'>,\n            Optional  (str) max_nlri: <class 'int'>,\n            Optional  (str) up_time: <class 'str'>,\n            Optional  (str) min_nlri: <class 'int'>,\n            Optional  (str) down_time: <class 'str'>,\n            Optional  (str) refresh_activity_counters: {\n              'sent': {\n                Any  (str) *: <class 'int'>,\n                },\n              'received': {\n                Any  (str) *: <class 'int'>,\n                },\n              },\n            Optional  (str) local_policy_denied_prefixes_counters: {\n              'inbound': {\n                Any  (str) *: Any  (str) *,\n                },\n              'outbound': {\n                Any  (str) *: Any  (str) *,\n                },\n              },\n            Optional  (str) last_detected_dynamic_slow_peer: <class 'str'>,\n            Optional  (str) last_read: <class 'str'>,\n            Optional  (str) dynamic_slow_peer_recovered: <class 'str'>,\n            Optional  (str) last_write: <class 'str'>,\n            Optional  (str) last_sent_refresh_start_of_rib: <class 'str'>,\n            Optional  (str) current_time: <class 'str'>,\n            Optional  (str) last_received_refresh_start_of_rib: <class 'str'>,\n            Optional  (str) bgp_table_version: <class 'int'>,\n            Optional  (str) last_sent_refresh_end_of_rib: <class 'str'>,\n            Optional  (str) neighbor_version: <class 'str'>,\n            Optional  (str) last_received_refresh_end_of_rib: <class 'str'>,\n            Optional  (str) output_queue_size: <class 'int'>,\n            Optional  (str) refresh_out: <class 'int'>,\n            Optional  (str) index: <class 'int'>,\n            Optional  (str) refresh_in: <class 'int'>,\n            Optional  (str) advertise_bit: <class 'int'>,\n            Optional  (str) route_reflector_client: <class 'bool'>,\n            Optional  (str) update_group_member: <class 'int'>,\n            Optional  (str) community_attribute_sent: <class 'bool'>,\n            Optional  (str) extended_community_attribute_sent: <class 'bool'>,\n            Optional  (str) prefix_activity_counters: {\n              'sent': {\n                Any  (str) *: Any  (str) *,\n                },\n              'received': {\n                Any  (str) *: Any  (str) *,\n                },\n              },\n            Optional  (str) suppress_ldp_signaling: <class 'bool'>,\n            Optional  (str) slow_peer_detection: <class 'bool'>,\n            Optional  (str) slow_peer_split_update_group_dynamic: <class 'bool'>,\n            },\n          },\n        'bgp_neighbor_counters': {\n          'messages': {\n            'sent': {\n              'notifications': <class 'int'>,\n              'route_refresh': <class 'int'>,\n              'total': <class 'int'>,\n              'opens': <class 'int'>,\n              'keepalives': <class 'int'>,\n              'updates': <class 'int'>,\n              },\n            'in_queue_depth': <class 'int'>,\n            'received': {\n              'notifications': <class 'int'>,\n              'route_refresh': <class 'int'>,\n              'total': <class 'int'>,\n              'opens': <class 'int'>,\n              'keepalives': <class 'int'>,\n              'updates': <class 'int'>,\n              },\n            'out_queue_depth': <class 'int'>,\n            },\n          },\n        'bgp_negotiated_keepalive_timers': {\n          'keepalive_interval': <class 'int'>,\n          'hold_time': <class 'int'>,\n          Optional  (str) min_holdtime: <class 'int'>,\n          },\n        'link': <class 'str'>,\n        'router_id': <class 'str'>,\n        Optional  (str) bgp_session_transport: {\n          Optional  (str) enqueued_packets: {\n            'mis_ordered_packet': <class 'int'>,\n            'input_packet': <class 'int'>,\n            'retransmit_packet': <class 'int'>,\n            },\n          Optional  (str) iss: <class 'int'>,\n          Optional  (str) snduna: <class 'int'>,\n          'connection': {\n            Optional  (str) reset_reason: <class 'str'>,\n            'dropped': <class 'int'>,\n            'established': <class 'int'>,\n            'last_reset': <class 'str'>,\n            },\n          Optional  (str) sndnxt: <class 'int'>,\n          Optional  (str) irs: <class 'int'>,\n          'address_tracking_status': <class 'str'>,\n          Optional  (str) sndwnd: <class 'int'>,\n          Optional  (str) snd_scale: <class 'int'>,\n          Optional  (str) maxrcvwnd: <class 'int'>,\n          Optional  (str) rcvwnd: <class 'int'>,\n          Optional  (str) rcv_scale: <class 'int'>,\n          Optional  (str) delrcvwnd: <class 'int'>,\n          Optional  (str) srtt: <class 'int'>,\n          'min_time_between_advertisement_runs': <class 'int'>,\n          Optional  (str) rtto: <class 'int'>,\n          Optional  (str) rtv: <class 'int'>,\n          Optional  (str) krtt: <class 'int'>,\n          Optional  (str) min_rtt: <class 'int'>,\n          Optional  (str) max_rtt: <class 'int'>,\n          Optional  (str) ack_hold: <class 'int'>,\n          Optional  (str) uptime: <class 'int'>,\n          Optional  (str) sent_idletime: <class 'int'>,\n          Optional  (str) receive_idletime: <class 'int'>,\n          Optional  (str) tcp_connection: <class 'bool'>,\n          Optional  (str) status_flags: <class 'str'>,\n          Optional  (str) option_flags: <class 'str'>,\n          Optional  (str) ip_precedence_value: <class 'int'>,\n          'tcp_path_mtu_discovery': <class 'str'>,\n          Optional  (str) transport: {\n            'local_port': <class 'str'>,\n            'local_host': <class 'str'>,\n            'foreign_port': <class 'str'>,\n            Optional  (str) mss: <class 'int'>,\n            'foreign_host': <class 'str'>,\n            },\n          Optional  (str) datagram: {\n            'datagram_sent': {\n              'second_congestion': <class 'int'>,\n              'with_data': <class 'int'>,\n              'retransmit': <class 'int'>,\n              'partialack': <class 'int'>,\n              'value': <class 'int'>,\n              'fastretransmit': <class 'int'>,\n              'total_data': <class 'int'>,\n              },\n            'datagram_received': {\n              'out_of_order': <class 'int'>,\n              'with_data': <class 'int'>,\n              'total_data': <class 'int'>,\n              'value': <class 'int'>,\n              },\n            },\n          Optional  (str) graceful_restart: <class 'str'>,\n          Optional  (str) packet_fast_path: <class 'int'>,\n          Optional  (str) gr_restart_time: <class 'int'>,\n          Optional  (str) packet_fast_processed: <class 'int'>,\n          Optional  (str) gr_stalepath_time: <class 'int'>,\n          Optional  (str) packet_slow_path: <class 'int'>,\n          Optional  (str) connection_state: <class 'str'>,\n          Optional  (str) fast_lock_acquisition_failures: <class 'int'>,\n          Optional  (str) io_status: <class 'int'>,\n          Optional  (str) lock_slow_path: <class 'int'>,\n          Optional  (str) unread_input_bytes: <class 'int'>,\n          Optional  (str) tcp_semaphore: <class 'str'>,\n          Optional  (str) ecn_connection: <class 'str'>,\n          Optional  (str) tcp_semaphore_status: <class 'str'>,\n          Optional  (str) minimum_incoming_ttl: <class 'int'>,\n          Optional  (str) sso: <class 'bool'>,\n          Optional  (str) outgoing_ttl: <class 'int'>,\n          Optional  (str) rcvnxt: <class 'int'>,\n          Optional  (str) connection_tableid: <class 'int'>,\n          'rib_route_ip': <class 'str'>,\n          Optional  (str) maximum_output_segment_queue_size: <class 'int'>,\n          },\n        'remote_as': <class 'int'>,\n        'bgp_version': <class 'int'>,\n        'session_state': <class 'str'>,\n        'shutdown': <class 'bool'>,\n        Optional  (str) local_as: <class 'int'>,\n        'bgp_negotiated_capabilities': {\n          'four_octets_asn': <class 'str'>,\n          Optional  (str) vpnv4_unicast: <class 'str'>,\n          Optional  (str) graceful_restart: <class 'str'>,\n          'route_refresh': <class 'str'>,\n          Optional  (str) vpnv6_unicast: <class 'str'>,\n          'stateful_switchover': <class 'str'>,\n          Optional  (str) ipv4_unicast: <class 'str'>,\n          Optional  (str) remote_restart_timer: <class 'int'>,\n          Optional  (str) ipv6_unicast: <class 'str'>,\n          Optional  (str) l2vpn_vpls: <class 'str'>,\n          Optional  (str) l2vpn_evpn: <class 'str'>,\n          Optional  (str) vpnv4_multicast: <class 'str'>,\n          Optional  (str) multisession: <class 'str'>,\n          Optional  (str) graceful_restart_af_advertised_by_peer: <class 'list'>,\n          Optional  (str) vpnv6_multicast: <class 'str'>,\n          'enhanced_refresh': <class 'str'>,\n          Optional  (str) mvpnv4_multicast: <class 'str'>,\n          Optional  (str) mvpnv6_multicast: <class 'str'>,\n          },\n        Optional  (str) description: <class 'str'>,\n        },\n      },\n    },\n  },\n}", "doc": " Parser for:\n        * 'show ip bgp neighbors'\n        * 'show ip bgp neighbors {neighbor}'\n        * 'show ip bgp {address_family} neighbors'\n        * 'show ip bgp {address_family} neighbors {neighbor}'\n        * 'show ip bgp {address_family} vrf {vrf} neighbors'\n        * 'show ip bgp {address_family} vrf {vrf} neighbors {neighbor}'\n    ", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_bgp.py#L3872", "class": "ShowIpBgpNeighbors", "module_name": "show_bgp"}}, "show l2route evpn mac-ip all": {"iosxr": {"uid": "show_l2route_evpn_mac-ip_all", "schema": null, "doc": "Parser for show l2route evpn mac-ip all", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_l2route.py#L103", "class": "ShowL2routeEvpnMacIp", "module_name": "show_l2route"}}, "show ip ospf interface vrf {vrf}": {"nxos": {"uid": "show_ip_ospf_interface_vrf_vrf", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'address_family': {\n      Any  (str) *: {\n        'instance': {\n          Any  (str) *: {\n            'areas': {\n              Any  (str) *: {\n                Optional  (str) virtual_links: {\n                  Any  (str) *: {\n                    Optional  (str) hello_interval: <class 'int'>,\n                    'cost': <class 'int'>,\n                    Optional  (str) dead_interval: <class 'int'>,\n                    Optional  (str) retransmit_interval: <class 'int'>,\n                    Optional  (str) wait_interval: <class 'int'>,\n                    Optional  (str) hello_timer: <class 'str'>,\n                    'state': <class 'str'>,\n                    Optional  (str) passive: <class 'bool'>,\n                    'if_cfg': <class 'bool'>,\n                    'line_protocol': <class 'str'>,\n                    'bfd': {\n                      'enable': <class 'bool'>,\n                      },\n                    Optional  (str) statistics: {\n                      Optional  (str) num_nbrs_adjacent: <class 'int'>,\n                      'link_scope_lsa_count': <class 'int'>,\n                      Optional  (str) num_nbrs_flooding: <class 'int'>,\n                      Optional  (str) total_neighbors: <class 'int'>,\n                      'link_scope_lsa_cksum_sum': <class 'int'>,\n                      },\n                    'ip_address': <class 'str'>,\n                    'name': <class 'str'>,\n                    Optional  (str) transmit_delay: <class 'int'>,\n                    'enable': <class 'bool'>,\n                    'backbone_area_id': <class 'str'>,\n                    Optional  (str) priority: <class 'int'>,\n                    Optional  (str) authentication: {\n                      Optional  (str) auth_trailer_key_chain: {\n                        Optional  (str) key_chain: <class 'str'>,\n                        },\n                      Optional  (str) auth_trailer_key: {\n                        Optional  (str) crypto_algorithm: <class 'str'>,\n                        Optional  (str) key: <class 'str'>,\n                        },\n                      },\n                    Optional  (str) dr_router_id: <class 'str'>,\n                    Optional  (str) dr_ip_addr: <class 'str'>,\n                    'interface_type': <class 'str'>,\n                    Optional  (str) bdr_router_id: <class 'str'>,\n                    Optional  (str) bdr_ip_addr: <class 'str'>,\n                    'index': <class 'int'>,\n                    },\n                  },\n                Optional  (str) sham_links: {\n                  Any  (str) *: {\n                    'cost': <class 'int'>,\n                    'bfd': {\n                      'enable': <class 'bool'>,\n                      },\n                    'line_protocol': <class 'str'>,\n                    Optional  (str) statistics: {\n                      'link_scope_lsa_count': <class 'int'>,\n                      Optional  (str) total_neighbors: <class 'int'>,\n                      Optional  (str) num_nbrs_adjacent: <class 'int'>,\n                      Optional  (str) num_nbrs_flooding: <class 'int'>,\n                      'link_scope_lsa_cksum_sum': <class 'int'>,\n                      },\n                    Optional  (str) transmit_delay: <class 'int'>,\n                    'state': <class 'str'>,\n                    Optional  (str) passive: <class 'bool'>,\n                    Optional  (str) priority: <class 'int'>,\n                    Optional  (str) dr_router_id: <class 'str'>,\n                    'if_cfg': <class 'bool'>,\n                    Optional  (str) dr_ip_addr: <class 'str'>,\n                    Optional  (str) dead_interval: <class 'int'>,\n                    'ip_address': <class 'str'>,\n                    Optional  (str) bdr_router_id: <class 'str'>,\n                    Optional  (str) bdr_ip_addr: <class 'str'>,\n                    'name': <class 'str'>,\n                    Optional  (str) hello_interval: <class 'int'>,\n                    'enable': <class 'bool'>,\n                    Optional  (str) authentication: {\n                      Optional  (str) auth_trailer_key: {\n                        Optional  (str) key: <class 'str'>,\n                        Optional  (str) crypto_algorithm: <class 'str'>,\n                        },\n                      Optional  (str) auth_trailer_key_chain: {\n                        Optional  (str) key_chain: <class 'str'>,\n                        },\n                      },\n                    Optional  (str) retransmit_interval: <class 'int'>,\n                    Optional  (str) wait_interval: <class 'int'>,\n                    Optional  (str) hello_timer: <class 'str'>,\n                    'interface_type': <class 'str'>,\n                    'index': <class 'int'>,\n                    },\n                  },\n                Optional  (str) interfaces: {\n                  Any  (str) *: {\n                    'cost': <class 'int'>,\n                    Optional  (str) priority: <class 'int'>,\n                    'bfd': {\n                      'enable': <class 'bool'>,\n                      },\n                    Optional  (str) authentication: {\n                      Optional  (str) auth_trailer_key: {\n                        Optional  (str) key: <class 'str'>,\n                        Optional  (str) crypto_algorithm: <class 'str'>,\n                        },\n                      Optional  (str) auth_trailer_key_chain: {\n                        Optional  (str) key_chain: <class 'str'>,\n                        },\n                      },\n                    Optional  (str) dr_router_id: <class 'str'>,\n                    Optional  (str) dr_ip_addr: <class 'str'>,\n                    Optional  (str) bdr_router_id: <class 'str'>,\n                    'state': <class 'str'>,\n                    'if_cfg': <class 'bool'>,\n                    Optional  (str) hello_interval: <class 'int'>,\n                    'line_protocol': <class 'str'>,\n                    Optional  (str) dead_interval: <class 'int'>,\n                    Optional  (str) retransmit_interval: <class 'int'>,\n                    Optional  (str) wait_interval: <class 'int'>,\n                    'ip_address': <class 'str'>,\n                    Optional  (str) bdr_ip_addr: <class 'str'>,\n                    Optional  (str) hello_timer: <class 'str'>,\n                    'name': <class 'str'>,\n                    'enable': <class 'bool'>,\n                    Optional  (str) statistics: {\n                      'link_scope_lsa_count': <class 'int'>,\n                      Optional  (str) num_nbrs_adjacent: <class 'int'>,\n                      Optional  (str) num_nbrs_flooding: <class 'int'>,\n                      Optional  (str) total_neighbors: <class 'int'>,\n                      'link_scope_lsa_cksum_sum': <class 'int'>,\n                      },\n                    'interface_type': <class 'str'>,\n                    Optional  (str) transmit_delay: <class 'int'>,\n                    'index': <class 'int'>,\n                    Optional  (str) passive: <class 'bool'>,\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "doc": "Parser for:\n        show ip ospf interface\n        show ip ospf interface vrf <vrf>", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_ospf.py#L1783", "class": "ShowIpOspfInterface", "module_name": "show_ospf"}}, "show dot1x all summary": {"ios": {"uid": "show_dot1x_all_summary", "schema": "{\n'interfaces': {\n  Any  (str) *: {\n    'clients': {\n      Any  (str) *: {\n        'pae': <class 'str'>,\n        'client': <class 'str'>,\n        'status': <class 'str'>,\n        },\n      },\n    'interface': <class 'str'>,\n    },\n  },\n}", "doc": "Parser for show dot1x all summary", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_dot1x.py#L39", "class": "ShowDot1xAllSummary", "module_name": "show_dot1x"}, "iosxe": {"uid": "show_dot1x_all_summary", "schema": "{\n'interfaces': {\n  Any  (str) *: {\n    'clients': {\n      Any  (str) *: {\n        'pae': <class 'str'>,\n        'client': <class 'str'>,\n        'status': <class 'str'>,\n        },\n      },\n    'interface': <class 'str'>,\n    },\n  },\n}", "doc": "Parser for show dot1x all summary", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_dot1x.py#L376", "class": "ShowDot1xAllSummary", "module_name": "show_dot1x"}}, "show hsrp summary": {"nxos": {"uid": "show_hsrp_summary", "schema": "{\n'stats': {\n  'v2_ipv4': <class 'int'>,\n  'total_groups': <class 'int'>,\n  'v6_active': <class 'int'>,\n  'active': <class 'int'>,\n  'v2_ipv6': <class 'int'>,\n  'standby': <class 'int'>,\n  'v1_ipv4': <class 'int'>,\n  'v6_standby': <class 'int'>,\n  'listen': <class 'int'>,\n  'v6_listen': <class 'int'>,\n  },\n'global_hsrp_bfd': <class 'str'>,\n'nsf': <class 'str'>,\n'total_packets': {\n  'tx_fail': <class 'int'>,\n  'rx_good': <class 'int'>,\n  'tx_pass': <class 'int'>,\n  },\n'intf_total': <class 'int'>,\nOptional  (str) nsf_time: <class 'int'>,\n'total_mts_rx': <class 'int'>,\n'pkt_unknown_groups': <class 'int'>,\n}", "doc": "Parser for show hsrp summary ", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_hsrp.py#L51", "class": "ShowHsrpSummary", "module_name": "show_hsrp"}, "iosxr": {"uid": "show_hsrp_summary", "schema": "{\n'bfd_sessions_down': <class 'int'>,\n'tracked_objects_down': <class 'int'>,\n'address_family': {\n  Any  (str) *: {\n    'state': {\n      Any  (str) *: {\n        'slaves': <class 'int'>,\n        'total': <class 'int'>,\n        'sessions': <class 'int'>,\n        },\n      },\n    'virtual_addresses_active': <class 'int'>,\n    'intf_up': <class 'int'>,\n    'intf_total': <class 'int'>,\n    'virtual_addresses_inactive': <class 'int'>,\n    'vritual_addresses_total': <class 'int'>,\n    'intf_down': <class 'int'>,\n    },\n  },\n'tracked_objects_up': <class 'int'>,\n'bfd_sessions_inactive': <class 'int'>,\n'num_bfd_sessions': <class 'int'>,\n'bfd_sessions_up': <class 'int'>,\n'num_tracked_objects': <class 'int'>,\n}", "doc": "Parser for show hsrp summary", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_hsrp.py#L62", "class": "ShowHsrpSummary", "module_name": "show_hsrp"}}, "show ip bgp {address_family} vrf {vrf} detail": {"iosxe": {"uid": "show_ip_bgp_address_family_vrf_vrf_detail", "schema": "{\n'instance': {\n  'default': {\n    'vrf': {\n      Any  (str) *: {\n        'address_family': {\n          Any  (str) *: {\n            Optional  (str) route_distinguisher: <class 'str'>,\n            Optional  (str) prefixes: {\n              Any  (str) *: {\n                Optional  (str) table_version: <class 'str'>,\n                Optional  (str) available_path: <class 'str'>,\n                Optional  (str) index: {\n                  Any  (str) *: {\n                    Optional  (str) recipient_pathid: <class 'str'>,\n                    Optional  (str) transfer_pathid: <class 'str'>,\n                    Optional  (str) community: <class 'str'>,\n                    Optional  (str) agi_version: <class 'int'>,\n                    Optional  (str) next_hop: <class 'str'>,\n                    Optional  (str) ve_block_size: <class 'int'>,\n                    Optional  (str) next_hop_igp_metric: <class 'str'>,\n                    Optional  (str) local_vxlan_vtep: {\n                      Optional  (str) vtep_ip: <class 'str'>,\n                      Optional  (str) vrf: <class 'str'>,\n                      Optional  (str) encap: <class 'str'>,\n                      Optional  (str) vni: <class 'str'>,\n                      Optional  (str) local_router_mac: <class 'str'>,\n                      Optional  (str) bdi: <class 'str'>,\n                      },\n                    Optional  (str) label_base: <class 'int'>,\n                    Optional  (str) gateway: <class 'str'>,\n                    Optional  (str) cluster_list: <class 'str'>,\n                    Optional  (str) route_info: <class 'str'>,\n                    Optional  (str) next_hop_via: <class 'str'>,\n                    Optional  (str) update_group: Any  (str) *,\n                    Optional  (str) status_codes: <class 'str'>,\n                    Optional  (str) origin_codes: <class 'str'>,\n                    Optional  (str) metric: <class 'int'>,\n                    Optional  (str) inaccessible: <class 'bool'>,\n                    Optional  (str) localpref: <class 'int'>,\n                    Optional  (str) evpn: {\n                      Optional  (str) evpn_esi: <class 'str'>,\n                      Optional  (str) recursive_via_connected: <class 'bool'>,\n                      Optional  (str) local_vtep: <class 'str'>,\n                      Optional  (str) gateway_address: <class 'str'>,\n                      Optional  (str) ext_community: <class 'str'>,\n                      Optional  (str) label: <class 'int'>,\n                      Optional  (str) encap: <class 'str'>,\n                      Optional  (str) router_mac: <class 'str'>,\n                      },\n                    Optional  (str) weight: <class 'str'>,\n                    Optional  (str) originator: <class 'str'>,\n                    Optional  (str) refresh_epoch: <class 'int'>,\n                    },\n                  },\n                Optional  (str) best_path: <class 'str'>,\n                Optional  (str) paths: <class 'str'>,\n                },\n              },\n            Optional  (str) default_vrf: <class 'str'>,\n            },\n          },\n        },\n      },\n    },\n  },\n}", "doc": " Parser for:\n        * 'show ip bgp {address_family} vrf {vrf} detail'\n        * 'show ip bgp {address_family} rd {rd} detail'\n    ", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_bgp.py#L1528", "class": "ShowIpBgpDetail", "module_name": "show_bgp"}}, "show forwarding distribution multicast route vrf {vrf}": {"nxos": {"uid": "show_forwarding_distribution_multicast_route_vrf_vrf", "schema": "{\n'distribution': {\n  'multicast': {\n    'route': {\n      'vrf': {\n        Any  (str) *: {\n          'address_family': {\n            Any  (str) *: {\n              'num_groups': <class 'int'>,\n              'gaddr': {\n                Any  (str) *: {\n                  'saddr': {\n                    Any  (str) *: {\n                      'rcv_bytes': <class 'int'>,\n                      'rpf_ifname': <class 'str'>,\n                      'rcv_packets': <class 'int'>,\n                      Optional  (str) oifs: {\n                        'oif_index': <class 'int'>,\n                        Any  (str) *: {\n                          Optional  (str) l2_oiflist_index: <class 'int'>,\n                          Optional  (str) encap: <class 'str'>,\n                          Optional  (str) mem_l2_ports: <class 'str'>,\n                          Optional  (str) oif: <class 'str'>,\n                          },\n                        },\n                      'num_of_oifs': <class 'int'>,\n                      Optional  (str) src_len: <class 'int'>,\n                      Optional  (str) flags: <class 'str'>,\n                      },\n                    },\n                  'grp_len': <class 'int'>,\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "doc": "parser for:\n        show forwarding distribution multicast route\n        show forwarding distribution multicast route vrf <vrf>\n        show forwarding distribution multicast route vrf all", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_mcast.py#L799", "class": "ShowForwardingDistributionMulticastRoute", "module_name": "show_mcast"}}, "show ip bgp template peer-session {template_name}": {"ios": {"uid": "show_ip_bgp_template_peer-session_template_name", "schema": "{\n'peer_session': {\n  Any  (str) *: {\n    Optional  (str) fall_over_bfd: <class 'bool'>,\n    Optional  (str) suppress_four_byte_as_capability: <class 'bool'>,\n    Optional  (str) inherited_session_commands: {\n      Optional  (str) update_source: <class 'str'>,\n      Optional  (str) ebgp_multihop_enable: <class 'bool'>,\n      Optional  (str) holdtime: <class 'int'>,\n      Optional  (str) ebgp_multihop_max_hop: <class 'int'>,\n      Optional  (str) local_as_as_no: <class 'int'>,\n      Optional  (str) password_text: <class 'str'>,\n      Optional  (str) remote_as: <class 'int'>,\n      Optional  (str) fall_over_bfd: <class 'bool'>,\n      Optional  (str) keepalive_interval: <class 'int'>,\n      Optional  (str) suppress_four_byte_as_capability: <class 'bool'>,\n      Optional  (str) shutdown: <class 'bool'>,\n      Optional  (str) description: <class 'str'>,\n      Optional  (str) transport_connection_mode: <class 'str'>,\n      Optional  (str) disable_connected_check: <class 'bool'>,\n      },\n    Optional  (str) holdtime: <class 'int'>,\n    Optional  (str) description: <class 'str'>,\n    Optional  (str) remote_as: <class 'int'>,\n    Optional  (str) disable_connected_check: <class 'bool'>,\n    Optional  (str) update_source: <class 'str'>,\n    Optional  (str) ebgp_multihop_enable: <class 'bool'>,\n    Optional  (str) ebgp_multihop_max_hop: <class 'int'>,\n    Optional  (str) keepalive_interval: <class 'int'>,\n    Optional  (str) local_as_as_no: <class 'int'>,\n    Optional  (str) index: <class 'int'>,\n    Optional  (str) password_text: <class 'str'>,\n    Optional  (str) local_policies: <class 'str'>,\n    Optional  (str) inherited_polices: <class 'str'>,\n    Optional  (str) transport_connection_mode: <class 'str'>,\n    Optional  (str) shutdown: <class 'bool'>,\n    },\n  },\n}", "doc": "Parser for show ip bgp template peer-session <WORD>", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_bgp.py#L90", "class": "ShowIpBgpTemplatePeerSession", "module_name": "show_bgp"}, "iosxe": {"uid": "show_ip_bgp_template_peer-session_template_name", "schema": "{\n'peer_session': {\n  Any  (str) *: {\n    Optional  (str) fall_over_bfd: <class 'bool'>,\n    Optional  (str) suppress_four_byte_as_capability: <class 'bool'>,\n    Optional  (str) inherited_session_commands: {\n      Optional  (str) update_source: <class 'str'>,\n      Optional  (str) ebgp_multihop_enable: <class 'bool'>,\n      Optional  (str) holdtime: <class 'int'>,\n      Optional  (str) ebgp_multihop_max_hop: <class 'int'>,\n      Optional  (str) local_as_as_no: <class 'int'>,\n      Optional  (str) password_text: <class 'str'>,\n      Optional  (str) remote_as: <class 'int'>,\n      Optional  (str) fall_over_bfd: <class 'bool'>,\n      Optional  (str) keepalive_interval: <class 'int'>,\n      Optional  (str) suppress_four_byte_as_capability: <class 'bool'>,\n      Optional  (str) shutdown: <class 'bool'>,\n      Optional  (str) description: <class 'str'>,\n      Optional  (str) transport_connection_mode: <class 'str'>,\n      Optional  (str) disable_connected_check: <class 'bool'>,\n      },\n    Optional  (str) holdtime: <class 'int'>,\n    Optional  (str) description: <class 'str'>,\n    Optional  (str) remote_as: <class 'int'>,\n    Optional  (str) disable_connected_check: <class 'bool'>,\n    Optional  (str) update_source: <class 'str'>,\n    Optional  (str) ebgp_multihop_enable: <class 'bool'>,\n    Optional  (str) ebgp_multihop_max_hop: <class 'int'>,\n    Optional  (str) keepalive_interval: <class 'int'>,\n    Optional  (str) local_as_as_no: <class 'int'>,\n    Optional  (str) index: <class 'int'>,\n    Optional  (str) password_text: <class 'str'>,\n    Optional  (str) local_policies: <class 'str'>,\n    Optional  (str) inherited_polices: <class 'str'>,\n    Optional  (str) transport_connection_mode: <class 'str'>,\n    Optional  (str) shutdown: <class 'bool'>,\n    },\n  },\n}", "doc": " Parser for \"show ip bgp template peer-session {template_name}\" ", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_bgp.py#L6153", "class": "ShowIpBgpTemplatePeerSession", "module_name": "show_bgp"}}, "show static vrf {vrf} {af} topology detail": {"iosxr": {"uid": "show_static_vrf_vrf_af_topology_detail", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    Optional  (str) address_family: {\n      Any  (str) *: {\n        Optional  (str) routes: {\n          Any  (str) *: {\n            Optional  (str) route: <class 'str'>,\n            Optional  (str) next_hop: {\n              Optional  (str) outgoing_interface: {\n                Any  (str) *: {\n                  Optional  (str) explicit_path: <class 'str'>,\n                  Optional  (str) tag: <class 'int'>,\n                  Optional  (str) preference: <class 'int'>,\n                  Optional  (str) outgoing_interface: <class 'str'>,\n                  Optional  (str) path_version: <class 'int'>,\n                  Optional  (str) active: <class 'bool'>,\n                  Optional  (str) path_status: <class 'str'>,\n                  Optional  (str) install_date: <class 'str'>,\n                  Optional  (str) metrics: <class 'int'>,\n                  Optional  (str) track: <class 'int'>,\n                  Optional  (str) configure_date: <class 'str'>,\n                  },\n                },\n              Optional  (str) next_hop_list: {\n                Any  (str) *: {\n                  Optional  (str) outgoing_interface: <class 'str'>,\n                  Optional  (str) preference: <class 'int'>,\n                  Optional  (str) install_date: <class 'str'>,\n                  Optional  (str) configure_date: <class 'str'>,\n                  Optional  (str) tag: <class 'int'>,\n                  Optional  (str) path_version: <class 'int'>,\n                  Optional  (str) path_status: <class 'str'>,\n                  Optional  (str) metrics: <class 'int'>,\n                  Optional  (str) index: <class 'int'>,\n                  Optional  (str) track: <class 'int'>,\n                  Optional  (str) active: <class 'bool'>,\n                  Optional  (str) explicit_path: <class 'str'>,\n                  Optional  (str) next_hop: <class 'str'>,\n                  },\n                },\n              },\n            },\n          },\n        Optional  (str) safi: <class 'str'>,\n        Optional  (str) table_id: <class 'str'>,\n        },\n      },\n    },\n  },\n}", "doc": "Parser for:\n       show static topology detail\n       show static vrf all topology detail\n       show static vrf <vrf> topology detail\n       show static vrf <vrf> ipv4 topology detail\n       show static ipv4 topology detail\n       show static ipv6 topology detail\n    ", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_static_routing.py#L77", "class": "ShowStaticTopologyDetail", "module_name": "show_static_routing"}}, "show ethernet service instance interface {interface} stats": {"ios": {"uid": "show_ethernet_service_instance_interface_interface_stats", "schema": "{\nOptional  (str) max_num_of_service_instances: <class 'int'>,\nOptional  (str) service_instance: {\n  Any  (str) *: {\n    'pkts_out': <class 'int'>,\n    'interface': <class 'str'>,\n    'pkts_in': <class 'int'>,\n    'bytes_out': <class 'int'>,\n    'bytes_in': <class 'int'>,\n    },\n  },\n}", "doc": "Parser for show ethernet service instance stats\n                  show ethernet service instance interface <interface> stats\n    ", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_l2vpn.py#L51", "class": "ShowEthernetServiceInstanceStats", "module_name": "show_l2vpn"}, "iosxe": {"uid": "show_ethernet_service_instance_interface_interface_stats", "schema": "{\nOptional  (str) max_num_of_service_instances: <class 'int'>,\nOptional  (str) service_instance: {\n  Any  (str) *: {\n    'pkts_out': <class 'int'>,\n    'interface': <class 'str'>,\n    'pkts_in': <class 'int'>,\n    'bytes_out': <class 'int'>,\n    'bytes_in': <class 'int'>,\n    },\n  },\n}", "doc": "Parser for show ethernet service instance stats\n                  show ethernet service instance interface <interface> stats\n    ", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_l2vpn.py#L449", "class": "ShowEthernetServiceInstanceStats", "module_name": "show_l2vpn"}}, "show running-config interface {intf}": {"nxos": {"uid": "show_running-config_interface_intf", "schema": "{\n'interface': {\n  Any  (str) *: {\n    Optional  (str) host_reachability_protocol: <class 'str'>,\n    Optional  (str) shutdown: <class 'bool'>,\n    Optional  (str) source_interface: <class 'str'>,\n    Optional  (str) member_vni: {\n      Any  (str) *: {\n        Optional  (str) mcast_group: <class 'str'>,\n        Optional  (str) suppress_arp: <class 'bool'>,\n        Optional  (str) associate_vrf: <class 'bool'>,\n        },\n      },\n    },\n  },\n}", "doc": "Parser for show running-config interface <WORD>", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_interface.py#L2632", "class": "ShowRunningConfigInterface", "module_name": "show_interface"}}, "show running-config msdp": {"nxos": {"uid": "show_running-config_msdp", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    Optional  (str) global: {\n      Optional  (str) originating_rp: <class 'str'>,\n      Optional  (str) timer: {\n        'connect_retry_interval': <class 'int'>,\n        },\n      },\n    Optional  (str) peer: {\n      Any  (str) *: {\n        Optional  (str) peer_as: <class 'str'>,\n        Optional  (str) description: <class 'str'>,\n        Optional  (str) connect_source: <class 'str'>,\n        Optional  (str) timer: {\n          'keepalive_interval': <class 'int'>,\n          'holdtime_interval': <class 'int'>,\n          },\n        },\n      },\n    },\n  },\n}", "doc": "Parser for :\n        show run msdp [| sec <vrf> | inc <pip_str>]", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_msdp.py#L852", "class": "ShowRunningConfigMsdp", "module_name": "show_msdp"}}, "show policy-map interface {interface}": {"iosxe": {"uid": "show_policy-map_interface_interface", "schema": "{\n}", "doc": " Parser for\n        * 'show policy-map interface {interface} class {class_name}'\n        * 'show policy-map interface {interface}'\n        * 'show policy-map interface'\n    ", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_policy_map.py#L440", "class": "ShowPolicyMapInterface", "module_name": "show_policy_map"}}, "show {af} pim rp": {"nxos": {"uid": "show_af_pim_rp", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'address_family': {\n      Any  (str) *: {\n        Optional  (str) rp: {\n          Optional  (str) rp_mappings: {\n            Any  (str) *: {\n              'protocol': <class 'str'>,\n              'up_time': <class 'str'>,\n              'group': <class 'str'>,\n              Optional  (str) expiration: <class 'str'>,\n              'rp_address': <class 'str'>,\n              },\n            },\n          Optional  (str) autorp: {\n            Optional  (str) bsr_next_discovery: <class 'str'>,\n            Optional  (str) discovery_policy: <class 'str'>,\n            Optional  (str) address: <class 'str'>,\n            Optional  (str) announce_policy: <class 'str'>,\n            Optional  (str) send_rp_announce: {\n              Optional  (str) rp_source: <class 'str'>,\n              Optional  (str) group_list: <class 'str'>,\n              Optional  (str) group: <class 'str'>,\n              Optional  (str) bidir: <class 'bool'>,\n              Optional  (str) scope: <class 'int'>,\n              },\n            },\n          Optional  (str) bsr: {\n            Optional  (str) bsr_address: {\n              Any  (str) *: {\n                'address': <class 'str'>,\n                'policy': <class 'str'>,\n                'mode': <class 'str'>,\n                'priority': <class 'int'>,\n                },\n              },\n            Optional  (str) bsr: {\n              'address': <class 'str'>,\n              Optional  (str) up_time: <class 'str'>,\n              'hash_mask_length': <class 'int'>,\n              'priority': <class 'int'>,\n              Optional  (str) expires: <class 'str'>,\n              },\n            Optional  (str) bsr_next_bootstrap: <class 'str'>,\n            Optional  (str) bsr_candidate: {\n              'address': <class 'str'>,\n              'hash_mask_length': <class 'int'>,\n              'priority': <class 'int'>,\n              },\n            Optional  (str) rp_candidate_policy: <class 'str'>,\n            Optional  (str) rp: {\n              'group_policy': <class 'str'>,\n              'up_time': <class 'str'>,\n              Optional  (str) rp_address: <class 'str'>,\n              },\n            Optional  (str) rp_policy: <class 'str'>,\n            Optional  (str) rp_candidate_next_advertisement: <class 'str'>,\n            },\n          Optional  (str) static_rp: {\n            Any  (str) *: {\n              Optional  (str) bidir: {\n                Optional  (str) route_map: <class 'str'>,\n                'policy_name': <class 'str'>,\n                },\n              Optional  (str) sm: {\n                Optional  (str) route_map: <class 'str'>,\n                'policy_name': <class 'str'>,\n                },\n              },\n            },\n          Optional  (str) rp_list: {\n            Any  (str) *: {\n              Optional  (str) info_source_address: <class 'str'>,\n              Optional  (str) priority: <class 'int'>,\n              Optional  (str) info_source_type: <class 'str'>,\n              Optional  (str) mode: <class 'str'>,\n              Optional  (str) up_time: <class 'str'>,\n              Optional  (str) group_ranges: <class 'str'>,\n              Optional  (str) expiration: <class 'str'>,\n              Optional  (str) address: <class 'str'>,\n              Optional  (str) df_ordinal: <class 'int'>,\n              },\n            },\n          },\n        Optional  (str) sm: {\n          Optional  (str) asm: {\n            Optional  (str) anycast_rp: {\n              Any  (str) *: {\n                Optional  (str) anycast_address: <class 'str'>,\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "doc": "Parser for:\n        show <address_family> pim rp\n        show <address_family> pim rp vrf <vrf>", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_pim.py#L761", "class": "ShowPimRp", "module_name": "show_pim"}}, "show ip pim route vrf {vrf}": {"nxos": {"uid": "show_ip_pim_route_vrf_vrf", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'address_family': {\n      Any  (str) *: {\n        Optional  (str) topology_tree_info: {\n          Any  (str) *: {\n            Optional  (str) is_rpt: <class 'bool'>,\n            Optional  (str) timeout_interval: <class 'int'>,\n            Optional  (str) rp_bit: <class 'bool'>,\n            Optional  (str) sgr_prune: <class 'str'>,\n            Optional  (str) oif_timeout: <class 'str'>,\n            Optional  (str) expiration: <class 'str'>,\n            Optional  (str) oif: <class 'str'>,\n            Optional  (str) incoming_interface: <class 'str'>,\n            Optional  (str) sgr_prune_count: <class 'int'>,\n            Optional  (str) immediate_timeout_count: <class 'int'>,\n            Optional  (str) immediate_count: <class 'int'>,\n            Optional  (str) mode: <class 'str'>,\n            Optional  (str) rp_address: <class 'str'>,\n            Optional  (str) oif_timeout_count: <class 'int'>,\n            Optional  (str) immediate_timeout: <class 'str'>,\n            Optional  (str) group: <class 'str'>,\n            Optional  (str) jp_holdtime_roundup: <class 'int'>,\n            Optional  (str) oif_count: <class 'int'>,\n            Optional  (str) source_address: <class 'str'>,\n            Optional  (str) immediate: <class 'str'>,\n            Optional  (str) rpf_neighbor: <class 'str'>,\n            },\n          },\n        },\n      },\n    },\n  },\n}", "doc": "Parser for:\n        show ip pim route\n        show ip pim route vrf <vrf>", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_pim.py#L2221", "class": "ShowIpPimRoute", "module_name": "show_pim"}}}