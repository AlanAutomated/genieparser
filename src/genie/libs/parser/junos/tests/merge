class TestShowOspfNeighborDetail(unittest.TestCase):
    """ Unit tests for:
            * show ospf neighbor detail
    """

    device = Device(name='aDevice')

    maxDiff = None

    empty_output = {'execute.return_value': ''}

    golden_output = {'execute.return_value': '''
        show ospf neighbor detail
        Address          Interface              State     ID               Pri  Dead
        111.87.5.94      ge-0/0/0.0             Full      111.87.5.253     128    39
        Area 0.0.0.8, opt 0x52, DR 0.0.0.0, BDR 0.0.0.0
        Up 3w0d 16:50:35, adjacent 3w0d 16:50:35
        SPRING Adjacency Labels:

            Label       Flags       Adj-Sid-Type

            28985       BVL         Protected

            28986       VL          UnProtected

        Topology default (ID 0) -> Bidirectional
        106.187.14.121   ge-0/0/1.0             Full      106.187.14.240   128    31
        Area 0.0.0.8, opt 0x52, DR 0.0.0.0, BDR 0.0.0.0
        Up 3w2d 03:12:20, adjacent 3w2d 03:12:15
        SPRING Adjacency Labels:

            Label       Flags       Adj-Sid-Type

            2567        BVL         Protected

            2568        VL          UnProtected

        Topology default (ID 0) -> Bidirectional
        27.86.198.26     ge-0/0/2.0             Full      27.86.198.239      1    39
        Area 0.0.0.8, opt 0x52, DR 0.0.0.0, BDR 0.0.0.0
        Up 1w5d 20:40:14, adjacent 1w5d 20:40:14
        SPRING Adjacency Labels:

            Label       Flags       Adj-Sid-Type

            167966      BVL         Protected

            167967      VL          UnProtected

        Topology default (ID 0) -> Bidirectional
    '''}

    golden_parsed_output = {
        "ospf-neighbor-information": {
            "ospf-neighbor": [
                {
                    "activity-timer": "39",
                    "adj-sid-list": {
                        "spring-adjacency-labels": [
                            {"adj-sid-type": "Protected", "flags": "BVL", "label": "28985"},
                            {
                                "adj-sid-type": "UnProtected",
                                "flags": "VL",
                                "label": "28986",
                            },
                        ]
                    },
                    "bdr-address": "0.0.0.0",
                    "dr-address": "0.0.0.0",
                    "interface-name": "ge-0/0/0.0",
                    "neighbor-address": "111.87.5.94",
                    "neighbor-adjacency-time": {"#text": "3w0d " "16:50:35"},
                    "neighbor-id": "111.87.5.253",
                    "neighbor-priority": "128",
                    "neighbor-up-time": {"#text": "3w0d " "16:50:35"},
                    "options": "0x52",
                    "ospf-area": "0.0.0.8",
                    "ospf-neighbor-state": "Full",
                    "ospf-neighbor-topology": {
                        "ospf-neighbor-topology-state": "Bidirectional",
                        "ospf-topology-id": "0",
                        "ospf-topology-name": "default",
                    },
                },
                {
                    "activity-timer": "31",
                    "adj-sid-list": {
                        "spring-adjacency-labels": [
                            {"adj-sid-type": "Protected", "flags": "BVL", "label": "2567"},
                            {"adj-sid-type": "UnProtected", "flags": "VL", "label": "2568"},
                        ]
                    },
                    "bdr-address": "0.0.0.0",
                    "dr-address": "0.0.0.0",
                    "interface-name": "ge-0/0/1.0",
                    "neighbor-address": "106.187.14.121",
                    "neighbor-adjacency-time": {"#text": "3w2d " "03:12:15"},
                    "neighbor-id": "106.187.14.240",
                    "neighbor-priority": "128",
                    "neighbor-up-time": {"#text": "3w2d " "03:12:20"},
                    "options": "0x52",
                    "ospf-area": "0.0.0.8",
                    "ospf-neighbor-state": "Full",
                    "ospf-neighbor-topology": {
                        "ospf-neighbor-topology-state": "Bidirectional",
                        "ospf-topology-id": "0",
                        "ospf-topology-name": "default",
                    },
                },
                {
                    "activity-timer": "39",
                    "adj-sid-list": {
                        "spring-adjacency-labels": [
                            {
                                "adj-sid-type": "Protected",
                                "flags": "BVL",
                                "label": "167966",
                            },
                            {
                                "adj-sid-type": "UnProtected",
                                "flags": "VL",
                                "label": "167967",
                            },
                        ]
                    },
                    "bdr-address": "0.0.0.0",
                    "dr-address": "0.0.0.0",
                    "interface-name": "ge-0/0/2.0",
                    "neighbor-address": "27.86.198.26",
                    "neighbor-adjacency-time": {"#text": "1w5d " "20:40:14"},
                    "neighbor-id": "27.86.198.239",
                    "neighbor-priority": "1",
                    "neighbor-up-time": {"#text": "1w5d " "20:40:14"},
                    "options": "0x52",
                    "ospf-area": "0.0.0.8",
                    "ospf-neighbor-state": "Full",
                    "ospf-neighbor-topology": {
                        "ospf-neighbor-topology-state": "Bidirectional",
                        "ospf-topology-id": "0",
                        "ospf-topology-name": "default",
                    },
                },
            ]
        }
    }

    def test_empty(self):
        self.device = Mock(**self.empty_output)
        obj = ShowOspfNeighborExtensive(device=self.device)
        with self.assertRaises(SchemaEmptyParserError):
            obj.parse()

    def test_golden(self):
        self.device = Mock(**self.golden_output)
        obj = ShowOspfNeighborExtensive(device=self.device)
        parsed_output = obj.parse()
        self.assertEqual(parsed_output, self.golden_parsed_output)