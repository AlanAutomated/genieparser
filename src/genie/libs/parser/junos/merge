class ShowOspfRouteBriefSchema(MetaParser):
    """ Schema for:
            * show ospf route brief
    """

    def validate_ospf_route_entry_list(value):
        if not isinstance(value, list):
            raise SchemaTypeError('ospf-lsa-topology-link is not a list')
        ospf_route_schema = Schema(
                {
            "address-prefix": str,
            "interface-cost": str,
            "next-hop-type": str,
            "ospf-next-hop": {
                Optional("next-hop-address"): {
                    "interface-address": str
                },
                "next-hop-name": {
                    "interface-name": str
                }
            },
            "route-path-type": str,
            "route-type": str,
            Optional("ospf-backup-next-hop"): {
                "ospf-backup-next-hop-type": str,
                "ospf-backup-next-hop-address": str,
                "ospf-backup-next-hop-interface": str
            }
        })
        for item in value:
            ospf_route_schema.validate(item)
        return value

    def validate_ospf_route_list(value):
        if not isinstance(value, list):
            raise SchemaTypeError('ospf-lsa-topology-link is not a list')
        ospf_route_schema = Schema(
            {
            "ospf-route-entry": Use(ShowOspfRouteBriefSchema.validate_ospf_route_entry_list)
        })
        for item in value:
            ospf_route_schema.validate(item)
        return value

    schema = {
    "ospf-route-information": {
        "ospf-topology-route-table": {
            "ospf-route": Use(validate_ospf_route_list),
            Optional("ospf-topology-name"): str
        }
    }
}

class ShowOspfRouteBrief(ShowOspfRouteBriefSchema):
    """ Parser for:
            * show ospf route brief
    """
    cli_command = 'show ospf route brief'

    address_prefix = None

    def cli(self, output=None):
        if not output:
            out = self.device.execute(self.cli_command)
        else:
            out = output

        # 3.3.3.3            Intra Router     IP         1201 ge-0/0/1.0    106.187.14.121
        p1 = re.compile(r'^(?P<address_prefix>\S+( \(S=\d+\))?) +(?P<route_path_type>\S+) +(?P<route_type>\S+|(AS BR)) +(?P<next_hop_type>\S+) +(?P<interface_cost>\S+) +(?P<interface_name>\S+) +(?P<interface_address>[\d\.]+)$')

        # Bkup SPRING     ge-0/0/0.0    111.87.5.94
        p2 = re.compile(r'^(?P<ospf_backup_next_hop_type>Bkup +\S+) +(?P<ospf_backup_next_hop_interface>\S+) +(?P<ospf_backup_next_hop_address>[\d\.]+)$')

        # 27.86.198.24/30    Intra Network    IP         1000 ge-0/0/2.0
        p3 = re.compile(r'^(?P<address_prefix>\S+) +(?P<route_path_type>\S+) +(?P<route_type>\S+) +(?P<next_hop_type>\S+) +(?P<interface_cost>\S+) +(?P<interface_name>\S+)$')

        ret_dict = {}

        for line in out.splitlines():
            line = line.strip()

            # 3.3.3.3            Intra Router     IP         1201 ge-0/0/1.0    106.187.14.121
            m = p1.match(line)
            if m:
                group = m.groupdict()
                ret_dict.setdefault("ospf-route-information", {}).setdefault("ospf-topology-route-table", {}).setdefault("ospf-route", [])

                entry = {}
                entry.setdefault("address-prefix", group['address_prefix'])
                entry.setdefault("route-path-type", group['route_path_type'])
                entry.setdefault("route-type", group['route_type'])
                entry.setdefault("next-hop-type", group['next_hop_type'])
                entry.setdefault("interface-cost", group['interface_cost'])
                entry.setdefault("ospf-next-hop", {}).setdefault("next-hop-name", {})\
                        .setdefault("interface-name", group['interface_name'])
                entry.setdefault("ospf-next-hop", {}).setdefault("next-hop-address", {})\
                        .setdefault("interface-address", group['interface_address'])

                if self.address_prefix == group['address_prefix']:
                    ret_dict["ospf-route-information"]["ospf-topology-route-table"]["ospf-route"][-1]["ospf-route-entry"].append(entry)
                else:
                    ret_dict["ospf-route-information"]["ospf-topology-route-table"]["ospf-route"].append({"ospf-route-entry":[entry]})

                self.address_prefix = group['address_prefix']
                continue

            # Bkup SPRING     ge-0/0/0.0    111.87.5.94
            m = p2.match(line)
            if m:
                group = m.groupdict()

                last_route = ret_dict["ospf-route-information"]["ospf-topology-route-table"]\
                    ["ospf-route"][-1]

                last_route["ospf-route-entry"][-1]["ospf-backup-next-hop"] = {}

                entry = last_route["ospf-route-entry"][-1]["ospf-backup-next-hop"]
                for group_key, group_value in group.items():
                    entry_key = group_key.replace('_','-')
                    entry[entry_key] = group_value
                continue

            # 27.86.198.24/30    Intra Network    IP         1000 ge-0/0/2.0
            m = p3.match(line)
            if m:
                group = m.groupdict()

                entry = {}
                entry.setdefault("address-prefix", group['address_prefix'])
                entry.setdefault("route-path-type", group['route_path_type'])
                entry.setdefault("route-type", group['route_type'])
                entry.setdefault("next-hop-type", group['next_hop_type'])
                entry.setdefault("interface-cost", group['interface_cost'])
                entry.setdefault("ospf-next-hop", {}).setdefault("next-hop-name", {})\
                        .setdefault("interface-name", group['interface_name'])
                route_list = ret_dict.setdefault("ospf-route-information", {})\
                    .setdefault("ospf-topology-route-table", {}).setdefault("ospf-route", [])
                if self.address_prefix == group['address_prefix']:
                    ret_dict["ospf-route-information"]["ospf-topology-route-table"]["ospf-route"][-1]["ospf-route-entry"].append(entry)
                else:
                    ret_dict["ospf-route-information"]["ospf-topology-route-table"]["ospf-route"].append({"ospf-route-entry":[entry]})

                self.address_prefix = group['address_prefix']
                continue

        return ret_dict
